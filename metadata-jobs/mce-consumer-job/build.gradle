plugins {
    id 'org.springframework.boot'
    id 'java'
}

apply from: '../../gradle/coverage/java-coverage.gradle'
apply from: "../../gradle/versioning/versioning.gradle"
apply from: "../../gradle/docker/docker.gradle"

ext {
    docker_repo = 'datahub-mce-consumer'
}

dependencies {
    implementation project(':metadata-service:factories')
    implementation project(':metadata-service:auth-filter')
    implementation project(':metadata-jobs:mce-consumer')
    implementation project(':entity-registry')
    implementation project(':metadata-jobs:common')

    implementation(externalDependency.springBootStarterWeb)
    implementation(externalDependency.springBootStarterJetty)
    implementation externalDependency.springKafka
    implementation externalDependency.springBootAutoconfigure
    implementation externalDependency.springActuator
    implementation spec.product.pegasus.restliDocgen
    implementation spec.product.pegasus.restliSpringBridge
    implementation externalDependency.slf4jApi
    implementation externalDependency.log4j2Api
    compileOnly externalDependency.lombok
    implementation externalDependency.logbackClassic
    runtimeOnly externalDependency.opentelemetryExporter
    runtimeOnly externalDependency.openTelemetryExporterLogging
    runtimeOnly externalDependency.openTelemetryExporterCommon

    runtimeOnly externalDependency.mariadbConnector
    runtimeOnly externalDependency.mysqlConnector
    runtimeOnly externalDependency.postgresql

    annotationProcessor externalDependency.lombok

    testImplementation project(':metadata-dao-impl:kafka-producer')
    testImplementation project(':metadata-service:restli-client')
    testImplementation externalDependency.springBootTest
    testImplementation externalDependency.mockito
    testImplementation externalDependency.testng
}

bootJar {
    mainClass = 'com.linkedin.metadata.kafka.MceConsumerApplication'
    archiveFileName = "${project.name}.jar"

    // working around the restli error when it tries to open a jar within the spring boot fat jar
    requiresUnpack '**/restli-servlet-impl.jar'
}

docker {
    dependsOn(bootJar)
    name "${docker_registry}/${docker_repo}:${versionTag}"
    //version "v${version}"
    dockerfile file("${rootProject.projectDir}/docker/${docker_repo}/Dockerfile")
    files bootJar.outputs.files
    files fileTree(rootProject.projectDir) {
        include '.dockerignore'
        include 'docker/monitoring/*'
        include "docker/${docker_repo}/*"
        include 'metadata-models/src/main/resources/*'
    }.exclude {
        i -> (!i.file.name.endsWith(".dockerignore") && i.file.isHidden())
    }
    additionalTag("Debug", "${docker_registry}/${docker_repo}:debug")

    // platform('linux/arm64', 'linux/amd64')

    // Add build args if they are defined (needed for some CI or enterprise environments)
    def dockerBuildArgs = [:]
    if (project.hasProperty('alpineApkRepositoryUrl')) {
        dockerBuildArgs.ALPINE_REPO_URL = project.getProperty('alpineApkRepositoryUrl')
    }
    if (project.hasProperty('githubMirrorUrl')) {
        dockerBuildArgs.GITHUB_REPO_URL = project.getProperty('githubMirrorUrl')
    }
    if (project.hasProperty('mavenCentralRepositoryUrl')) {
        dockerBuildArgs.MAVEN_CENTRAL_REPO_URL = project.getProperty('mavenCentralRepositoryUrl')
    }

    if (dockerBuildArgs.size() > 0) {
        buildArgs(dockerBuildArgs)
    }
}
