{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "id": "https://json.schemastore.org/datahub-ingestion",
    "title": "Datahub Ingestion",
    "description": "Root schema of Datahub Ingestion",
    "$defs": {
        "console_sink": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "console"
                    ]
                }
            },
            "required": [
                "type"
            ]
        },
        "file_sink": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "file"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/file_sink_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "file_sink_config": {
            "type": "object",
            "properties": {
                "filename": {
                    "description": "Path to file to write to.",
                    "type": "string"
                }
            },
            "required": [
                "filename"
            ],
            "additionalProperties": false
        },
        "datahub_rest_sink": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "datahub-rest"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/datahub_rest_sink_config"
                }
            },
            "required": [
                "type",
                "config"
            ],
            "additionalProperties": false
        },
        "datahub_rest_sink_config": {
            "type": "object",
            "properties": {
                "ca_certificate_path": {
                    "type": "string",
                    "description": "Path to server's CA certificate for verification of HTTPS communications"
                },
                "client_certificate_path": {
                    "type": "string",
                    "descritption": "Path to client's CA certificate for HTTPS communications"
                },
                "max_threads": {
                    "type": "number",
                    "description": "Experimental: Max parallelism for REST API calls",
                    "default": 15
                },
                "retry_status_codes": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "Retry HTTP request also on these status codes",
                    "default": [
                        429,
                        502,
                        503,
                        504
                    ]
                },
                "server": {
                    "type": "string",
                    "description": "URL of DataHub GMS endpoint."
                },
                "timeout_sec": {
                    "type": "number",
                    "description": "Per-HTTP request timeout.",
                    "default": 30
                },
                "token": {
                    "type": "string",
                    "description": "Bearer token used for authentication."
                },
                "extra_headers": {
                    "type": "string",
                    "description": "Extra headers which will be added to the request."
                },
                "disable_ssl_verification": {
                    "type": "boolean",
                    "description": "Disable SSL verification for HTTPS communications.",
                    "default": false
                }
            },
            "required": [
                "server"
            ],
            "additionalProperties": false
        },
        "datahub_kafka_sink": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "datahub-kafka"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/datahub_kafka_sink_config"
                }
            },
            "required": [
                "type",
                "config"
            ],
            "additionalProperties": false
        },
        "datahub_kafka_sink_config": {
            "type": "object",
            "properties": {
                "connection": {
                    "type": "object",
                    "properties": {
                        "bootstrap": {
                            "type": "string",
                            "description": "Kafka bootstrap URL.",
                            "default": "localhost:9092"
                        },
                        "producer_config": {
                            "type": "object",
                            "description": "Passed to https://docs.confluent.io/platform/current/clients/confluent-kafka-python/html/index.html#confluent_kafka.SerializingProducer"
                        },
                        "schema_registry_url": {
                            "type": "string",
                            "description": "URL of schema registry being used.",
                            "default": "http://localhost:8081"
                        },
                        "schema_registry_config": {
                            "type": "object",
                            "description": "Passed to https://docs.confluent.io/platform/current/clients/confluent-kafka-python/html/index.html#confluent_kafka.schema_registry.SchemaRegistryClient"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "bootstrap",
                        "schema_registry_url"
                    ]
                },
                "topic_routes": {
                    "type": "object",
                    "properties": {
                        "MetadataChangeEvent": {
                            "type": "string",
                            "description": "Overridden Kafka topic name for the MetadataChangeEvent",
                            "default": "MetadataChangeEvent"
                        },
                        "MetadataChangeProposal": {
                            "type": "string",
                            "description": "Overridden Kafka topic name for the MetadataChangeProposal",
                            "default": "MetadataChangeProposal"
                        }
                    },
                    "additionalProperties": false
                }
            },
            "required": [
                "connection"
            ],
            "additionalProperties": false
        },
        "datahub-gc": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "datahub-gc"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/datahub-gc_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "datahub-gc_config": {
            "additionalProperties": false,
            "properties": {
                "dry_run": {
                    "default": false,
                    "description": "Whether to perform a dry run or not. This is only supported for dataprocess cleanup and soft deleted entities cleanup.",
                    "title": "Dry Run",
                    "type": "boolean"
                },
                "cleanup_expired_tokens": {
                    "default": true,
                    "description": "Whether to clean up expired tokens or not",
                    "title": "Cleanup Expired Tokens",
                    "type": "boolean"
                },
                "truncate_indices": {
                    "default": true,
                    "description": "Whether to truncate elasticsearch indices or not which can be safely truncated",
                    "title": "Truncate Indices",
                    "type": "boolean"
                },
                "truncate_index_older_than_days": {
                    "default": 30,
                    "description": "Indices older than this number of days will be truncated",
                    "title": "Truncate Index Older Than Days",
                    "type": "integer"
                },
                "truncation_watch_until": {
                    "default": 10000,
                    "description": "Wait for truncation of indices until this number of documents are left",
                    "title": "Truncation Watch Until",
                    "type": "integer"
                },
                "truncation_sleep_between_seconds": {
                    "default": 30,
                    "description": "Sleep between truncation monitoring.",
                    "title": "Truncation Sleep Between Seconds",
                    "type": "integer"
                },
                "dataprocess_cleanup": {
                    "$ref": "#/$defs/DataProcessCleanupConfig",
                    "description": "Configuration for data process cleanup"
                },
                "soft_deleted_entities_cleanup": {
                    "$ref": "#/$defs/SoftDeletedEntitiesCleanupConfig",
                    "description": "Configuration for soft deleted entities cleanup"
                },
                "execution_request_cleanup": {
                    "$ref": "#/$defs/DatahubExecutionRequestCleanupConfig",
                    "description": "Configuration for execution request cleanup"
                }
            },
            "title": "DataHubGcSourceConfig",
            "type": "object"
        },
        "dbt-cloud": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "dbt-cloud"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/dbt-cloud_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "dbt-cloud_config": {
            "additionalProperties": false,
            "properties": {
                "incremental_lineage": {
                    "default": true,
                    "description": "When enabled, emits incremental/patch lineage for non-dbt entities. When disabled, re-states lineage on each run. This would also require enabling 'incremental_lineage' in the counterpart warehouse ingestion (_e.g._ BigQuery, Redshift, etc).",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "Environment to use in namespace when constructing URNs.",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "DBT Stateful Ingestion Config."
                },
                "target_platform": {
                    "description": "The platform that dbt is loading onto. (e.g. bigquery / redshift / postgres etc.)",
                    "title": "Target Platform",
                    "type": "string"
                },
                "target_platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The platform instance for the platform that dbt is operating on. Use this if you have multiple instances of the same platform (e.g. redshift) and need to distinguish between them.",
                    "title": "Target Platform Instance"
                },
                "use_identifiers": {
                    "default": false,
                    "description": "Use model identifier instead of model name if defined (if not, default to model name).",
                    "title": "Use Identifiers",
                    "type": "boolean"
                },
                "entities_enabled": {
                    "$ref": "#/$defs/DBTEntitiesEnabled",
                    "default": {
                        "models": "YES",
                        "sources": "YES",
                        "seeds": "YES",
                        "snapshots": "YES",
                        "test_definitions": "YES",
                        "test_results": "YES",
                        "model_performance": "YES"
                    },
                    "description": "Controls for enabling / disabling metadata emission for different dbt entities (models, test definitions, test results, etc.)"
                },
                "prefer_sql_parser_lineage": {
                    "default": false,
                    "description": "Normally we use dbt's metadata to generate table lineage. When enabled, we prefer results from the SQL parser when generating lineage instead. This can be useful when dbt models reference tables directly, instead of using the ref() macro. This requires that `skip_sources_in_lineage` is enabled.",
                    "title": "Prefer Sql Parser Lineage",
                    "type": "boolean"
                },
                "skip_sources_in_lineage": {
                    "default": false,
                    "description": "[Experimental] When enabled, dbt sources will not be included in the lineage graph. Requires that `entities_enabled.sources` is set to `NO`. This is mainly useful when you have multiple, interdependent dbt projects. ",
                    "title": "Skip Sources In Lineage",
                    "type": "boolean"
                },
                "tag_prefix": {
                    "default": "dbt:",
                    "description": "Prefix added to tags during ingestion.",
                    "title": "Tag Prefix",
                    "type": "string"
                },
                "node_name_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for dbt model names to filter in ingestion."
                },
                "materialized_node_pattern": {
                    "$ref": "#/$defs/MaterializedNodePatternConfig",
                    "default": {
                        "database_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "schema_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        }
                    },
                    "description": "Advanced filtering for materialized nodes based on their physical database location. Provides fine-grained control over database.schema.table patterns for catalog consistency."
                },
                "meta_mapping": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "mapping rules that will be executed against dbt meta properties. Refer to the section below on dbt meta automated mappings.",
                    "title": "Meta Mapping",
                    "type": "object"
                },
                "column_meta_mapping": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "mapping rules that will be executed against dbt column meta properties. Refer to the section below on dbt meta automated mappings.",
                    "title": "Column Meta Mapping",
                    "type": "object"
                },
                "enable_meta_mapping": {
                    "default": true,
                    "description": "When enabled, applies the mappings that are defined through the meta_mapping directives.",
                    "title": "Enable Meta Mapping",
                    "type": "boolean"
                },
                "query_tag_mapping": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "mapping rules that will be executed against dbt query_tag meta properties. Refer to the section below on dbt meta automated mappings.",
                    "title": "Query Tag Mapping",
                    "type": "object"
                },
                "enable_query_tag_mapping": {
                    "default": true,
                    "description": "When enabled, applies the mappings that are defined through the `query_tag_mapping` directives.",
                    "title": "Enable Query Tag Mapping",
                    "type": "boolean"
                },
                "write_semantics": {
                    "default": "PATCH",
                    "description": "Whether the new tags, terms and owners to be added will override the existing ones added only by this source or not. Value for this config can be \"PATCH\" or \"OVERRIDE\"",
                    "title": "Write Semantics",
                    "type": "string"
                },
                "strip_user_ids_from_email": {
                    "default": false,
                    "description": "Whether or not to strip email id while adding owners using dbt meta actions.",
                    "title": "Strip User Ids From Email",
                    "type": "boolean"
                },
                "enable_owner_extraction": {
                    "default": true,
                    "description": "When enabled, ownership info will be extracted from the dbt meta",
                    "title": "Enable Owner Extraction",
                    "type": "boolean"
                },
                "owner_extraction_pattern": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Regex string to extract owner from the dbt node using the `(?P<name>...) syntax` of the [match object](https://docs.python.org/3/library/re.html#match-objects), where the group name must be `owner`. Examples: (1)`r\"(?P<owner>(.*)): (\\w+) (\\w+)\"` will extract `jdoe` as the owner from `\"jdoe: John Doe\"` (2) `r\"@(?P<owner>(.*))\"` will extract `alice` as the owner from `\"@alice\"`.",
                    "title": "Owner Extraction Pattern"
                },
                "include_env_in_assertion_guid": {
                    "default": false,
                    "description": "Prior to version 0.9.4.2, the assertion GUIDs did not include the environment. If you're using multiple dbt ingestion that are only distinguished by env, then you should set this flag to True.",
                    "title": "Include Env In Assertion Guid",
                    "type": "boolean"
                },
                "convert_column_urns_to_lowercase": {
                    "default": false,
                    "description": "When enabled, converts column URNs to lowercase to ensure cross-platform compatibility. If `target_platform` is Snowflake, the default is True.",
                    "title": "Convert Column Urns To Lowercase",
                    "type": "boolean"
                },
                "test_warnings_are_errors": {
                    "default": false,
                    "description": "When enabled, dbt test warnings will be treated as failures.",
                    "title": "Test Warnings Are Errors",
                    "type": "boolean"
                },
                "infer_dbt_schemas": {
                    "default": true,
                    "description": "When enabled, schemas will be inferred from the dbt node definition.",
                    "title": "Infer Dbt Schemas",
                    "type": "boolean"
                },
                "include_column_lineage": {
                    "default": true,
                    "description": "When enabled, column-level lineage will be extracted from the dbt node definition. Requires `infer_dbt_schemas` to be enabled. If you run into issues where the column name casing does not match up with properly, providing a datahub_api or using the rest sink will improve accuracy.",
                    "title": "Include Column Lineage",
                    "type": "boolean"
                },
                "include_compiled_code": {
                    "default": true,
                    "description": "When enabled, includes the compiled code in the emitted metadata.",
                    "title": "Include Compiled Code",
                    "type": "boolean"
                },
                "include_database_name": {
                    "default": true,
                    "description": "Whether to add database name to the table urn. Set to False to skip it for engines like AWS Athena where it's not required.",
                    "title": "Include Database Name",
                    "type": "boolean"
                },
                "dbt_is_primary_sibling": {
                    "default": true,
                    "description": "Experimental: Controls sibling relationship primary designation between dbt entities and target platform entities. When True (default), dbt entities are primary and target platform entities are secondary. When False, target platform entities are primary and dbt entities are secondary. Uses aspect patches for precise control. Requires DataHub server 1.3.0+.",
                    "title": "Dbt Is Primary Sibling",
                    "type": "boolean"
                },
                "drop_duplicate_sources": {
                    "default": true,
                    "description": "When enabled, drops sources that have the same name in the target platform as a model. This ensures that lineage is generated reliably, but will lose any documentation associated only with the source.",
                    "title": "Drop Duplicate Sources",
                    "type": "boolean"
                },
                "access_url": {
                    "default": "https://cloud.getdbt.com",
                    "description": "The base URL of the dbt Cloud instance to use. This should be the URL you use to access the dbt Cloud UI. It should include the scheme (http/https) and not include a trailing slash. See the access url for your dbt Cloud region here: https://docs.getdbt.com/docs/cloud/about-cloud/regions-ip-addresses",
                    "title": "Access Url",
                    "type": "string"
                },
                "metadata_endpoint": {
                    "default": "https://metadata.cloud.getdbt.com/graphql",
                    "description": "The dbt Cloud metadata API endpoint. If not provided, we will try to infer it from the access_url.",
                    "title": "Metadata Endpoint",
                    "type": "string"
                },
                "token": {
                    "description": "The API token to use to authenticate with DBT Cloud.",
                    "title": "Token",
                    "type": "string"
                },
                "account_id": {
                    "description": "The DBT Cloud account ID to use.",
                    "title": "Account Id",
                    "type": "integer"
                },
                "project_id": {
                    "description": "The dbt Cloud project ID to use.",
                    "title": "Project Id",
                    "type": "integer"
                },
                "job_id": {
                    "description": "The ID of the job to ingest metadata from.",
                    "title": "Job Id",
                    "type": "integer"
                },
                "run_id": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The ID of the run to ingest metadata from. If not specified, we'll default to the latest run.",
                    "title": "Run Id"
                },
                "external_url_mode": {
                    "default": "explore",
                    "description": "Where should the \"View in dbt\" link point to - either the \"Explore\" UI or the dbt Cloud IDE",
                    "enum": [
                        "explore",
                        "ide"
                    ],
                    "title": "External Url Mode",
                    "type": "string"
                }
            },
            "required": [
                "target_platform",
                "token",
                "account_id",
                "project_id",
                "job_id"
            ],
            "title": "DBTCloudConfig",
            "type": "object"
        },
        "demo-data": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "demo-data"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/demo-data_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "demo-data_config": {
            "additionalProperties": false,
            "properties": {},
            "title": "DemoDataConfig",
            "type": "object"
        },
        "presto": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "presto"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/presto_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "presto_config": {
            "additionalProperties": false,
            "properties": {
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'"
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "description": "host URL",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "description": "database (catalog)",
                    "title": "Database",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "catalog_to_connector_details": {
                    "additionalProperties": {
                        "$ref": "#/$defs/ConnectorDetail"
                    },
                    "default": {},
                    "description": "A mapping of trino catalog to its connector details like connector database, env and platform instance.This configuration is used to build lineage to the underlying connector. Use catalog name as key.",
                    "title": "Catalog To Connector Details",
                    "type": "object"
                },
                "ingest_lineage_to_connectors": {
                    "default": true,
                    "description": "Whether lineage of datasets to connectors should be ingested",
                    "title": "Ingest Lineage To Connectors",
                    "type": "boolean"
                },
                "trino_as_primary": {
                    "default": true,
                    "description": "Experimental feature. Whether trino dataset should be primary entity of the set of siblings",
                    "title": "Trino As Primary",
                    "type": "boolean"
                }
            },
            "required": [
                "host_port",
                "database"
            ],
            "title": "PrestoConfig",
            "type": "object"
        },
        "snowflake": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "snowflake"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/snowflake_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "snowflake_config": {
            "additionalProperties": false,
            "properties": {
                "incremental_properties": {
                    "default": false,
                    "description": "When enabled, emits dataset properties as incremental to existing dataset properties in DataHub. When disabled, re-states dataset properties on each run.",
                    "title": "Incremental Properties",
                    "type": "boolean"
                },
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for schemas to filter in ingestion. Will match against the full `database.schema` name if `match_fully_qualified_names` is enabled."
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "enable_stateful_profiling": {
                    "default": true,
                    "description": "Enable stateful profiling. This will store profiling timestamps per dataset after successful profiling. and will not run profiling again in subsequent run if table has not been updated. ",
                    "title": "Enable Stateful Profiling",
                    "type": "boolean"
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": true,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "bucket_duration": {
                    "$ref": "#/$defs/BucketDuration",
                    "default": "DAY",
                    "description": "Size of the time window to aggregate usage stats."
                },
                "end_time": {
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "format": "date-time",
                    "title": "End Time",
                    "type": "string"
                },
                "start_time": {
                    "default": null,
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "format": "date-time",
                    "title": "Start Time",
                    "type": "string"
                },
                "enable_stateful_time_window": {
                    "default": false,
                    "description": "Enable stateful time window tracking. This will store the time window after successful extraction and adjust the time window in subsequent runs to avoid reprocessing. NOTE: This is ONLY applicable when using queries v2 (use_queries_v2=True). This replaces enable_stateful_lineage_ingestion and enable_stateful_usage_ingestion for the queries v2 extraction path, since queries v2 extracts lineage, usage, operations, and queries together from a single audit log and uses a unified time window.",
                    "title": "Enable Stateful Time Window",
                    "type": "boolean"
                },
                "enable_stateful_usage_ingestion": {
                    "default": true,
                    "description": "Enable stateful lineage ingestion. This will store usage window timestamps after successful usage ingestion. and will not run usage ingestion for same timestamps in subsequent run. NOTE: This only works with use_queries_v2=False (legacy extraction path). For queries v2, use enable_stateful_time_window instead.",
                    "title": "Enable Stateful Usage Ingestion",
                    "type": "boolean"
                },
                "enable_stateful_lineage_ingestion": {
                    "default": true,
                    "description": "Enable stateful lineage ingestion. This will store lineage window timestamps after successful lineage ingestion. and will not run lineage ingestion for same timestamps in subsequent run. NOTE: This only works with use_queries_v2=False (legacy extraction path). For queries v2, use enable_stateful_time_window instead.",
                    "title": "Enable Stateful Lineage Ingestion",
                    "type": "boolean"
                },
                "top_n_queries": {
                    "default": 10,
                    "description": "Number of top queries to save to each table.",
                    "exclusiveMinimum": 0,
                    "title": "Top N Queries",
                    "type": "integer"
                },
                "user_email_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for user emails to filter in usage."
                },
                "include_operational_stats": {
                    "default": true,
                    "description": "Whether to display operational stats.",
                    "title": "Include Operational Stats",
                    "type": "boolean"
                },
                "include_read_operational_stats": {
                    "default": false,
                    "description": "Whether to report read operational stats. Experimental.",
                    "title": "Include Read Operational Stats",
                    "type": "boolean"
                },
                "format_sql_queries": {
                    "default": false,
                    "description": "Whether to format sql queries",
                    "title": "Format Sql Queries",
                    "type": "boolean"
                },
                "include_top_n_queries": {
                    "default": true,
                    "description": "Whether to ingest the top_n_queries.",
                    "title": "Include Top N Queries",
                    "type": "boolean"
                },
                "apply_view_usage_to_tables": {
                    "default": false,
                    "description": "Whether to apply view's usage to its base tables. If set to True, usage is applied to base tables only.",
                    "title": "Apply View Usage To Tables",
                    "type": "boolean"
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Snowflake username.",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Snowflake password.",
                    "title": "Password"
                },
                "private_key": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Private key in a form of '-----BEGIN PRIVATE KEY-----\\nprivate-key\\n-----END PRIVATE KEY-----\\n' if using key pair authentication. Encrypted version of private key will be in a form of '-----BEGIN ENCRYPTED PRIVATE KEY-----\\nencrypted-private-key\\n-----END ENCRYPTED PRIVATE KEY-----\\n' See: https://docs.snowflake.com/en/user-guide/key-pair-auth.html",
                    "title": "Private Key"
                },
                "private_key_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The path to the private key if using key pair authentication. Ignored if `private_key` is set. See: https://docs.snowflake.com/en/user-guide/key-pair-auth.html",
                    "title": "Private Key Path"
                },
                "private_key_password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Password for your private key. Required if using key pair authentication with encrypted private key.",
                    "title": "Private Key Password"
                },
                "oauth_config": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/OAuthConfiguration"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "oauth configuration - https://docs.snowflake.com/en/user-guide/python-connector-example.html#connecting-with-oauth"
                },
                "authentication_type": {
                    "default": "DEFAULT_AUTHENTICATOR",
                    "description": "The type of authenticator to use when connecting to Snowflake. Supports \"DEFAULT_AUTHENTICATOR\", \"OAUTH_AUTHENTICATOR\", \"EXTERNAL_BROWSER_AUTHENTICATOR\" and \"KEY_PAIR_AUTHENTICATOR\".",
                    "title": "Authentication Type",
                    "type": "string"
                },
                "account_id": {
                    "description": "Snowflake account identifier. e.g. xy12345,  xy12345.us-east-2.aws, xy12345.us-central1.gcp, xy12345.central-us.azure, xy12345.us-west-2.privatelink. Refer [Account Identifiers](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#format-2-legacy-account-locator-in-a-region) for more details.",
                    "title": "Account Id",
                    "type": "string"
                },
                "warehouse": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Snowflake warehouse.",
                    "title": "Warehouse"
                },
                "role": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Snowflake role.",
                    "title": "Role"
                },
                "connect_args": {
                    "anyOf": [
                        {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Connect args to pass to Snowflake SqlAlchemy driver",
                    "title": "Connect Args"
                },
                "token": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "OAuth token from external identity provider. Not recommended for most use cases because it will not be able to refresh once expired.",
                    "title": "Token"
                },
                "snowflake_domain": {
                    "default": "snowflakecomputing.com",
                    "description": "Snowflake domain. Use 'snowflakecomputing.com' for most regions or 'snowflakecomputing.cn' for China (cn-northwest-1) region.",
                    "title": "Snowflake Domain",
                    "type": "string"
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "^UTIL_DB$",
                            "^SNOWFLAKE$",
                            "^SNOWFLAKE_SAMPLE_DATA$"
                        ],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for databases to filter in ingestion."
                },
                "stream_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for streams to filter in ingestion. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "procedure_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for procedures to filter in ingestion. Specify regex to match the entire procedure name in database.schema.procedure format. e.g. to match all procedures starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "match_fully_qualified_names": {
                    "default": false,
                    "description": "Whether `schema_pattern` is matched against fully qualified schema name `<catalog>.<schema>`.",
                    "title": "Match Fully Qualified Names",
                    "type": "boolean"
                },
                "email_domain": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Email domain of your organization so users can be displayed on UI appropriately. This is used only if we cannot infer email ID.",
                    "title": "Email Domain"
                },
                "include_table_lineage": {
                    "default": true,
                    "description": "If enabled, populates the snowflake table-to-table and s3-to-snowflake table lineage. Requires appropriate grants given to the role and Snowflake Enterprise Edition or above.",
                    "title": "Include Table Lineage",
                    "type": "boolean"
                },
                "ignore_start_time_lineage": {
                    "default": false,
                    "title": "Ignore Start Time Lineage",
                    "type": "boolean"
                },
                "upstream_lineage_in_report": {
                    "default": false,
                    "title": "Upstream Lineage In Report",
                    "type": "boolean"
                },
                "include_usage_stats": {
                    "default": true,
                    "description": "If enabled, populates the snowflake usage statistics. Requires appropriate grants given to the role.",
                    "title": "Include Usage Stats",
                    "type": "boolean"
                },
                "include_view_definitions": {
                    "default": true,
                    "description": "If enabled, populates the ingested views' definitions.",
                    "title": "Include View Definitions",
                    "type": "boolean"
                },
                "fetch_views_from_information_schema": {
                    "default": false,
                    "description": "If enabled, uses information_schema.views to fetch view definitions instead of SHOW VIEWS command. This alternative method can be more reliable for databases with large numbers of views (> 10K views), as the SHOW VIEWS approach has proven unreliable and can lead to missing views in such scenarios. However, this method requires OWNERSHIP privileges on views to retrieve their definitions. For views without ownership permissions (where VIEW_DEFINITION is null/empty), the system will automatically fall back to using batched SHOW VIEWS queries to populate the missing definitions.",
                    "title": "Fetch Views From Information Schema",
                    "type": "boolean"
                },
                "include_technical_schema": {
                    "default": true,
                    "description": "If enabled, populates the snowflake technical schema and descriptions.",
                    "title": "Include Technical Schema",
                    "type": "boolean"
                },
                "include_primary_keys": {
                    "default": true,
                    "description": "If enabled, populates the snowflake primary keys.",
                    "title": "Include Primary Keys",
                    "type": "boolean"
                },
                "include_foreign_keys": {
                    "default": true,
                    "description": "If enabled, populates the snowflake foreign keys.",
                    "title": "Include Foreign Keys",
                    "type": "boolean"
                },
                "include_column_lineage": {
                    "default": true,
                    "description": "Populates table->table and view->table column lineage. Requires appropriate grants given to the role and the Snowflake Enterprise Edition or above.",
                    "title": "Include Column Lineage",
                    "type": "boolean"
                },
                "use_queries_v2": {
                    "default": true,
                    "description": "If enabled, uses the new queries extractor to extract queries from snowflake.",
                    "title": "Use Queries V2",
                    "type": "boolean"
                },
                "include_queries": {
                    "default": true,
                    "description": "If enabled, generate query entities associated with lineage edges. Only applicable if `use_queries_v2` is enabled.",
                    "title": "Include Queries",
                    "type": "boolean"
                },
                "include_query_usage_statistics": {
                    "default": true,
                    "description": "If enabled, generate query popularity statistics. Only applicable if `use_queries_v2` is enabled.",
                    "title": "Include Query Usage Statistics",
                    "type": "boolean"
                },
                "lazy_schema_resolver": {
                    "default": true,
                    "description": "If enabled, uses lazy schema resolver to resolve schemas for tables and views. This is useful if you have a large number of schemas and want to avoid bulk fetching the schema for each table/view.",
                    "title": "Lazy Schema Resolver",
                    "type": "boolean"
                },
                "query_dedup_strategy": {
                    "$ref": "#/$defs/QueryDedupStrategyType",
                    "default": "STANDARD",
                    "description": "Experimental: Choose the strategy for query deduplication (default value is appropriate for most use-cases; make sure you understand performance implications before changing it). Allowed values are: STANDARD, NONE"
                },
                "extract_tags": {
                    "$ref": "#/$defs/TagOption",
                    "default": "skip",
                    "description": "Optional. Allowed values are `without_lineage`, `with_lineage`, and `skip` (default). `without_lineage` only extracts tags that have been applied directly to the given entity. `with_lineage` extracts both directly applied and propagated tags, but will be significantly slower. See the [Snowflake documentation](https://docs.snowflake.com/en/user-guide/object-tagging.html#tag-lineage) for information about tag lineage/propagation. "
                },
                "extract_tags_as_structured_properties": {
                    "default": false,
                    "description": "If enabled along with `extract_tags`, extracts snowflake's key-value tags as DataHub structured properties instead of DataHub tags.",
                    "title": "Extract Tags As Structured Properties",
                    "type": "boolean"
                },
                "include_external_url": {
                    "default": true,
                    "description": "Whether to populate Snowsight url for Snowflake Objects",
                    "title": "Include External Url",
                    "type": "boolean"
                },
                "validate_upstreams_against_patterns": {
                    "default": true,
                    "description": "Whether to validate upstream snowflake tables against allow-deny patterns",
                    "title": "Validate Upstreams Against Patterns",
                    "type": "boolean"
                },
                "tag_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "List of regex patterns for tags to include in ingestion. Only used if `extract_tags` is enabled."
                },
                "include_streams": {
                    "default": true,
                    "description": "If enabled, streams will be ingested as separate entities from tables/views.",
                    "title": "Include Streams",
                    "type": "boolean"
                },
                "include_procedures": {
                    "default": true,
                    "description": "If enabled, procedures will be ingested as pipelines/tasks.",
                    "title": "Include Procedures",
                    "type": "boolean"
                },
                "structured_property_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "List of regex patterns for structured properties to include in ingestion. Applied to tags with form `<database>.<schema>.<tag_name>`. Only used if `extract_tags` and `extract_tags_as_structured_properties` are enabled."
                },
                "temporary_tables_pattern": {
                    "default": [
                        ".*\\.FIVETRAN_.*_STAGING\\..*",
                        ".*__DBT_TMP$",
                        ".*\\.SEGMENT_[a-f0-9]{8}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{12}",
                        ".*\\.STAGING_.*_[a-f0-9]{8}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{12}",
                        ".*\\.(GE_TMP_|GE_TEMP_|GX_TEMP_)[0-9A-F]{8}",
                        ".*\\.SNOWPARK_TEMP_TABLE_.+"
                    ],
                    "description": "[Advanced] Regex patterns for temporary tables to filter in lineage ingestion. Specify regex to match the entire table name in database.schema.table format. Defaults are to set in such a way to ignore the temporary staging tables created by known ETL tools.",
                    "items": {
                        "type": "string"
                    },
                    "title": "Temporary Tables Pattern",
                    "type": "array"
                },
                "shares": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "$ref": "#/$defs/SnowflakeShareConfig"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Required if current account owns or consumes snowflake share.If specified, connector creates lineage and siblings relationship between current account's database tables and consumer/producer account's database tables. Map of share name -> details of share.",
                    "title": "Shares"
                },
                "known_snowflake_edition": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SnowflakeEdition"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Explicitly specify the Snowflake edition (STANDARD or ENTERPRISE). If unset, the edition will be inferred automatically using 'SHOW TAGS'."
                },
                "include_assertion_results": {
                    "default": false,
                    "description": "Whether to ingest assertion run results for assertions created using Datahub assertions CLI in snowflake",
                    "title": "Include Assertion Results",
                    "type": "boolean"
                },
                "pushdown_deny_usernames": {
                    "default": [],
                    "description": "List of snowflake usernames (SQL LIKE patterns, e.g., 'SERVICE_%', '%_PROD', 'TEST_USER') which will NOT be considered for lineage/usage/queries extraction. This is primarily useful for improving performance by filtering out users with extremely high query volumes. Only applicable if `use_queries_v2` is enabled.",
                    "items": {
                        "type": "string"
                    },
                    "title": "Pushdown Deny Usernames",
                    "type": "array"
                },
                "pushdown_allow_usernames": {
                    "default": [],
                    "description": "List of snowflake usernames (SQL LIKE patterns, e.g., 'ANALYST_%', '%_USER', 'MAIN_ACCOUNT') which WILL be considered for lineage/usage/queries extraction. This is primarily useful for improving performance by filtering in only specific users. Only applicable if `use_queries_v2` is enabled. If not specified, all users not in deny list are included.",
                    "items": {
                        "type": "string"
                    },
                    "title": "Pushdown Allow Usernames",
                    "type": "array"
                },
                "push_down_database_pattern_access_history": {
                    "default": false,
                    "description": "If enabled, pushes down database pattern filtering to the access_history table for improved performance. This filters on the accessed objects in access_history.",
                    "title": "Push Down Database Pattern Access History",
                    "type": "boolean"
                },
                "additional_database_names_allowlist": {
                    "default": [],
                    "description": "Additional database names (no pattern matching) to be included in the access_history filter. Only applies if push_down_database_pattern_access_history=True. These databases will be included in the filter being pushed down regardless of database_pattern settings.This may be required in the case of _eg_ temporary tables being created in a different database than the ones in the database_name patterns.",
                    "items": {
                        "type": "string"
                    },
                    "title": "Additional Database Names Allowlist",
                    "type": "array"
                }
            },
            "required": [
                "account_id"
            ],
            "title": "SnowflakeV2Config",
            "type": "object"
        },
        "csv-enricher": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "csv-enricher"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/csv-enricher_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "csv-enricher_config": {
            "additionalProperties": false,
            "properties": {
                "filename": {
                    "description": "File path or URL of CSV file to ingest.",
                    "title": "Filename",
                    "type": "string"
                },
                "write_semantics": {
                    "default": "PATCH",
                    "description": "Whether the new tags, terms and owners to be added will override the existing ones added only by this source or not. Value for this config can be \"PATCH\" or \"OVERRIDE\". NOTE: this will apply to all metadata for the entity, not just a single aspect.",
                    "title": "Write Semantics",
                    "type": "string"
                },
                "delimiter": {
                    "default": ",",
                    "description": "Delimiter to use when parsing CSV",
                    "title": "Delimiter",
                    "type": "string"
                },
                "array_delimiter": {
                    "default": "|",
                    "description": "Delimiter to use when parsing array fields (tags, terms and owners)",
                    "title": "Array Delimiter",
                    "type": "string"
                }
            },
            "required": [
                "filename"
            ],
            "title": "CSVEnricherConfig",
            "type": "object"
        },
        "gcs": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "gcs"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/gcs_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "gcs_config": {
            "additionalProperties": false,
            "properties": {
                "path_specs": {
                    "description": "List of PathSpec. See [below](#path-spec) the details about PathSpec",
                    "items": {
                        "$ref": "#/$defs/PathSpec"
                    },
                    "title": "Path Specs",
                    "type": "array"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "credential": {
                    "$ref": "#/$defs/HMACKey",
                    "description": "Google cloud storage [HMAC keys](https://cloud.google.com/storage/docs/authentication/hmackeys)"
                },
                "max_rows": {
                    "default": 100,
                    "description": "Maximum number of rows to use when inferring schemas for TSV and CSV files.",
                    "title": "Max Rows",
                    "type": "integer"
                },
                "number_of_files_to_sample": {
                    "default": 100,
                    "description": "Number of files to list to sample for schema inference. This will be ignored if sample_files is set to False in the pathspec.",
                    "title": "Number Of Files To Sample",
                    "type": "integer"
                }
            },
            "required": [
                "path_specs",
                "credential"
            ],
            "title": "GCSSourceConfig",
            "type": "object"
        },
        "s3": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "s3"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/s3_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "s3_config": {
            "additionalProperties": false,
            "properties": {
                "path_specs": {
                    "description": "List of PathSpec. See [below](#path-spec) the details about PathSpec",
                    "items": {
                        "$ref": "#/$defs/PathSpec"
                    },
                    "title": "Path Specs",
                    "type": "array"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "platform": {
                    "default": "",
                    "description": "The platform that this source connects to (either 's3' or 'file'). If not specified, the platform will be inferred from the path_specs.",
                    "title": "Platform",
                    "type": "string"
                },
                "aws_config": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AwsConnectionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS configuration"
                },
                "use_s3_bucket_tags": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Whether or not to create tags in datahub from the s3 bucket",
                    "title": "Use S3 Bucket Tags"
                },
                "use_s3_object_tags": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Whether or not to create tags in datahub from the s3 object",
                    "title": "Use S3 Object Tags"
                },
                "use_s3_content_type": {
                    "default": false,
                    "description": "If enabled, use S3 Object metadata to determine content type over file extension, if set. Warning: this requires a separate query to S3 for each object, which can be slow for large datasets.",
                    "title": "Use S3 Content Type",
                    "type": "boolean"
                },
                "profile_patterns": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for tables to profile "
                },
                "profiling": {
                    "$ref": "#/$defs/DataLakeProfilerConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "profile_table_level_only": false,
                        "max_number_of_fields_to_profile": null,
                        "include_field_null_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": true,
                        "include_field_distinct_value_frequencies": true,
                        "include_field_histogram": true,
                        "include_field_sample_values": true
                    },
                    "description": "Data profiling configuration"
                },
                "spark_driver_memory": {
                    "default": "4g",
                    "description": "Max amount of memory to grant Spark.",
                    "title": "Spark Driver Memory",
                    "type": "string"
                },
                "spark_config": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "Spark configuration properties to set on the SparkSession. Put config property names into quotes. For example: '\"spark.executor.memory\": \"2g\"'",
                    "title": "Spark Config",
                    "type": "object"
                },
                "max_rows": {
                    "default": 100,
                    "description": "Maximum number of rows to use when inferring schemas for TSV and CSV files.",
                    "title": "Max Rows",
                    "type": "integer"
                },
                "add_partition_columns_to_schema": {
                    "default": false,
                    "description": "Whether to add partition fields to the schema.",
                    "title": "Add Partition Columns To Schema",
                    "type": "boolean"
                },
                "verify_ssl": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "default": true,
                    "description": "Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use.",
                    "title": "Verify Ssl"
                },
                "number_of_files_to_sample": {
                    "default": 100,
                    "description": "Number of files to list to sample for schema inference. This will be ignored if sample_files is set to False in the pathspec.",
                    "title": "Number Of Files To Sample",
                    "type": "integer"
                },
                "sort_schema_fields": {
                    "default": false,
                    "description": "Whether to sort schema fields by fieldPath when inferring schemas.",
                    "title": "Sort Schema Fields",
                    "type": "boolean"
                },
                "generate_partition_aspects": {
                    "default": true,
                    "description": "Whether to generate partition aspects for partitioned tables. On older servers for backward compatibility, this should be set to False. This flag will be removed in future versions.",
                    "title": "Generate Partition Aspects",
                    "type": "boolean"
                }
            },
            "required": [
                "path_specs"
            ],
            "title": "DataLakeSourceConfig",
            "type": "object"
        },
        "bigquery": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "bigquery"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/bigquery_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "bigquery_config": {
            "additionalProperties": false,
            "properties": {
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "enable_stateful_profiling": {
                    "default": true,
                    "description": "Enable stateful profiling. This will store profiling timestamps per dataset after successful profiling. and will not run profiling again in subsequent run if table has not been updated. ",
                    "title": "Enable Stateful Profiling",
                    "type": "boolean"
                },
                "bucket_duration": {
                    "$ref": "#/$defs/BucketDuration",
                    "default": "DAY",
                    "description": "Size of the time window to aggregate usage stats."
                },
                "end_time": {
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "format": "date-time",
                    "title": "End Time",
                    "type": "string"
                },
                "start_time": {
                    "default": null,
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "format": "date-time",
                    "title": "Start Time",
                    "type": "string"
                },
                "enable_stateful_time_window": {
                    "default": false,
                    "description": "Enable stateful time window tracking. This will store the time window after successful extraction and adjust the time window in subsequent runs to avoid reprocessing. NOTE: This is ONLY applicable when using queries v2 (use_queries_v2=True). This replaces enable_stateful_lineage_ingestion and enable_stateful_usage_ingestion for the queries v2 extraction path, since queries v2 extracts lineage, usage, operations, and queries together from a single audit log and uses a unified time window.",
                    "title": "Enable Stateful Time Window",
                    "type": "boolean"
                },
                "enable_stateful_lineage_ingestion": {
                    "default": true,
                    "description": "Enable stateful lineage ingestion. This will store lineage window timestamps after successful lineage ingestion. and will not run lineage ingestion for same timestamps in subsequent run. NOTE: This only works with use_queries_v2=False (legacy extraction path). For queries v2, use enable_stateful_time_window instead.",
                    "title": "Enable Stateful Lineage Ingestion",
                    "type": "boolean"
                },
                "enable_stateful_usage_ingestion": {
                    "default": true,
                    "description": "Enable stateful lineage ingestion. This will store usage window timestamps after successful usage ingestion. and will not run usage ingestion for same timestamps in subsequent run. NOTE: This only works with use_queries_v2=False (legacy extraction path). For queries v2, use enable_stateful_time_window instead.",
                    "title": "Enable Stateful Usage Ingestion",
                    "type": "boolean"
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "include_data_platform_instance": {
                    "default": false,
                    "description": "Whether to create a DataPlatformInstance aspect, equal to the BigQuery project id. If enabled, will cause redundancy in the browse path for BigQuery entities in the UI, because the project id is represented as the top-level container.",
                    "title": "Include Data Platform Instance",
                    "type": "boolean"
                },
                "enable_legacy_sharded_table_support": {
                    "default": true,
                    "description": "Use the legacy sharded table urn suffix added.",
                    "title": "Enable Legacy Sharded Table Support",
                    "type": "boolean"
                },
                "project_ids": {
                    "description": "Ingests specified project_ids. Use this property if you want to specify what projects to ingest or don't want to give project resourcemanager.projects.list to your service account. Overrides `project_id_pattern`.",
                    "items": {
                        "type": "string"
                    },
                    "title": "Project Ids",
                    "type": "array"
                },
                "project_labels": {
                    "description": "Ingests projects with the specified labels. Set value in the format of `key:value`. Use this property to define which projects to ingest basedon project-level labels. If project_ids or project_id is set, this configuration has no effect. The ingestion process filters projects by label first, and then applies the project_id_pattern.",
                    "items": {
                        "type": "string"
                    },
                    "title": "Project Labels",
                    "type": "array"
                },
                "project_id_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for project_id to filter in ingestion."
                },
                "dataset_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for dataset to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'"
                },
                "match_fully_qualified_names": {
                    "default": true,
                    "description": "[deprecated] Whether `dataset_pattern` is matched against fully qualified dataset name `<project_id>.<dataset_name>`.",
                    "title": "Match Fully Qualified Names",
                    "type": "boolean"
                },
                "table_snapshot_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for table snapshots to filter in ingestion. Specify regex to match the entire snapshot name in database.schema.snapshot format. e.g. to match all snapshots starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "rate_limit": {
                    "default": false,
                    "description": "Should we rate limit requests made to API.",
                    "title": "Rate Limit",
                    "type": "boolean"
                },
                "requests_per_min": {
                    "default": 60,
                    "description": "Used to control number of API calls made per min. Only used when `rate_limit` is set to `True`.",
                    "title": "Requests Per Min",
                    "type": "integer"
                },
                "temp_table_dataset_prefix": {
                    "default": "_",
                    "description": "If you are creating temp tables in a dataset with a particular prefix you can use this config to set the prefix for the dataset. This is to support workflows from before bigquery's introduction of temp tables. By default we use `_` because of datasets that begin with an underscore are hidden by default https://cloud.google.com/bigquery/docs/datasets#dataset-naming.",
                    "title": "Temp Table Dataset Prefix",
                    "type": "string"
                },
                "sharded_table_pattern": {
                    "default": "((.+\\D)[_$]?)?(\\d\\d\\d\\d(?:0[1-9]|1[0-2])(?:0[1-9]|[12][0-9]|3[01]))$",
                    "deprecated": true,
                    "description": "The regex pattern to match sharded tables and group as one table. This is a very low level config parameter, only change if you know what you are doing, ",
                    "title": "Sharded Table Pattern",
                    "type": "string"
                },
                "credential": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/GCPCredential"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "BigQuery credential informations"
                },
                "extra_client_options": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "Additional options to pass to google.cloud.logging_v2.client.Client.",
                    "title": "Extra Client Options",
                    "type": "object"
                },
                "project_on_behalf": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "[Advanced] The BigQuery project in which queries are executed. Will be passed when creating a job. If not passed, falls back to the project associated with the service account.",
                    "title": "Project On Behalf"
                },
                "gcs_lineage_config": {
                    "$ref": "#/$defs/GcsLineageProviderConfig",
                    "default": {
                        "path_specs": [],
                        "strip_urls": true,
                        "ignore_non_path_spec_path": false
                    },
                    "description": "Common config for gcs lineage generation"
                },
                "include_schema_metadata": {
                    "default": true,
                    "description": "Whether to ingest the BigQuery schema, i.e. projects, schemas, tables, and views.",
                    "title": "Include Schema Metadata",
                    "type": "boolean"
                },
                "usage": {
                    "$ref": "#/$defs/BigQueryUsageConfig",
                    "default": {
                        "bucket_duration": "DAY",
                        "end_time": "2025-10-24T00:46:19.975598Z",
                        "start_time": "2025-10-23T00:00:00Z",
                        "queries_character_limit": 24000,
                        "top_n_queries": 10,
                        "user_email_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "include_operational_stats": true,
                        "include_read_operational_stats": false,
                        "format_sql_queries": false,
                        "include_top_n_queries": true,
                        "max_query_duration": "PT15M",
                        "apply_view_usage_to_tables": false
                    },
                    "description": "Usage related configs"
                },
                "include_usage_statistics": {
                    "default": true,
                    "description": "Generate usage statistic",
                    "title": "Include Usage Statistics",
                    "type": "boolean"
                },
                "capture_table_label_as_tag": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "$ref": "#/$defs/AllowDenyPattern"
                        }
                    ],
                    "default": false,
                    "description": "Capture BigQuery table labels as DataHub tag",
                    "title": "Capture Table Label As Tag"
                },
                "capture_view_label_as_tag": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "$ref": "#/$defs/AllowDenyPattern"
                        }
                    ],
                    "default": false,
                    "description": "Capture BigQuery view labels as DataHub tag",
                    "title": "Capture View Label As Tag"
                },
                "capture_dataset_label_as_tag": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "$ref": "#/$defs/AllowDenyPattern"
                        }
                    ],
                    "default": false,
                    "description": "Capture BigQuery dataset labels as DataHub tag",
                    "title": "Capture Dataset Label As Tag"
                },
                "include_table_constraints": {
                    "default": true,
                    "description": "Whether to ingest table constraints. If you know you don't use table constraints, you can disable it to save one extra query per dataset. In general it should be enabled",
                    "title": "Include Table Constraints",
                    "type": "boolean"
                },
                "include_external_url": {
                    "default": true,
                    "description": "Whether to populate BigQuery Console url to Datasets/Tables",
                    "title": "Include External Url",
                    "type": "boolean"
                },
                "include_table_snapshots": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Whether table snapshots should be ingested.",
                    "title": "Include Table Snapshots"
                },
                "debug_include_full_payloads": {
                    "default": false,
                    "description": "Include full payload into events. It is only for debugging and internal use.",
                    "title": "Debug Include Full Payloads",
                    "type": "boolean"
                },
                "number_of_datasets_process_in_batch_if_profiling_enabled": {
                    "default": 1000,
                    "description": "Number of partitioned table queried in batch when getting metadata. This is a low level config property which should be touched with care. This restriction is needed because we query partitions system view which throws error if we try to touch too many tables.",
                    "title": "Number Of Datasets Process In Batch If Profiling Enabled",
                    "type": "integer"
                },
                "use_tables_list_query_v2": {
                    "default": false,
                    "description": "List tables using an improved query that extracts partitions and last modified timestamps more accurately. Requires the ability to read table data. Automatically enabled when profiling is enabled.",
                    "title": "Use Tables List Query V2",
                    "type": "boolean"
                },
                "use_queries_v2": {
                    "default": true,
                    "description": "If enabled, uses the new queries extractor to extract queries from bigquery.",
                    "title": "Use Queries V2",
                    "type": "boolean"
                },
                "include_queries": {
                    "default": true,
                    "description": "If enabled, generate query entities associated with lineage edges. Only applicable if `use_queries_v2` is enabled.",
                    "title": "Include Queries",
                    "type": "boolean"
                },
                "include_query_usage_statistics": {
                    "default": true,
                    "description": "If enabled, generate query popularity statistics. Only applicable if `use_queries_v2` is enabled.",
                    "title": "Include Query Usage Statistics",
                    "type": "boolean"
                },
                "column_limit": {
                    "default": 300,
                    "description": "Maximum number of columns to process in a table. This is a low level config property which should be touched with care. This restriction is needed because excessively wide tables can result in failure to ingest the schema.",
                    "title": "Column Limit",
                    "type": "integer"
                },
                "lineage_use_sql_parser": {
                    "default": true,
                    "description": "Use sql parser to resolve view/table lineage.",
                    "title": "Lineage Use Sql Parser",
                    "type": "boolean"
                },
                "lineage_sql_parser_use_raw_names": {
                    "default": false,
                    "description": "This parameter ignores the lowercase pattern stipulated in the SQLParser. NOTE: Ignored if lineage_use_sql_parser is False.",
                    "title": "Lineage Sql Parser Use Raw Names",
                    "type": "boolean"
                },
                "extract_column_lineage": {
                    "default": false,
                    "description": "If enabled, generate column level lineage. Requires lineage_use_sql_parser to be enabled.",
                    "title": "Extract Column Lineage",
                    "type": "boolean"
                },
                "extract_lineage_from_catalog": {
                    "default": false,
                    "description": "This flag enables the data lineage extraction from Data Lineage API exposed by Google Data Catalog. NOTE: This extractor can't build views lineage. It's recommended to enable the view's DDL parsing. Read the docs to have more information about: https://cloud.google.com/data-catalog/docs/concepts/about-data-lineage",
                    "title": "Extract Lineage From Catalog",
                    "type": "boolean"
                },
                "extract_policy_tags_from_catalog": {
                    "default": false,
                    "description": "This flag enables the extraction of policy tags from the Google Data Catalog API. When enabled, the extractor will fetch policy tags associated with BigQuery table columns. For more information about policy tags and column-level security, refer to the documentation: https://cloud.google.com/bigquery/docs/column-level-security-intro",
                    "title": "Extract Policy Tags From Catalog",
                    "type": "boolean"
                },
                "scheme": {
                    "default": "bigquery",
                    "title": "Scheme",
                    "type": "string"
                },
                "log_page_size": {
                    "default": 1000,
                    "description": "The number of log item will be queried per page for lineage collection",
                    "exclusiveMinimum": 0,
                    "title": "Log Page Size",
                    "type": "integer"
                },
                "include_table_lineage": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Option to enable/disable lineage generation. Is enabled by default.",
                    "title": "Include Table Lineage"
                },
                "include_column_lineage_with_gcs": {
                    "default": true,
                    "description": "When enabled, column-level lineage will be extracted from the gcs.",
                    "title": "Include Column Lineage With Gcs",
                    "type": "boolean"
                },
                "max_query_duration": {
                    "default": "PT15M",
                    "description": "Correction to pad start_time and end_time with. For handling the case where the read happens within our time range but the query completion event is delayed and happens after the configured end time.",
                    "format": "duration",
                    "title": "Max Query Duration",
                    "type": "string"
                },
                "bigquery_audit_metadata_datasets": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A list of datasets that contain a table named cloudaudit_googleapis_com_data_access which contain BigQuery audit logs, specifically, those containing BigQueryAuditMetadata. It is recommended that the project of the dataset is also specified, for example, projectA.datasetB.",
                    "title": "Bigquery Audit Metadata Datasets"
                },
                "use_exported_bigquery_audit_metadata": {
                    "default": false,
                    "description": "When configured, use BigQueryAuditMetadata in bigquery_audit_metadata_datasets to compute lineage information.",
                    "title": "Use Exported Bigquery Audit Metadata",
                    "type": "boolean"
                },
                "use_date_sharded_audit_log_tables": {
                    "default": false,
                    "description": "Whether to read date sharded tables or time partitioned tables when extracting usage from exported audit logs.",
                    "title": "Use Date Sharded Audit Log Tables",
                    "type": "boolean"
                },
                "upstream_lineage_in_report": {
                    "default": false,
                    "description": "Useful for debugging lineage information. Set to True to see the raw lineage created internally. Only works with legacy approach (`use_queries_v2: False`).",
                    "title": "Upstream Lineage In Report",
                    "type": "boolean"
                },
                "exclude_empty_projects": {
                    "default": false,
                    "description": "Option to exclude empty projects from being ingested.",
                    "title": "Exclude Empty Projects",
                    "type": "boolean"
                },
                "max_threads_dataset_parallelism": {
                    "default": 20,
                    "description": "Number of worker threads to use to parallelize BigQuery Dataset Metadata Extraction. Set to 1 to disable.",
                    "title": "Max Threads Dataset Parallelism",
                    "type": "integer"
                },
                "region_qualifiers": {
                    "default": [
                        "region-us",
                        "region-eu"
                    ],
                    "description": "BigQuery regions to be scanned for bigquery jobs when using `use_queries_v2`. See [this](https://cloud.google.com/bigquery/docs/information-schema-jobs#scope_and_syntax) for details.",
                    "items": {
                        "type": "string"
                    },
                    "title": "Region Qualifiers",
                    "type": "array"
                }
            },
            "title": "BigQueryV2Config",
            "type": "object"
        },
        "clickhouse": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "clickhouse"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/clickhouse_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "clickhouse_config": {
            "additionalProperties": false,
            "properties": {
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance_map": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A holder for platform -> platform_instance mappings to generate correct dataset urns",
                    "title": "Platform Instance Map"
                },
                "bucket_duration": {
                    "$ref": "#/$defs/BucketDuration",
                    "default": "DAY",
                    "description": "Size of the time window to aggregate usage stats."
                },
                "end_time": {
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "format": "date-time",
                    "title": "End Time",
                    "type": "string"
                },
                "start_time": {
                    "default": null,
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "format": "date-time",
                    "title": "Start Time",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "default": "",
                    "description": "password",
                    "format": "password",
                    "title": "Password",
                    "type": "string",
                    "writeOnly": true
                },
                "host_port": {
                    "default": "localhost:8123",
                    "description": "ClickHouse host URL.",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "database (catalog)",
                    "title": "Database"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for databases to filter in ingestion."
                },
                "secure": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "[deprecated] Use uri_opts instead.",
                    "title": "Secure"
                },
                "protocol": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "[deprecated] Use uri_opts instead.",
                    "title": "Protocol"
                },
                "uri_opts": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "default": {},
                    "description": "The part of the URI and it's used to provide additional configuration options or parameters for the database connection.",
                    "title": "Uri Opts",
                    "type": "object"
                },
                "include_table_lineage": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Whether table lineage should be ingested.",
                    "title": "Include Table Lineage"
                },
                "include_materialized_views": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "",
                    "title": "Include Materialized Views"
                }
            },
            "title": "ClickHouseConfig",
            "type": "object"
        },
        "sac": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "sac"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/sac_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "sac_config": {
            "additionalProperties": false,
            "properties": {
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Stateful ingestion related configs"
                },
                "tenant_url": {
                    "description": "URL of the SAP Analytics Cloud tenant",
                    "title": "Tenant Url",
                    "type": "string"
                },
                "token_url": {
                    "description": "URL of the OAuth token endpoint of the SAP Analytics Cloud tenant",
                    "title": "Token Url",
                    "type": "string"
                },
                "client_id": {
                    "description": "Client ID for the OAuth authentication",
                    "title": "Client Id",
                    "type": "string"
                },
                "client_secret": {
                    "description": "Client secret for the OAuth authentication",
                    "format": "password",
                    "title": "Client Secret",
                    "type": "string",
                    "writeOnly": true
                },
                "ingest_stories": {
                    "default": true,
                    "description": "Controls whether Stories should be ingested",
                    "title": "Ingest Stories",
                    "type": "boolean"
                },
                "ingest_applications": {
                    "default": true,
                    "description": "Controls whether Analytic Applications should be ingested",
                    "title": "Ingest Applications",
                    "type": "boolean"
                },
                "ingest_import_data_model_schema_metadata": {
                    "default": true,
                    "description": "Controls whether schema metadata of Import Data Models should be ingested (ingesting schema metadata of Import Data Models significantly increases overall ingestion time)",
                    "title": "Ingest Import Data Model Schema Metadata",
                    "type": "boolean"
                },
                "resource_id_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Patterns for selecting resource ids that are to be included"
                },
                "resource_name_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Patterns for selecting resource names that are to be included"
                },
                "folder_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Patterns for selecting folders that are to be included"
                },
                "connection_mapping": {
                    "additionalProperties": {
                        "$ref": "#/$defs/ConnectionMappingConfig"
                    },
                    "default": {},
                    "description": "Custom mappings for connections",
                    "title": "Connection Mapping",
                    "type": "object"
                },
                "query_name_template": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "QUERY/{name}",
                    "description": "Template for generating dataset urns of consumed queries, the placeholder {query} can be used within the template for inserting the name of the query",
                    "title": "Query Name Template"
                }
            },
            "required": [
                "tenant_url",
                "token_url",
                "client_id",
                "client_secret"
            ],
            "title": "SACSourceConfig",
            "type": "object"
        },
        "mysql": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "mysql"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/mysql_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "mysql_config": {
            "additionalProperties": false,
            "properties": {
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "default": "localhost:3306",
                    "description": "MySQL host URL.",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "database (catalog)",
                    "title": "Database"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for databases to filter in ingestion."
                },
                "auth_mode": {
                    "$ref": "#/$defs/MySQLAuthMode",
                    "default": "PASSWORD",
                    "description": "Authentication mode to use for the MySQL connection. Options are 'PASSWORD' (default) for standard username/password authentication, or 'AWS_IAM' for AWS RDS IAM authentication."
                },
                "aws_config": {
                    "$ref": "#/$defs/AwsConnectionConfig",
                    "description": "AWS configuration for RDS IAM authentication (only used when auth_mode is AWS_IAM). Provides full control over AWS credentials, region, profiles, role assumption, retry logic, and proxy settings. If not explicitly configured, boto3 will automatically use the default credential chain and region from environment variables (AWS_DEFAULT_REGION, AWS_REGION), AWS config files (~/.aws/config), or IAM role metadata."
                },
                "include_stored_procedures": {
                    "default": true,
                    "description": "Include ingest of stored procedures.",
                    "title": "Include Stored Procedures",
                    "type": "boolean"
                },
                "procedure_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for stored procedures to filter in ingestion.Specify regex to match the entire procedure name in database.schema.procedure_name format. e.g. to match all procedures starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                }
            },
            "title": "MySQLConfig",
            "type": "object"
        },
        "excel": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "excel"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/excel_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "excel_config": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Configuration for stateful ingestion and stale metadata removal."
                },
                "path_list": {
                    "description": "List of paths to Excel files or folders to ingest.",
                    "items": {
                        "type": "string"
                    },
                    "title": "Path List",
                    "type": "array"
                },
                "path_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for file paths to filter in ingestion."
                },
                "aws_config": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AwsConnectionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS configuration"
                },
                "use_s3_bucket_tags": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Whether or not to create tags in datahub from the s3 bucket",
                    "title": "Use S3 Bucket Tags"
                },
                "use_s3_object_tags": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Whether or not to create tags in datahub from the s3 object",
                    "title": "Use S3 Object Tags"
                },
                "verify_ssl": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "default": true,
                    "description": "Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use.",
                    "title": "Verify Ssl"
                },
                "azure_config": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AzureConnectionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Azure configuration"
                },
                "use_abs_blob_tags": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Whether to create tags in datahub from the abs blob tags",
                    "title": "Use Abs Blob Tags"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Enable to convert the Excel asset urns to lowercase",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "active_sheet_only": {
                    "default": false,
                    "description": "Enable to only ingest the active sheet of the workbook. If not set, all sheets will be ingested.",
                    "title": "Active Sheet Only",
                    "type": "boolean"
                },
                "worksheet_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for worksheets to ingest. Worksheets are specified as 'filename_without_extension.worksheet_name'. For example to allow the worksheet Sheet1 from file report.xlsx, use the pattern: 'report.Sheet1'."
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for worksheets to profile. Worksheets are specified as 'filename_without_extension.worksheet_name'. For example to allow the worksheet Sheet1 from file report.xlsx, use the pattern: 'report.Sheet1'."
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "description": "Configuration for profiling"
                }
            },
            "required": [
                "path_list"
            ],
            "title": "ExcelSourceConfig",
            "type": "object"
        },
        "datahub": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "datahub"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/datahub_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "datahub_config": {
            "properties": {
                "stateful_ingestion": {
                    "$ref": "#/$defs/StatefulIngestionConfig",
                    "default": {
                        "enabled": true,
                        "max_checkpoint_state_size": 16777216,
                        "state_provider": {
                            "config": {},
                            "type": "datahub"
                        },
                        "ignore_old_state": false,
                        "ignore_new_state": false
                    },
                    "description": "Stateful Ingestion Config"
                },
                "database_connection": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SQLAlchemyConnectionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Database connection config"
                },
                "kafka_connection": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/KafkaConsumerConnectionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Kafka connection config"
                },
                "include_all_versions": {
                    "default": false,
                    "description": "If enabled, include all versions of each aspect. Otherwise, only include the latest version of each aspect. ",
                    "title": "Include All Versions",
                    "type": "boolean"
                },
                "include_soft_deleted_entities": {
                    "default": true,
                    "description": "If enabled, include entities that have been soft deleted. Otherwise, include all entities regardless of removal status. ",
                    "title": "Include Soft Deleted Entities",
                    "type": "boolean"
                },
                "exclude_aspects": {
                    "default": [
                        "dataHubIngestionSourceInfo",
                        "dataHubExecutionRequestInput",
                        "dataHubSecretKey",
                        "dataHubIngestionSourceKey",
                        "globalSettingsKey",
                        "dataHubExecutionRequestResult",
                        "datahubIngestionCheckpoint",
                        "globalSettingsInfo",
                        "dataHubSecretValue",
                        "dataHubExecutionRequestKey",
                        "testResults",
                        "dataHubExecutionRequestSignal",
                        "datahubIngestionRunSummary"
                    ],
                    "description": "Set of aspect names to exclude from ingestion",
                    "items": {
                        "type": "string"
                    },
                    "title": "Exclude Aspects",
                    "type": "array",
                    "uniqueItems": true
                },
                "database_query_batch_size": {
                    "default": 10000,
                    "description": "Number of records to fetch from the database at a time",
                    "title": "Database Query Batch Size",
                    "type": "integer"
                },
                "database_table_name": {
                    "default": "metadata_aspect_v2",
                    "description": "Name of database table containing all versioned aspects",
                    "title": "Database Table Name",
                    "type": "string"
                },
                "kafka_topic_name": {
                    "default": "MetadataChangeLog_Timeseries_v1",
                    "description": "Name of kafka topic containing timeseries MCLs",
                    "title": "Kafka Topic Name",
                    "type": "string"
                },
                "commit_state_interval": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 1000,
                    "description": "Number of records to process before committing state",
                    "title": "Commit State Interval"
                },
                "commit_with_parse_errors": {
                    "default": false,
                    "description": "Whether to update createdon timestamp and kafka offset despite parse errors. Enable if you want to ignore the errors.",
                    "title": "Commit With Parse Errors",
                    "type": "boolean"
                },
                "urn_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    }
                },
                "drop_duplicate_schema_fields": {
                    "default": false,
                    "description": "Whether to drop duplicate schema fields in the schemaMetadata aspect. Useful if the source system has duplicate field paths in the db, but we're pushing to a system with server-side duplicate checking.",
                    "title": "Drop Duplicate Schema Fields",
                    "type": "boolean"
                },
                "query_timeout": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Timeout for each query in seconds. ",
                    "title": "Query Timeout"
                },
                "preserve_system_metadata": {
                    "default": true,
                    "description": "Copy system metadata from the source system",
                    "title": "Preserve System Metadata",
                    "type": "boolean"
                }
            },
            "title": "DataHubSourceConfig",
            "type": "object"
        },
        "mongodb": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "mongodb"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/mongodb_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "mongodb_config": {
            "additionalProperties": false,
            "properties": {
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "connect_uri": {
                    "default": "mongodb://localhost",
                    "description": "MongoDB connection URI.",
                    "title": "Connect Uri",
                    "type": "string"
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "MongoDB username.",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "MongoDB password.",
                    "title": "Password"
                },
                "authMechanism": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "MongoDB authentication mechanism.",
                    "title": "Authmechanism"
                },
                "options": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "Additional options to pass to `pymongo.MongoClient()`.",
                    "title": "Options",
                    "type": "object"
                },
                "enableSchemaInference": {
                    "default": true,
                    "description": "Whether to infer schemas. ",
                    "title": "Enableschemainference",
                    "type": "boolean"
                },
                "schemaSamplingSize": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 1000,
                    "description": "Number of documents to use when inferring schema size. If set to `null`, all documents will be scanned.",
                    "title": "Schemasamplingsize"
                },
                "useRandomSampling": {
                    "default": true,
                    "description": "If documents for schema inference should be randomly selected. If `False`, documents will be selected from start.",
                    "title": "Userandomsampling",
                    "type": "boolean"
                },
                "maxSchemaSize": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 300,
                    "description": "Maximum number of fields to include in the schema.",
                    "title": "Maxschemasize"
                },
                "maxDocumentSize": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 16793600,
                    "description": "",
                    "title": "Maxdocumentsize"
                },
                "hostingEnvironment": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/HostingEnvironment"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "SELF_HOSTED",
                    "description": "Hosting environment of MongoDB, default is SELF_HOSTED, currently support `SELF_HOSTED`, `ATLAS`, `AWS_DOCUMENTDB`"
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for databases to filter in ingestion."
                },
                "collection_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for collections to filter in ingestion."
                }
            },
            "title": "MongoDBConfig",
            "type": "object"
        },
        "powerbi": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "powerbi"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/powerbi_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "powerbi_config": {
            "additionalProperties": false,
            "properties": {
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "PowerBI Stateful Ingestion Config."
                },
                "tenant_id": {
                    "description": "PowerBI tenant identifier",
                    "title": "Tenant Id",
                    "type": "string"
                },
                "workspace_id_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter PowerBI workspaces in ingestion by ID. By default all IDs are allowed unless they are filtered by name using 'workspace_name_pattern'. Note: This field works in conjunction with 'workspace_type_filter' and both must be considered when filtering workspaces."
                },
                "workspace_name_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter PowerBI workspaces in ingestion by name. By default all names are allowed unless they are filtered by ID using 'workspace_id_pattern'. Note: This field works in conjunction with 'workspace_type_filter' and both must be considered when filtering workspaces."
                },
                "server_to_platform_instance": {
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "$ref": "#/$defs/PlatformDetail"
                            },
                            {
                                "$ref": "#/$defs/DataBricksPlatformDetail"
                            }
                        ]
                    },
                    "default": {},
                    "description": "A mapping of PowerBI datasource's server i.e host[:port] to Data platform instance. :port is optional and only needed if your datasource server is running on non-standard port. For Google BigQuery the datasource's server is google bigquery project name. For Databricks Unity Catalog the datasource's server is workspace FQDN.",
                    "title": "Server To Platform Instance",
                    "type": "object"
                },
                "dsn_to_platform_name": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "default": {},
                    "description": "A mapping of ODBC DSN to DataHub data platform name. For example with an ODBC connection string 'DSN=database' where the database type is 'PostgreSQL' you would configure the mapping as 'database: postgres'.",
                    "title": "Dsn To Platform Name",
                    "type": "object"
                },
                "dsn_to_database_schema": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "default": {},
                    "description": "A mapping of ODBC DSN to database names with optional schema names (some database platforms such a MySQL use the table name pattern 'database.table', while others use the pattern 'database.schema.table'). This mapping is used in conjunction with ODBC SQL query parsing. If SQL queries used with ODBC do not reference fully qualified tables names, then you should configure mappings for your DSNs. For example with an ODBC connection string 'DSN=database' where the database is 'prod' you would configure the mapping as 'database: prod'. If the database is 'prod' and the schema is 'data' then mapping would be 'database: prod.data'.",
                    "title": "Dsn To Database Schema",
                    "type": "object"
                },
                "client_id": {
                    "description": "Azure app client identifier",
                    "title": "Client Id",
                    "type": "string"
                },
                "client_secret": {
                    "description": "Azure app client secret",
                    "title": "Client Secret",
                    "type": "string"
                },
                "scan_timeout": {
                    "default": 60,
                    "description": "timeout for PowerBI metadata scanning",
                    "title": "Scan Timeout",
                    "type": "integer"
                },
                "scan_batch_size": {
                    "default": 1,
                    "description": "batch size for sending workspace_ids to PBI, 100 is the limit",
                    "exclusiveMinimum": 0,
                    "maximum": 100,
                    "title": "Scan Batch Size",
                    "type": "integer"
                },
                "workspace_id_as_urn_part": {
                    "default": false,
                    "description": "It is recommended to set this to True only if you have legacy workspaces based on Office 365 groups, as those workspaces can have identical names. To maintain backward compatibility, this is set to False which uses workspace name",
                    "title": "Workspace Id As Urn Part",
                    "type": "boolean"
                },
                "extract_ownership": {
                    "default": false,
                    "description": "Whether ownership should be ingested. Admin API access is required if this setting is enabled. Note that enabling this may overwrite owners that you've added inside DataHub's web application.",
                    "title": "Extract Ownership",
                    "type": "boolean"
                },
                "extract_reports": {
                    "default": true,
                    "description": "Whether reports should be ingested",
                    "title": "Extract Reports",
                    "type": "boolean"
                },
                "ownership": {
                    "$ref": "#/$defs/OwnershipMapping",
                    "default": {
                        "create_corp_user": true,
                        "use_powerbi_email": true,
                        "remove_email_suffix": false,
                        "dataset_configured_by_as_owner": false,
                        "owner_criteria": null
                    },
                    "description": "Configure how is ownership ingested"
                },
                "modified_since": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Get only recently modified workspaces based on modified_since datetime '2023-02-10T00:00:00.0000000Z', excludeInActiveWorkspaces limit to last 30 days",
                    "title": "Modified Since"
                },
                "extract_dashboards": {
                    "default": true,
                    "description": "Whether to ingest PBI Dashboard and Tiles as Datahub Dashboard and Chart",
                    "title": "Extract Dashboards",
                    "type": "boolean"
                },
                "extract_dataset_schema": {
                    "default": true,
                    "description": "Whether to ingest PBI Dataset Table columns and measures. Note: this setting must be `true` for schema extraction and column lineage to be enabled.",
                    "title": "Extract Dataset Schema",
                    "type": "boolean"
                },
                "extract_lineage": {
                    "default": true,
                    "description": "Whether lineage should be ingested between X and Y. Admin API access is required if this setting is enabled",
                    "title": "Extract Lineage",
                    "type": "boolean"
                },
                "extract_endorsements_to_tags": {
                    "default": false,
                    "description": "Whether to extract endorsements to tags, note that this may overwrite existing tags. Admin API access is required if this setting is enabled.",
                    "title": "Extract Endorsements To Tags",
                    "type": "boolean"
                },
                "filter_dataset_endorsements": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Filter and ingest datasets which are 'Certified' or 'Promoted' endorsement. If both are added, dataset which are 'Certified' or 'Promoted' will be ingested . Default setting allows all dataset to be ingested"
                },
                "extract_workspaces_to_containers": {
                    "default": true,
                    "description": "Extract workspaces to DataHub containers",
                    "title": "Extract Workspaces To Containers",
                    "type": "boolean"
                },
                "extract_datasets_to_containers": {
                    "default": false,
                    "description": "PBI tables will be grouped under a Datahub Container, the container reflect a PBI Dataset",
                    "title": "Extract Datasets To Containers",
                    "type": "boolean"
                },
                "native_query_parsing": {
                    "default": true,
                    "description": "Whether PowerBI native query should be parsed to extract lineage",
                    "title": "Native Query Parsing",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert the PowerBI assets urns to lowercase",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "convert_lineage_urns_to_lowercase": {
                    "default": true,
                    "description": "Whether to convert the urns of ingested lineage dataset to lowercase",
                    "title": "Convert Lineage Urns To Lowercase",
                    "type": "boolean"
                },
                "admin_apis_only": {
                    "default": false,
                    "description": "Retrieve metadata using PowerBI Admin API only. If this is enabled, then Report Pages will not be extracted. Admin API access is required if this setting is enabled",
                    "title": "Admin Apis Only",
                    "type": "boolean"
                },
                "extract_independent_datasets": {
                    "default": false,
                    "description": "Whether to extract datasets not used in any PowerBI visualization",
                    "title": "Extract Independent Datasets",
                    "type": "boolean"
                },
                "enable_advance_lineage_sql_construct": {
                    "default": true,
                    "description": "Whether to enable advance native sql construct for parsing like join, sub-queries. along this flag , the native_query_parsing should be enabled. By default convert_lineage_urns_to_lowercase is enabled, in-case if you have disabled it in previous ingestion execution then it may break lineageas this option generates the upstream datasets URN in lowercase.",
                    "title": "Enable Advance Lineage Sql Construct",
                    "type": "boolean"
                },
                "extract_column_level_lineage": {
                    "default": false,
                    "description": "Whether to extract column level lineage. Works only if configs `native_query_parsing`, `enable_advance_lineage_sql_construct` & `extract_lineage` are enabled.Works for M-Query where native SQL is used for transformation.",
                    "title": "Extract Column Level Lineage",
                    "type": "boolean"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered. Matched format is 'workspacename.datasetname.tablename'"
                },
                "profiling": {
                    "$ref": "#/$defs/PowerBiProfilingConfig",
                    "default": {
                        "enabled": false
                    }
                },
                "patch_metadata": {
                    "default": true,
                    "description": "Patch dashboard metadata",
                    "title": "Patch Metadata",
                    "type": "boolean"
                },
                "workspace_type_filter": {
                    "default": [
                        "Workspace"
                    ],
                    "description": "Ingest the metadata of the workspace where the workspace type corresponds to the specified workspace_type_filter. Note: This field works in conjunction with 'workspace_id_pattern'. Both must be matched for a workspace to be processed.",
                    "items": {
                        "enum": [
                            "Workspace",
                            "PersonalGroup",
                            "Personal",
                            "AdminWorkspace",
                            "AdminInsights"
                        ],
                        "type": "string"
                    },
                    "title": "Workspace Type Filter",
                    "type": "array"
                },
                "include_workspace_name_in_dataset_urn": {
                    "default": false,
                    "description": "It is recommended to set this to true, as it helps prevent the overwriting of datasets.Read section #11560 at https://docs.datahub.com/docs/how/updating-datahub/ before enabling this option.To maintain backward compatibility, this is set to False.",
                    "title": "Include Workspace Name In Dataset Urn",
                    "type": "boolean"
                },
                "extract_app": {
                    "default": false,
                    "description": "Whether to ingest workspace app. Requires DataHub server 0.14.2+.",
                    "title": "Extract App",
                    "type": "boolean"
                },
                "m_query_parse_timeout": {
                    "default": 70,
                    "description": "Timeout for PowerBI M-query parsing in seconds. Table-level lineage is determined by analyzing the M-query expression. Increase this value if you encounter the 'M-Query Parsing Timeout' message in the connector report.",
                    "title": "M Query Parse Timeout",
                    "type": "integer"
                }
            },
            "required": [
                "tenant_id",
                "client_id",
                "client_secret"
            ],
            "title": "PowerBiDashboardSourceConfig",
            "type": "object"
        },
        "okta": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "okta"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/okta_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "okta_config": {
            "properties": {
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Okta Stateful Ingestion Config."
                },
                "okta_domain": {
                    "description": "The location of your Okta Domain, without a protocol. Can be found in Okta Developer console. e.g. dev-33231928.okta.com",
                    "title": "Okta Domain",
                    "type": "string"
                },
                "okta_api_token": {
                    "description": "An API token generated for the DataHub application inside your Okta Developer Console. e.g. 00be4R_M2MzDqXawbWgfKGpKee0kuEOfX1RCQSRx00",
                    "title": "Okta Api Token",
                    "type": "string"
                },
                "ingest_users": {
                    "default": true,
                    "description": "Whether users should be ingested into DataHub.",
                    "title": "Ingest Users",
                    "type": "boolean"
                },
                "ingest_groups": {
                    "default": true,
                    "description": "Whether groups should be ingested into DataHub.",
                    "title": "Ingest Groups",
                    "type": "boolean"
                },
                "ingest_group_membership": {
                    "default": true,
                    "description": "Whether group membership should be ingested into DataHub. ingest_groups must be True if this is True.",
                    "title": "Ingest Group Membership",
                    "type": "boolean"
                },
                "ingest_groups_users": {
                    "default": true,
                    "description": "Only ingest users belonging to the selected groups. This option is only useful when `ingest_users` is set to False and `ingest_group_membership` to True.",
                    "title": "Ingest Groups Users",
                    "type": "boolean"
                },
                "okta_profile_to_username_attr": {
                    "default": "email",
                    "description": "Which Okta User Profile attribute to use as input to DataHub username mapping. Common values used are - login, email.",
                    "title": "Okta Profile To Username Attr",
                    "type": "string"
                },
                "okta_profile_to_username_regex": {
                    "default": "(.*)",
                    "description": "A regex used to parse the DataHub username from the attribute specified in `okta_profile_to_username_attr`.",
                    "title": "Okta Profile To Username Regex",
                    "type": "string"
                },
                "okta_profile_to_group_name_attr": {
                    "default": "name",
                    "description": "Which Okta Group Profile attribute to use as input to DataHub group name mapping.",
                    "title": "Okta Profile To Group Name Attr",
                    "type": "string"
                },
                "okta_profile_to_group_name_regex": {
                    "default": "(.*)",
                    "description": "A regex used to parse the DataHub group name from the attribute specified in `okta_profile_to_group_name_attr`.",
                    "title": "Okta Profile To Group Name Regex",
                    "type": "string"
                },
                "include_deprovisioned_users": {
                    "default": false,
                    "description": "Whether to ingest users in the DEPROVISIONED state from Okta.",
                    "title": "Include Deprovisioned Users",
                    "type": "boolean"
                },
                "include_suspended_users": {
                    "default": false,
                    "description": "Whether to ingest users in the SUSPENDED state from Okta.",
                    "title": "Include Suspended Users",
                    "type": "boolean"
                },
                "page_size": {
                    "default": 100,
                    "description": "The number of entities requested from Okta's REST APIs in one request.",
                    "title": "Page Size",
                    "type": "integer"
                },
                "delay_seconds": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "default": 0.01,
                    "description": "Number of seconds to wait between calls to Okta's REST APIs. (Okta rate limits). Defaults to 10ms.",
                    "title": "Delay Seconds"
                },
                "okta_users_filter": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Okta filter expression (not regex) for ingesting users. Only one of `okta_users_filter` and `okta_users_search` can be set. See (https://developer.okta.com/docs/reference/api/users/#list-users-with-a-filter) for more info.",
                    "title": "Okta Users Filter"
                },
                "okta_users_search": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Okta search expression (not regex) for ingesting users. Only one of `okta_users_filter` and `okta_users_search` can be set. See (https://developer.okta.com/docs/reference/api/users/#list-users-with-search) for more info.",
                    "title": "Okta Users Search"
                },
                "okta_groups_filter": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Okta filter expression (not regex) for ingesting groups. Only one of `okta_groups_filter` and `okta_groups_search` can be set. See (https://developer.okta.com/docs/reference/api/groups/#filters) for more info.",
                    "title": "Okta Groups Filter"
                },
                "okta_groups_search": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Okta search expression (not regex) for ingesting groups. Only one of `okta_groups_filter` and `okta_groups_search` can be set. See (https://developer.okta.com/docs/reference/api/groups/#list-groups-with-search) for more info.",
                    "title": "Okta Groups Search"
                },
                "skip_users_without_a_group": {
                    "default": false,
                    "description": "Whether to only ingest users that are members of groups. If this is set to False, all users will be ingested regardless of group membership.",
                    "title": "Skip Users Without A Group",
                    "type": "boolean"
                },
                "mask_group_id": {
                    "default": true,
                    "title": "Mask Group Id",
                    "type": "boolean"
                },
                "mask_user_id": {
                    "default": true,
                    "title": "Mask User Id",
                    "type": "boolean"
                }
            },
            "required": [
                "okta_domain",
                "okta_api_token"
            ],
            "title": "OktaConfig",
            "type": "object"
        },
        "mariadb": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "mariadb"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/mariadb_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "mariadb_config": {
            "additionalProperties": false,
            "properties": {
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "default": "localhost:3306",
                    "description": "MySQL host URL.",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "database (catalog)",
                    "title": "Database"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for databases to filter in ingestion."
                },
                "auth_mode": {
                    "$ref": "#/$defs/MySQLAuthMode",
                    "default": "PASSWORD",
                    "description": "Authentication mode to use for the MySQL connection. Options are 'PASSWORD' (default) for standard username/password authentication, or 'AWS_IAM' for AWS RDS IAM authentication."
                },
                "aws_config": {
                    "$ref": "#/$defs/AwsConnectionConfig",
                    "description": "AWS configuration for RDS IAM authentication (only used when auth_mode is AWS_IAM). Provides full control over AWS credentials, region, profiles, role assumption, retry logic, and proxy settings. If not explicitly configured, boto3 will automatically use the default credential chain and region from environment variables (AWS_DEFAULT_REGION, AWS_REGION), AWS config files (~/.aws/config), or IAM role metadata."
                },
                "include_stored_procedures": {
                    "default": true,
                    "description": "Include ingest of stored procedures.",
                    "title": "Include Stored Procedures",
                    "type": "boolean"
                },
                "procedure_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for stored procedures to filter in ingestion.Specify regex to match the entire procedure name in database.schema.procedure_name format. e.g. to match all procedures starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                }
            },
            "title": "MySQLConfig",
            "type": "object"
        },
        "delta-lake": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "delta-lake"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/delta-lake_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "delta-lake_config": {
            "additionalProperties": false,
            "properties": {
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Stateful Ingestion Config with stale metadata removal"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to",
                    "title": "Platform Instance"
                },
                "base_path": {
                    "description": "Path to table (s3 or local file system). If path is not a delta table path then all subfolders will be scanned to detect and ingest delta tables.",
                    "title": "Base Path",
                    "type": "string"
                },
                "relative_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "If set, delta-tables will be searched at location '<base_path>/<relative_path>' and URNs will be created using relative_path only.",
                    "title": "Relative Path"
                },
                "platform": {
                    "const": "delta-lake",
                    "default": "delta-lake",
                    "description": "The platform that this source connects to",
                    "title": "Platform",
                    "type": "string"
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for tables to filter in ingestion."
                },
                "version_history_lookback": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 1,
                    "description": "Number of previous version histories to be ingested. Defaults to 1. If set to -1 all version history will be ingested.",
                    "title": "Version History Lookback"
                },
                "require_files": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Whether DeltaTable should track files. Consider setting this to `False` for large delta tables, resulting in significant memory reduction for ingestion process.When set to `False`, number_of_files in delta table can not be reported.",
                    "title": "Require Files"
                },
                "s3": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/S3"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                }
            },
            "required": [
                "base_path"
            ],
            "title": "DeltaLakeSourceConfig",
            "type": "object"
        },
        "abs": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "abs"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/abs_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "abs_config": {
            "additionalProperties": false,
            "properties": {
                "path_specs": {
                    "description": "List of PathSpec. See [below](#path-spec) the details about PathSpec",
                    "items": {
                        "$ref": "#/$defs/PathSpec"
                    },
                    "title": "Path Specs",
                    "type": "array"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "platform": {
                    "default": "",
                    "description": "The platform that this source connects to (either 'abs' or 'file'). If not specified, the platform will be inferred from the path_specs.",
                    "title": "Platform",
                    "type": "string"
                },
                "azure_config": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AzureConnectionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Azure configuration"
                },
                "use_abs_container_properties": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Whether to create tags in datahub from the abs container properties",
                    "title": "Use Abs Container Properties"
                },
                "use_abs_blob_tags": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Whether to create tags in datahub from the abs blob tags",
                    "title": "Use Abs Blob Tags"
                },
                "use_abs_blob_properties": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Whether to create tags in datahub from the abs blob properties",
                    "title": "Use Abs Blob Properties"
                },
                "profile_patterns": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for tables to profile "
                },
                "profiling": {
                    "$ref": "#/$defs/DataLakeProfilerConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "profile_table_level_only": false,
                        "max_number_of_fields_to_profile": null,
                        "include_field_null_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": true,
                        "include_field_distinct_value_frequencies": true,
                        "include_field_histogram": true,
                        "include_field_sample_values": true
                    },
                    "description": "Data profiling configuration"
                },
                "spark_driver_memory": {
                    "default": "4g",
                    "description": "Max amount of memory to grant Spark.",
                    "title": "Spark Driver Memory",
                    "type": "string"
                },
                "spark_config": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "Spark configuration properties to set on the SparkSession. Put config property names into quotes. For example: '\"spark.executor.memory\": \"2g\"'",
                    "title": "Spark Config",
                    "type": "object"
                },
                "max_rows": {
                    "default": 100,
                    "description": "Maximum number of rows to use when inferring schemas for TSV and CSV files.",
                    "title": "Max Rows",
                    "type": "integer"
                },
                "add_partition_columns_to_schema": {
                    "default": false,
                    "description": "Whether to add partition fields to the schema.",
                    "title": "Add Partition Columns To Schema",
                    "type": "boolean"
                },
                "verify_ssl": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "default": true,
                    "description": "Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use.",
                    "title": "Verify Ssl"
                },
                "number_of_files_to_sample": {
                    "default": 100,
                    "description": "Number of files to list to sample for schema inference. This will be ignored if sample_files is set to False in the pathspec.",
                    "title": "Number Of Files To Sample",
                    "type": "integer"
                }
            },
            "required": [
                "path_specs"
            ],
            "title": "DataLakeSourceConfig",
            "type": "object"
        },
        "presto-on-hive": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "presto-on-hive"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/presto-on-hive_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "presto-on-hive_config": {
            "additionalProperties": false,
            "properties": {
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'"
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "default": "localhost:3306",
                    "description": "Host URL and port to connect to. Example: localhost:3306",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "database (catalog)",
                    "title": "Database"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "views_where_clause_suffix": {
                    "default": "",
                    "description": "Where clause to specify what Presto views should be ingested.",
                    "title": "Views Where Clause Suffix",
                    "type": "string"
                },
                "tables_where_clause_suffix": {
                    "default": "",
                    "description": "Where clause to specify what Hive tables should be ingested.",
                    "title": "Tables Where Clause Suffix",
                    "type": "string"
                },
                "schemas_where_clause_suffix": {
                    "default": "",
                    "description": "Where clause to specify what Hive schemas should be ingested.",
                    "title": "Schemas Where Clause Suffix",
                    "type": "string"
                },
                "ingestion_job_id": {
                    "default": "",
                    "title": "Ingestion Job Id",
                    "type": "string"
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for hive/presto database to filter in ingestion. Specify regex to only match the database name. e.g. to match all tables in database analytics, use the regex 'analytics'"
                },
                "metastore_db_name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Name of the Hive metastore's database (usually: metastore). For backward compatibility, if this field is not provided, the database field will be used. If both the 'database' and 'metastore_db_name' fields are set then the 'database' field will be used to filter the hive/presto/trino database",
                    "title": "Metastore Db Name"
                },
                "mode": {
                    "$ref": "#/$defs/HiveMetastoreConfigMode",
                    "default": "hive",
                    "description": "The ingested data will be stored under this platform. Valid options: ['hive', 'presto', 'presto-on-hive', 'trino']"
                },
                "use_catalog_subtype": {
                    "default": true,
                    "description": "Container Subtype name to be 'Database' or 'Catalog' Valid options: ['True', 'False']",
                    "title": "Use Catalog Subtype",
                    "type": "boolean"
                },
                "use_dataset_pascalcase_subtype": {
                    "default": false,
                    "description": "Dataset Subtype name to be 'Table' or 'View' Valid options: ['True', 'False']",
                    "title": "Use Dataset Pascalcase Subtype",
                    "type": "boolean"
                },
                "include_catalog_name_in_ids": {
                    "default": false,
                    "description": "Add the Presto catalog name (e.g. hive) to the generated dataset urns. `urn:li:dataset:(urn:li:dataPlatform:hive,hive.user.logging_events,PROD)` versus `urn:li:dataset:(urn:li:dataPlatform:hive,user.logging_events,PROD)`",
                    "title": "Include Catalog Name In Ids",
                    "type": "boolean"
                },
                "enable_properties_merge": {
                    "default": true,
                    "description": "By default, the connector enables merging of properties with what exists on the server. Set this to False to enable the default connector behavior of overwriting properties on each ingestion.",
                    "title": "Enable Properties Merge",
                    "type": "boolean"
                },
                "simplify_nested_field_paths": {
                    "default": false,
                    "description": "Simplify v2 field paths to v1 by default. If the schema has Union or Array types, still falls back to v2",
                    "title": "Simplify Nested Field Paths",
                    "type": "boolean"
                }
            },
            "title": "HiveMetastore",
            "type": "object"
        },
        "datahub-lineage-file": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "datahub-lineage-file"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/datahub-lineage-file_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "datahub-lineage-file_config": {
            "additionalProperties": false,
            "properties": {
                "file": {
                    "description": "File path or URL to lineage file to ingest.",
                    "title": "File",
                    "type": "string"
                },
                "preserve_upstream": {
                    "default": true,
                    "description": "Whether we want to query datahub-gms for upstream data. False means it will hard replace upstream data for a given entity. True means it will query the backend for existing upstreams and include it in the ingestion run",
                    "title": "Preserve Upstream",
                    "type": "boolean"
                }
            },
            "required": [
                "file"
            ],
            "title": "LineageFileSourceConfig",
            "type": "object"
        },
        "hive-metastore": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "hive-metastore"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/hive-metastore_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "hive-metastore_config": {
            "additionalProperties": false,
            "properties": {
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'"
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "default": "localhost:3306",
                    "description": "Host URL and port to connect to. Example: localhost:3306",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "database (catalog)",
                    "title": "Database"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "views_where_clause_suffix": {
                    "default": "",
                    "description": "Where clause to specify what Presto views should be ingested.",
                    "title": "Views Where Clause Suffix",
                    "type": "string"
                },
                "tables_where_clause_suffix": {
                    "default": "",
                    "description": "Where clause to specify what Hive tables should be ingested.",
                    "title": "Tables Where Clause Suffix",
                    "type": "string"
                },
                "schemas_where_clause_suffix": {
                    "default": "",
                    "description": "Where clause to specify what Hive schemas should be ingested.",
                    "title": "Schemas Where Clause Suffix",
                    "type": "string"
                },
                "ingestion_job_id": {
                    "default": "",
                    "title": "Ingestion Job Id",
                    "type": "string"
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for hive/presto database to filter in ingestion. Specify regex to only match the database name. e.g. to match all tables in database analytics, use the regex 'analytics'"
                },
                "metastore_db_name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Name of the Hive metastore's database (usually: metastore). For backward compatibility, if this field is not provided, the database field will be used. If both the 'database' and 'metastore_db_name' fields are set then the 'database' field will be used to filter the hive/presto/trino database",
                    "title": "Metastore Db Name"
                },
                "mode": {
                    "$ref": "#/$defs/HiveMetastoreConfigMode",
                    "default": "hive",
                    "description": "The ingested data will be stored under this platform. Valid options: ['hive', 'presto', 'presto-on-hive', 'trino']"
                },
                "use_catalog_subtype": {
                    "default": true,
                    "description": "Container Subtype name to be 'Database' or 'Catalog' Valid options: ['True', 'False']",
                    "title": "Use Catalog Subtype",
                    "type": "boolean"
                },
                "use_dataset_pascalcase_subtype": {
                    "default": false,
                    "description": "Dataset Subtype name to be 'Table' or 'View' Valid options: ['True', 'False']",
                    "title": "Use Dataset Pascalcase Subtype",
                    "type": "boolean"
                },
                "include_catalog_name_in_ids": {
                    "default": false,
                    "description": "Add the Presto catalog name (e.g. hive) to the generated dataset urns. `urn:li:dataset:(urn:li:dataPlatform:hive,hive.user.logging_events,PROD)` versus `urn:li:dataset:(urn:li:dataPlatform:hive,user.logging_events,PROD)`",
                    "title": "Include Catalog Name In Ids",
                    "type": "boolean"
                },
                "enable_properties_merge": {
                    "default": true,
                    "description": "By default, the connector enables merging of properties with what exists on the server. Set this to False to enable the default connector behavior of overwriting properties on each ingestion.",
                    "title": "Enable Properties Merge",
                    "type": "boolean"
                },
                "simplify_nested_field_paths": {
                    "default": false,
                    "description": "Simplify v2 field paths to v1 by default. If the schema has Union or Array types, still falls back to v2",
                    "title": "Simplify Nested Field Paths",
                    "type": "boolean"
                }
            },
            "title": "HiveMetastore",
            "type": "object"
        },
        "postgres": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "postgres"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/postgres_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "postgres_config": {
            "additionalProperties": false,
            "properties": {
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "information_schema"
                        ],
                        "ignoreCase": true
                    }
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "description": "host URL",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "database (catalog). If set to Null, all databases will be considered for ingestion.",
                    "title": "Database"
                },
                "scheme": {
                    "default": "postgresql+psycopg2",
                    "description": "database scheme",
                    "title": "Scheme",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "auth_mode": {
                    "$ref": "#/$defs/PostgresAuthMode",
                    "default": "PASSWORD",
                    "description": "Authentication mode to use for the PostgreSQL connection. Options are 'PASSWORD' (default) for standard username/password authentication, or 'AWS_IAM' for AWS RDS IAM authentication."
                },
                "aws_config": {
                    "$ref": "#/$defs/AwsConnectionConfig",
                    "description": "AWS configuration for RDS IAM authentication (only used when auth_mode is AWS_IAM). Provides full control over AWS credentials, region, profiles, role assumption, retry logic, and proxy settings. If not explicitly configured, boto3 will automatically use the default credential chain and region from environment variables (AWS_DEFAULT_REGION, AWS_REGION), AWS config files (~/.aws/config), or IAM role metadata."
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for databases to filter in ingestion. Note: this is not used if `database` or `sqlalchemy_uri` are provided."
                },
                "initial_database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "postgres",
                    "description": "Initial database used to query for the list of databases, when ingesting multiple databases. Note: this is not used if `database` or `sqlalchemy_uri` are provided.",
                    "title": "Initial Database"
                },
                "include_stored_procedures": {
                    "default": true,
                    "description": "Include ingest of stored procedures.",
                    "title": "Include Stored Procedures",
                    "type": "boolean"
                },
                "procedure_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for stored procedures to filter in ingestion.Specify regex to match the entire procedure name in database.schema.procedure_name format. e.g. to match all procedures starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                }
            },
            "required": [
                "host_port"
            ],
            "title": "PostgresConfig",
            "type": "object"
        },
        "oracle": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "oracle"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/oracle_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "oracle_config": {
            "additionalProperties": false,
            "properties": {
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'"
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "description": "host URL",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "If using, omit `service_name`.",
                    "title": "Database"
                },
                "scheme": {
                    "default": "oracle",
                    "description": "Will be set automatically to default value.",
                    "title": "Scheme",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "service_name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Oracle service name. If using, omit `database`.",
                    "title": "Service Name"
                },
                "add_database_name_to_urn": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Add oracle database name to urn, default urn is schema.table",
                    "title": "Add Database Name To Urn"
                },
                "data_dictionary_mode": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "ALL",
                    "description": "The data dictionary views mode, to extract information about schema objects ('ALL' and 'DBA' views are supported). (https://docs.oracle.com/cd/E11882_01/nav/catalog_views.htm)",
                    "title": "Data Dictionary Mode"
                },
                "enable_thick_mode": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Connection defaults to thin mode. Set to True to enable thick mode.",
                    "title": "Enable Thick Mode"
                },
                "thick_mode_lib_dir": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "If using thick mode on Windows or Mac, set thick_mode_lib_dir to the oracle client libraries path. On Linux, this value is ignored, as ldconfig or LD_LIBRARY_PATH will define the location.",
                    "title": "Thick Mode Lib Dir"
                }
            },
            "required": [
                "host_port"
            ],
            "title": "OracleConfig",
            "type": "object"
        },
        "sqlalchemy": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "sqlalchemy"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/sqlalchemy_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "sqlalchemy_config": {
            "additionalProperties": false,
            "properties": {
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'"
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "platform": {
                    "description": "Name of platform being ingested, used in constructing URNs.",
                    "title": "Platform",
                    "type": "string"
                },
                "connect_uri": {
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls",
                    "title": "Connect Uri",
                    "type": "string"
                }
            },
            "required": [
                "platform",
                "connect_uri"
            ],
            "title": "SQLAlchemyGenericConfig",
            "type": "object"
        },
        "cassandra": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "cassandra"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/cassandra_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "cassandra_config": {
            "additionalProperties": false,
            "description": "Configuration for connecting to a Cassandra or DataStax Astra DB source.",
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Configuration for stateful ingestion and stale metadata removal."
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "contact_point": {
                    "default": "localhost",
                    "description": "Domain or IP address of the Cassandra instance (excluding port).",
                    "title": "Contact Point",
                    "type": "string"
                },
                "port": {
                    "default": 9042,
                    "description": "Port number to connect to the Cassandra instance.",
                    "title": "Port",
                    "type": "integer"
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Username credential with read access to the system_schema keyspace.",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Password credential associated with the specified username.",
                    "title": "Password"
                },
                "cloud_config": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/CassandraCloudConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Configuration for cloud-based Cassandra, such as DataStax Astra DB."
                },
                "ssl_ca_certs": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Path to the CA certificate file for SSL connections.",
                    "title": "Ssl Ca Certs"
                },
                "ssl_certfile": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Path to the SSL certificate file for SSL connections.",
                    "title": "Ssl Certfile"
                },
                "ssl_keyfile": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Path to the SSL key file for SSL connections.",
                    "title": "Ssl Keyfile"
                },
                "ssl_version": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "TLS_CLIENT",
                    "description": "SSL protocol version to use for connections. Options: TLS_CLIENT, TLSv1, TLSv1_1, TLSv1_2, TLSv1_3. Defaults to TLS_CLIENT.",
                    "title": "Ssl Version"
                },
                "keyspace_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter keyspaces for ingestion."
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter keyspaces.tables for ingestion."
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to profile"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingBaseConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20
                    },
                    "description": "Configuration for profiling"
                }
            },
            "title": "CassandraSourceConfig",
            "type": "object"
        },
        "tableau": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "tableau"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/tableau_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "tableau_config": {
            "additionalProperties": false,
            "properties": {
                "page_size": {
                    "default": 10,
                    "description": "[advanced] Number of metadata objects (e.g. CustomSQLTable, PublishedDatasource, etc) to query at a time using the Tableau API.",
                    "title": "Page Size",
                    "type": "integer"
                },
                "database_server_page_size": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "[advanced] Number of database servers to query at a time using the Tableau API; fallbacks to `page_size` if not set.",
                    "title": "Database Server Page Size"
                },
                "workbook_page_size": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 1,
                    "description": "[advanced] Number of workbooks to query at a time using the Tableau API; defaults to `1` and fallbacks to `page_size` if not set.",
                    "title": "Workbook Page Size"
                },
                "sheet_page_size": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "[advanced] Number of sheets to query at a time using the Tableau API; fallbacks to `page_size` if not set.",
                    "title": "Sheet Page Size"
                },
                "dashboard_page_size": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "[advanced] Number of dashboards to query at a time using the Tableau API; fallbacks to `page_size` if not set.",
                    "title": "Dashboard Page Size"
                },
                "embedded_datasource_page_size": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "[advanced] Number of embedded datasources to query at a time using the Tableau API; fallbacks to `page_size` if not set.",
                    "title": "Embedded Datasource Page Size"
                },
                "embedded_datasource_field_upstream_page_size": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "[advanced] Number of upstream fields to query at a time for embedded datasources using the Tableau API; fallbacks to `page_size` * 10 if not set.",
                    "title": "Embedded Datasource Field Upstream Page Size"
                },
                "published_datasource_page_size": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "[advanced] Number of published datasources to query at a time using the Tableau API; fallbacks to `page_size` if not set.",
                    "title": "Published Datasource Page Size"
                },
                "published_datasource_field_upstream_page_size": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "[advanced] Number of upstream fields to query at a time for published datasources using the Tableau API; fallbacks to `page_size` * 10 if not set.",
                    "title": "Published Datasource Field Upstream Page Size"
                },
                "custom_sql_table_page_size": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "[advanced] Number of custom sql datasources to query at a time using the Tableau API; fallbacks to `page_size` if not set.",
                    "title": "Custom Sql Table Page Size"
                },
                "database_table_page_size": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "[advanced] Number of database tables to query at a time using the Tableau API; fallbacks to `page_size` if not set.",
                    "title": "Database Table Page Size"
                },
                "connect_uri": {
                    "description": "Tableau host URL.",
                    "title": "Connect Uri",
                    "type": "string"
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Tableau username, must be set if authenticating using username/password.",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Tableau password, must be set if authenticating using username/password.",
                    "title": "Password"
                },
                "token_name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Tableau token name, must be set if authenticating using a personal access token.",
                    "title": "Token Name"
                },
                "token_value": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Tableau token value, must be set if authenticating using a personal access token.",
                    "title": "Token Value"
                },
                "site": {
                    "default": "",
                    "description": "Tableau Site. Always required for Tableau Online. Use emptystring to connect with Default site on Tableau Server.",
                    "title": "Site",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "max_retries": {
                    "default": 3,
                    "description": "Number of retries for failed requests.",
                    "title": "Max Retries",
                    "type": "integer"
                },
                "ssl_verify": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "default": true,
                    "description": "Whether to verify SSL certificates. If using self-signed certificates, set to false or provide the path to the .pem certificate bundle.",
                    "title": "Ssl Verify"
                },
                "session_trust_env": {
                    "default": false,
                    "description": "Configures the trust_env property in the requests session. If set to false (default value) it will bypass proxy settings. See https://requests.readthedocs.io/en/latest/api/#requests.Session.trust_env for more information.",
                    "title": "Session Trust Env",
                    "type": "boolean"
                },
                "extract_column_level_lineage": {
                    "default": true,
                    "description": "When enabled, extracts column-level lineage from Tableau Datasources",
                    "title": "Extract Column Level Lineage",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "Environment to use in namespace when constructing URNs.",
                    "title": "Env",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": ""
                },
                "platform_instance_map": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A holder for platform -> platform_instance mappings to generate correct dataset urns",
                    "title": "Platform Instance Map"
                },
                "projects": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": [
                        "default"
                    ],
                    "description": "[deprecated] Use project_pattern instead. List of tableau projects ",
                    "title": "Projects"
                },
                "project_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "[deprecated] Use project_path_pattern instead. Filter for specific Tableau projects. For example, use 'My Project' to ingest a root-level Project with name 'My Project', or 'My Project/Nested Project' to ingest a nested Project with name 'Nested Project'. By default, all Projects nested inside a matching Project will be included in ingestion. You can both allow and deny projects based on their name using their name, or a Regex pattern. Deny patterns always take precedence over allow patterns. By default, all projects will be ingested."
                },
                "project_path_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Filters Tableau projects by their full path. For instance, 'My Project/Nested Project' targets a specific nested project named 'Nested Project'. This is also useful when you need to exclude all nested projects under a particular project. You can allow or deny projects by specifying their path or a regular expression pattern. Deny patterns always override allow patterns. By default, all projects are ingested."
                },
                "project_path_separator": {
                    "default": "/",
                    "description": "The separator used for the project_path_pattern field between project names. By default, we use a slash. You can change this if your Tableau projects contain slashes in their names, and you'd like to filter by project.",
                    "title": "Project Path Separator",
                    "type": "string"
                },
                "default_schema_map": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "default": {},
                    "description": "Default schema to use when schema is not found.",
                    "title": "Default Schema Map",
                    "type": "object"
                },
                "ingest_tags": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Ingest Tags from source. This will override Tags entered from UI",
                    "title": "Ingest Tags"
                },
                "ingest_owner": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Ingest Owner from source. This will override Owner info entered from UI",
                    "title": "Ingest Owner"
                },
                "use_email_as_username": {
                    "default": false,
                    "description": "Use email address instead of username for entity owners. Requires ingest_owner to be True.",
                    "title": "Use Email As Username",
                    "type": "boolean"
                },
                "ingest_tables_external": {
                    "default": false,
                    "description": "Ingest details for tables external to (not embedded in) tableau as entities.",
                    "title": "Ingest Tables External",
                    "type": "boolean"
                },
                "emit_all_published_datasources": {
                    "default": false,
                    "description": "Ingest all published data sources. When False (default), only ingest published data sources that belong to an ingested workbook.",
                    "title": "Emit All Published Datasources",
                    "type": "boolean"
                },
                "emit_all_embedded_datasources": {
                    "default": false,
                    "description": "Ingest all embedded data sources. When False (default), only ingest embedded data sources that belong to an ingested workbook.",
                    "title": "Emit All Embedded Datasources",
                    "type": "boolean"
                },
                "lineage_overrides": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TableauLineageOverrides"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Mappings to change generated dataset urns. Use only if you really know what you are doing."
                },
                "database_hostname_to_platform_instance_map": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Mappings to change platform instance in generated dataset urns based on database. Use only if you really know what you are doing.",
                    "title": "Database Hostname To Platform Instance Map"
                },
                "extract_usage_stats": {
                    "default": false,
                    "description": "[experimental] Extract usage statistics for dashboards and charts.",
                    "title": "Extract Usage Stats",
                    "type": "boolean"
                },
                "ingest_embed_url": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Ingest a URL to render an embedded Preview of assets within Tableau.",
                    "title": "Ingest Embed Url"
                },
                "ingest_external_links_for_dashboards": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Ingest a URL to link out to from dashboards.",
                    "title": "Ingest External Links For Dashboards"
                },
                "ingest_external_links_for_charts": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Ingest a URL to link out to from charts.",
                    "title": "Ingest External Links For Charts"
                },
                "extract_project_hierarchy": {
                    "default": true,
                    "description": "Whether to extract entire project hierarchy for nested projects.",
                    "title": "Extract Project Hierarchy",
                    "type": "boolean"
                },
                "extract_lineage_from_unsupported_custom_sql_queries": {
                    "default": true,
                    "description": "[Experimental] Extract lineage from Custom SQL queries using DataHub's SQL parser in cases where the Tableau Catalog API fails to return lineage for the query.",
                    "title": "Extract Lineage From Unsupported Custom Sql Queries",
                    "type": "boolean"
                },
                "force_extraction_of_lineage_from_custom_sql_queries": {
                    "default": false,
                    "description": "[Experimental] Force extraction of lineage from Custom SQL queries using DataHub's SQL parser, even when the Tableau Catalog API returns lineage already.",
                    "title": "Force Extraction Of Lineage From Custom Sql Queries",
                    "type": "boolean"
                },
                "sql_parsing_disable_schema_awareness": {
                    "default": false,
                    "description": "[Experimental] Ignore pre ingested tables schemas during parsing of SQL queries (allows to workaround ingestion errors when pre ingested schema and queries are out of sync)",
                    "title": "Sql Parsing Disable Schema Awareness",
                    "type": "boolean"
                },
                "ingest_multiple_sites": {
                    "default": false,
                    "description": "When enabled, ingests multiple sites the user has access to. If the user doesn't have access to the default site, specify an initial site to query in the site property. By default all sites the user has access to will be ingested. You can filter sites with the site_name_pattern property. This flag is currently only supported for Tableau Server. Tableau Cloud is not supported.",
                    "title": "Ingest Multiple Sites",
                    "type": "boolean"
                },
                "site_name_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Filter for specific Tableau sites. By default, all sites will be included in the ingestion. You can both allow and deny sites based on their name using their name, or a Regex pattern. Deny patterns always take precedence over allow patterns. This property is currently only supported for Tableau Server. Tableau Cloud is not supported. "
                },
                "add_site_container": {
                    "default": false,
                    "description": "When enabled, sites are added as containers and therefore visible in the folder structure within Datahub.",
                    "title": "Add Site Container",
                    "type": "boolean"
                },
                "permission_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/PermissionIngestionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Configuration settings for ingesting Tableau groups and their capabilities as custom properties."
                },
                "ingest_hidden_assets": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "worksheet",
                                    "dashboard"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "default": [
                        "worksheet",
                        "dashboard"
                    ],
                    "description": "When enabled, hidden worksheets and dashboards are ingested into Datahub. If a dashboard or worksheet is hidden in Tableau the luid is blank. A list of asset types can also be specified, to only ingest those hidden assets. Current options supported are 'worksheet' and 'dashboard'.",
                    "title": "Ingest Hidden Assets"
                },
                "tags_for_hidden_assets": {
                    "default": [],
                    "description": "Tags to be added to hidden dashboards and views. If a dashboard or view is hidden in Tableau the luid is blank. This can only be used with ingest_tags enabled as it will overwrite tags entered from the UI.",
                    "items": {
                        "type": "string"
                    },
                    "title": "Tags For Hidden Assets",
                    "type": "array"
                }
            },
            "required": [
                "connect_uri"
            ],
            "title": "TableauConfig",
            "type": "object"
        },
        "pulsar": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "pulsar"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/pulsar_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "pulsar_config": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "see Stateful Ingestion"
                },
                "web_service_url": {
                    "default": "http://localhost:8080",
                    "description": "The web URL for the cluster.",
                    "title": "Web Service Url",
                    "type": "string"
                },
                "timeout": {
                    "default": 5,
                    "description": "Timout setting, how long to wait for the Pulsar rest api to send data before giving up",
                    "title": "Timeout",
                    "type": "integer"
                },
                "issuer_url": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The complete URL for a Custom Authorization Server. Mandatory for OAuth based authentication.",
                    "title": "Issuer Url"
                },
                "client_id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The application's client ID",
                    "title": "Client Id"
                },
                "client_secret": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The application's client secret",
                    "title": "Client Secret"
                },
                "token": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The access token for the application. Mandatory for token based authentication.",
                    "title": "Token"
                },
                "verify_ssl": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "default": true,
                    "description": "Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use.",
                    "title": "Verify Ssl"
                },
                "tenant_patterns": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "pulsar"
                        ],
                        "ignoreCase": true
                    },
                    "description": "List of regex patterns for tenants to include/exclude from ingestion. By default all tenants are allowed."
                },
                "namespace_patterns": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "public/functions"
                        ],
                        "ignoreCase": true
                    },
                    "description": "List of regex patterns for namespaces to include/exclude from ingestion. By default the functions namespace is denied."
                },
                "topic_patterns": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "/__.*$"
                        ],
                        "ignoreCase": true
                    },
                    "description": "List of regex patterns for topics to include/exclude from ingestion. By default the Pulsar system topics are denied."
                },
                "exclude_individual_partitions": {
                    "default": true,
                    "description": "Extract each individual partitioned topic. e.g. when turned off a topic with 100 partitions will result in 100 Datasets.",
                    "title": "Exclude Individual Partitions",
                    "type": "boolean"
                },
                "tenants": {
                    "default": [],
                    "description": "Listing all tenants requires superUser role, alternative you can set a list of tenants you want to scrape using the tenant admin role",
                    "items": {
                        "type": "string"
                    },
                    "title": "Tenants",
                    "type": "array"
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "description": "Domain patterns",
                    "title": "Domain",
                    "type": "object"
                },
                "oid_config": {
                    "additionalProperties": true,
                    "description": "Placeholder for OpenId discovery document",
                    "title": "Oid Config",
                    "type": "object"
                }
            },
            "title": "PulsarSourceConfig",
            "type": "object"
        },
        "dynamodb": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "dynamodb"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/dynamodb_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "dynamodb_config": {
            "additionalProperties": false,
            "properties": {
                "aws_access_key_id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS access key ID. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "title": "Aws Access Key Id"
                },
                "aws_secret_access_key": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS secret access key. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "title": "Aws Secret Access Key"
                },
                "aws_session_token": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS session token. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "title": "Aws Session Token"
                },
                "aws_role": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "$ref": "#/$defs/AwsAssumeRoleConfig"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS roles to assume. If using the string format, the role ARN can be specified directly. If using the object format, the role can be specified in the RoleArn field and additional available arguments are the same as [boto3's STS.Client.assume_role](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html?highlight=assume_role#STS.Client.assume_role).",
                    "title": "Aws Role"
                },
                "aws_profile": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The [named profile](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html) to use from AWS credentials. Falls back to default profile if not specified and no access keys provided. Profiles are configured in ~/.aws/credentials or ~/.aws/config.",
                    "title": "Aws Profile"
                },
                "aws_region": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS region code.",
                    "title": "Aws Region"
                },
                "aws_endpoint_url": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The AWS service endpoint. This is normally [constructed automatically](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html), but can be overridden here.",
                    "title": "Aws Endpoint Url"
                },
                "aws_proxy": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A set of proxy configs to use with AWS. See the [botocore.config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html) docs for details.",
                    "title": "Aws Proxy"
                },
                "aws_retry_num": {
                    "default": 5,
                    "description": "Number of times to retry failed AWS requests. See the [botocore.retry](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/retries.html) docs for details.",
                    "title": "Aws Retry Num",
                    "type": "integer"
                },
                "aws_retry_mode": {
                    "default": "standard",
                    "description": "Retry mode to use for failed AWS requests. See the [botocore.retry](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/retries.html) docs for details.",
                    "enum": [
                        "legacy",
                        "standard",
                        "adaptive"
                    ],
                    "title": "Aws Retry Mode",
                    "type": "string"
                },
                "read_timeout": {
                    "default": 60,
                    "description": "The timeout for reading from the connection (in seconds).",
                    "title": "Read Timeout",
                    "type": "number"
                },
                "aws_advanced_config": {
                    "additionalProperties": true,
                    "description": "Advanced AWS configuration options. These are passed directly to [botocore.config.Config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html).",
                    "title": "Aws Advanced Config",
                    "type": "object"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for databases to filter in ingestion."
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. The table name format is 'region.table'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "regex patterns for tables to filter to assign domain_key. ",
                    "title": "Domain",
                    "type": "object"
                },
                "include_table_item": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "items": {
                                    "additionalProperties": true,
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "[Advanced] The primary keys of items of a table in dynamodb format the user would like to include in schema. Refer \"Advanced Configurations\" section for more details",
                    "title": "Include Table Item"
                },
                "max_schema_size": {
                    "default": 300,
                    "description": "Maximum number of fields to include in the schema.",
                    "exclusiveMinimum": 0,
                    "title": "Max Schema Size",
                    "type": "integer"
                }
            },
            "title": "DynamoDBConfig",
            "type": "object"
        },
        "sql-queries": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "sql-queries"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/sql-queries_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "sql-queries_config": {
            "additionalProperties": false,
            "properties": {
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "query_file": {
                    "description": "Path to file to ingest",
                    "title": "Query File",
                    "type": "string"
                },
                "platform": {
                    "description": "The platform for which to generate data, e.g. snowflake",
                    "title": "Platform",
                    "type": "string"
                },
                "usage": {
                    "$ref": "#/$defs/BaseUsageConfig",
                    "default": {
                        "bucket_duration": "DAY",
                        "end_time": "2025-10-24T00:46:51.227675Z",
                        "start_time": "2025-10-23T00:00:00Z",
                        "queries_character_limit": 24000,
                        "top_n_queries": 10,
                        "user_email_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "include_operational_stats": true,
                        "include_read_operational_stats": false,
                        "format_sql_queries": false,
                        "include_top_n_queries": true
                    },
                    "description": "The usage config to use when generating usage statistics"
                },
                "default_db": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The default database to use for unqualified table names",
                    "title": "Default Db"
                },
                "default_schema": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The default schema to use for unqualified table names",
                    "title": "Default Schema"
                },
                "override_dialect": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The SQL dialect to use when parsing queries. Overrides automatic dialect detection.",
                    "title": "Override Dialect"
                }
            },
            "required": [
                "query_file",
                "platform"
            ],
            "title": "SqlQueriesSourceConfig",
            "type": "object"
        },
        "openapi": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "openapi"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/openapi_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "openapi_config": {
            "additionalProperties": false,
            "properties": {
                "name": {
                    "description": "Name of ingestion.",
                    "title": "Name",
                    "type": "string"
                },
                "url": {
                    "description": "Endpoint URL. e.g. https://example.com",
                    "title": "Url",
                    "type": "string"
                },
                "swagger_file": {
                    "description": "Route for access to the swagger file. e.g. openapi.json",
                    "title": "Swagger File",
                    "type": "string"
                },
                "ignore_endpoints": {
                    "default": [],
                    "description": "List of endpoints to ignore during ingestion.",
                    "items": {},
                    "title": "Ignore Endpoints",
                    "type": "array"
                },
                "username": {
                    "default": "",
                    "description": "Username used for basic HTTP authentication.",
                    "title": "Username",
                    "type": "string"
                },
                "password": {
                    "default": "",
                    "description": "Password used for basic HTTP authentication.",
                    "title": "Password",
                    "type": "string"
                },
                "proxies": {
                    "anyOf": [
                        {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Eg. `{'http': 'http://10.10.1.10:3128', 'https': 'http://10.10.1.10:1080'}`.If authentication is required, add it to the proxy url directly e.g. `http://user:pass@10.10.1.10:3128/`.",
                    "title": "Proxies"
                },
                "forced_examples": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "If no example is provided for a route, it is possible to create one using forced_example.",
                    "title": "Forced Examples",
                    "type": "object"
                },
                "token": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Token for endpoint authentication.",
                    "title": "Token"
                },
                "bearer_token": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Bearer token for endpoint authentication.",
                    "title": "Bearer Token"
                },
                "get_token": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "Retrieving a token from the endpoint.",
                    "title": "Get Token",
                    "type": "object"
                },
                "verify_ssl": {
                    "default": true,
                    "description": "Enable SSL certificate verification",
                    "title": "Verify Ssl",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "url",
                "swagger_file"
            ],
            "title": "OpenApiConfig",
            "type": "object"
        },
        "kafka": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "kafka"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/kafka_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "kafka_config": {
            "additionalProperties": false,
            "properties": {
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "connection": {
                    "$ref": "#/$defs/KafkaConsumerConnectionConfig",
                    "default": {
                        "bootstrap": "localhost:9092",
                        "schema_registry_url": "http://localhost:8080/schema-registry/api/",
                        "schema_registry_config": {},
                        "client_timeout_seconds": 60,
                        "consumer_config": {}
                    }
                },
                "topic_patterns": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "^_.*"
                        ],
                        "ignoreCase": true
                    }
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "A map of domain names to allow deny patterns. Domains can be urn-based (`urn:li:domain:13ae4d85-d955-49fc-8474-9004c663a810`) or bare (`13ae4d85-d955-49fc-8474-9004c663a810`).",
                    "title": "Domain",
                    "type": "object"
                },
                "topic_subject_map": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "default": {},
                    "description": "Provides the mapping for the `key` and the `value` schemas of a topic to the corresponding schema registry subject name. Each entry of this map has the form `<topic_name>-key`:`<schema_registry_subject_name_for_key_schema>` and `<topic_name>-value`:`<schema_registry_subject_name_for_value_schema>` for the key and the value schemas associated with the topic, respectively. This parameter is mandatory when the [RecordNameStrategy](https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#how-the-naming-strategies-work) is used as the subject naming strategy in the kafka schema registry. NOTE: When provided, this overrides the default subject name resolution even when the `TopicNameStrategy` or the `TopicRecordNameStrategy` are used.",
                    "title": "Topic Subject Map",
                    "type": "object"
                },
                "schema_registry_class": {
                    "default": "datahub.ingestion.source.confluent_schema_registry.ConfluentSchemaRegistry",
                    "description": "The fully qualified implementation class(custom) that implements the KafkaSchemaRegistryBase interface.",
                    "title": "Schema Registry Class",
                    "type": "string"
                },
                "schema_tags_field": {
                    "default": "tags",
                    "description": "The field name in the schema metadata that contains the tags to be added to the dataset.",
                    "title": "Schema Tags Field",
                    "type": "string"
                },
                "enable_meta_mapping": {
                    "default": true,
                    "description": "When enabled, applies the mappings that are defined through the meta_mapping directives.",
                    "title": "Enable Meta Mapping",
                    "type": "boolean"
                },
                "meta_mapping": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "mapping rules that will be executed against top-level schema properties. Refer to the section below on meta automated mappings.",
                    "title": "Meta Mapping",
                    "type": "object"
                },
                "field_meta_mapping": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "mapping rules that will be executed against field-level schema properties. Refer to the section below on meta automated mappings.",
                    "title": "Field Meta Mapping",
                    "type": "object"
                },
                "strip_user_ids_from_email": {
                    "default": false,
                    "description": "Whether or not to strip email id while adding owners using meta mappings.",
                    "title": "Strip User Ids From Email",
                    "type": "boolean"
                },
                "tag_prefix": {
                    "default": "",
                    "description": "Prefix added to tags during ingestion.",
                    "title": "Tag Prefix",
                    "type": "string"
                },
                "ignore_warnings_on_schema_type": {
                    "default": false,
                    "description": "Disables warnings reported for non-AVRO/Protobuf value or key schemas if set.",
                    "title": "Ignore Warnings On Schema Type",
                    "type": "boolean"
                },
                "disable_topic_record_naming_strategy": {
                    "default": false,
                    "description": "Disables the utilization of the TopicRecordNameStrategy for Schema Registry subjects. For more information, visit: https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#handling-differences-between-preregistered-and-client-derived-schemas:~:text=io.confluent.kafka.serializers.subject.TopicRecordNameStrategy",
                    "title": "Disable Topic Record Naming Strategy",
                    "type": "boolean"
                },
                "ingest_schemas_as_entities": {
                    "default": false,
                    "description": "Enables ingesting schemas from schema registry as separate entities, in addition to the topics",
                    "title": "Ingest Schemas As Entities",
                    "type": "boolean"
                },
                "external_url_base": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Base URL for external platform (e.g. Aiven) where topics can be viewed. The topic name will be appended to this base URL.",
                    "title": "External Url Base"
                }
            },
            "title": "KafkaSourceConfig",
            "type": "object"
        },
        "redash": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "redash"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/redash_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "redash_config": {
            "properties": {
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulIngestionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Stateful Ingestion Config"
                },
                "connect_uri": {
                    "default": "http://localhost:5000",
                    "description": "Redash base URL.",
                    "title": "Connect Uri",
                    "type": "string"
                },
                "api_key": {
                    "default": "REDASH_API_KEY",
                    "description": "Redash user API key.",
                    "title": "Api Key",
                    "type": "string"
                },
                "dashboard_patterns": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for dashboards to filter for ingestion."
                },
                "chart_patterns": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for charts to filter for ingestion."
                },
                "skip_draft": {
                    "default": true,
                    "description": "Only ingest published dashboards and charts.",
                    "title": "Skip Draft",
                    "type": "boolean"
                },
                "page_size": {
                    "default": 25,
                    "description": "Limit on number of items to be queried at once.",
                    "title": "Page Size",
                    "type": "integer"
                },
                "api_page_limit": {
                    "default": 9223372036854775807,
                    "description": "Limit on number of pages queried for ingesting dashboards and charts API during pagination.",
                    "title": "Api Page Limit",
                    "type": "integer"
                },
                "parallelism": {
                    "default": 1,
                    "description": "Parallelism to use while processing.",
                    "title": "Parallelism",
                    "type": "integer"
                },
                "parse_table_names_from_sql": {
                    "default": false,
                    "description": "See note below.",
                    "title": "Parse Table Names From Sql",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "Environment to use in namespace when constructing URNs.",
                    "title": "Env",
                    "type": "string"
                }
            },
            "title": "RedashConfig",
            "type": "object"
        },
        "powerbi-report-server": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "powerbi-report-server"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/powerbi-report-server_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "powerbi-report-server_config": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulIngestionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Stateful Ingestion Config"
                },
                "username": {
                    "description": "Windows account username",
                    "title": "Username",
                    "type": "string"
                },
                "password": {
                    "description": "Windows account password",
                    "title": "Password",
                    "type": "string"
                },
                "workstation_name": {
                    "default": "localhost",
                    "description": "Workstation name",
                    "title": "Workstation Name",
                    "type": "string"
                },
                "host_port": {
                    "description": "Power BI Report Server host URL",
                    "title": "Host Port",
                    "type": "string"
                },
                "server_alias": {
                    "default": "",
                    "description": "Alias for Power BI Report Server host URL",
                    "title": "Server Alias",
                    "type": "string"
                },
                "graphql_url": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "[deprecated] Not used",
                    "title": "Graphql Url"
                },
                "report_virtual_directory_name": {
                    "description": "Report Virtual Directory URL name",
                    "title": "Report Virtual Directory Name",
                    "type": "string"
                },
                "report_server_virtual_directory_name": {
                    "description": "Report Server Virtual Directory URL name",
                    "title": "Report Server Virtual Directory Name",
                    "type": "string"
                },
                "extract_ownership": {
                    "default": true,
                    "description": "Whether ownership should be ingested",
                    "title": "Extract Ownership",
                    "type": "boolean"
                },
                "ownership_type": {
                    "default": "NONE",
                    "description": "Ownership type of owner",
                    "title": "Ownership Type",
                    "type": "string"
                },
                "platform_name": {
                    "default": "powerbi",
                    "title": "Platform Name",
                    "type": "string"
                },
                "platform_urn": {
                    "default": "urn:li:dataPlatform:powerbi",
                    "title": "Platform Urn",
                    "type": "string"
                },
                "report_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    }
                },
                "chart_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    }
                }
            },
            "required": [
                "username",
                "password",
                "host_port",
                "report_virtual_directory_name",
                "report_server_virtual_directory_name"
            ],
            "title": "PowerBiReportServerDashboardSourceConfig",
            "type": "object"
        },
        "hive": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "hive"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/hive_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "hive_config": {
            "additionalProperties": false,
            "properties": {
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "description": "host URL",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "database (catalog)",
                    "title": "Database"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for databases to filter in ingestion."
                },
                "emit_storage_lineage": {
                    "default": false,
                    "description": "Whether to emit storage-to-Hive lineage",
                    "title": "Emit Storage Lineage",
                    "type": "boolean"
                },
                "hive_storage_lineage_direction": {
                    "default": "upstream",
                    "description": "If 'upstream', storage is upstream to Hive. If 'downstream' storage is downstream to Hive",
                    "title": "Hive Storage Lineage Direction",
                    "type": "string"
                },
                "include_column_lineage": {
                    "default": true,
                    "description": "When enabled, column-level lineage will be extracted from storage",
                    "title": "Include Column Lineage",
                    "type": "boolean"
                },
                "storage_platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Platform instance for the storage system",
                    "title": "Storage Platform Instance"
                }
            },
            "required": [
                "host_port"
            ],
            "title": "HiveConfig",
            "type": "object"
        },
        "druid": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "druid"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/druid_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "druid_config": {
            "additionalProperties": false,
            "properties": {
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "^(lookup|sysgit|view).*"
                        ],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for schemas to filter in ingestion."
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "description": "host URL",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "database (catalog)",
                    "title": "Database"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                }
            },
            "required": [
                "host_port"
            ],
            "title": "DruidConfig",
            "type": "object"
        },
        "sigma": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "sigma"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/sigma_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "sigma_config": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Sigma Stateful Ingestion Config."
                },
                "api_url": {
                    "default": "https://aws-api.sigmacomputing.com/v2",
                    "description": "Sigma API hosted URL.",
                    "title": "Api Url",
                    "type": "string"
                },
                "client_id": {
                    "description": "Sigma Client ID",
                    "title": "Client Id",
                    "type": "string"
                },
                "client_secret": {
                    "description": "Sigma Client Secret",
                    "title": "Client Secret",
                    "type": "string"
                },
                "workspace_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter Sigma workspaces in ingestion.Mention 'My documents' if personal entities also need to ingest."
                },
                "ingest_owner": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Ingest Owner from source. This will override Owner info entered from UI.",
                    "title": "Ingest Owner"
                },
                "ingest_shared_entities": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Whether to ingest the shared entities or not.",
                    "title": "Ingest Shared Entities"
                },
                "extract_lineage": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Whether to extract lineage of workbook's elements and datasets or not.",
                    "title": "Extract Lineage"
                },
                "workbook_lineage_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter workbook's elements and datasets lineage in ingestion.Requires extract_lineage to be enabled."
                },
                "chart_sources_platform_mapping": {
                    "additionalProperties": {
                        "$ref": "#/$defs/PlatformDetail"
                    },
                    "default": {},
                    "description": "A mapping of the sigma workspace/workbook/chart folder path to all chart's data sources platform details present inside that folder path.",
                    "title": "Chart Sources Platform Mapping",
                    "type": "object"
                }
            },
            "required": [
                "client_id",
                "client_secret"
            ],
            "title": "SigmaSourceConfig",
            "type": "object"
        },
        "neo4j": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "neo4j"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/neo4j_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "neo4j_config": {
            "additionalProperties": false,
            "properties": {
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "username": {
                    "description": "Neo4j Username",
                    "title": "Username",
                    "type": "string"
                },
                "password": {
                    "description": "Neo4j Password",
                    "title": "Password",
                    "type": "string"
                },
                "uri": {
                    "description": "The URI for the Neo4j server",
                    "title": "Uri",
                    "type": "string"
                }
            },
            "required": [
                "username",
                "password",
                "uri"
            ],
            "title": "Neo4jConfig",
            "type": "object"
        },
        "mssql": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "mssql"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/mssql_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "mssql_config": {
            "additionalProperties": false,
            "properties": {
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'"
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Enable to convert the SQL Server assets urns to lowercase",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "default": "localhost:1433",
                    "description": "MSSQL host URL.",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "database (catalog). If set to Null, all databases will be considered for ingestion.",
                    "title": "Database"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "include_stored_procedures": {
                    "default": true,
                    "description": "Include ingest of stored procedures. Requires access to the 'sys' schema.",
                    "title": "Include Stored Procedures",
                    "type": "boolean"
                },
                "include_stored_procedures_code": {
                    "default": true,
                    "description": "Include information about object code.",
                    "title": "Include Stored Procedures Code",
                    "type": "boolean"
                },
                "procedure_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for stored procedures to filter in ingestion.Specify regex to match the entire procedure name in database.schema.procedure_name format. e.g. to match all procedures starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "include_jobs": {
                    "default": true,
                    "description": "Include ingest of MSSQL Jobs. Requires access to the 'msdb' and 'sys' schema.",
                    "title": "Include Jobs",
                    "type": "boolean"
                },
                "include_descriptions": {
                    "default": true,
                    "description": "Include table descriptions information.",
                    "title": "Include Descriptions",
                    "type": "boolean"
                },
                "use_odbc": {
                    "default": false,
                    "description": "See https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc.",
                    "title": "Use Odbc",
                    "type": "boolean"
                },
                "uri_args": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "default": {},
                    "description": "Arguments to URL-encode when connecting. See https://docs.microsoft.com/en-us/sql/connect/odbc/dsn-connection-string-attribute?view=sql-server-ver15.",
                    "title": "Uri Args",
                    "type": "object"
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for databases to filter in ingestion."
                },
                "include_lineage": {
                    "default": true,
                    "description": "Enable lineage extraction for stored procedures",
                    "title": "Include Lineage",
                    "type": "boolean"
                },
                "include_containers_for_pipelines": {
                    "default": false,
                    "description": "Enable the container aspects ingestion for both pipelines and tasks. Note that this feature requires the corresponding model support in the backend, which was introduced in version 0.15.0.1.",
                    "title": "Include Containers For Pipelines",
                    "type": "boolean"
                },
                "temporary_tables_pattern": {
                    "default": [
                        ".*\\.FIVETRAN_.*_STAGING\\..*",
                        ".*__DBT_TMP$",
                        ".*\\.SEGMENT_[a-f0-9]{8}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{12}",
                        ".*\\.STAGING_.*_[a-f0-9]{8}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{12}",
                        ".*\\.(GE_TMP_|GE_TEMP_|GX_TEMP_)[0-9A-F]{8}"
                    ],
                    "description": "[Advanced] Regex patterns for temporary tables to filter in lineage ingestion. Specify regex to match the entire table name in database.schema.table format. Defaults are to set in such a way to ignore the temporary staging tables created by known ETL tools.",
                    "items": {
                        "type": "string"
                    },
                    "title": "Temporary Tables Pattern",
                    "type": "array"
                },
                "quote_schemas": {
                    "default": false,
                    "description": "Represent a schema identifiers combined with quoting preferences. See [sqlalchemy quoted_name docs](https://docs.sqlalchemy.org/en/20/core/sqlelement.html#sqlalchemy.sql.expression.quoted_name).",
                    "title": "Quote Schemas",
                    "type": "boolean"
                }
            },
            "title": "SQLServerConfig",
            "type": "object"
        },
        "fivetran": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "fivetran"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/fivetran_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "fivetran_config": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Fivetran Stateful Ingestion Config."
                },
                "fivetran_log_config": {
                    "$ref": "#/$defs/FivetranLogConfig",
                    "description": "Fivetran log connector destination server configurations."
                },
                "connector_patterns": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Filtering regex patterns for connector names."
                },
                "destination_patterns": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for destination ids to filter in ingestion. Fivetran destination IDs are usually two word identifiers e.g. canyon_tolerable, and are not the same as the destination database name. They're visible in the Fivetran UI under Destinations -> Overview -> Destination Group ID."
                },
                "include_column_lineage": {
                    "default": true,
                    "description": "Populates table->table column lineage.",
                    "title": "Include Column Lineage",
                    "type": "boolean"
                },
                "sources_to_platform_instance": {
                    "additionalProperties": {
                        "$ref": "#/$defs/PlatformDetail"
                    },
                    "default": {},
                    "description": "A mapping from connector id to its platform/instance/env/database details.",
                    "title": "Sources To Platform Instance",
                    "type": "object"
                },
                "destination_to_platform_instance": {
                    "additionalProperties": {
                        "$ref": "#/$defs/PlatformDetail"
                    },
                    "default": {},
                    "description": "A mapping of destination id to its platform/instance/env details.",
                    "title": "Destination To Platform Instance",
                    "type": "object"
                },
                "api_config": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/FivetranAPIConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Fivetran REST API configuration, used to provide wider support for connections."
                },
                "history_sync_lookback_period": {
                    "default": 7,
                    "description": "The number of days to look back when extracting connectors' sync history.",
                    "title": "History Sync Lookback Period",
                    "type": "integer"
                }
            },
            "required": [
                "fivetran_log_config"
            ],
            "title": "FivetranSourceConfig",
            "type": "object"
        },
        "datahub-debug": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "datahub-debug"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/datahub-debug_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "datahub-debug_config": {
            "additionalProperties": false,
            "properties": {
                "dns_probe_url": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Dns Probe Url"
                }
            },
            "title": "DataHubDebugSourceConfig",
            "type": "object"
        },
        "superset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "superset"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/superset_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "superset_config": {
            "additionalProperties": true,
            "properties": {
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Superset Stateful Ingestion Config."
                },
                "connect_uri": {
                    "default": "http://localhost:8088",
                    "description": "Superset host URL.",
                    "title": "Connect Uri",
                    "type": "string"
                },
                "display_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "optional URL to use in links (if `connect_uri` is only for ingestion)",
                    "title": "Display Uri"
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Regex patterns for tables to filter to assign domain_key. ",
                    "title": "Domain",
                    "type": "object"
                },
                "dataset_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for dataset to filter in ingestion."
                },
                "chart_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Patterns for selecting chart names that are to be included"
                },
                "dashboard_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Patterns for selecting dashboard names that are to be included"
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for databases to filter in ingestion."
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Superset username.",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Superset password.",
                    "title": "Password"
                },
                "ingest_dashboards": {
                    "default": true,
                    "description": "Enable to ingest dashboards.",
                    "title": "Ingest Dashboards",
                    "type": "boolean"
                },
                "ingest_charts": {
                    "default": true,
                    "description": "Enable to ingest charts.",
                    "title": "Ingest Charts",
                    "type": "boolean"
                },
                "ingest_datasets": {
                    "default": false,
                    "description": "Enable to ingest datasets.",
                    "title": "Ingest Datasets",
                    "type": "boolean"
                },
                "provider": {
                    "default": "db",
                    "description": "Superset provider.",
                    "title": "Provider",
                    "type": "string"
                },
                "options": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "",
                    "title": "Options",
                    "type": "object"
                },
                "timeout": {
                    "default": 10,
                    "description": "Timeout of single API call to superset.",
                    "title": "Timeout",
                    "type": "integer"
                },
                "max_threads": {
                    "description": "Max parallelism for API calls. Defaults to cpuCount or 40",
                    "title": "Max Threads",
                    "type": "integer"
                },
                "database_alias": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "default": {},
                    "description": "Can be used to change mapping for database names in superset to what you have in datahub",
                    "title": "Database Alias",
                    "type": "object"
                }
            },
            "title": "SupersetConfig",
            "type": "object"
        },
        "unity-catalog": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "unity-catalog"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/unity-catalog_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "unity-catalog_config": {
            "additionalProperties": false,
            "properties": {
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to the full `metastore.catalog.schema` name. e.g. to match all tables in schema analytics, use the regex `^mymetastore\\.mycatalog\\.analytics$`."
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in `catalog.schema.table` format. e.g. to match all tables starting with customer in Customer catalog and public schema, use the regex `Customer\\.public\\.customer.*`."
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "enable_stateful_profiling": {
                    "default": true,
                    "description": "Enable stateful profiling. This will store profiling timestamps per dataset after successful profiling. and will not run profiling again in subsequent run if table has not been updated. ",
                    "title": "Enable Stateful Profiling",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "bucket_duration": {
                    "$ref": "#/$defs/BucketDuration",
                    "default": "DAY",
                    "description": "Size of the time window to aggregate usage stats."
                },
                "end_time": {
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "format": "date-time",
                    "title": "End Time",
                    "type": "string"
                },
                "start_time": {
                    "default": null,
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "format": "date-time",
                    "title": "Start Time",
                    "type": "string"
                },
                "top_n_queries": {
                    "default": 10,
                    "description": "Number of top queries to save to each table.",
                    "exclusiveMinimum": 0,
                    "title": "Top N Queries",
                    "type": "integer"
                },
                "user_email_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for user emails to filter in usage."
                },
                "include_operational_stats": {
                    "default": true,
                    "description": "Whether to display operational stats.",
                    "title": "Include Operational Stats",
                    "type": "boolean"
                },
                "include_read_operational_stats": {
                    "default": false,
                    "description": "Whether to report read operational stats. Experimental.",
                    "title": "Include Read Operational Stats",
                    "type": "boolean"
                },
                "format_sql_queries": {
                    "default": false,
                    "description": "Whether to format sql queries",
                    "title": "Format Sql Queries",
                    "type": "boolean"
                },
                "include_top_n_queries": {
                    "default": true,
                    "description": "Whether to ingest the top_n_queries.",
                    "title": "Include Top N Queries",
                    "type": "boolean"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Unity Catalog Stateful Ingestion Config."
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to catalogs, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false,
                        "method": "ge",
                        "warehouse_id": null,
                        "pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "max_wait_secs": null
                    },
                    "description": "Data profiling configuration",
                    "discriminator": {
                        "mapping": {
                            "analyze": "#/$defs/UnityCatalogAnalyzeProfilerConfig",
                            "ge": "#/$defs/UnityCatalogGEProfilerConfig"
                        },
                        "propertyName": "method"
                    },
                    "oneOf": [
                        {
                            "$ref": "#/$defs/UnityCatalogGEProfilerConfig"
                        },
                        {
                            "$ref": "#/$defs/UnityCatalogAnalyzeProfilerConfig"
                        }
                    ],
                    "title": "Profiling"
                },
                "scheme": {
                    "default": "databricks",
                    "title": "Scheme",
                    "type": "string"
                },
                "token": {
                    "description": "Databricks personal access token",
                    "title": "Token",
                    "type": "string"
                },
                "workspace_url": {
                    "description": "Databricks workspace url. e.g. https://my-workspace.cloud.databricks.com",
                    "title": "Workspace Url",
                    "type": "string"
                },
                "warehouse_id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SQL Warehouse id, for running queries. Must be explicitly provided to enable SQL-based features. Required for the following features that need SQL access: 1) Tag extraction (include_tags=True) - queries system.information_schema.tags 2) Hive Metastore catalog (include_hive_metastore=True) - queries legacy hive_metastore catalog 3) System table lineage (lineage_data_source=SYSTEM_TABLES) - queries system.access.table_lineage/column_lineage 4) Data profiling (profiling.enabled=True) - runs SELECT/ANALYZE queries on tables. When warehouse_id is missing, these features will be automatically disabled (with warnings) to allow ingestion to continue.",
                    "title": "Warehouse Id"
                },
                "extra_client_options": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "Additional options to pass to Databricks SQLAlchemy client.",
                    "title": "Extra Client Options",
                    "type": "object"
                },
                "include_metastore": {
                    "default": false,
                    "description": "Whether to ingest the workspace's metastore as a container and include it in all urns. Changing this will affect the urns of all entities in the workspace. This config is deprecated and will be removed in the future, so it is recommended to not set this to `True` for new ingestions. If you have an existing unity catalog ingestion, you'll want to avoid duplicates by soft deleting existing data. If stateful ingestion is enabled, running with `include_metastore: false` should be sufficient. Otherwise, we recommend deleting via the cli: `datahub delete --platform databricks` and re-ingesting with `include_metastore: false`.",
                    "title": "Include Metastore",
                    "type": "boolean"
                },
                "ingest_data_platform_instance_aspect": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Option to enable/disable ingestion of the data platform instance aspect. The default data platform instance id for a dataset is workspace_name",
                    "title": "Ingest Data Platform Instance Aspect"
                },
                "catalogs": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Fixed list of catalogs to ingest. If not specified, catalogs will be ingested based on `catalog_pattern`.",
                    "title": "Catalogs"
                },
                "catalog_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for catalogs to filter in ingestion. Specify regex to match the full `metastore.catalog` name."
                },
                "notebook_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for notebooks to filter in ingestion, based on notebook *path*. Specify regex to match the entire notebook path in `/<dir>/.../<name>` format. e.g. to match all notebooks in the root Shared directory, use the regex `/Shared/.*`."
                },
                "include_table_lineage": {
                    "default": true,
                    "description": "Option to enable/disable lineage generation.",
                    "title": "Include Table Lineage",
                    "type": "boolean"
                },
                "include_external_lineage": {
                    "default": true,
                    "description": "Option to enable/disable lineage generation for external tables. Only external S3 tables are supported at the moment.",
                    "title": "Include External Lineage",
                    "type": "boolean"
                },
                "include_notebooks": {
                    "default": false,
                    "description": "Ingest notebooks, represented as DataHub datasets.",
                    "title": "Include Notebooks",
                    "type": "boolean"
                },
                "include_ownership": {
                    "default": false,
                    "description": "Option to enable/disable ownership generation for metastores, catalogs, schemas, and tables.",
                    "title": "Include Ownership",
                    "type": "boolean"
                },
                "include_tags": {
                    "default": true,
                    "description": "Option to enable/disable column/table tag extraction. Requires warehouse_id to be set since tag extraction needs to query system.information_schema.tags. If warehouse_id is not provided, this will be automatically disabled to allow ingestion to continue.",
                    "title": "Include Tags",
                    "type": "boolean"
                },
                "include_column_lineage": {
                    "default": true,
                    "description": "Option to enable/disable lineage generation. Currently we have to call a rest call per column to get column level lineage due to the Databrick api which can slow down ingestion. ",
                    "title": "Include Column Lineage",
                    "type": "boolean"
                },
                "lineage_data_source": {
                    "$ref": "#/$defs/LineageDataSource",
                    "default": "AUTO",
                    "description": "Source for lineage data extraction. Options: 'AUTO' - Use system tables when SQL warehouse is available, fallback to API; 'SYSTEM_TABLES' - Force use of system.access.table_lineage and system.access.column_lineage tables (requires SQL warehouse); 'API' - Force use of REST API endpoints for lineage data"
                },
                "ignore_start_time_lineage": {
                    "default": false,
                    "description": "Option to ignore the start_time and retrieve all available lineage. When enabled, the start_time filter will be set to zero to extract all lineage events regardless of the configured time window.",
                    "title": "Ignore Start Time Lineage",
                    "type": "boolean"
                },
                "column_lineage_column_limit": {
                    "default": 300,
                    "description": "Limit the number of columns to get column level lineage. ",
                    "title": "Column Lineage Column Limit",
                    "type": "integer"
                },
                "databricks_api_page_size": {
                    "default": 0,
                    "description": "Page size for Databricks API calls when listing resources (catalogs, schemas, tables, etc.). When set to 0 (default), uses server-side configured page length (recommended). When set to a positive value, the page length is the minimum of this value and the server configured value. Must be a non-negative integer.",
                    "minimum": 0,
                    "title": "Databricks Api Page Size",
                    "type": "integer"
                },
                "include_usage_statistics": {
                    "default": true,
                    "description": "Generate usage statistics.",
                    "title": "Include Usage Statistics",
                    "type": "boolean"
                },
                "usage_data_source": {
                    "$ref": "#/$defs/UsageDataSource",
                    "default": "AUTO",
                    "description": "Source for usage/query history data extraction. Options: 'AUTO' (default) - Automatically use system.query.history table when SQL warehouse is configured, otherwise fall back to REST API. This provides better performance for multi-workspace setups and large query volumes when warehouse_id is set. 'SYSTEM_TABLES' - Force use of system.query.history table (requires SQL warehouse and SELECT permission on system.query.history). 'API' - Force use of REST API endpoints for query history (legacy method, may have limitations with multiple workspaces)."
                },
                "emit_siblings": {
                    "default": true,
                    "description": "Whether to emit siblings relation with corresponding delta-lake platform's table. If enabled, this will also ingest the corresponding delta-lake table.",
                    "title": "Emit Siblings",
                    "type": "boolean"
                },
                "delta_lake_options": {
                    "$ref": "#/$defs/DeltaLakeDetails",
                    "default": {
                        "platform_instance_name": null,
                        "env": "PROD"
                    },
                    "description": "Details about the delta lake, incase to emit siblings"
                },
                "include_ml_model_aliases": {
                    "default": false,
                    "description": "Whether to include ML model aliases in the ingestion.",
                    "title": "Include Ml Model Aliases",
                    "type": "boolean"
                },
                "ml_model_max_results": {
                    "default": 1000,
                    "description": "Maximum number of ML models to ingest.",
                    "minimum": 0,
                    "title": "Ml Model Max Results",
                    "type": "integer"
                },
                "include_hive_metastore": {
                    "default": true,
                    "description": "Whether to ingest legacy `hive_metastore` catalog. This requires executing queries on SQL warehouse.",
                    "title": "Include Hive Metastore",
                    "type": "boolean"
                },
                "workspace_name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Name of the workspace. Default to deployment name present in workspace_url",
                    "title": "Workspace Name"
                }
            },
            "required": [
                "token",
                "workspace_url"
            ],
            "title": "UnityCatalogSourceConfig",
            "type": "object"
        },
        "ldap": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "ldap"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/ldap_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "ldap_config": {
            "additionalProperties": false,
            "description": "Config used by the LDAP Source.",
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "ldap_server": {
                    "description": "LDAP server URL.",
                    "title": "Ldap Server",
                    "type": "string"
                },
                "ldap_user": {
                    "description": "LDAP user.",
                    "title": "Ldap User",
                    "type": "string"
                },
                "ldap_password": {
                    "description": "LDAP password.",
                    "title": "Ldap Password",
                    "type": "string"
                },
                "base_dn": {
                    "description": "LDAP DN.",
                    "title": "Base Dn",
                    "type": "string"
                },
                "filter": {
                    "default": "(objectClass=*)",
                    "description": "LDAP extractor filter.",
                    "title": "Filter",
                    "type": "string"
                },
                "attrs_list": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Retrieved attributes list",
                    "title": "Attrs List"
                },
                "custom_props_list": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A list of custom attributes to extract from the LDAP provider.",
                    "title": "Custom Props List"
                },
                "drop_missing_first_last_name": {
                    "default": true,
                    "description": "If set to true, any users without first and last names will be dropped.",
                    "title": "Drop Missing First Last Name",
                    "type": "boolean"
                },
                "page_size": {
                    "default": 20,
                    "description": "Size of each page to fetch when extracting metadata.",
                    "title": "Page Size",
                    "type": "integer"
                },
                "manager_filter_enabled": {
                    "default": true,
                    "description": "Use LDAP extractor filter to search managers.",
                    "title": "Manager Filter Enabled",
                    "type": "boolean"
                },
                "manager_pagination_enabled": {
                    "default": true,
                    "description": "[deprecated] Use pagination_enabled ",
                    "title": "Manager Pagination Enabled",
                    "type": "boolean"
                },
                "pagination_enabled": {
                    "default": true,
                    "description": "Use pagination while do search query (enabled by default).",
                    "title": "Pagination Enabled",
                    "type": "boolean"
                },
                "use_email_as_username": {
                    "default": false,
                    "description": "Use email for users' usernames instead of username (disabled by default).             If enabled, the user and group urn would be having email as the id part of the urn.",
                    "title": "Use Email As Username",
                    "type": "boolean"
                },
                "user_attrs_map": {
                    "additionalProperties": true,
                    "default": {},
                    "title": "User Attrs Map",
                    "type": "object"
                },
                "group_attrs_map": {
                    "additionalProperties": true,
                    "default": {},
                    "title": "Group Attrs Map",
                    "type": "object"
                }
            },
            "required": [
                "ldap_server",
                "ldap_user",
                "ldap_password",
                "base_dn"
            ],
            "title": "LDAPSourceConfig",
            "type": "object"
        },
        "dbt": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "dbt"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/dbt_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "dbt_config": {
            "additionalProperties": false,
            "properties": {
                "incremental_lineage": {
                    "default": true,
                    "description": "When enabled, emits incremental/patch lineage for non-dbt entities. When disabled, re-states lineage on each run. This would also require enabling 'incremental_lineage' in the counterpart warehouse ingestion (_e.g._ BigQuery, Redshift, etc).",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "Environment to use in namespace when constructing URNs.",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "DBT Stateful Ingestion Config."
                },
                "target_platform": {
                    "description": "The platform that dbt is loading onto. (e.g. bigquery / redshift / postgres etc.)",
                    "title": "Target Platform",
                    "type": "string"
                },
                "target_platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The platform instance for the platform that dbt is operating on. Use this if you have multiple instances of the same platform (e.g. redshift) and need to distinguish between them.",
                    "title": "Target Platform Instance"
                },
                "use_identifiers": {
                    "default": false,
                    "description": "Use model identifier instead of model name if defined (if not, default to model name).",
                    "title": "Use Identifiers",
                    "type": "boolean"
                },
                "entities_enabled": {
                    "$ref": "#/$defs/DBTEntitiesEnabled",
                    "default": {
                        "models": "YES",
                        "sources": "YES",
                        "seeds": "YES",
                        "snapshots": "YES",
                        "test_definitions": "YES",
                        "test_results": "YES",
                        "model_performance": "YES"
                    },
                    "description": "Controls for enabling / disabling metadata emission for different dbt entities (models, test definitions, test results, etc.)"
                },
                "prefer_sql_parser_lineage": {
                    "default": false,
                    "description": "Normally we use dbt's metadata to generate table lineage. When enabled, we prefer results from the SQL parser when generating lineage instead. This can be useful when dbt models reference tables directly, instead of using the ref() macro. This requires that `skip_sources_in_lineage` is enabled.",
                    "title": "Prefer Sql Parser Lineage",
                    "type": "boolean"
                },
                "skip_sources_in_lineage": {
                    "default": false,
                    "description": "[Experimental] When enabled, dbt sources will not be included in the lineage graph. Requires that `entities_enabled.sources` is set to `NO`. This is mainly useful when you have multiple, interdependent dbt projects. ",
                    "title": "Skip Sources In Lineage",
                    "type": "boolean"
                },
                "tag_prefix": {
                    "default": "dbt:",
                    "description": "Prefix added to tags during ingestion.",
                    "title": "Tag Prefix",
                    "type": "string"
                },
                "node_name_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for dbt model names to filter in ingestion."
                },
                "materialized_node_pattern": {
                    "$ref": "#/$defs/MaterializedNodePatternConfig",
                    "default": {
                        "database_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "schema_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        }
                    },
                    "description": "Advanced filtering for materialized nodes based on their physical database location. Provides fine-grained control over database.schema.table patterns for catalog consistency."
                },
                "meta_mapping": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "mapping rules that will be executed against dbt meta properties. Refer to the section below on dbt meta automated mappings.",
                    "title": "Meta Mapping",
                    "type": "object"
                },
                "column_meta_mapping": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "mapping rules that will be executed against dbt column meta properties. Refer to the section below on dbt meta automated mappings.",
                    "title": "Column Meta Mapping",
                    "type": "object"
                },
                "enable_meta_mapping": {
                    "default": true,
                    "description": "When enabled, applies the mappings that are defined through the meta_mapping directives.",
                    "title": "Enable Meta Mapping",
                    "type": "boolean"
                },
                "query_tag_mapping": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "mapping rules that will be executed against dbt query_tag meta properties. Refer to the section below on dbt meta automated mappings.",
                    "title": "Query Tag Mapping",
                    "type": "object"
                },
                "enable_query_tag_mapping": {
                    "default": true,
                    "description": "When enabled, applies the mappings that are defined through the `query_tag_mapping` directives.",
                    "title": "Enable Query Tag Mapping",
                    "type": "boolean"
                },
                "write_semantics": {
                    "default": "PATCH",
                    "description": "Whether the new tags, terms and owners to be added will override the existing ones added only by this source or not. Value for this config can be \"PATCH\" or \"OVERRIDE\"",
                    "title": "Write Semantics",
                    "type": "string"
                },
                "strip_user_ids_from_email": {
                    "default": false,
                    "description": "Whether or not to strip email id while adding owners using dbt meta actions.",
                    "title": "Strip User Ids From Email",
                    "type": "boolean"
                },
                "enable_owner_extraction": {
                    "default": true,
                    "description": "When enabled, ownership info will be extracted from the dbt meta",
                    "title": "Enable Owner Extraction",
                    "type": "boolean"
                },
                "owner_extraction_pattern": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Regex string to extract owner from the dbt node using the `(?P<name>...) syntax` of the [match object](https://docs.python.org/3/library/re.html#match-objects), where the group name must be `owner`. Examples: (1)`r\"(?P<owner>(.*)): (\\w+) (\\w+)\"` will extract `jdoe` as the owner from `\"jdoe: John Doe\"` (2) `r\"@(?P<owner>(.*))\"` will extract `alice` as the owner from `\"@alice\"`.",
                    "title": "Owner Extraction Pattern"
                },
                "include_env_in_assertion_guid": {
                    "default": false,
                    "description": "Prior to version 0.9.4.2, the assertion GUIDs did not include the environment. If you're using multiple dbt ingestion that are only distinguished by env, then you should set this flag to True.",
                    "title": "Include Env In Assertion Guid",
                    "type": "boolean"
                },
                "convert_column_urns_to_lowercase": {
                    "default": false,
                    "description": "When enabled, converts column URNs to lowercase to ensure cross-platform compatibility. If `target_platform` is Snowflake, the default is True.",
                    "title": "Convert Column Urns To Lowercase",
                    "type": "boolean"
                },
                "test_warnings_are_errors": {
                    "default": false,
                    "description": "When enabled, dbt test warnings will be treated as failures.",
                    "title": "Test Warnings Are Errors",
                    "type": "boolean"
                },
                "infer_dbt_schemas": {
                    "default": true,
                    "description": "When enabled, schemas will be inferred from the dbt node definition.",
                    "title": "Infer Dbt Schemas",
                    "type": "boolean"
                },
                "include_column_lineage": {
                    "default": true,
                    "description": "When enabled, column-level lineage will be extracted from the dbt node definition. Requires `infer_dbt_schemas` to be enabled. If you run into issues where the column name casing does not match up with properly, providing a datahub_api or using the rest sink will improve accuracy.",
                    "title": "Include Column Lineage",
                    "type": "boolean"
                },
                "include_compiled_code": {
                    "default": true,
                    "description": "When enabled, includes the compiled code in the emitted metadata.",
                    "title": "Include Compiled Code",
                    "type": "boolean"
                },
                "include_database_name": {
                    "default": true,
                    "description": "Whether to add database name to the table urn. Set to False to skip it for engines like AWS Athena where it's not required.",
                    "title": "Include Database Name",
                    "type": "boolean"
                },
                "dbt_is_primary_sibling": {
                    "default": true,
                    "description": "Experimental: Controls sibling relationship primary designation between dbt entities and target platform entities. When True (default), dbt entities are primary and target platform entities are secondary. When False, target platform entities are primary and dbt entities are secondary. Uses aspect patches for precise control. Requires DataHub server 1.3.0+.",
                    "title": "Dbt Is Primary Sibling",
                    "type": "boolean"
                },
                "drop_duplicate_sources": {
                    "default": true,
                    "description": "When enabled, drops sources that have the same name in the target platform as a model. This ensures that lineage is generated reliably, but will lose any documentation associated only with the source.",
                    "title": "Drop Duplicate Sources",
                    "type": "boolean"
                },
                "manifest_path": {
                    "description": "Path to dbt manifest JSON. See https://docs.getdbt.com/reference/artifacts/manifest-json. This can be a local file or a URI.",
                    "title": "Manifest Path",
                    "type": "string"
                },
                "catalog_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Path to dbt catalog JSON. See https://docs.getdbt.com/reference/artifacts/catalog-json. This file is optional, but highly recommended. Without it, some metadata like column info will be incomplete or missing. This can be a local file or a URI.",
                    "title": "Catalog Path"
                },
                "sources_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Path to dbt sources JSON. See https://docs.getdbt.com/reference/artifacts/sources-json. If not specified, last-modified fields will not be populated. This can be a local file or a URI.",
                    "title": "Sources Path"
                },
                "run_results_paths": {
                    "default": [],
                    "description": "Path to output of dbt test run as run_results files in JSON format. If not specified, test execution results and model performance metadata will not be populated in DataHub.If invoking dbt multiple times, you can provide paths to multiple run result files. See https://docs.getdbt.com/reference/artifacts/run-results-json.",
                    "items": {
                        "type": "string"
                    },
                    "title": "Run Results Paths",
                    "type": "array"
                },
                "only_include_if_in_catalog": {
                    "default": false,
                    "description": "[experimental] If true, only include nodes that are also present in the catalog file. This is useful if you only want to include models that have been built by the associated run.",
                    "title": "Only Include If In Catalog",
                    "type": "boolean"
                },
                "aws_connection": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AwsConnectionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "When fetching manifest files from s3, configuration for aws connection details"
                },
                "git_info": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/GitReference"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Reference to your git location to enable easy navigation from DataHub to your dbt files."
                }
            },
            "required": [
                "target_platform",
                "manifest_path"
            ],
            "title": "DBTCoreConfig",
            "type": "object"
        },
        "grafana": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "grafana"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/grafana_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "grafana_config": {
            "additionalProperties": false,
            "description": "Configuration for Grafana source",
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulIngestionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Stateful Ingestion Config"
                },
                "platform_instance_map": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A holder for platform -> platform_instance mappings to generate correct dataset urns",
                    "title": "Platform Instance Map"
                },
                "url": {
                    "description": "Grafana URL in the format http://your-grafana-instance with no trailing slash",
                    "title": "Url",
                    "type": "string"
                },
                "service_account_token": {
                    "description": "Service account token for Grafana",
                    "format": "password",
                    "title": "Service Account Token",
                    "type": "string",
                    "writeOnly": true
                },
                "verify_ssl": {
                    "default": true,
                    "description": "Whether to verify SSL certificates when connecting to Grafana",
                    "title": "Verify Ssl",
                    "type": "boolean"
                },
                "page_size": {
                    "default": 100,
                    "description": "Number of items to fetch per API call when paginating through folders and dashboards",
                    "title": "Page Size",
                    "type": "integer"
                },
                "basic_mode": {
                    "default": false,
                    "description": "Enable basic extraction mode for users with limited permissions. In basic mode, only dashboard metadata is extracted without detailed panel information, lineage, or folder hierarchy. This requires only basic dashboard read permissions.",
                    "title": "Basic Mode",
                    "type": "boolean"
                },
                "dashboard_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex pattern to filter dashboards for ingestion"
                },
                "folder_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex pattern to filter folders for ingestion"
                },
                "ingest_tags": {
                    "default": true,
                    "description": "Whether to ingest dashboard and chart tags",
                    "title": "Ingest Tags",
                    "type": "boolean"
                },
                "ingest_owners": {
                    "default": true,
                    "description": "Whether to ingest dashboard ownership information",
                    "title": "Ingest Owners",
                    "type": "boolean"
                },
                "include_lineage": {
                    "default": true,
                    "description": "Whether to extract lineage between charts and data sources. When enabled, the source will parse SQL queries and datasource configurations to build lineage relationships.",
                    "title": "Include Lineage",
                    "type": "boolean"
                },
                "include_column_lineage": {
                    "default": true,
                    "description": "Whether to extract column-level lineage from SQL queries. Only applicable when include_lineage is enabled.",
                    "title": "Include Column Lineage",
                    "type": "boolean"
                },
                "connection_to_platform_map": {
                    "additionalProperties": {
                        "$ref": "#/$defs/PlatformConnectionConfig"
                    },
                    "description": "Map of Grafana datasource types/UIDs to platform connection configs for lineage extraction",
                    "title": "Connection To Platform Map",
                    "type": "object"
                }
            },
            "required": [
                "url",
                "service_account_token"
            ],
            "title": "GrafanaSourceConfig",
            "type": "object"
        },
        "azure-ad": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "azure-ad"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/azure-ad_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "azure-ad_config": {
            "additionalProperties": false,
            "description": "Config to create a token and connect to Azure AD instance",
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Azure AD Stateful Ingestion Config."
                },
                "client_id": {
                    "description": "Application ID. Found in your app registration on Azure AD Portal",
                    "title": "Client Id",
                    "type": "string"
                },
                "tenant_id": {
                    "description": "Directory ID. Found in your app registration on Azure AD Portal",
                    "title": "Tenant Id",
                    "type": "string"
                },
                "client_secret": {
                    "description": "Client secret. Found in your app registration on Azure AD Portal",
                    "title": "Client Secret",
                    "type": "string"
                },
                "authority": {
                    "description": "The authority (https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-client-application-configuration) is a URL that indicates a directory that MSAL can request tokens from.",
                    "title": "Authority",
                    "type": "string"
                },
                "token_url": {
                    "description": "The token URL that acquires a token from Azure AD for authorizing requests.  This source will only work with v1.0 endpoint.",
                    "title": "Token Url",
                    "type": "string"
                },
                "redirect": {
                    "default": "https://login.microsoftonline.com/common/oauth2/nativeclient",
                    "description": "Redirect URI.  Found in your app registration on Azure AD Portal.",
                    "title": "Redirect",
                    "type": "string"
                },
                "graph_url": {
                    "default": "https://graph.microsoft.com/v1.0",
                    "description": "[Microsoft Graph API endpoint](https://docs.microsoft.com/en-us/graph/use-the-api)",
                    "title": "Graph Url",
                    "type": "string"
                },
                "azure_ad_response_to_username_attr": {
                    "default": "userPrincipalName",
                    "description": "Which Azure AD User Response attribute to use as input to DataHub username mapping.",
                    "title": "Azure Ad Response To Username Attr",
                    "type": "string"
                },
                "azure_ad_response_to_username_regex": {
                    "default": "(.*)",
                    "description": "A regex used to parse the DataHub username from the attribute specified in `azure_ad_response_to_username_attr`.",
                    "title": "Azure Ad Response To Username Regex",
                    "type": "string"
                },
                "azure_ad_response_to_groupname_attr": {
                    "default": "displayName",
                    "description": "Which Azure AD Group Response attribute to use as input to DataHub group name mapping.",
                    "title": "Azure Ad Response To Groupname Attr",
                    "type": "string"
                },
                "azure_ad_response_to_groupname_regex": {
                    "default": "(.*)",
                    "description": "A regex used to parse the DataHub group name from the attribute specified in `azure_ad_response_to_groupname_attr`.",
                    "title": "Azure Ad Response To Groupname Regex",
                    "type": "string"
                },
                "ingest_users": {
                    "default": true,
                    "description": "Whether users should be ingested into DataHub.",
                    "title": "Ingest Users",
                    "type": "boolean"
                },
                "ingest_groups": {
                    "default": true,
                    "description": "Whether groups should be ingested into DataHub.",
                    "title": "Ingest Groups",
                    "type": "boolean"
                },
                "ingest_group_membership": {
                    "default": true,
                    "description": "Whether group membership should be ingested into DataHub. ingest_groups must be True if this is True.",
                    "title": "Ingest Group Membership",
                    "type": "boolean"
                },
                "ingest_groups_users": {
                    "default": true,
                    "description": "This option is useful only when `ingest_users` is set to False and `ingest_group_membership` to True. As effect, only the users which belongs to the selected groups will be ingested.",
                    "title": "Ingest Groups Users",
                    "type": "boolean"
                },
                "users_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for users to filter in ingestion."
                },
                "groups_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for groups to include in ingestion."
                },
                "mask_group_id": {
                    "default": true,
                    "description": "Whether workunit ID's for groups should be masked to avoid leaking sensitive information.",
                    "title": "Mask Group Id",
                    "type": "boolean"
                },
                "mask_user_id": {
                    "default": true,
                    "description": "Whether workunit ID's for users should be masked to avoid leaking sensitive information.",
                    "title": "Mask User Id",
                    "type": "boolean"
                }
            },
            "required": [
                "client_id",
                "tenant_id",
                "client_secret",
                "authority",
                "token_url"
            ],
            "title": "AzureADConfig",
            "type": "object"
        },
        "athena": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "athena"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/athena_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "athena_config": {
            "additionalProperties": false,
            "properties": {
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'"
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/AthenaProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": false,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Username credential. If not specified, detected with boto3 rules. See https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Same detection scheme as username",
                    "title": "Password"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The athena database to ingest from. If not set it will be autodetected",
                    "title": "Database"
                },
                "aws_region": {
                    "description": "Aws region where your Athena database is located",
                    "title": "Aws Region",
                    "type": "string"
                },
                "aws_role_arn": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS Role arn for Pyathena to assume in its connection",
                    "title": "Aws Role Arn"
                },
                "aws_role_assumption_duration": {
                    "default": 3600,
                    "description": "Duration to assume the AWS Role for. Maximum of 43200 (12 hours)",
                    "title": "Aws Role Assumption Duration",
                    "type": "integer"
                },
                "s3_staging_dir": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "deprecated": true,
                    "description": "[deprecated in favor of `query_result_location`] S3 query location",
                    "title": "S3 Staging Dir"
                },
                "work_group": {
                    "description": "The name of your Amazon Athena Workgroups",
                    "title": "Work Group",
                    "type": "string"
                },
                "catalog_name": {
                    "default": "awsdatacatalog",
                    "description": "Athena Catalog Name",
                    "title": "Catalog Name",
                    "type": "string"
                },
                "query_result_location": {
                    "description": "S3 path to the [query result bucket](https://docs.aws.amazon.com/athena/latest/ug/querying.html#query-results-specify-location) which should be used by AWS Athena to store results of thequeries executed by DataHub.",
                    "title": "Query Result Location",
                    "type": "string"
                },
                "extract_partitions": {
                    "default": true,
                    "description": "Extract partitions for tables. Partition extraction needs to run a query (`select * from table$partitions`) on the table. Disable this if you don't want to grant select permission.",
                    "title": "Extract Partitions",
                    "type": "boolean"
                },
                "extract_partitions_using_create_statements": {
                    "default": false,
                    "description": "Extract partitions using the `SHOW CREATE TABLE` statement instead of querying the table's partitions directly. This needs to be enabled to extract Iceberg partitions. If extraction fails it falls back to the default partition extraction. This is experimental.",
                    "title": "Extract Partitions Using Create Statements",
                    "type": "boolean"
                },
                "emit_schema_fieldpaths_as_v1": {
                    "default": false,
                    "description": "Convert simple field paths to DataHub field path v1 format. Simple column paths are those that do not contain any nested fields.",
                    "title": "Emit Schema Fieldpaths As V1",
                    "type": "boolean"
                }
            },
            "required": [
                "aws_region",
                "work_group",
                "query_result_location"
            ],
            "title": "AthenaConfig",
            "type": "object"
        },
        "datahub-apply": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "datahub-apply"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/datahub-apply_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "datahub-apply_config": {
            "additionalProperties": false,
            "properties": {
                "domain_apply": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/DomainApplyConfig"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "List to apply domains to assets",
                    "title": "Domain Apply"
                },
                "tag_apply": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/TagApplyConfig"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "List to apply tags to assets",
                    "title": "Tag Apply"
                },
                "term_apply": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/TermApplyConfig"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "List to apply terms to assets",
                    "title": "Term Apply"
                },
                "owner_apply": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/OwnerApplyConfig"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "List to apply owners to assets",
                    "title": "Owner Apply"
                }
            },
            "title": "DataHubApplyConfig",
            "type": "object"
        },
        "redshift": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "redshift"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/redshift_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "redshift_config": {
            "additionalProperties": false,
            "properties": {
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'"
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "enable_stateful_profiling": {
                    "default": true,
                    "description": "Enable stateful profiling. This will store profiling timestamps per dataset after successful profiling. and will not run profiling again in subsequent run if table has not been updated. ",
                    "title": "Enable Stateful Profiling",
                    "type": "boolean"
                },
                "enable_stateful_lineage_ingestion": {
                    "default": true,
                    "description": "Enable stateful lineage ingestion. This will store lineage window timestamps after successful lineage ingestion. and will not run lineage ingestion for same timestamps in subsequent run. NOTE: This only works with use_queries_v2=False (legacy extraction path). For queries v2, use enable_stateful_time_window instead.",
                    "title": "Enable Stateful Lineage Ingestion",
                    "type": "boolean"
                },
                "bucket_duration": {
                    "$ref": "#/$defs/BucketDuration",
                    "default": "DAY",
                    "description": "Size of the time window to aggregate usage stats."
                },
                "end_time": {
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "format": "date-time",
                    "title": "End Time",
                    "type": "string"
                },
                "start_time": {
                    "default": null,
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "format": "date-time",
                    "title": "Start Time",
                    "type": "string"
                },
                "enable_stateful_usage_ingestion": {
                    "default": true,
                    "description": "Enable stateful lineage ingestion. This will store usage window timestamps after successful usage ingestion. and will not run usage ingestion for same timestamps in subsequent run. NOTE: This only works with use_queries_v2=False (legacy extraction path). For queries v2, use enable_stateful_time_window instead.",
                    "title": "Enable Stateful Usage Ingestion",
                    "type": "boolean"
                },
                "top_n_queries": {
                    "default": 10,
                    "description": "Number of top queries to save to each table.",
                    "exclusiveMinimum": 0,
                    "title": "Top N Queries",
                    "type": "integer"
                },
                "user_email_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for user emails to filter in usage."
                },
                "include_operational_stats": {
                    "default": true,
                    "description": "Whether to display operational stats.",
                    "title": "Include Operational Stats",
                    "type": "boolean"
                },
                "include_read_operational_stats": {
                    "default": false,
                    "description": "Whether to report read operational stats. Experimental.",
                    "title": "Include Read Operational Stats",
                    "type": "boolean"
                },
                "format_sql_queries": {
                    "default": false,
                    "description": "Whether to format sql queries",
                    "title": "Format Sql Queries",
                    "type": "boolean"
                },
                "include_top_n_queries": {
                    "default": true,
                    "description": "Whether to ingest the top_n_queries.",
                    "title": "Include Top N Queries",
                    "type": "boolean"
                },
                "email_domain": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Email domain of your organisation so users can be displayed on UI appropriately.",
                    "title": "Email Domain"
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "s3_lineage_config": {
                    "$ref": "#/$defs/S3LineageProviderConfig",
                    "default": {
                        "path_specs": [],
                        "strip_urls": true,
                        "ignore_non_path_spec_path": false
                    },
                    "description": "Common config for S3 lineage generation"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance_map": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A holder for platform -> platform_instance mappings to generate correct dataset urns",
                    "title": "Platform Instance Map"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "description": "host URL",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "default": "dev",
                    "description": "database",
                    "title": "Database",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "default_schema": {
                    "default": "public",
                    "description": "The default schema to use if the sql parser fails to parse the schema with `sql_based` lineage collector",
                    "title": "Default Schema",
                    "type": "string"
                },
                "is_serverless": {
                    "default": false,
                    "description": "Whether target Redshift instance is serverless (alternative is provisioned cluster)",
                    "title": "Is Serverless",
                    "type": "boolean"
                },
                "lineage_generate_queries": {
                    "default": true,
                    "description": "Whether to generate queries entities for the SQL-based lineage collector.",
                    "title": "Lineage Generate Queries",
                    "type": "boolean"
                },
                "include_table_lineage": {
                    "default": true,
                    "description": "Whether table lineage should be ingested.",
                    "title": "Include Table Lineage",
                    "type": "boolean"
                },
                "include_copy_lineage": {
                    "default": true,
                    "description": "Whether lineage should be collected from copy commands",
                    "title": "Include Copy Lineage",
                    "type": "boolean"
                },
                "include_share_lineage": {
                    "default": true,
                    "description": "Whether lineage should be collected from datashares",
                    "title": "Include Share Lineage",
                    "type": "boolean"
                },
                "include_usage_statistics": {
                    "default": false,
                    "description": "Generate usage statistic. email_domain config parameter needs to be set if enabled",
                    "title": "Include Usage Statistics",
                    "type": "boolean"
                },
                "include_unload_lineage": {
                    "default": true,
                    "description": "Whether lineage should be collected from unload commands",
                    "title": "Include Unload Lineage",
                    "type": "boolean"
                },
                "include_table_rename_lineage": {
                    "default": true,
                    "description": "Whether we should follow `alter table ... rename to` statements when computing lineage. ",
                    "title": "Include Table Rename Lineage",
                    "type": "boolean"
                },
                "table_lineage_mode": {
                    "$ref": "#/$defs/LineageMode",
                    "default": "mixed",
                    "description": "Which table lineage collector mode to use. Available modes are: [stl_scan_based, sql_based, mixed]"
                },
                "extra_client_options": {
                    "additionalProperties": true,
                    "default": {},
                    "title": "Extra Client Options",
                    "type": "object"
                },
                "match_fully_qualified_names": {
                    "default": false,
                    "description": "Whether `schema_pattern` is matched against fully qualified schema name `<database>.<schema>`.",
                    "title": "Match Fully Qualified Names",
                    "type": "boolean"
                },
                "extract_column_level_lineage": {
                    "default": true,
                    "description": "Whether to extract column level lineage. This config works with rest-sink only.",
                    "title": "Extract Column Level Lineage",
                    "type": "boolean"
                },
                "patch_custom_properties": {
                    "default": true,
                    "description": "Whether to patch custom properties on existing datasets rather than replace.",
                    "title": "Patch Custom Properties",
                    "type": "boolean"
                },
                "resolve_temp_table_in_lineage": {
                    "default": true,
                    "description": "Whether to resolve temp table appear in lineage to upstream permanent tables.",
                    "title": "Resolve Temp Table In Lineage",
                    "type": "boolean"
                },
                "skip_external_tables": {
                    "default": false,
                    "description": "Whether to skip EXTERNAL tables.",
                    "title": "Skip External Tables",
                    "type": "boolean"
                }
            },
            "required": [
                "host_port"
            ],
            "title": "RedshiftConfig",
            "type": "object"
        },
        "feast": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "feast"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/feast_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "feast_config": {
            "properties": {
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulIngestionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Stateful Ingestion Config"
                },
                "path": {
                    "description": "Path to Feast repository",
                    "title": "Path",
                    "type": "string"
                },
                "fs_yaml_file": {
                    "anyOf": [
                        {
                            "format": "path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Path to the `feature_store.yaml` file used to configure the feature store",
                    "title": "Fs Yaml File"
                },
                "environment": {
                    "default": "PROD",
                    "description": "Environment to use when constructing URNs",
                    "title": "Environment",
                    "type": "string"
                },
                "owner_mappings": {
                    "anyOf": [
                        {
                            "items": {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Mapping of owner names to owner types",
                    "title": "Owner Mappings"
                },
                "enable_owner_extraction": {
                    "default": false,
                    "description": "If this is disabled, then we NEVER try to map owners. If this is enabled, then owner_mappings is REQUIRED to extract ownership.",
                    "title": "Enable Owner Extraction",
                    "type": "boolean"
                },
                "enable_tag_extraction": {
                    "default": false,
                    "description": "If this is disabled, then we NEVER try to extract tags.",
                    "title": "Enable Tag Extraction",
                    "type": "boolean"
                }
            },
            "required": [
                "path"
            ],
            "title": "FeastRepositorySourceConfig",
            "type": "object"
        },
        "cockroachdb": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "cockroachdb"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/cockroachdb_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "cockroachdb_config": {
            "additionalProperties": false,
            "properties": {
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "information_schema",
                            "crdb_internal"
                        ],
                        "ignoreCase": true
                    }
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "description": "host URL",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "database (catalog). If set to Null, all databases will be considered for ingestion.",
                    "title": "Database"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "auth_mode": {
                    "$ref": "#/$defs/PostgresAuthMode",
                    "default": "PASSWORD",
                    "description": "Authentication mode to use for the PostgreSQL connection. Options are 'PASSWORD' (default) for standard username/password authentication, or 'AWS_IAM' for AWS RDS IAM authentication."
                },
                "aws_config": {
                    "$ref": "#/$defs/AwsConnectionConfig",
                    "description": "AWS configuration for RDS IAM authentication (only used when auth_mode is AWS_IAM). Provides full control over AWS credentials, region, profiles, role assumption, retry logic, and proxy settings. If not explicitly configured, boto3 will automatically use the default credential chain and region from environment variables (AWS_DEFAULT_REGION, AWS_REGION), AWS config files (~/.aws/config), or IAM role metadata."
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for databases to filter in ingestion. Note: this is not used if `database` or `sqlalchemy_uri` are provided."
                },
                "initial_database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "postgres",
                    "description": "Initial database used to query for the list of databases, when ingesting multiple databases. Note: this is not used if `database` or `sqlalchemy_uri` are provided.",
                    "title": "Initial Database"
                },
                "include_stored_procedures": {
                    "default": true,
                    "description": "Include ingest of stored procedures.",
                    "title": "Include Stored Procedures",
                    "type": "boolean"
                },
                "procedure_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for stored procedures to filter in ingestion.Specify regex to match the entire procedure name in database.schema.procedure_name format. e.g. to match all procedures starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                }
            },
            "required": [
                "host_port"
            ],
            "title": "CockroachDBConfig",
            "type": "object"
        },
        "clickhouse-usage": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "clickhouse-usage"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/clickhouse-usage_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "clickhouse-usage_config": {
            "additionalProperties": false,
            "properties": {
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance_map": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A holder for platform -> platform_instance mappings to generate correct dataset urns",
                    "title": "Platform Instance Map"
                },
                "bucket_duration": {
                    "$ref": "#/$defs/BucketDuration",
                    "default": "DAY",
                    "description": "Size of the time window to aggregate usage stats."
                },
                "end_time": {
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "format": "date-time",
                    "title": "End Time",
                    "type": "string"
                },
                "start_time": {
                    "default": null,
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "format": "date-time",
                    "title": "Start Time",
                    "type": "string"
                },
                "top_n_queries": {
                    "default": 10,
                    "description": "Number of top queries to save to each table.",
                    "exclusiveMinimum": 0,
                    "title": "Top N Queries",
                    "type": "integer"
                },
                "user_email_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for user emails to filter in usage."
                },
                "include_operational_stats": {
                    "default": true,
                    "description": "Whether to display operational stats.",
                    "title": "Include Operational Stats",
                    "type": "boolean"
                },
                "include_read_operational_stats": {
                    "default": false,
                    "description": "Whether to report read operational stats. Experimental.",
                    "title": "Include Read Operational Stats",
                    "type": "boolean"
                },
                "format_sql_queries": {
                    "default": false,
                    "description": "Whether to format sql queries",
                    "title": "Format Sql Queries",
                    "type": "boolean"
                },
                "include_top_n_queries": {
                    "default": true,
                    "description": "Whether to ingest the top_n_queries.",
                    "title": "Include Top N Queries",
                    "type": "boolean"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "default": "",
                    "description": "password",
                    "format": "password",
                    "title": "Password",
                    "type": "string",
                    "writeOnly": true
                },
                "host_port": {
                    "default": "localhost:8123",
                    "description": "ClickHouse host URL.",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "database (catalog)",
                    "title": "Database"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for databases to filter in ingestion."
                },
                "secure": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "[deprecated] Use uri_opts instead.",
                    "title": "Secure"
                },
                "protocol": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "[deprecated] Use uri_opts instead.",
                    "title": "Protocol"
                },
                "uri_opts": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "default": {},
                    "description": "The part of the URI and it's used to provide additional configuration options or parameters for the database connection.",
                    "title": "Uri Opts",
                    "type": "object"
                },
                "include_table_lineage": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Whether table lineage should be ingested.",
                    "title": "Include Table Lineage"
                },
                "include_materialized_views": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "",
                    "title": "Include Materialized Views"
                },
                "email_domain": {
                    "description": "",
                    "title": "Email Domain",
                    "type": "string"
                },
                "query_log_table": {
                    "default": "system.query_log",
                    "title": "Query Log Table",
                    "type": "string"
                }
            },
            "required": [
                "email_domain"
            ],
            "title": "ClickHouseUsageConfig",
            "type": "object"
        },
        "json-schema": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "json-schema"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/json-schema_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "json-schema_config": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "path": {
                    "anyOf": [
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "format": "directory-path",
                            "type": "string"
                        },
                        {
                            "format": "uri",
                            "minLength": 1,
                            "type": "string"
                        }
                    ],
                    "description": "Set this to a single file-path or a directory-path (for recursive traversal) or a remote url. e.g. https://json.schemastore.org/petstore-v1.0.json",
                    "title": "Path"
                },
                "platform": {
                    "description": "Set this to a platform that you want all schemas to live under. e.g. schemaregistry / schemarepo etc.",
                    "title": "Platform",
                    "type": "string"
                },
                "use_id_as_base_uri": {
                    "default": false,
                    "description": "When enabled, uses the `$id` field in the json schema as the base uri for following references.",
                    "title": "Use Id As Base Uri",
                    "type": "boolean"
                },
                "uri_replace_pattern": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/URIReplacePattern"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Use this if URI-s need to be modified during reference resolution. Simple string match - replace capabilities are supported."
                }
            },
            "required": [
                "path",
                "platform"
            ],
            "title": "JsonSchemaSourceConfig",
            "type": "object"
        },
        "preset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "preset"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/preset_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "preset_config": {
            "additionalProperties": true,
            "properties": {
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "env": {
                    "default": "PROD",
                    "description": "Environment to use in namespace when constructing URNs",
                    "title": "Env",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Preset Stateful Ingestion Config."
                },
                "connect_uri": {
                    "default": "",
                    "description": "Preset workspace URL.",
                    "title": "Connect Uri",
                    "type": "string"
                },
                "display_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "optional URL to use in links (if `connect_uri` is only for ingestion)",
                    "title": "Display Uri"
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Regex patterns for tables to filter to assign domain_key. ",
                    "title": "Domain",
                    "type": "object"
                },
                "dataset_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for dataset to filter in ingestion."
                },
                "chart_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Patterns for selecting chart names that are to be included"
                },
                "dashboard_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Patterns for selecting dashboard names that are to be included"
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for databases to filter in ingestion."
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Superset username.",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Superset password.",
                    "title": "Password"
                },
                "ingest_dashboards": {
                    "default": true,
                    "description": "Enable to ingest dashboards.",
                    "title": "Ingest Dashboards",
                    "type": "boolean"
                },
                "ingest_charts": {
                    "default": true,
                    "description": "Enable to ingest charts.",
                    "title": "Ingest Charts",
                    "type": "boolean"
                },
                "ingest_datasets": {
                    "default": false,
                    "description": "Enable to ingest datasets.",
                    "title": "Ingest Datasets",
                    "type": "boolean"
                },
                "provider": {
                    "default": "db",
                    "description": "Superset provider.",
                    "title": "Provider",
                    "type": "string"
                },
                "options": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "",
                    "title": "Options",
                    "type": "object"
                },
                "timeout": {
                    "default": 10,
                    "description": "Timeout of single API call to superset.",
                    "title": "Timeout",
                    "type": "integer"
                },
                "max_threads": {
                    "description": "Max parallelism for API calls. Defaults to cpuCount or 40",
                    "title": "Max Threads",
                    "type": "integer"
                },
                "database_alias": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "default": {},
                    "description": "Can be used to change mapping for database names in superset to what you have in datahub",
                    "title": "Database Alias",
                    "type": "object"
                },
                "manager_uri": {
                    "default": "https://api.app.preset.io",
                    "description": "Preset.io API URL",
                    "title": "Manager Uri",
                    "type": "string"
                },
                "api_key": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Preset.io API key.",
                    "title": "Api Key"
                },
                "api_secret": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Preset.io API secret.",
                    "title": "Api Secret"
                }
            },
            "title": "PresetConfig",
            "type": "object"
        },
        "glue": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "glue"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/glue_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "glue_config": {
            "additionalProperties": false,
            "properties": {
                "aws_access_key_id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS access key ID. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "title": "Aws Access Key Id"
                },
                "aws_secret_access_key": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS secret access key. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "title": "Aws Secret Access Key"
                },
                "aws_session_token": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS session token. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "title": "Aws Session Token"
                },
                "aws_role": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "$ref": "#/$defs/AwsAssumeRoleConfig"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS roles to assume. If using the string format, the role ARN can be specified directly. If using the object format, the role can be specified in the RoleArn field and additional available arguments are the same as [boto3's STS.Client.assume_role](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html?highlight=assume_role#STS.Client.assume_role).",
                    "title": "Aws Role"
                },
                "aws_profile": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The [named profile](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html) to use from AWS credentials. Falls back to default profile if not specified and no access keys provided. Profiles are configured in ~/.aws/credentials or ~/.aws/config.",
                    "title": "Aws Profile"
                },
                "aws_region": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS region code.",
                    "title": "Aws Region"
                },
                "aws_endpoint_url": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The AWS service endpoint. This is normally [constructed automatically](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html), but can be overridden here.",
                    "title": "Aws Endpoint Url"
                },
                "aws_proxy": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A set of proxy configs to use with AWS. See the [botocore.config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html) docs for details.",
                    "title": "Aws Proxy"
                },
                "aws_retry_num": {
                    "default": 5,
                    "description": "Number of times to retry failed AWS requests. See the [botocore.retry](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/retries.html) docs for details.",
                    "title": "Aws Retry Num",
                    "type": "integer"
                },
                "aws_retry_mode": {
                    "default": "standard",
                    "description": "Retry mode to use for failed AWS requests. See the [botocore.retry](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/retries.html) docs for details.",
                    "enum": [
                        "legacy",
                        "standard",
                        "adaptive"
                    ],
                    "title": "Aws Retry Mode",
                    "type": "string"
                },
                "read_timeout": {
                    "default": 60,
                    "description": "The timeout for reading from the connection (in seconds).",
                    "title": "Read Timeout",
                    "type": "number"
                },
                "aws_advanced_config": {
                    "additionalProperties": true,
                    "description": "Advanced AWS configuration options. These are passed directly to [botocore.config.Config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html).",
                    "title": "Aws Advanced Config",
                    "type": "object"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for databases to filter in ingestion."
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for tables to filter in ingestion."
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": ""
                },
                "platform": {
                    "default": "glue",
                    "description": "The platform to use for the dataset URNs. Must be one of ['glue', 'athena'].",
                    "title": "Platform",
                    "type": "string"
                },
                "extract_owners": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "When enabled, extracts ownership from Glue table property and overwrites existing owners (DATAOWNER). When disabled, ownership is left empty for datasets. Expects a corpGroup urn, a corpuser urn or only the identifier part for the latter. Not used in the normal course of AWS Glue operations.",
                    "title": "Extract Owners"
                },
                "extract_transforms": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Whether to extract Glue transform jobs.",
                    "title": "Extract Transforms"
                },
                "ignore_unsupported_connectors": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Whether to ignore unsupported connectors. If disabled, an error will be raised.",
                    "title": "Ignore Unsupported Connectors"
                },
                "emit_s3_lineage": {
                    "default": false,
                    "description": "Whether to emit S3-to-Glue lineage.",
                    "title": "Emit S3 Lineage",
                    "type": "boolean"
                },
                "glue_s3_lineage_direction": {
                    "default": "upstream",
                    "description": "If `upstream`, S3 is upstream to Glue. If `downstream` S3 is downstream to Glue.",
                    "title": "Glue S3 Lineage Direction",
                    "type": "string"
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "regex patterns for tables to filter to assign domain_key. ",
                    "title": "Domain",
                    "type": "object"
                },
                "catalog_id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The aws account id where the target glue catalog lives. If None, datahub will ingest glue in aws caller's account.",
                    "title": "Catalog Id"
                },
                "ignore_resource_links": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "If set to True, ignore database resource links.",
                    "title": "Ignore Resource Links"
                },
                "use_s3_bucket_tags": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "If an S3 Buckets Tags should be created for the Tables ingested by Glue. Please Note that this will not apply tags to any folders ingested, only the files.",
                    "title": "Use S3 Bucket Tags"
                },
                "use_s3_object_tags": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "If an S3 Objects Tags should be created for the Tables ingested by Glue.",
                    "title": "Use S3 Object Tags"
                },
                "extract_lakeformation_tags": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "When True, extracts Lake Formation tags directly assigned to Glue tables/databases. Note: Tags inherited from databases or other parent resources are excluded.",
                    "title": "Extract Lakeformation Tags"
                },
                "profiling": {
                    "$ref": "#/$defs/GlueProfilingConfig",
                    "description": "Configs to ingest data profiles from glue table"
                },
                "extract_delta_schema_from_parameters": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "If enabled, delta schemas can be alternatively fetched from table parameters.",
                    "title": "Extract Delta Schema From Parameters"
                },
                "include_column_lineage": {
                    "default": true,
                    "description": "When enabled, column-level lineage will be extracted from the s3.",
                    "title": "Include Column Lineage",
                    "type": "boolean"
                }
            },
            "title": "GlueSourceConfig",
            "type": "object"
        },
        "metabase": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "metabase"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/metabase_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "metabase_config": {
            "additionalProperties": false,
            "properties": {
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance_map": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A holder for platform -> platform_instance mappings to generate correct dataset urns",
                    "title": "Platform Instance Map"
                },
                "connect_uri": {
                    "default": "localhost:3000",
                    "description": "Metabase host URL.",
                    "title": "Connect Uri",
                    "type": "string"
                },
                "display_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "optional URL to use in links (if `connect_uri` is only for ingestion)",
                    "title": "Display Uri"
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Metabase username, used when an API key is not provided.",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Metabase password, used when an API key is not provided.",
                    "title": "Password"
                },
                "api_key": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Metabase API key. If provided, the username and password will be ignored. Recommended method.",
                    "title": "Api Key"
                },
                "database_alias_map": {
                    "anyOf": [
                        {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Database name map to use when constructing dataset URN.",
                    "title": "Database Alias Map"
                },
                "engine_platform_map": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Custom mappings between metabase database engines and DataHub platforms",
                    "title": "Engine Platform Map"
                },
                "database_id_to_instance_map": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Custom mappings between metabase database id and DataHub platform instance",
                    "title": "Database Id To Instance Map"
                },
                "default_schema": {
                    "default": "public",
                    "description": "Default schema name to use when schema is not provided in an SQL query",
                    "title": "Default Schema",
                    "type": "string"
                },
                "exclude_other_user_collections": {
                    "default": false,
                    "description": "Flag that if true, exclude other user collections",
                    "title": "Exclude Other User Collections",
                    "type": "boolean"
                }
            },
            "title": "MetabaseConfig",
            "type": "object"
        },
        "starburst-trino-usage": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "starburst-trino-usage"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/starburst-trino-usage_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "starburst-trino-usage_config": {
            "additionalProperties": false,
            "properties": {
                "bucket_duration": {
                    "$ref": "#/$defs/BucketDuration",
                    "default": "DAY",
                    "description": "Size of the time window to aggregate usage stats."
                },
                "end_time": {
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "format": "date-time",
                    "title": "End Time",
                    "type": "string"
                },
                "start_time": {
                    "default": null,
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "format": "date-time",
                    "title": "Start Time",
                    "type": "string"
                },
                "top_n_queries": {
                    "default": 10,
                    "description": "Number of top queries to save to each table.",
                    "exclusiveMinimum": 0,
                    "title": "Top N Queries",
                    "type": "integer"
                },
                "user_email_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for user emails to filter in usage."
                },
                "include_operational_stats": {
                    "default": true,
                    "description": "Whether to display operational stats.",
                    "title": "Include Operational Stats",
                    "type": "boolean"
                },
                "include_read_operational_stats": {
                    "default": false,
                    "description": "Whether to report read operational stats. Experimental.",
                    "title": "Include Read Operational Stats",
                    "type": "boolean"
                },
                "format_sql_queries": {
                    "default": false,
                    "description": "Whether to format sql queries",
                    "title": "Format Sql Queries",
                    "type": "boolean"
                },
                "include_top_n_queries": {
                    "default": true,
                    "description": "Whether to ingest the top_n_queries.",
                    "title": "Include Top N Queries",
                    "type": "boolean"
                },
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'"
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "description": "host URL",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "description": "The name of the catalog from getting the usage",
                    "title": "Database",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "catalog_to_connector_details": {
                    "additionalProperties": {
                        "$ref": "#/$defs/ConnectorDetail"
                    },
                    "default": {},
                    "description": "A mapping of trino catalog to its connector details like connector database, env and platform instance.This configuration is used to build lineage to the underlying connector. Use catalog name as key.",
                    "title": "Catalog To Connector Details",
                    "type": "object"
                },
                "ingest_lineage_to_connectors": {
                    "default": true,
                    "description": "Whether lineage of datasets to connectors should be ingested",
                    "title": "Ingest Lineage To Connectors",
                    "type": "boolean"
                },
                "trino_as_primary": {
                    "default": true,
                    "description": "Experimental feature. Whether trino dataset should be primary entity of the set of siblings",
                    "title": "Trino As Primary",
                    "type": "boolean"
                },
                "email_domain": {
                    "description": "The email domain which will be appended to the users ",
                    "title": "Email Domain",
                    "type": "string"
                },
                "audit_catalog": {
                    "description": "The catalog name where the audit table can be found ",
                    "title": "Audit Catalog",
                    "type": "string"
                },
                "audit_schema": {
                    "description": "The schema name where the audit table can be found",
                    "title": "Audit Schema",
                    "type": "string"
                }
            },
            "required": [
                "host_port",
                "database",
                "email_domain",
                "audit_catalog",
                "audit_schema"
            ],
            "title": "TrinoUsageConfig",
            "type": "object"
        },
        "sagemaker": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "sagemaker"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/sagemaker_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "sagemaker_config": {
            "additionalProperties": false,
            "properties": {
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "aws_access_key_id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS access key ID. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "title": "Aws Access Key Id"
                },
                "aws_secret_access_key": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS secret access key. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "title": "Aws Secret Access Key"
                },
                "aws_session_token": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS session token. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "title": "Aws Session Token"
                },
                "aws_role": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "$ref": "#/$defs/AwsAssumeRoleConfig"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS roles to assume. If using the string format, the role ARN can be specified directly. If using the object format, the role can be specified in the RoleArn field and additional available arguments are the same as [boto3's STS.Client.assume_role](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html?highlight=assume_role#STS.Client.assume_role).",
                    "title": "Aws Role"
                },
                "aws_profile": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The [named profile](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html) to use from AWS credentials. Falls back to default profile if not specified and no access keys provided. Profiles are configured in ~/.aws/credentials or ~/.aws/config.",
                    "title": "Aws Profile"
                },
                "aws_region": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS region code.",
                    "title": "Aws Region"
                },
                "aws_endpoint_url": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The AWS service endpoint. This is normally [constructed automatically](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html), but can be overridden here.",
                    "title": "Aws Endpoint Url"
                },
                "aws_proxy": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A set of proxy configs to use with AWS. See the [botocore.config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html) docs for details.",
                    "title": "Aws Proxy"
                },
                "aws_retry_num": {
                    "default": 5,
                    "description": "Number of times to retry failed AWS requests. See the [botocore.retry](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/retries.html) docs for details.",
                    "title": "Aws Retry Num",
                    "type": "integer"
                },
                "aws_retry_mode": {
                    "default": "standard",
                    "description": "Retry mode to use for failed AWS requests. See the [botocore.retry](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/retries.html) docs for details.",
                    "enum": [
                        "legacy",
                        "standard",
                        "adaptive"
                    ],
                    "title": "Aws Retry Mode",
                    "type": "string"
                },
                "read_timeout": {
                    "default": 60,
                    "description": "The timeout for reading from the connection (in seconds).",
                    "title": "Read Timeout",
                    "type": "number"
                },
                "aws_advanced_config": {
                    "additionalProperties": true,
                    "description": "Advanced AWS configuration options. These are passed directly to [botocore.config.Config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html).",
                    "title": "Aws Advanced Config",
                    "type": "object"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for databases to filter in ingestion."
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for tables to filter in ingestion."
                },
                "extract_feature_groups": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Whether to extract feature groups.",
                    "title": "Extract Feature Groups"
                },
                "extract_models": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Whether to extract models.",
                    "title": "Extract Models"
                },
                "extract_jobs": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Whether to extract AutoML jobs.",
                    "title": "Extract Jobs"
                }
            },
            "title": "SagemakerSourceConfig",
            "type": "object"
        },
        "slack": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "slack"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/slack_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "slack_config": {
            "properties": {
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulIngestionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Stateful Ingestion Config"
                },
                "bot_token": {
                    "description": "Bot token for the Slack workspace. Needs `users:read`, `users:read.email`, `users.profile:read`, and `team:read` scopes.",
                    "format": "password",
                    "title": "Bot Token",
                    "type": "string",
                    "writeOnly": true
                },
                "enrich_user_metadata": {
                    "default": true,
                    "description": "When enabled, will enrich provisioned DataHub users' metadata with information from Slack.",
                    "title": "Enrich User Metadata",
                    "type": "boolean"
                },
                "ingest_users": {
                    "default": true,
                    "description": "Whether to ingest users. When set to true, will ingest all users in the Slack workspace (as platform resources) to simplify user enrichment after they are provisioned on DataHub.",
                    "title": "Ingest Users",
                    "type": "boolean"
                },
                "api_requests_per_min": {
                    "default": 10,
                    "description": "Number of API requests per minute. Low-level config. Do not tweak unless you are facing any issues.",
                    "title": "Api Requests Per Min",
                    "type": "integer"
                },
                "ingest_public_channels": {
                    "default": false,
                    "description": "Whether to ingest public channels. If set to true needs `channels:read` scope.",
                    "title": "Ingest Public Channels",
                    "type": "boolean"
                },
                "channels_iteration_limit": {
                    "default": 200,
                    "description": "Limit the number of channels to be ingested in a iteration. Low-level config. Do not tweak unless you are facing any issues.",
                    "title": "Channels Iteration Limit",
                    "type": "integer"
                },
                "channel_min_members": {
                    "default": 2,
                    "description": "Ingest channels with at least this many members.",
                    "title": "Channel Min Members",
                    "type": "integer"
                },
                "should_ingest_archived_channels": {
                    "default": false,
                    "description": "Whether to ingest archived channels.",
                    "title": "Should Ingest Archived Channels",
                    "type": "boolean"
                }
            },
            "required": [
                "bot_token"
            ],
            "title": "SlackSourceConfig",
            "type": "object"
        },
        "vertexai": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "vertexai"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/vertexai_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "vertexai_config": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "credential": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/GCPCredential"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "GCP credential information"
                },
                "project_id": {
                    "description": "Project ID in Google Cloud Platform",
                    "title": "Project Id",
                    "type": "string"
                },
                "region": {
                    "description": "Region of your project in Google Cloud Platform",
                    "title": "Region",
                    "type": "string"
                },
                "bucket_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Bucket URI used in your project",
                    "title": "Bucket Uri"
                },
                "vertexai_url": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "https://console.cloud.google.com/vertex-ai",
                    "description": "VertexUI URI",
                    "title": "Vertexai Url"
                }
            },
            "required": [
                "project_id",
                "region"
            ],
            "title": "VertexAIConfig",
            "type": "object"
        },
        "dremio": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "dremio"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/dremio_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "dremio_config": {
            "additionalProperties": false,
            "properties": {
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "bucket_duration": {
                    "$ref": "#/$defs/BucketDuration",
                    "default": "DAY",
                    "description": "Size of the time window to aggregate usage stats."
                },
                "end_time": {
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "format": "date-time",
                    "title": "End Time",
                    "type": "string"
                },
                "start_time": {
                    "default": null,
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "format": "date-time",
                    "title": "Start Time",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "hostname": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Hostname or IP Address of the Dremio server",
                    "title": "Hostname"
                },
                "port": {
                    "default": 9047,
                    "description": "Port of the Dremio REST API",
                    "title": "Port",
                    "type": "integer"
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Dremio username",
                    "title": "Username"
                },
                "authentication_method": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "PAT",
                    "description": "Authentication method: 'password' or 'PAT' (Personal Access Token)",
                    "title": "Authentication Method"
                },
                "password": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Dremio password or Personal Access Token",
                    "title": "Password"
                },
                "tls": {
                    "default": true,
                    "description": "Whether the Dremio REST API port is encrypted",
                    "title": "Tls",
                    "type": "boolean"
                },
                "disable_certificate_verification": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Disable TLS certificate verification",
                    "title": "Disable Certificate Verification"
                },
                "path_to_certificates": {
                    "default": "/home/runner/work/datahub/datahub/metadata-ingestion/venv/lib/python3.10/site-packages/certifi/cacert.pem",
                    "description": "Path to SSL certificates",
                    "title": "Path To Certificates",
                    "type": "string"
                },
                "is_dremio_cloud": {
                    "default": false,
                    "description": "Whether this is a Dremio Cloud instance",
                    "title": "Is Dremio Cloud",
                    "type": "boolean"
                },
                "dremio_cloud_region": {
                    "default": "US",
                    "description": "Dremio Cloud region ('US' or 'EU')",
                    "enum": [
                        "US",
                        "EU"
                    ],
                    "title": "Dremio Cloud Region",
                    "type": "string"
                },
                "dremio_cloud_project_id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "ID of Dremio Cloud Project. Found in Project Settings in the Dremio Cloud UI",
                    "title": "Dremio Cloud Project Id"
                },
                "domain": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Domain for all source objects.",
                    "title": "Domain"
                },
                "source_mappings": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/DremioSourceMapping"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Mappings from Dremio sources to DataHub platforms and datasets.",
                    "title": "Source Mappings"
                },
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for schemas to filter"
                },
                "dataset_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables and views to filter in ingestion. Specify regex to match the entire table name in dremio.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'dremio.public.customer.*'"
                },
                "usage": {
                    "$ref": "#/$defs/BaseUsageConfig",
                    "default": {
                        "bucket_duration": "DAY",
                        "end_time": "2025-10-24T00:46:30.070292Z",
                        "start_time": "2025-10-23T00:00:00Z",
                        "queries_character_limit": 24000,
                        "top_n_queries": 10,
                        "user_email_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "include_operational_stats": true,
                        "include_read_operational_stats": false,
                        "format_sql_queries": false,
                        "include_top_n_queries": true
                    },
                    "description": "The usage config to use when generating usage statistics"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to profile"
                },
                "profiling": {
                    "$ref": "#/$defs/ProfileConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": false,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "query_timeout": 300
                    },
                    "description": "Configuration for profiling"
                },
                "max_workers": {
                    "default": 20,
                    "description": "Number of worker threads to use for parallel processing",
                    "title": "Max Workers",
                    "type": "integer"
                },
                "include_query_lineage": {
                    "default": false,
                    "description": "Whether to include query-based lineage information.",
                    "title": "Include Query Lineage",
                    "type": "boolean"
                },
                "ingest_owner": {
                    "default": true,
                    "description": "Ingest Owner from source. This will override Owner info entered from UI",
                    "title": "Ingest Owner",
                    "type": "boolean"
                }
            },
            "title": "DremioSourceConfig",
            "type": "object"
        },
        "lookml": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "lookml"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/lookml_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "lookml_config": {
            "additionalProperties": false,
            "properties": {
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": ""
                },
                "explore_naming_pattern": {
                    "$ref": "#/$defs/LookerNamingPattern",
                    "default": {
                        "pattern": "{model}.explore.{name}"
                    },
                    "description": "Pattern for providing dataset names to explores. Allowed variables are ['platform', 'env', 'project', 'model', 'name']"
                },
                "explore_browse_pattern": {
                    "$ref": "#/$defs/LookerNamingPattern",
                    "default": {
                        "pattern": "/Explore/{model}"
                    },
                    "description": "Pattern for providing browse paths to explores. Allowed variables are ['platform', 'env', 'project', 'model', 'name']"
                },
                "view_naming_pattern": {
                    "$ref": "#/$defs/LookerViewNamingPattern",
                    "default": {
                        "pattern": "{project}.view.{name}"
                    },
                    "description": "Pattern for providing dataset names to views. Allowed variables are ['platform', 'env', 'project', 'model', 'name', 'file_path', 'folder_path']"
                },
                "view_browse_pattern": {
                    "$ref": "#/$defs/LookerViewNamingPattern",
                    "default": {
                        "pattern": "/Develop/{project}/{folder_path}"
                    },
                    "description": "Pattern for providing browse paths to views. Allowed variables are ['platform', 'env', 'project', 'model', 'name', 'file_path', 'folder_path']"
                },
                "tag_measures_and_dimensions": {
                    "default": true,
                    "description": "When enabled, attaches tags to measures, dimensions and dimension groups to make them more discoverable. When disabled, adds this information to the description of the column.",
                    "title": "Tag Measures And Dimensions",
                    "type": "boolean"
                },
                "extract_column_level_lineage": {
                    "default": true,
                    "description": "When enabled, extracts column-level lineage from Views and Explores",
                    "title": "Extract Column Level Lineage",
                    "type": "boolean"
                },
                "git_info": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/GitInfo"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Reference to your git location. If present, supplies handy links to your lookml on the dataset entity page."
                },
                "base_folder": {
                    "anyOf": [
                        {
                            "format": "directory-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Required if not providing github configuration and deploy keys. A pointer to a local directory (accessible to the ingestion system) where the root of the LookML repo has been checked out (typically via a git clone). This is typically the root folder where the `*.model.lkml` and `*.view.lkml` files are stored. e.g. If you have checked out your LookML repo under `/Users/jdoe/workspace/my-lookml-repo`, then set `base_folder` to `/Users/jdoe/workspace/my-lookml-repo`.",
                    "title": "Base Folder"
                },
                "project_dependencies": {
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "format": "directory-path",
                                "type": "string"
                            },
                            {
                                "$ref": "#/$defs/GitInfo"
                            }
                        ]
                    },
                    "default": {},
                    "description": "A map of project_name to local directory (accessible to the ingestion system) or Git credentials. Every local_dependencies or private remote_dependency listed in the main project's manifest.lkml file should have a corresponding entry here.If a deploy key is not provided, the ingestion system will use the same deploy key as the main project. ",
                    "title": "Project Dependencies",
                    "type": "object"
                },
                "connection_to_platform_map": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "$ref": "#/$defs/LookerConnectionDefinition"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A mapping of [Looker connection names](https://docs.looker.com/reference/model-params/connection-for-model) to DataHub platform, database, and schema values.",
                    "title": "Connection To Platform Map"
                },
                "model_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "List of regex patterns for LookML models to include in the extraction."
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "List of regex patterns for LookML views to include in the extraction."
                },
                "parse_table_names_from_sql": {
                    "default": true,
                    "description": "See note below.",
                    "title": "Parse Table Names From Sql",
                    "type": "boolean"
                },
                "use_api_for_view_lineage": {
                    "default": false,
                    "description": "When enabled, uses Looker API to get SQL representation of views for lineage parsing instead of parsing LookML files directly. Requires 'api' configuration to be provided.Coverage of regex based lineage extraction has limitations, it only supportes ${TABLE}.column_name syntax, See (https://cloud.google.com/looker/docs/reference/param-field-sql#sql_for_dimensions) tounderstand the other substitutions and cross-references allowed in LookML.",
                    "title": "Use Api For View Lineage",
                    "type": "boolean"
                },
                "use_api_cache_for_view_lineage": {
                    "default": false,
                    "description": "When enabled, uses Looker API server-side caching for query execution. Requires 'api' configuration to be provided.",
                    "title": "Use Api Cache For View Lineage",
                    "type": "boolean"
                },
                "api": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/LookerAPIConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "project_name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Required if you don't specify the `api` section. The project name within which all the model files live. See (https://docs.looker.com/data-modeling/getting-started/how-project-works) to understand what the Looker project name should be. The simplest way to see your projects is to click on `Develop` followed by `Manage LookML Projects` in the Looker application.",
                    "title": "Project Name"
                },
                "transport_options": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TransportOptionsConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Populates the [TransportOptions](https://github.com/looker-open-source/sdk-codegen/blob/94d6047a0d52912ac082eb91616c1e7c379ab262/python/looker_sdk/rtl/transport.py#L70) struct for looker client"
                },
                "max_file_snippet_length": {
                    "default": 512000,
                    "description": "When extracting the view definition from a lookml file, the maximum number of characters to extract.",
                    "title": "Max File Snippet Length",
                    "type": "integer"
                },
                "emit_reachable_views_only": {
                    "default": true,
                    "description": "When enabled, only views that are reachable from explores defined in the model files are emitted. If set to False, all views imported in model files are emitted. Views that are unreachable i.e. not explicitly defined in the model files are currently not emitted however reported as warning for debugging purposes.",
                    "title": "Emit Reachable Views Only",
                    "type": "boolean"
                },
                "populate_sql_logic_for_missing_descriptions": {
                    "default": false,
                    "description": "When enabled, field descriptions will include the sql logic for computed fields if descriptions are missing",
                    "title": "Populate Sql Logic For Missing Descriptions",
                    "type": "boolean"
                },
                "process_isolation_for_sql_parsing": {
                    "default": false,
                    "description": "When enabled, sql parsing will be executed in a separate process to prevent memory leaks.",
                    "title": "Process Isolation For Sql Parsing",
                    "type": "boolean"
                },
                "process_refinements": {
                    "default": false,
                    "description": "When enabled, looker refinement will be processed to adapt an existing view.",
                    "title": "Process Refinements",
                    "type": "boolean"
                },
                "liquid_variables": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "A dictionary containing Liquid variables with their corresponding values, utilized in SQL-defined derived views. The Liquid template will be resolved in view.derived_table.sql and view.sql_table_name. Defaults to an empty dictionary.",
                    "title": "Liquid Variables",
                    "type": "object"
                },
                "lookml_constants": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "default": {},
                    "description": "A dictionary containing LookML constants (`@{constant_name}`) and their values. If a constant is defined in the `manifest.lkml` file, its value will be used. If not found in the manifest, the value from this config will be used instead. Defaults to an empty dictionary.",
                    "title": "Lookml Constants",
                    "type": "object"
                },
                "looker_environment": {
                    "default": "prod",
                    "description": "A looker prod or dev environment. It helps to evaluate looker if comments i.e. -- if prod --. All if comments are evaluated to true for configured looker_environment value",
                    "enum": [
                        "prod",
                        "dev"
                    ],
                    "title": "Looker Environment",
                    "type": "string"
                }
            },
            "title": "LookMLSourceConfig",
            "type": "object"
        },
        "salesforce": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "salesforce"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/salesforce_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "salesforce_config": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulIngestionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Stateful Ingestion Config"
                },
                "platform": {
                    "default": "salesforce",
                    "title": "Platform",
                    "type": "string"
                },
                "auth": {
                    "$ref": "#/$defs/SalesforceAuthType",
                    "default": "USERNAME_PASSWORD"
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Salesforce username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Password for Salesforce user",
                    "title": "Password"
                },
                "consumer_key": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Consumer key for Salesforce JSON web token access",
                    "title": "Consumer Key"
                },
                "private_key": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Private key as a string for Salesforce JSON web token access",
                    "title": "Private Key"
                },
                "security_token": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Security token for Salesforce username",
                    "title": "Security Token"
                },
                "instance_url": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Salesforce instance url. e.g. https://MyDomainName.my.salesforce.com",
                    "title": "Instance Url"
                },
                "is_sandbox": {
                    "default": false,
                    "description": "Connect to Sandbox instance of your Salesforce",
                    "title": "Is Sandbox",
                    "type": "boolean"
                },
                "access_token": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Access token for instance url",
                    "title": "Access Token"
                },
                "ingest_tags": {
                    "default": false,
                    "description": "Ingest Tags from source. This will override Tags entered from UI",
                    "title": "Ingest Tags",
                    "type": "boolean"
                },
                "object_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for Salesforce objects to filter in ingestion."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Regex patterns for tables/schemas to describe domain_key domain key (domain_key can be any string like \"sales\".) There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "api_version": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "If specified, overrides default version used by the Salesforce package. Example value: '59.0'",
                    "title": "Api Version"
                },
                "profiling": {
                    "$ref": "#/$defs/SalesforceProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        }
                    }
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for profiles to filter in ingestion, allowed by the `object_pattern`."
                },
                "use_referenced_entities_as_upstreams": {
                    "default": false,
                    "description": "(Experimental) If enabled, referenced entities will be treated as upstream entities.",
                    "title": "Use Referenced Entities As Upstreams",
                    "type": "boolean"
                }
            },
            "title": "SalesforceConfig",
            "type": "object"
        },
        "nifi": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "nifi"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/nifi_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "nifi_config": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulIngestionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Stateful Ingestion Config"
                },
                "site_url": {
                    "description": "URL for Nifi, ending with /nifi/. e.g. https://mynifi.domain/nifi/",
                    "title": "Site Url",
                    "type": "string"
                },
                "auth": {
                    "$ref": "#/$defs/NifiAuthType",
                    "default": "NO_AUTH",
                    "description": "Nifi authentication. must be one of : NO_AUTH, SINGLE_USER, CLIENT_CERT, KERBEROS"
                },
                "provenance_days": {
                    "default": 7,
                    "description": "time window to analyze provenance events for external datasets",
                    "title": "Provenance Days",
                    "type": "integer"
                },
                "process_group_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for filtering process groups"
                },
                "site_name": {
                    "default": "default",
                    "description": "Site name to identify this site with, useful when using input and output ports receiving remote connections",
                    "title": "Site Name",
                    "type": "string"
                },
                "site_url_to_site_name": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "default": {},
                    "description": "Lookup to find site_name for site_url ending with /nifi/, required if using remote process groups in nifi flow",
                    "title": "Site Url To Site Name",
                    "type": "object"
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Nifi username, must be set for auth = \"SINGLE_USER\"",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Nifi password, must be set for auth = \"SINGLE_USER\"",
                    "title": "Password"
                },
                "client_cert_file": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Path to PEM file containing the public certificates for the user/client identity, must be set for auth = \"CLIENT_CERT\"",
                    "title": "Client Cert File"
                },
                "client_key_file": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Path to PEM file containing the client\u2019s secret key",
                    "title": "Client Key File"
                },
                "client_key_password": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The password to decrypt the client_key_file",
                    "title": "Client Key Password"
                },
                "ca_file": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Path to PEM file containing certs for the root CA(s) for the NiFi.Set to False to disable SSL verification.",
                    "title": "Ca File"
                },
                "emit_process_group_as_container": {
                    "default": false,
                    "description": "Whether to emit Nifi process groups as container entities.",
                    "title": "Emit Process Group As Container",
                    "type": "boolean"
                },
                "incremental_lineage": {
                    "default": true,
                    "description": "When enabled, emits incremental/patch lineage for Nifi processors. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                }
            },
            "required": [
                "site_url"
            ],
            "title": "NifiSourceConfig",
            "type": "object"
        },
        "mlflow": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "mlflow"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/mlflow_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "mlflow_config": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "tracking_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Tracking server URI. If not set, an MLflow default tracking_uri is used (local `mlruns/` directory or `MLFLOW_TRACKING_URI` environment variable)",
                    "title": "Tracking Uri"
                },
                "registry_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Registry server URI. If not set, an MLflow default registry_uri is used (value of tracking_uri or `MLFLOW_REGISTRY_URI` environment variable)",
                    "title": "Registry Uri"
                },
                "model_name_separator": {
                    "default": "_",
                    "description": "A string which separates model name from its version (e.g. model_1 or model-1)",
                    "title": "Model Name Separator",
                    "type": "string"
                },
                "base_external_url": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Base URL to use when constructing external URLs to MLflow. If not set, tracking_uri is used if it's an HTTP URL. If neither is set, external URLs are not generated.",
                    "title": "Base External Url"
                },
                "materialize_dataset_inputs": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Whether to materialize dataset inputs for each run",
                    "title": "Materialize Dataset Inputs"
                },
                "source_mapping_to_platform": {
                    "anyOf": [
                        {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Mapping of source type to datahub platform",
                    "title": "Source Mapping To Platform"
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Username for MLflow authentication",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Password for MLflow authentication",
                    "title": "Password"
                }
            },
            "title": "MLflowConfig",
            "type": "object"
        },
        "trino": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "trino"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/trino_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "trino_config": {
            "additionalProperties": false,
            "properties": {
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'"
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "description": "host URL",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "description": "database (catalog)",
                    "title": "Database",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "catalog_to_connector_details": {
                    "additionalProperties": {
                        "$ref": "#/$defs/ConnectorDetail"
                    },
                    "default": {},
                    "description": "A mapping of trino catalog to its connector details like connector database, env and platform instance.This configuration is used to build lineage to the underlying connector. Use catalog name as key.",
                    "title": "Catalog To Connector Details",
                    "type": "object"
                },
                "ingest_lineage_to_connectors": {
                    "default": true,
                    "description": "Whether lineage of datasets to connectors should be ingested",
                    "title": "Ingest Lineage To Connectors",
                    "type": "boolean"
                },
                "trino_as_primary": {
                    "default": true,
                    "description": "Experimental feature. Whether trino dataset should be primary entity of the set of siblings",
                    "title": "Trino As Primary",
                    "type": "boolean"
                }
            },
            "required": [
                "host_port",
                "database"
            ],
            "title": "TrinoConfig",
            "type": "object"
        },
        "file": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "file"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/file_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "file_config": {
            "properties": {
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "path": {
                    "description": "File path to folder or file to ingest, or URL to a remote file. If pointed to a folder, all files with extension {file_extension} (default json) within that folder will be processed.",
                    "title": "Path",
                    "type": "string"
                },
                "file_extension": {
                    "default": ".json",
                    "description": "When providing a folder to use to read files, set this field to control file extensions that you want the source to process. * is a special value that means process every file regardless of extension",
                    "title": "File Extension",
                    "type": "string"
                },
                "read_mode": {
                    "$ref": "#/$defs/FileReadMode",
                    "default": "AUTO"
                },
                "aspect": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Set to an aspect to only read this aspect for ingestion.",
                    "title": "Aspect"
                },
                "count_all_before_starting": {
                    "default": true,
                    "description": "When enabled, counts total number of records in the file before starting. Used for accurate estimation of completion time. Turn it off if startup time is too high.",
                    "title": "Count All Before Starting",
                    "type": "boolean"
                }
            },
            "required": [
                "path"
            ],
            "title": "FileSourceConfig",
            "type": "object"
        },
        "datahub-business-glossary": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "datahub-business-glossary"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/datahub-business-glossary_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "datahub-business-glossary_config": {
            "additionalProperties": false,
            "properties": {
                "file": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "format": "path",
                            "type": "string"
                        }
                    ],
                    "description": "File path or URL to business glossary file to ingest.",
                    "title": "File"
                },
                "enable_auto_id": {
                    "default": false,
                    "description": "Generate guid urns instead of a plaintext path urn with the node/term's hierarchy.",
                    "title": "Enable Auto Id",
                    "type": "boolean"
                }
            },
            "required": [
                "file"
            ],
            "title": "BusinessGlossarySourceConfig",
            "type": "object"
        },
        "elasticsearch": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "elasticsearch"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/elasticsearch_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "elasticsearch_config": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulIngestionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Stateful Ingestion Config"
                },
                "host": {
                    "default": "localhost:9200",
                    "description": "The elastic search host URI.",
                    "title": "Host",
                    "type": "string"
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The username credential.",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The password credential.",
                    "title": "Password"
                },
                "api_key": {
                    "anyOf": [
                        {},
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "API Key authentication. Accepts either a list with id and api_key (UTF-8 representation), or a base64 encoded string of id and api_key combined by ':'.",
                    "title": "Api Key"
                },
                "use_ssl": {
                    "default": false,
                    "description": "Whether to use SSL for the connection or not.",
                    "title": "Use Ssl",
                    "type": "boolean"
                },
                "verify_certs": {
                    "default": false,
                    "description": "Whether to verify SSL certificates.",
                    "title": "Verify Certs",
                    "type": "boolean"
                },
                "ca_certs": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Path to a certificate authority (CA) certificate.",
                    "title": "Ca Certs"
                },
                "client_cert": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Path to the file containing the private key and the certificate, or cert only if using client_key.",
                    "title": "Client Cert"
                },
                "client_key": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Path to the file containing the private key if using separate cert and key files.",
                    "title": "Client Key"
                },
                "ssl_assert_hostname": {
                    "default": false,
                    "description": "Use hostname verification if not False.",
                    "title": "Ssl Assert Hostname",
                    "type": "boolean"
                },
                "ssl_assert_fingerprint": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Verify the supplied certificate fingerprint if not None.",
                    "title": "Ssl Assert Fingerprint"
                },
                "url_prefix": {
                    "default": "",
                    "description": "There are cases where an enterprise would have multiple elastic search clusters. One way for them to manage is to have a single endpoint for all the elastic search clusters and use url_prefix for routing requests to different clusters.",
                    "title": "Url Prefix",
                    "type": "string"
                },
                "index_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "^_.*",
                            "^ilm-history.*"
                        ],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for indexes to filter in ingestion."
                },
                "ingest_index_templates": {
                    "default": false,
                    "description": "Ingests ES index templates if enabled.",
                    "title": "Ingest Index Templates",
                    "type": "boolean"
                },
                "index_template_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "^_.*"
                        ],
                        "ignoreCase": true
                    },
                    "description": "The regex patterns for filtering index templates to ingest."
                },
                "profiling": {
                    "$ref": "#/$defs/ElasticProfiling",
                    "description": "Configs to ingest data profiles from ElasticSearch."
                },
                "collapse_urns": {
                    "$ref": "#/$defs/CollapseUrns",
                    "description": "List of regex patterns to remove from the name of the URN. All of the indices before removal of URNs are considered as the same dataset. These are applied in order for each URN.\n        The main case where you would want to have multiple of these if the name where you are trying to remove suffix from have different formats.\n        e.g. ending with -YYYY-MM-DD as well as ending -epochtime would require you to have 2 regex patterns to remove the suffixes across all URNs."
                }
            },
            "title": "ElasticsearchSourceConfig",
            "type": "object"
        },
        "hana": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "hana"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/hana_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "hana_config": {
            "additionalProperties": false,
            "properties": {
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'"
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "default": "localhost:39041",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "database (catalog)",
                    "title": "Database"
                },
                "scheme": {
                    "default": "hana+hdbcli",
                    "title": "Scheme",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                }
            },
            "title": "HanaConfig",
            "type": "object"
        },
        "looker": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "looker"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/looker_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "looker_config": {
            "additionalProperties": false,
            "properties": {
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": ""
                },
                "explore_naming_pattern": {
                    "$ref": "#/$defs/LookerNamingPattern",
                    "default": {
                        "pattern": "{model}.explore.{name}"
                    },
                    "description": "Pattern for providing dataset names to explores. Allowed variables are ['platform', 'env', 'project', 'model', 'name']"
                },
                "explore_browse_pattern": {
                    "$ref": "#/$defs/LookerNamingPattern",
                    "default": {
                        "pattern": "/Explore/{model}"
                    },
                    "description": "Pattern for providing browse paths to explores. Allowed variables are ['platform', 'env', 'project', 'model', 'name']"
                },
                "view_naming_pattern": {
                    "$ref": "#/$defs/LookerViewNamingPattern",
                    "default": {
                        "pattern": "{project}.view.{name}"
                    },
                    "description": "Pattern for providing dataset names to views. Allowed variables are ['platform', 'env', 'project', 'model', 'name', 'file_path', 'folder_path']"
                },
                "view_browse_pattern": {
                    "$ref": "#/$defs/LookerViewNamingPattern",
                    "default": {
                        "pattern": "/Develop/{project}/{folder_path}"
                    },
                    "description": "Pattern for providing browse paths to views. Allowed variables are ['platform', 'env', 'project', 'model', 'name', 'file_path', 'folder_path']"
                },
                "tag_measures_and_dimensions": {
                    "default": true,
                    "description": "When enabled, attaches tags to measures, dimensions and dimension groups to make them more discoverable. When disabled, adds this information to the description of the column.",
                    "title": "Tag Measures And Dimensions",
                    "type": "boolean"
                },
                "extract_column_level_lineage": {
                    "default": true,
                    "description": "When enabled, extracts column-level lineage from Views and Explores",
                    "title": "Extract Column Level Lineage",
                    "type": "boolean"
                },
                "client_id": {
                    "description": "Looker API client id.",
                    "title": "Client Id",
                    "type": "string"
                },
                "client_secret": {
                    "description": "Looker API client secret.",
                    "title": "Client Secret",
                    "type": "string"
                },
                "base_url": {
                    "description": "Url to your Looker instance: `https://company.looker.com:19999` or `https://looker.company.com`, or similar. Used for making API calls to Looker and constructing clickable dashboard and chart urls.",
                    "title": "Base Url",
                    "type": "string"
                },
                "transport_options": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TransportOptionsConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Populates the [TransportOptions](https://github.com/looker-open-source/sdk-codegen/blob/94d6047a0d52912ac082eb91616c1e7c379ab262/python/looker_sdk/rtl/transport.py#L70) struct for looker client"
                },
                "max_retries": {
                    "default": 3,
                    "description": "Number of retries for Looker API calls",
                    "title": "Max Retries",
                    "type": "integer"
                },
                "dashboard_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Patterns for selecting dashboard ids that are to be included"
                },
                "chart_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Patterns for selecting chart ids that are to be included"
                },
                "include_deleted": {
                    "default": false,
                    "description": "Whether to include deleted dashboards and looks.",
                    "title": "Include Deleted",
                    "type": "boolean"
                },
                "extract_owners": {
                    "default": true,
                    "description": "When enabled, extracts ownership from Looker directly. When disabled, ownership is left empty for dashboards and charts.",
                    "title": "Extract Owners",
                    "type": "boolean"
                },
                "strip_user_ids_from_email": {
                    "default": false,
                    "description": "When enabled, converts Looker user emails of the form name@domain.com to urn:li:corpuser:name when assigning ownership",
                    "title": "Strip User Ids From Email",
                    "type": "boolean"
                },
                "skip_personal_folders": {
                    "default": false,
                    "description": "Whether to skip ingestion of dashboards in personal folders. Setting this to True will only ingest dashboards in the Shared folder space.",
                    "title": "Skip Personal Folders",
                    "type": "boolean"
                },
                "max_threads": {
                    "description": "Max parallelism for Looker API calls. Defaults to cpuCount or 40",
                    "title": "Max Threads",
                    "type": "integer"
                },
                "external_base_url": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Optional URL to use when constructing external URLs to Looker if the `base_url` is not the correct one to use. For example, `https://looker-public.company.com`. If not provided, the external base URL will default to `base_url`.",
                    "title": "External Base Url"
                },
                "extract_usage_history": {
                    "default": true,
                    "description": "Whether to ingest usage statistics for dashboards. Setting this to True will query looker system activity explores to fetch historical dashboard usage.",
                    "title": "Extract Usage History",
                    "type": "boolean"
                },
                "extract_usage_history_for_interval": {
                    "default": "30 days",
                    "description": "Used only if extract_usage_history is set to True. Interval to extract looker dashboard usage history for. See https://docs.looker.com/reference/filter-expressions#date_and_time.",
                    "title": "Extract Usage History For Interval",
                    "type": "string"
                },
                "extract_embed_urls": {
                    "default": true,
                    "description": "Produce URLs used to render Looker Explores as Previews inside of DataHub UI. Embeds must be enabled inside of Looker to use this feature.",
                    "title": "Extract Embed Urls",
                    "type": "boolean"
                },
                "extract_independent_looks": {
                    "default": false,
                    "description": "Extract looks which are not part of any Dashboard. To enable this flag the stateful_ingestion should also be enabled.",
                    "title": "Extract Independent Looks",
                    "type": "boolean"
                },
                "emit_used_explores_only": {
                    "default": true,
                    "description": "When enabled, only explores that are used by a Dashboard/Look will be ingested.",
                    "title": "Emit Used Explores Only",
                    "type": "boolean"
                },
                "include_platform_instance_in_urns": {
                    "default": false,
                    "description": "When enabled, platform instance will be added in dashboard and chart urn.",
                    "title": "Include Platform Instance In Urns",
                    "type": "boolean"
                },
                "folder_path_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Allow or deny dashboards from specific folders using their fully qualified paths. For example: \ndeny: \n - Shared/deprecated \nThis pattern will deny the ingestion of all dashboards and looks within the Shared/deprecated folder. \nallow: \n - Shared/sales \nThis pattern will allow only the ingestion of dashboards within the Shared/sales folder. \nTo get the correct path from Looker, take the folder hierarchy shown in the UI and join it with slashes. For example, Shared -> Customer Reports -> Sales becomes Shared/Customer Reports/Sales. Dashboards will only be ingested if they're allowed by both this config and dashboard_pattern."
                }
            },
            "required": [
                "client_id",
                "client_secret",
                "base_url"
            ],
            "title": "LookerDashboardSourceConfig",
            "type": "object"
        },
        "kafka-connect": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "kafka-connect"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/kafka-connect_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "kafka-connect_config": {
            "additionalProperties": false,
            "properties": {
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance_map": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Platform instance mapping to use when constructing URNs. e.g.`platform_instance_map: { \"hive\": \"warehouse\" }`",
                    "title": "Platform Instance Map"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "connect_uri": {
                    "default": "http://localhost:8083/",
                    "description": "URI to connect to.",
                    "title": "Connect Uri",
                    "type": "string"
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Kafka Connect username.",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Kafka Connect password.",
                    "title": "Password"
                },
                "cluster_name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "connect-cluster",
                    "description": "Cluster to ingest from.",
                    "title": "Cluster Name"
                },
                "convert_lineage_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert the urns of ingested lineage dataset to lowercase",
                    "title": "Convert Lineage Urns To Lowercase",
                    "type": "boolean"
                },
                "connector_patterns": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for connectors to filter for ingestion."
                },
                "provided_configs": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/ProvidedConfig"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Provided Configurations",
                    "title": "Provided Configs"
                },
                "connect_to_platform_map": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "type": "object"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Platform instance mapping when multiple instances for a platform is available. Entry for a platform should be in either `platform_instance_map` or `connect_to_platform_map`. e.g.`connect_to_platform_map: { \"postgres-connector-finance-db\": \"postgres\": \"core_finance_instance\" }`",
                    "title": "Connect To Platform Map"
                },
                "generic_connectors": {
                    "default": [],
                    "description": "Provide lineage graph for sources connectors other than Confluent JDBC Source Connector, Debezium Source Connector, and Mongo Source Connector",
                    "items": {
                        "$ref": "#/$defs/GenericConnectorConfig"
                    },
                    "title": "Generic Connectors",
                    "type": "array"
                }
            },
            "title": "KafkaConnectSourceConfig",
            "type": "object"
        },
        "snaplogic": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "snaplogic"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/snaplogic_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "snaplogic_config": {
            "additionalProperties": false,
            "properties": {
                "bucket_duration": {
                    "$ref": "#/$defs/BucketDuration",
                    "default": "DAY",
                    "description": "Size of the time window to aggregate usage stats."
                },
                "end_time": {
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "format": "date-time",
                    "title": "End Time",
                    "type": "string"
                },
                "start_time": {
                    "default": null,
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "format": "date-time",
                    "title": "Start Time",
                    "type": "string"
                },
                "enable_stateful_usage_ingestion": {
                    "default": true,
                    "description": "Enable stateful lineage ingestion. This will store usage window timestamps after successful usage ingestion. and will not run usage ingestion for same timestamps in subsequent run. NOTE: This only works with use_queries_v2=False (legacy extraction path). For queries v2, use enable_stateful_time_window instead.",
                    "title": "Enable Stateful Usage Ingestion",
                    "type": "boolean"
                },
                "enable_stateful_lineage_ingestion": {
                    "default": true,
                    "description": "Enable stateful lineage ingestion. This will store lineage window timestamps after successful lineage ingestion. and will not run lineage ingestion for same timestamps in subsequent run. NOTE: This only works with use_queries_v2=False (legacy extraction path). For queries v2, use enable_stateful_time_window instead.",
                    "title": "Enable Stateful Lineage Ingestion",
                    "type": "boolean"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "platform": {
                    "default": "SnapLogic",
                    "title": "Platform",
                    "type": "string"
                },
                "username": {
                    "description": "Username",
                    "title": "Username",
                    "type": "string"
                },
                "password": {
                    "description": "Password",
                    "format": "password",
                    "title": "Password",
                    "type": "string",
                    "writeOnly": true
                },
                "base_url": {
                    "default": "https://elastic.snaplogic.com",
                    "description": "Url to your SnapLogic instance: `https://elastic.snaplogic.com`, or similar. Used for making API calls to SnapLogic.",
                    "title": "Base Url",
                    "type": "string"
                },
                "org_name": {
                    "description": "Organization name from SnapLogic instance",
                    "title": "Org Name",
                    "type": "string"
                },
                "namespace_mapping": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "Mapping of namespaces to platform instances",
                    "title": "Namespace Mapping",
                    "type": "object"
                },
                "case_insensitive_namespaces": {
                    "default": [],
                    "description": "List of namespaces that should be treated as case insensitive",
                    "items": {},
                    "title": "Case Insensitive Namespaces",
                    "type": "array"
                },
                "create_non_snaplogic_datasets": {
                    "default": false,
                    "description": "Whether to create datasets for non-SnapLogic datasets (e.g., databases, S3, etc.)",
                    "title": "Create Non Snaplogic Datasets",
                    "type": "boolean"
                }
            },
            "required": [
                "username",
                "password",
                "org_name"
            ],
            "title": "SnaplogicConfig",
            "type": "object"
        },
        "qlik-sense": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "qlik-sense"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/qlik-sense_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "qlik-sense_config": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulIngestionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Stateful Ingestion Config"
                },
                "tenant_hostname": {
                    "description": "Qlik Tenant hostname",
                    "title": "Tenant Hostname",
                    "type": "string"
                },
                "api_key": {
                    "description": "Qlik API Key",
                    "title": "Api Key",
                    "type": "string"
                },
                "space_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter Qlik spaces in ingestion.Mention 'personal_space' if entities of personal space need to ingest"
                },
                "ingest_owner": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Ingest Owner from source. This will override Owner info entered from UI",
                    "title": "Ingest Owner"
                },
                "data_connection_to_platform_instance": {
                    "additionalProperties": {
                        "$ref": "#/$defs/PlatformDetail"
                    },
                    "default": {},
                    "description": "A mapping of the Qlik app dataset upstream tables from data connection to platform instance.Use 'data_connection_name' as key.",
                    "title": "Data Connection To Platform Instance",
                    "type": "object"
                }
            },
            "required": [
                "tenant_hostname",
                "api_key"
            ],
            "title": "QlikSourceConfig",
            "type": "object"
        },
        "teradata": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "teradata"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/teradata_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "teradata_config": {
            "additionalProperties": false,
            "properties": {
                "bucket_duration": {
                    "$ref": "#/$defs/BucketDuration",
                    "default": "DAY",
                    "description": "Size of the time window to aggregate usage stats."
                },
                "end_time": {
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "format": "date-time",
                    "title": "End Time",
                    "type": "string"
                },
                "start_time": {
                    "default": null,
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "format": "date-time",
                    "title": "Start Time",
                    "type": "string"
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "Whether to include view lineage in the ingestion. This requires to have the view lineage feature enabled.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "description": "host URL",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "database (catalog)",
                    "title": "Database"
                },
                "scheme": {
                    "default": "teradatasql",
                    "description": "database scheme",
                    "title": "Scheme",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "All",
                            "Crashdumps",
                            "Default",
                            "DemoNow_Monitor",
                            "EXTUSER",
                            "External_AP",
                            "GLOBAL_FUNCTIONS",
                            "LockLogShredder",
                            "PUBLIC",
                            "SQLJ",
                            "SYSBAR",
                            "SYSJDBC",
                            "SYSLIB",
                            "SYSSPATIAL",
                            "SYSUDTLIB",
                            "SYSUIF",
                            "SysAdmin",
                            "Sys_Calendar",
                            "SystemFe",
                            "TDBCMgmt",
                            "TDMaps",
                            "TDPUSER",
                            "TDQCD",
                            "TDStats",
                            "TD_ANALYTICS_DB",
                            "TD_SERVER_DB",
                            "TD_SYSFNLIB",
                            "TD_SYSGPL",
                            "TD_SYSXML",
                            "TDaaS_BAR",
                            "TDaaS_DB",
                            "TDaaS_Maint",
                            "TDaaS_Monitor",
                            "TDaaS_Support",
                            "TDaaS_TDBCMgmt1",
                            "TDaaS_TDBCMgmt2",
                            "dbcmngr",
                            "mldb",
                            "system",
                            "tapidb",
                            "tdwm",
                            "val",
                            "dbc"
                        ],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for databases to filter in ingestion."
                },
                "databases": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "List of databases to ingest. If not specified, all databases will be ingested. Even if this is specified, databases will still be filtered by `database_pattern`.",
                    "title": "Databases"
                },
                "include_table_lineage": {
                    "default": false,
                    "description": "Whether to include table lineage in the ingestion. This requires to have the table lineage feature enabled.",
                    "title": "Include Table Lineage",
                    "type": "boolean"
                },
                "include_queries": {
                    "default": true,
                    "description": "Whether to generate query entities for SQL queries. Query entities provide metadata about individual SQL queries including execution timestamps, user information, and query text.",
                    "title": "Include Queries",
                    "type": "boolean"
                },
                "usage": {
                    "$ref": "#/$defs/BaseUsageConfig",
                    "default": {
                        "bucket_duration": "DAY",
                        "end_time": "2025-10-24T00:46:52.478848Z",
                        "start_time": "2025-10-23T00:00:00Z",
                        "queries_character_limit": 24000,
                        "top_n_queries": 10,
                        "user_email_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "include_operational_stats": true,
                        "include_read_operational_stats": false,
                        "format_sql_queries": false,
                        "include_top_n_queries": true
                    },
                    "description": "The usage config to use when generating usage statistics"
                },
                "default_db": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The default database to use for unqualified table names",
                    "title": "Default Db"
                },
                "include_usage_statistics": {
                    "default": false,
                    "description": "Generate usage statistic.",
                    "title": "Include Usage Statistics",
                    "type": "boolean"
                },
                "use_qvci": {
                    "default": false,
                    "description": "Whether to use QVCI to get column information. This is faster but requires to have QVCI enabled.",
                    "title": "Use Qvci",
                    "type": "boolean"
                },
                "include_historical_lineage": {
                    "default": false,
                    "description": "Whether to include historical lineage data from PDCRINFO.DBQLSqlTbl_Hst in addition to current DBC.QryLogV data. This provides access to historical query logs that may have been archived. The historical table existence is checked automatically and gracefully falls back to current data only if not available.",
                    "title": "Include Historical Lineage",
                    "type": "boolean"
                },
                "use_server_side_cursors": {
                    "default": true,
                    "description": "Enable server-side cursors for large result sets using SQLAlchemy's stream_results. This reduces memory usage by streaming results from the database server. Automatically falls back to client-side batching if server-side cursors are not supported.",
                    "title": "Use Server Side Cursors",
                    "type": "boolean"
                },
                "max_workers": {
                    "default": 10,
                    "description": "Maximum number of worker threads to use for parallel processing. Controls the level of concurrency for operations like view processing.",
                    "title": "Max Workers",
                    "type": "integer"
                }
            },
            "required": [
                "host_port"
            ],
            "title": "TeradataConfig",
            "type": "object"
        },
        "mode": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "mode"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/mode_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "mode_config": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance_map": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A holder for platform -> platform_instance mappings to generate correct dataset urns",
                    "title": "Platform Instance Map"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "connect_uri": {
                    "default": "https://app.mode.com",
                    "description": "Mode host URL.",
                    "title": "Connect Uri",
                    "type": "string"
                },
                "token": {
                    "description": "When creating workspace API key this is the 'Key ID'.",
                    "title": "Token",
                    "type": "string"
                },
                "password": {
                    "description": "When creating workspace API key this is the 'Secret'.",
                    "format": "password",
                    "title": "Password",
                    "type": "string",
                    "writeOnly": true
                },
                "exclude_restricted": {
                    "default": false,
                    "description": "Exclude restricted collections",
                    "title": "Exclude Restricted",
                    "type": "boolean"
                },
                "workspace": {
                    "description": "The Mode workspace username. If you navigate to Workspace Settings > Details, the url will be `https://app.mode.com/organizations/<workspace-username>`. This is distinct from the workspace's display name, and should be all lowercase.",
                    "title": "Workspace",
                    "type": "string"
                },
                "space_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "^Personal$"
                        ],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for mode spaces to filter in ingestion (Spaces named as 'Personal' are filtered by default.) Specify regex to only match the space name. e.g. to only ingest space named analytics, use the regex 'analytics'"
                },
                "owner_username_instead_of_email": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Use username for owner URN instead of Email",
                    "title": "Owner Username Instead Of Email"
                },
                "api_options": {
                    "$ref": "#/$defs/ModeAPIConfig",
                    "default": {
                        "retry_backoff_multiplier": 2,
                        "max_retry_interval": 10,
                        "max_attempts": 5,
                        "timeout": 40
                    },
                    "description": "Retry/Wait settings for Mode API to avoid \"Too many Requests\" error. See Mode API Options below"
                },
                "ingest_embed_url": {
                    "default": true,
                    "description": "Whether to Ingest embed URL for Reports",
                    "title": "Ingest Embed Url",
                    "type": "boolean"
                },
                "tag_measures_and_dimensions": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Tag measures and dimensions in the schema",
                    "title": "Tag Measures And Dimensions"
                },
                "exclude_archived": {
                    "default": false,
                    "description": "Exclude archived reports",
                    "title": "Exclude Archived",
                    "type": "boolean"
                }
            },
            "required": [
                "token",
                "password",
                "workspace"
            ],
            "title": "ModeConfig",
            "type": "object"
        },
        "hex": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "hex"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/hex_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "hex_config": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Configuration for stateful ingestion and stale metadata removal."
                },
                "workspace_name": {
                    "description": "Hex workspace name. You can find this name in your Hex home page URL: https://app.hex.tech/<workspace_name>",
                    "title": "Workspace Name",
                    "type": "string"
                },
                "token": {
                    "description": "Hex API token; either PAT or Workflow token - https://learn.hex.tech/docs/api/api-overview#authentication",
                    "format": "password",
                    "title": "Token",
                    "type": "string",
                    "writeOnly": true
                },
                "base_url": {
                    "default": "https://app.hex.tech/api/v1",
                    "description": "Hex API base URL. For most Hex users, this will be https://app.hex.tech/api/v1. Single-tenant app users should replace this with the URL they use to access Hex.",
                    "title": "Base Url",
                    "type": "string"
                },
                "include_components": {
                    "default": true,
                    "description": "Include Hex Components in the ingestion",
                    "title": "Include Components",
                    "type": "boolean"
                },
                "page_size": {
                    "default": 100,
                    "description": "Number of items to fetch per Hex API call.",
                    "title": "Page Size",
                    "type": "integer"
                },
                "patch_metadata": {
                    "default": false,
                    "description": "Emit metadata as patch events",
                    "title": "Patch Metadata",
                    "type": "boolean"
                },
                "collections_as_tags": {
                    "default": true,
                    "description": "Emit Hex Collections as tags",
                    "title": "Collections As Tags",
                    "type": "boolean"
                },
                "status_as_tag": {
                    "default": true,
                    "description": "Emit Hex Status as tags",
                    "title": "Status As Tag",
                    "type": "boolean"
                },
                "categories_as_tags": {
                    "default": true,
                    "description": "Emit Hex Category as tags",
                    "title": "Categories As Tags",
                    "type": "boolean"
                },
                "project_title_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex pattern for project titles to filter in ingestion."
                },
                "component_title_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex pattern for component titles to filter in ingestion."
                },
                "set_ownership_from_email": {
                    "default": true,
                    "description": "Set ownership identity from owner/creator email",
                    "title": "Set Ownership From Email",
                    "type": "boolean"
                },
                "include_lineage": {
                    "default": true,
                    "description": "Include Hex lineage, being fetched from DataHub. See \"Limitations\" section in the docs for more details about the limitations of this feature.",
                    "title": "Include Lineage",
                    "type": "boolean"
                },
                "lineage_start_time": {
                    "anyOf": [
                        {
                            "format": "date-time",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Earliest date of lineage to consider. Default: 1 day before lineage end time. You can specify absolute time like '2023-01-01' or relative time like '-7 days' or '-7d'.",
                    "title": "Lineage Start Time"
                },
                "lineage_end_time": {
                    "anyOf": [
                        {
                            "format": "date-time",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Latest date of lineage to consider. Default: Current time in UTC. You can specify absolute time like '2023-01-01' or relative time like '-1 day' or '-1d'.",
                    "title": "Lineage End Time"
                },
                "datahub_page_size": {
                    "default": 100,
                    "description": "Number of items to fetch per DataHub API call.",
                    "title": "Datahub Page Size",
                    "type": "integer"
                }
            },
            "required": [
                "workspace_name",
                "token"
            ],
            "title": "HexSourceConfig",
            "type": "object"
        },
        "iceberg": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "iceberg"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/iceberg_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "iceberg_config": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Iceberg Stateful Ingestion Config."
                },
                "catalog": {
                    "additionalProperties": {
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "description": "Catalog configuration where to find Iceberg tables.  Only one catalog specification is supported.  The format is the same as [pyiceberg's catalog configuration](https://py.iceberg.apache.org/configuration/), where the catalog name is specified as the object name and attributes are set as key-value pairs.",
                    "title": "Catalog",
                    "type": "object"
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion."
                },
                "namespace_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for namespaces to filter in ingestion."
                },
                "user_ownership_property": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "owner",
                    "description": "Iceberg table property to look for a `CorpUser` owner.  Can only hold a single user value.  If property has no value, no owner information will be emitted.",
                    "title": "User Ownership Property"
                },
                "group_ownership_property": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Iceberg table property to look for a `CorpGroup` owner.  Can only hold a single group value.  If property has no value, no owner information will be emitted.",
                    "title": "Group Ownership Property"
                },
                "profiling": {
                    "$ref": "#/$defs/IcebergProfilingConfig",
                    "default": {
                        "enabled": false,
                        "include_field_null_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        }
                    }
                },
                "processing_threads": {
                    "default": 1,
                    "description": "How many threads will be processing tables",
                    "title": "Processing Threads",
                    "type": "integer"
                }
            },
            "required": [
                "catalog"
            ],
            "title": "IcebergSourceConfig",
            "type": "object"
        },
        "vertica": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "vertica"
                    ]
                },
                "config": {
                    "$ref": "#/$defs/vertica_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "vertica_config": {
            "additionalProperties": false,
            "properties": {
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'"
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "view_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "classification": {
                    "$ref": "#/$defs/ClassificationConfig",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "config": null,
                                "type": "datahub"
                            }
                        ]
                    },
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md)."
                },
                "incremental_lineage": {
                    "default": false,
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "title": "Incremental Lineage",
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "default": false,
                    "description": "Whether to convert dataset urns to lowercase.",
                    "title": "Convert Urns To Lowercase",
                    "type": "boolean"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "stateful_ingestion": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                },
                "profile_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "domain": {
                    "additionalProperties": {
                        "$ref": "#/$defs/AllowDenyPattern"
                    },
                    "default": {},
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "title": "Domain",
                    "type": "object"
                },
                "include_views": {
                    "default": true,
                    "description": "Whether views should be ingested.",
                    "title": "Include Views",
                    "type": "boolean"
                },
                "include_tables": {
                    "default": true,
                    "description": "Whether tables should be ingested.",
                    "title": "Include Tables",
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "default": true,
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "title": "Include Table Location Lineage",
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "default": true,
                    "description": "If the source supports it, include view lineage to the underlying storage location.",
                    "title": "Include View Lineage",
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "default": true,
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "title": "Include View Column Lineage",
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "default": true,
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "title": "Use File Backed Cache",
                    "type": "boolean"
                },
                "profiling": {
                    "$ref": "#/$defs/GEProfilingConfig",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_date_of_month": null,
                            "profile_day_of_week": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    }
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "description": "host URL",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "database (catalog)",
                    "title": "Database"
                },
                "scheme": {
                    "default": "vertica+vertica_python",
                    "title": "Scheme",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "models_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for ml models to filter in ingestion. "
                },
                "include_projections": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Whether projections should be ingested.",
                    "title": "Include Projections"
                },
                "include_models": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Whether Models should be ingested.",
                    "title": "Include Models"
                },
                "include_projection_lineage": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "If the source supports it, include view lineage to the underlying storage location.",
                    "title": "Include Projection Lineage"
                }
            },
            "required": [
                "host_port"
            ],
            "title": "VerticaConfig",
            "type": "object"
        },
        "DataProcessCleanupConfig": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "default": true,
                    "description": "Whether to do data process cleanup.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "retention_days": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 10,
                    "description": "Number of days to retain metadata in DataHub",
                    "title": "Retention Days"
                },
                "aspects_to_clean": {
                    "default": [
                        "DataprocessInstance"
                    ],
                    "description": "List of aspect names to clean up",
                    "items": {
                        "type": "string"
                    },
                    "title": "Aspects To Clean",
                    "type": "array"
                },
                "keep_last_n": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 5,
                    "description": "Number of latest aspects to keep",
                    "title": "Keep Last N"
                },
                "delete_empty_data_jobs": {
                    "default": false,
                    "description": "Whether to delete Data Jobs without runs",
                    "title": "Delete Empty Data Jobs",
                    "type": "boolean"
                },
                "delete_empty_data_flows": {
                    "default": false,
                    "description": "Whether to delete Data Flows without runs",
                    "title": "Delete Empty Data Flows",
                    "type": "boolean"
                },
                "hard_delete_entities": {
                    "default": false,
                    "description": "Whether to hard delete entities",
                    "title": "Hard Delete Entities",
                    "type": "boolean"
                },
                "batch_size": {
                    "default": 500,
                    "description": "The number of entities to get in a batch from API",
                    "title": "Batch Size",
                    "type": "integer"
                },
                "max_workers": {
                    "default": 10,
                    "description": "The number of workers to use for deletion",
                    "title": "Max Workers",
                    "type": "integer"
                },
                "delay": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 0.25,
                    "description": "Delay between each batch",
                    "title": "Delay"
                }
            },
            "title": "DataProcessCleanupConfig",
            "type": "object"
        },
        "DatahubExecutionRequestCleanupConfig": {
            "additionalProperties": false,
            "properties": {
                "keep_history_min_count": {
                    "default": 10,
                    "description": "Minimum number of execution requests to keep, per ingestion source",
                    "title": "Keep History Min Count",
                    "type": "integer"
                },
                "keep_history_max_count": {
                    "default": 1000,
                    "description": "Maximum number of execution requests to keep, per ingestion source",
                    "title": "Keep History Max Count",
                    "type": "integer"
                },
                "keep_history_max_days": {
                    "default": 90,
                    "description": "Maximum number of days to keep execution requests for, per ingestion source",
                    "title": "Keep History Max Days",
                    "type": "integer"
                },
                "batch_read_size": {
                    "default": 100,
                    "description": "Number of records per read operation",
                    "title": "Batch Read Size",
                    "type": "integer"
                },
                "enabled": {
                    "default": true,
                    "description": "Global switch for this cleanup task",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "runtime_limit_seconds": {
                    "default": 3600,
                    "description": "Maximum runtime in seconds for the cleanup task",
                    "title": "Runtime Limit Seconds",
                    "type": "integer"
                },
                "limit_entities_delete": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 10000,
                    "description": "Max number of execution requests to hard delete.",
                    "title": "Limit Entities Delete"
                },
                "max_read_errors": {
                    "default": 10,
                    "description": "Maximum number of read errors before aborting",
                    "title": "Max Read Errors",
                    "type": "integer"
                }
            },
            "title": "DatahubExecutionRequestCleanupConfig",
            "type": "object"
        },
        "SoftDeletedEntitiesCleanupConfig": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "default": true,
                    "description": "Whether to do soft deletion cleanup.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "retention_days": {
                    "default": 10,
                    "description": "Number of days to retain metadata in DataHub",
                    "title": "Retention Days",
                    "type": "integer"
                },
                "batch_size": {
                    "default": 500,
                    "description": "The number of entities to get in a batch from GraphQL",
                    "title": "Batch Size",
                    "type": "integer"
                },
                "delay": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 0.25,
                    "description": "Delay between each batch",
                    "title": "Delay"
                },
                "max_workers": {
                    "default": 10,
                    "description": "The number of workers to use for deletion",
                    "title": "Max Workers",
                    "type": "integer"
                },
                "entity_types": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": [
                        "dataset",
                        "dashboard",
                        "chart",
                        "mlmodel",
                        "mlmodelGroup",
                        "mlfeatureTable",
                        "mlfeature",
                        "mlprimaryKey",
                        "dataFlow",
                        "dataJob",
                        "glossaryTerm",
                        "glossaryNode",
                        "tag",
                        "role",
                        "corpuser",
                        "corpGroup",
                        "container",
                        "domain",
                        "dataProduct",
                        "notebook",
                        "businessAttribute",
                        "schemaField",
                        "query",
                        "dataProcessInstance"
                    ],
                    "description": "List of entity types to cleanup",
                    "title": "Entity Types"
                },
                "platform": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Platform to cleanup",
                    "title": "Platform"
                },
                "env": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Environment to cleanup",
                    "title": "Env"
                },
                "query": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Query to filter entities",
                    "title": "Query"
                },
                "limit_entities_delete": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 25000,
                    "description": "Max number of entities to delete.",
                    "title": "Limit Entities Delete"
                },
                "futures_max_at_time": {
                    "default": 1000,
                    "description": "Max number of futures to have at a time.",
                    "title": "Futures Max At Time",
                    "type": "integer"
                },
                "runtime_limit_seconds": {
                    "default": 7200,
                    "description": "Runtime limit in seconds",
                    "title": "Runtime Limit Seconds",
                    "type": "integer"
                }
            },
            "title": "SoftDeletedEntitiesCleanupConfig",
            "type": "object"
        },
        "AllowDenyPattern": {
            "additionalProperties": false,
            "description": "A class to store allow deny regexes",
            "properties": {
                "allow": {
                    "default": [
                        ".*"
                    ],
                    "description": "List of regex patterns to include in ingestion",
                    "items": {
                        "type": "string"
                    },
                    "title": "Allow",
                    "type": "array"
                },
                "deny": {
                    "default": [],
                    "description": "List of regex patterns to exclude from ingestion.",
                    "items": {
                        "type": "string"
                    },
                    "title": "Deny",
                    "type": "array"
                },
                "ignoreCase": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Whether to ignore case sensitivity during pattern matching.",
                    "title": "Ignorecase"
                }
            },
            "title": "AllowDenyPattern",
            "type": "object"
        },
        "DBTEntitiesEnabled": {
            "additionalProperties": false,
            "description": "Controls which dbt entities are going to be emitted by this source",
            "properties": {
                "models": {
                    "$ref": "#/$defs/EmitDirective",
                    "default": "YES",
                    "description": "Emit metadata for dbt models when set to Yes or Only"
                },
                "sources": {
                    "$ref": "#/$defs/EmitDirective",
                    "default": "YES",
                    "description": "Emit metadata for dbt sources when set to Yes or Only"
                },
                "seeds": {
                    "$ref": "#/$defs/EmitDirective",
                    "default": "YES",
                    "description": "Emit metadata for dbt seeds when set to Yes or Only"
                },
                "snapshots": {
                    "$ref": "#/$defs/EmitDirective",
                    "default": "YES",
                    "description": "Emit metadata for dbt snapshots when set to Yes or Only"
                },
                "test_definitions": {
                    "$ref": "#/$defs/EmitDirective",
                    "default": "YES",
                    "description": "Emit metadata for test definitions when enabled when set to Yes or Only"
                },
                "test_results": {
                    "$ref": "#/$defs/EmitDirective",
                    "default": "YES",
                    "description": "Emit metadata for test results when set to Yes or Only"
                },
                "model_performance": {
                    "$ref": "#/$defs/EmitDirective",
                    "default": "YES",
                    "description": "Emit model performance metadata when set to Yes or Only. Only supported with dbt core."
                }
            },
            "title": "DBTEntitiesEnabled",
            "type": "object"
        },
        "EmitDirective": {
            "description": "A holder for directives for emission for specific types of entities",
            "enum": [
                "YES",
                "NO",
                "ONLY"
            ],
            "title": "EmitDirective",
            "type": "string"
        },
        "MaterializedNodePatternConfig": {
            "additionalProperties": false,
            "description": "Configuration for filtering materialized nodes based on their physical location",
            "properties": {
                "database_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for database names to filter materialized nodes."
                },
                "schema_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for schema names in format '{database}.{schema}' to filter materialized nodes."
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for table/view names in format '{database}.{schema}.{table}' to filter materialized nodes."
                }
            },
            "title": "MaterializedNodePatternConfig",
            "type": "object"
        },
        "StatefulStaleMetadataRemovalConfig": {
            "additionalProperties": false,
            "description": "Base specialized config for Stateful Ingestion with stale metadata removal capability.",
            "properties": {
                "enabled": {
                    "default": false,
                    "description": "Whether or not to enable stateful ingest. Default: True if a pipeline_name is set and either a datahub-rest sink or `datahub_api` is specified, otherwise False",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "remove_stale_metadata": {
                    "default": true,
                    "description": "Soft-deletes the entities present in the last successful run but missing in the current run with stateful_ingestion enabled.",
                    "title": "Remove Stale Metadata",
                    "type": "boolean"
                },
                "fail_safe_threshold": {
                    "default": 75.0,
                    "description": "Prevents large amount of soft deletes & the state from committing from accidental changes to the source configuration if the relative change percent in entities compared to the previous state is above the 'fail_safe_threshold'.",
                    "maximum": 100.0,
                    "minimum": 0.0,
                    "title": "Fail Safe Threshold",
                    "type": "number"
                }
            },
            "title": "StatefulStaleMetadataRemovalConfig",
            "type": "object"
        },
        "ClassificationConfig": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "default": false,
                    "description": "Whether classification should be used to auto-detect glossary terms",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "sample_size": {
                    "default": 100,
                    "description": "Number of sample values used for classification.",
                    "title": "Sample Size",
                    "type": "integer"
                },
                "max_workers": {
                    "default": 4,
                    "description": "Number of worker processes to use for classification. Set to 1 to disable.",
                    "title": "Max Workers",
                    "type": "integer"
                },
                "table_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables for classification. This is used in combination with other patterns in parent config. Specify regex to match the entire table name in `database.schema.table` format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'"
                },
                "column_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter columns for classification. This is used in combination with other patterns in parent config. Specify regex to match the column name in `database.schema.table.column` format."
                },
                "info_type_to_term": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "default": {},
                    "description": "Optional mapping to provide glossary term identifier for info type",
                    "title": "Info Type To Term",
                    "type": "object"
                },
                "classifiers": {
                    "default": [
                        {
                            "type": "datahub",
                            "config": null
                        }
                    ],
                    "description": "Classifiers to use to auto-detect glossary terms. If more than one classifier, infotype predictions from the classifier defined later in sequence take precedance.",
                    "items": {
                        "$ref": "#/$defs/DynamicTypedClassifierConfig"
                    },
                    "title": "Classifiers",
                    "type": "array"
                }
            },
            "title": "ClassificationConfig",
            "type": "object"
        },
        "ConnectorDetail": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "connector_database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "",
                    "title": "Connector Database"
                },
                "connector_platform": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A connector's actual platform name. If not provided, will take from metadata tablesEg: hive catalog can have a connector platform as 'hive' or 'glue' or some other metastore.",
                    "title": "Connector Platform"
                }
            },
            "title": "ConnectorDetail",
            "type": "object"
        },
        "DynamicTypedClassifierConfig": {
            "additionalProperties": false,
            "properties": {
                "type": {
                    "description": "The type of the classifier to use. For DataHub,  use `datahub`",
                    "title": "Type",
                    "type": "string"
                },
                "config": {
                    "anyOf": [
                        {},
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The configuration required for initializing the classifier. If not specified, uses defaults for classifer type.",
                    "title": "Config"
                }
            },
            "required": [
                "type"
            ],
            "title": "DynamicTypedClassifierConfig",
            "type": "object"
        },
        "GEProfilingConfig": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "default": false,
                    "description": "Whether profiling should be done.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "operation_config": {
                    "$ref": "#/$defs/OperationConfig",
                    "description": "Experimental feature. To specify operation configs."
                },
                "limit": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Max number of documents to profile. By default, profiles all documents.",
                    "title": "Limit"
                },
                "offset": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Offset in documents to profile. By default, uses no offset.",
                    "title": "Offset"
                },
                "profile_table_level_only": {
                    "default": false,
                    "description": "Whether to perform profiling at table-level only, or include column-level profiling as well.",
                    "title": "Profile Table Level Only",
                    "type": "boolean"
                },
                "include_field_null_count": {
                    "default": true,
                    "description": "Whether to profile for the number of nulls for each column.",
                    "title": "Include Field Null Count",
                    "type": "boolean"
                },
                "include_field_distinct_count": {
                    "default": true,
                    "description": "Whether to profile for the number of distinct values for each column.",
                    "title": "Include Field Distinct Count",
                    "type": "boolean"
                },
                "include_field_min_value": {
                    "default": true,
                    "description": "Whether to profile for the min value of numeric columns.",
                    "title": "Include Field Min Value",
                    "type": "boolean"
                },
                "include_field_max_value": {
                    "default": true,
                    "description": "Whether to profile for the max value of numeric columns.",
                    "title": "Include Field Max Value",
                    "type": "boolean"
                },
                "include_field_mean_value": {
                    "default": true,
                    "description": "Whether to profile for the mean value of numeric columns.",
                    "title": "Include Field Mean Value",
                    "type": "boolean"
                },
                "include_field_median_value": {
                    "default": true,
                    "description": "Whether to profile for the median value of numeric columns.",
                    "title": "Include Field Median Value",
                    "type": "boolean"
                },
                "include_field_stddev_value": {
                    "default": true,
                    "description": "Whether to profile for the standard deviation of numeric columns.",
                    "title": "Include Field Stddev Value",
                    "type": "boolean"
                },
                "include_field_quantiles": {
                    "default": false,
                    "description": "Whether to profile for the quantiles of numeric columns.",
                    "title": "Include Field Quantiles",
                    "type": "boolean"
                },
                "include_field_distinct_value_frequencies": {
                    "default": false,
                    "description": "Whether to profile for distinct value frequencies.",
                    "title": "Include Field Distinct Value Frequencies",
                    "type": "boolean"
                },
                "include_field_histogram": {
                    "default": false,
                    "description": "Whether to profile for the histogram for numeric fields.",
                    "title": "Include Field Histogram",
                    "type": "boolean"
                },
                "include_field_sample_values": {
                    "default": true,
                    "description": "Whether to profile for the sample values for all columns.",
                    "title": "Include Field Sample Values",
                    "type": "boolean"
                },
                "max_workers": {
                    "default": 20,
                    "description": "Number of worker threads to use for profiling. Set to 1 to disable.",
                    "title": "Max Workers",
                    "type": "integer"
                },
                "report_dropped_profiles": {
                    "default": false,
                    "description": "Whether to report datasets or dataset columns which were not profiled. Set to `True` for debugging purposes.",
                    "title": "Report Dropped Profiles",
                    "type": "boolean"
                },
                "turn_off_expensive_profiling_metrics": {
                    "default": false,
                    "description": "Whether to turn off expensive profiling or not. This turns off profiling for quantiles, distinct_value_frequencies, histogram & sample_values. This also limits maximum number of fields being profiled to 10.",
                    "title": "Turn Off Expensive Profiling Metrics",
                    "type": "boolean"
                },
                "field_sample_values_limit": {
                    "default": 20,
                    "description": "Upper limit for number of sample values to collect for all columns.",
                    "title": "Field Sample Values Limit",
                    "type": "integer"
                },
                "max_number_of_fields_to_profile": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A positive integer that specifies the maximum number of columns to profile for any table. `None` implies all columns. The cost of profiling goes up significantly as the number of columns to profile goes up.",
                    "title": "Max Number Of Fields To Profile"
                },
                "profile_if_updated_since_days": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Profile table only if it has been updated since these many number of days. If set to `null`, no constraint of last modified time for tables to profile. Supported only in `snowflake` and `BigQuery`.",
                    "schema_extra": {
                        "supported_sources": [
                            "snowflake",
                            "bigquery"
                        ]
                    },
                    "title": "Profile If Updated Since Days"
                },
                "profile_table_size_limit": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 5,
                    "description": "Profile tables only if their size is less than specified GBs. If set to `null`, no limit on the size of tables to profile. Supported only in `Snowflake`, `BigQuery` and `Databricks`. Supported for `Oracle` based on calculated size from gathered stats.",
                    "schema_extra": {
                        "supported_sources": [
                            "snowflake",
                            "bigquery",
                            "unity-catalog",
                            "oracle"
                        ]
                    },
                    "title": "Profile Table Size Limit"
                },
                "profile_table_row_limit": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 5000000,
                    "description": "Profile tables only if their row count is less than specified count. If set to `null`, no limit on the row count of tables to profile. Supported only in `Snowflake`, `BigQuery`. Supported for `Oracle` based on gathered stats.",
                    "schema_extra": {
                        "supported_sources": [
                            "snowflake",
                            "bigquery",
                            "oracle"
                        ]
                    },
                    "title": "Profile Table Row Limit"
                },
                "profile_table_row_count_estimate_only": {
                    "default": false,
                    "description": "Use an approximate query for row count. This will be much faster but slightly less accurate. Only supported for Postgres and MySQL. ",
                    "schema_extra": {
                        "supported_sources": [
                            "postgres",
                            "mysql"
                        ]
                    },
                    "title": "Profile Table Row Count Estimate Only",
                    "type": "boolean"
                },
                "query_combiner_enabled": {
                    "default": true,
                    "description": "*This feature is still experimental and can be disabled if it causes issues.* Reduces the total number of queries issued and speeds up profiling by dynamically combining SQL queries where possible.",
                    "title": "Query Combiner Enabled",
                    "type": "boolean"
                },
                "catch_exceptions": {
                    "default": true,
                    "description": "",
                    "title": "Catch Exceptions",
                    "type": "boolean"
                },
                "partition_profiling_enabled": {
                    "default": true,
                    "description": "Whether to profile partitioned tables. Only BigQuery and Aws Athena supports this. If enabled, latest partition data is used for profiling.",
                    "schema_extra": {
                        "supported_sources": [
                            "athena",
                            "bigquery"
                        ]
                    },
                    "title": "Partition Profiling Enabled",
                    "type": "boolean"
                },
                "partition_datetime": {
                    "anyOf": [
                        {
                            "format": "date-time",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "If specified, profile only the partition which matches this datetime. If not specified, profile the latest partition. Only Bigquery supports this.",
                    "schema_extra": {
                        "supported_sources": [
                            "bigquery"
                        ]
                    },
                    "title": "Partition Datetime"
                },
                "use_sampling": {
                    "default": true,
                    "description": "Whether to profile column level stats on sample of table. Only BigQuery and Snowflake support this. If enabled, profiling is done on rows sampled from table. Sampling is not done for smaller tables. ",
                    "schema_extra": {
                        "supported_sources": [
                            "bigquery",
                            "snowflake"
                        ]
                    },
                    "title": "Use Sampling",
                    "type": "boolean"
                },
                "sample_size": {
                    "default": 10000,
                    "description": "Number of rows to be sampled from table for column level profiling.Applicable only if `use_sampling` is set to True.",
                    "schema_extra": {
                        "supported_sources": [
                            "bigquery",
                            "snowflake"
                        ]
                    },
                    "title": "Sample Size",
                    "type": "integer"
                },
                "profile_external_tables": {
                    "default": false,
                    "description": "Whether to profile external tables. Only Snowflake and Redshift supports this.",
                    "schema_extra": {
                        "supported_sources": [
                            "redshift",
                            "snowflake"
                        ]
                    },
                    "title": "Profile External Tables",
                    "type": "boolean"
                },
                "tags_to_ignore_sampling": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Fixed list of tags to ignore sampling. If not specified, tables will be sampled based on `use_sampling`.",
                    "title": "Tags To Ignore Sampling"
                },
                "profile_nested_fields": {
                    "default": false,
                    "description": "Whether to profile complex types like structs, arrays and maps. ",
                    "title": "Profile Nested Fields",
                    "type": "boolean"
                }
            },
            "title": "GEProfilingConfig",
            "type": "object"
        },
        "OperationConfig": {
            "additionalProperties": false,
            "properties": {
                "lower_freq_profile_enabled": {
                    "default": false,
                    "description": "Whether to do profiling at lower freq or not. This does not do any scheduling just adds additional checks to when not to run profiling.",
                    "title": "Lower Freq Profile Enabled",
                    "type": "boolean"
                },
                "profile_day_of_week": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Number between 0 to 6 for day of week (both inclusive). 0 is Monday and 6 is Sunday. If not specified, defaults to Nothing and this field does not take affect.",
                    "title": "Profile Day Of Week"
                },
                "profile_date_of_month": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Number between 1 to 31 for date of month (both inclusive). If not specified, defaults to Nothing and this field does not take affect.",
                    "title": "Profile Date Of Month"
                }
            },
            "title": "OperationConfig",
            "type": "object"
        },
        "BucketDuration": {
            "enum": [
                "DAY",
                "HOUR"
            ],
            "title": "BucketDuration",
            "type": "string"
        },
        "DatabaseId": {
            "properties": {
                "database": {
                    "title": "Database",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Platform Instance"
                }
            },
            "required": [
                "database"
            ],
            "title": "DatabaseId",
            "type": "object"
        },
        "OAuthConfiguration": {
            "additionalProperties": false,
            "properties": {
                "provider": {
                    "$ref": "#/$defs/OAuthIdentityProvider",
                    "description": "Identity provider for oauth.Supported providers are microsoft and okta."
                },
                "authority_url": {
                    "description": "Authority url of your identity provider",
                    "title": "Authority Url",
                    "type": "string"
                },
                "client_id": {
                    "description": "client id of your registered application",
                    "title": "Client Id",
                    "type": "string"
                },
                "scopes": {
                    "description": "scopes required to connect to snowflake",
                    "items": {
                        "type": "string"
                    },
                    "title": "Scopes",
                    "type": "array"
                },
                "use_certificate": {
                    "default": false,
                    "description": "Do you want to use certificate and private key to authenticate using oauth",
                    "title": "Use Certificate",
                    "type": "boolean"
                },
                "client_secret": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "client secret of the application if use_certificate = false",
                    "title": "Client Secret"
                },
                "encoded_oauth_public_key": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "base64 encoded certificate content if use_certificate = true",
                    "title": "Encoded Oauth Public Key"
                },
                "encoded_oauth_private_key": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "base64 encoded private key content if use_certificate = true",
                    "title": "Encoded Oauth Private Key"
                }
            },
            "required": [
                "provider",
                "authority_url",
                "client_id",
                "scopes"
            ],
            "title": "OAuthConfiguration",
            "type": "object"
        },
        "OAuthIdentityProvider": {
            "enum": [
                "microsoft",
                "okta"
            ],
            "title": "OAuthIdentityProvider",
            "type": "string"
        },
        "QueryDedupStrategyType": {
            "enum": [
                "STANDARD",
                "NONE"
            ],
            "title": "QueryDedupStrategyType",
            "type": "string"
        },
        "SnowflakeEdition": {
            "enum": [
                "Standard",
                "Enterprise or above"
            ],
            "title": "SnowflakeEdition",
            "type": "string"
        },
        "SnowflakeShareConfig": {
            "additionalProperties": false,
            "properties": {
                "database": {
                    "description": "Database from which share is created.",
                    "title": "Database",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Platform instance for snowflake account in which share is created.",
                    "title": "Platform Instance"
                },
                "consumers": {
                    "description": "List of databases created in consumer accounts.",
                    "items": {
                        "$ref": "#/$defs/DatabaseId"
                    },
                    "title": "Consumers",
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "required": [
                "database",
                "consumers"
            ],
            "title": "SnowflakeShareConfig",
            "type": "object"
        },
        "TagOption": {
            "enum": [
                "with_lineage",
                "without_lineage",
                "skip"
            ],
            "title": "TagOption",
            "type": "string"
        },
        "FolderTraversalMethod": {
            "enum": [
                "ALL",
                "MIN_MAX",
                "MAX"
            ],
            "title": "FolderTraversalMethod",
            "type": "string"
        },
        "HMACKey": {
            "additionalProperties": false,
            "properties": {
                "hmac_access_id": {
                    "description": "Access ID",
                    "title": "Hmac Access Id",
                    "type": "string"
                },
                "hmac_access_secret": {
                    "description": "Secret",
                    "format": "password",
                    "title": "Hmac Access Secret",
                    "type": "string",
                    "writeOnly": true
                }
            },
            "required": [
                "hmac_access_id",
                "hmac_access_secret"
            ],
            "title": "HMACKey",
            "type": "object"
        },
        "PathSpec": {
            "additionalProperties": false,
            "properties": {
                "include": {
                    "description": "Path to table. Name variable `{table}` is used to mark the folder with dataset. In absence of `{table}`, file level dataset will be created. Check below examples for more details.",
                    "title": "Include",
                    "type": "string"
                },
                "exclude": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": [],
                    "description": "list of paths in glob pattern which will be excluded while scanning for the datasets",
                    "title": "Exclude"
                },
                "file_types": {
                    "default": [
                        "csv",
                        "tsv",
                        "json",
                        "parquet",
                        "avro"
                    ],
                    "description": "Files with extenstions specified here (subset of default value) only will be scanned to create dataset. Other files will be omitted.",
                    "items": {
                        "type": "string"
                    },
                    "title": "File Types",
                    "type": "array"
                },
                "default_extension": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "For files without extension it will assume the specified file type. If it is not set the files without extensions will be skipped.",
                    "title": "Default Extension"
                },
                "table_name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Display name of the dataset.Combination of named variables from include path and strings",
                    "title": "Table Name"
                },
                "enable_compression": {
                    "default": true,
                    "description": "Enable or disable processing compressed files. Currently .gz and .bz files are supported.",
                    "title": "Enable Compression",
                    "type": "boolean"
                },
                "sample_files": {
                    "default": true,
                    "description": "Not listing all the files but only taking a handful amount of sample file to infer the schema. File count and file size calculation will be disabled. This can affect performance significantly if enabled",
                    "title": "Sample Files",
                    "type": "boolean"
                },
                "allow_double_stars": {
                    "default": false,
                    "description": "Allow double stars in the include path. This can affect performance significantly if enabled",
                    "title": "Allow Double Stars",
                    "type": "boolean"
                },
                "autodetect_partitions": {
                    "default": true,
                    "description": "Autodetect partition(s) from the path. If set to true, it will autodetect partition key/value if the folder format is {partition_key}={partition_value} for example `year=2024`",
                    "title": "Autodetect Partitions",
                    "type": "boolean"
                },
                "traversal_method": {
                    "$ref": "#/$defs/FolderTraversalMethod",
                    "default": "MAX",
                    "description": "Method to traverse the folder. ALL: Traverse all the folders, MIN_MAX: Traverse the folders by finding min and max value, MAX: Traverse the folder with max value"
                },
                "include_hidden_folders": {
                    "default": false,
                    "description": "Include hidden folders in the traversal (folders starting with . or _",
                    "title": "Include Hidden Folders",
                    "type": "boolean"
                },
                "tables_filter_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "The tables_filter_pattern configuration field uses regular expressions to filter the tables part of the Pathspec for ingestion, allowing fine-grained control over which tables are included or excluded based on specified patterns. The default setting allows all tables."
                }
            },
            "required": [
                "include"
            ],
            "title": "PathSpec",
            "type": "object"
        },
        "AwsAssumeRoleConfig": {
            "additionalProperties": true,
            "properties": {
                "RoleArn": {
                    "description": "ARN of the role to assume.",
                    "title": "Rolearn",
                    "type": "string"
                },
                "ExternalId": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "External ID to use when assuming the role.",
                    "title": "Externalid"
                }
            },
            "required": [
                "RoleArn"
            ],
            "title": "AwsAssumeRoleConfig",
            "type": "object"
        },
        "AwsConnectionConfig": {
            "additionalProperties": false,
            "description": "Common AWS credentials config.\n\nCurrently used by:\n    - Glue source\n    - SageMaker source\n    - dbt source",
            "properties": {
                "aws_access_key_id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS access key ID. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "title": "Aws Access Key Id"
                },
                "aws_secret_access_key": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS secret access key. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "title": "Aws Secret Access Key"
                },
                "aws_session_token": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS session token. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "title": "Aws Session Token"
                },
                "aws_role": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "$ref": "#/$defs/AwsAssumeRoleConfig"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS roles to assume. If using the string format, the role ARN can be specified directly. If using the object format, the role can be specified in the RoleArn field and additional available arguments are the same as [boto3's STS.Client.assume_role](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html?highlight=assume_role#STS.Client.assume_role).",
                    "title": "Aws Role"
                },
                "aws_profile": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The [named profile](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html) to use from AWS credentials. Falls back to default profile if not specified and no access keys provided. Profiles are configured in ~/.aws/credentials or ~/.aws/config.",
                    "title": "Aws Profile"
                },
                "aws_region": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS region code.",
                    "title": "Aws Region"
                },
                "aws_endpoint_url": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The AWS service endpoint. This is normally [constructed automatically](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html), but can be overridden here.",
                    "title": "Aws Endpoint Url"
                },
                "aws_proxy": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A set of proxy configs to use with AWS. See the [botocore.config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html) docs for details.",
                    "title": "Aws Proxy"
                },
                "aws_retry_num": {
                    "default": 5,
                    "description": "Number of times to retry failed AWS requests. See the [botocore.retry](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/retries.html) docs for details.",
                    "title": "Aws Retry Num",
                    "type": "integer"
                },
                "aws_retry_mode": {
                    "default": "standard",
                    "description": "Retry mode to use for failed AWS requests. See the [botocore.retry](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/retries.html) docs for details.",
                    "enum": [
                        "legacy",
                        "standard",
                        "adaptive"
                    ],
                    "title": "Aws Retry Mode",
                    "type": "string"
                },
                "read_timeout": {
                    "default": 60,
                    "description": "The timeout for reading from the connection (in seconds).",
                    "title": "Read Timeout",
                    "type": "number"
                },
                "aws_advanced_config": {
                    "additionalProperties": true,
                    "description": "Advanced AWS configuration options. These are passed directly to [botocore.config.Config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html).",
                    "title": "Aws Advanced Config",
                    "type": "object"
                }
            },
            "title": "AwsConnectionConfig",
            "type": "object"
        },
        "DataLakeProfilerConfig": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "default": false,
                    "description": "Whether profiling should be done.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "operation_config": {
                    "$ref": "#/$defs/OperationConfig",
                    "description": "Experimental feature. To specify operation configs."
                },
                "profile_table_level_only": {
                    "default": false,
                    "description": "Whether to perform profiling at table-level only or include column-level profiling as well.",
                    "title": "Profile Table Level Only",
                    "type": "boolean"
                },
                "max_number_of_fields_to_profile": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A positive integer that specifies the maximum number of columns to profile for any table. `None` implies all columns. The cost of profiling goes up significantly as the number of columns to profile goes up.",
                    "title": "Max Number Of Fields To Profile"
                },
                "include_field_null_count": {
                    "default": true,
                    "description": "Whether to profile for the number of nulls for each column.",
                    "title": "Include Field Null Count",
                    "type": "boolean"
                },
                "include_field_min_value": {
                    "default": true,
                    "description": "Whether to profile for the min value of numeric columns.",
                    "title": "Include Field Min Value",
                    "type": "boolean"
                },
                "include_field_max_value": {
                    "default": true,
                    "description": "Whether to profile for the max value of numeric columns.",
                    "title": "Include Field Max Value",
                    "type": "boolean"
                },
                "include_field_mean_value": {
                    "default": true,
                    "description": "Whether to profile for the mean value of numeric columns.",
                    "title": "Include Field Mean Value",
                    "type": "boolean"
                },
                "include_field_median_value": {
                    "default": true,
                    "description": "Whether to profile for the median value of numeric columns.",
                    "title": "Include Field Median Value",
                    "type": "boolean"
                },
                "include_field_stddev_value": {
                    "default": true,
                    "description": "Whether to profile for the standard deviation of numeric columns.",
                    "title": "Include Field Stddev Value",
                    "type": "boolean"
                },
                "include_field_quantiles": {
                    "default": true,
                    "description": "Whether to profile for the quantiles of numeric columns.",
                    "title": "Include Field Quantiles",
                    "type": "boolean"
                },
                "include_field_distinct_value_frequencies": {
                    "default": true,
                    "description": "Whether to profile for distinct value frequencies.",
                    "title": "Include Field Distinct Value Frequencies",
                    "type": "boolean"
                },
                "include_field_histogram": {
                    "default": true,
                    "description": "Whether to profile for the histogram for numeric fields.",
                    "title": "Include Field Histogram",
                    "type": "boolean"
                },
                "include_field_sample_values": {
                    "default": true,
                    "description": "Whether to profile for the sample values for all columns.",
                    "title": "Include Field Sample Values",
                    "type": "boolean"
                }
            },
            "title": "DataLakeProfilerConfig",
            "type": "object"
        },
        "BigQueryUsageConfig": {
            "additionalProperties": false,
            "properties": {
                "bucket_duration": {
                    "$ref": "#/$defs/BucketDuration",
                    "default": "DAY",
                    "description": "Size of the time window to aggregate usage stats."
                },
                "end_time": {
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "format": "date-time",
                    "title": "End Time",
                    "type": "string"
                },
                "start_time": {
                    "default": null,
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "format": "date-time",
                    "title": "Start Time",
                    "type": "string"
                },
                "top_n_queries": {
                    "default": 10,
                    "description": "Number of top queries to save to each table.",
                    "exclusiveMinimum": 0,
                    "title": "Top N Queries",
                    "type": "integer"
                },
                "user_email_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for user emails to filter in usage."
                },
                "include_operational_stats": {
                    "default": true,
                    "description": "Whether to display operational stats.",
                    "title": "Include Operational Stats",
                    "type": "boolean"
                },
                "include_read_operational_stats": {
                    "default": false,
                    "description": "Whether to report read operational stats. Experimental.",
                    "title": "Include Read Operational Stats",
                    "type": "boolean"
                },
                "format_sql_queries": {
                    "default": false,
                    "description": "Whether to format sql queries",
                    "title": "Format Sql Queries",
                    "type": "boolean"
                },
                "include_top_n_queries": {
                    "default": true,
                    "description": "Whether to ingest the top_n_queries.",
                    "title": "Include Top N Queries",
                    "type": "boolean"
                },
                "max_query_duration": {
                    "default": "PT15M",
                    "description": "Correction to pad start_time and end_time with. For handling the case where the read happens within our time range but the query completion event is delayed and happens after the configured end time.",
                    "format": "duration",
                    "title": "Max Query Duration",
                    "type": "string"
                },
                "apply_view_usage_to_tables": {
                    "default": false,
                    "description": "Whether to apply view's usage to its base tables. If set to False, uses sql parser and applies usage to views / tables mentioned in the query. If set to True, usage is applied to base tables only.",
                    "title": "Apply View Usage To Tables",
                    "type": "boolean"
                }
            },
            "title": "BigQueryUsageConfig",
            "type": "object"
        },
        "GCPCredential": {
            "additionalProperties": false,
            "properties": {
                "project_id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Project id to set the credentials",
                    "title": "Project Id"
                },
                "private_key_id": {
                    "description": "Private key id",
                    "title": "Private Key Id",
                    "type": "string"
                },
                "private_key": {
                    "description": "Private key in a form of '-----BEGIN PRIVATE KEY-----\\nprivate-key\\n-----END PRIVATE KEY-----\\n'",
                    "title": "Private Key",
                    "type": "string"
                },
                "client_email": {
                    "description": "Client email",
                    "title": "Client Email",
                    "type": "string"
                },
                "client_id": {
                    "description": "Client Id",
                    "title": "Client Id",
                    "type": "string"
                },
                "auth_uri": {
                    "default": "https://accounts.google.com/o/oauth2/auth",
                    "description": "Authentication uri",
                    "title": "Auth Uri",
                    "type": "string"
                },
                "token_uri": {
                    "default": "https://oauth2.googleapis.com/token",
                    "description": "Token uri",
                    "title": "Token Uri",
                    "type": "string"
                },
                "auth_provider_x509_cert_url": {
                    "default": "https://www.googleapis.com/oauth2/v1/certs",
                    "description": "Auth provider x509 certificate url",
                    "title": "Auth Provider X509 Cert Url",
                    "type": "string"
                },
                "type": {
                    "default": "service_account",
                    "description": "Authentication type",
                    "title": "Type",
                    "type": "string"
                },
                "client_x509_cert_url": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "If not set it will be default to https://www.googleapis.com/robot/v1/metadata/x509/client_email",
                    "title": "Client X509 Cert Url"
                }
            },
            "required": [
                "private_key_id",
                "private_key",
                "client_email",
                "client_id"
            ],
            "title": "GCPCredential",
            "type": "object"
        },
        "GcsLineageProviderConfig": {
            "additionalProperties": false,
            "description": "Any source that produces gcs lineage from/to Datasets should inherit this class.",
            "properties": {
                "path_specs": {
                    "default": [],
                    "description": "List of PathSpec. See below the details about PathSpec",
                    "items": {
                        "$ref": "#/$defs/PathSpec"
                    },
                    "title": "Path Specs",
                    "type": "array"
                },
                "strip_urls": {
                    "default": true,
                    "description": "Strip filename from gcs url. It only applies if path_specs are not specified.",
                    "title": "Strip Urls",
                    "type": "boolean"
                },
                "ignore_non_path_spec_path": {
                    "default": false,
                    "description": "Ignore paths that are not match in path_specs. It only applies if path_specs are specified.",
                    "title": "Ignore Non Path Spec Path",
                    "type": "boolean"
                }
            },
            "title": "GcsLineageProviderConfig",
            "type": "object"
        },
        "ConnectionMappingConfig": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that this connection mapping belongs to",
                    "title": "Env",
                    "type": "string"
                },
                "platform": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The platform that this connection mapping belongs to",
                    "title": "Platform"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that this connection mapping belongs to",
                    "title": "Platform Instance"
                }
            },
            "title": "ConnectionMappingConfig",
            "type": "object"
        },
        "MySQLAuthMode": {
            "description": "Authentication mode for MySQL connection.",
            "enum": [
                "PASSWORD",
                "AWS_IAM"
            ],
            "title": "MySQLAuthMode",
            "type": "string"
        },
        "AzureConnectionConfig": {
            "additionalProperties": false,
            "description": "Common Azure credentials config.\n\nhttps://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-directory-file-acl-python",
            "properties": {
                "base_path": {
                    "default": "/",
                    "description": "Base folder in hierarchical namespaces to start from.",
                    "title": "Base Path",
                    "type": "string"
                },
                "container_name": {
                    "description": "Azure storage account container name.",
                    "title": "Container Name",
                    "type": "string"
                },
                "account_name": {
                    "description": "Name of the Azure storage account.  See [Microsoft official documentation on how to create a storage account.](https://docs.microsoft.com/en-us/azure/storage/blobs/create-data-lake-storage-account)",
                    "title": "Account Name",
                    "type": "string"
                },
                "account_key": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Azure storage account access key that can be used as a credential. **An account key, a SAS token or a client secret is required for authentication.**",
                    "title": "Account Key"
                },
                "sas_token": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Azure storage account Shared Access Signature (SAS) token that can be used as a credential. **An account key, a SAS token or a client secret is required for authentication.**",
                    "title": "Sas Token"
                },
                "client_secret": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Azure client secret that can be used as a credential. **An account key, a SAS token or a client secret is required for authentication.**",
                    "title": "Client Secret"
                },
                "client_id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Azure client (Application) ID required when a `client_secret` is used as a credential.",
                    "title": "Client Id"
                },
                "tenant_id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Azure tenant (Directory) ID required when a `client_secret` is used as a credential.",
                    "title": "Tenant Id"
                }
            },
            "required": [
                "container_name",
                "account_name"
            ],
            "title": "AzureConnectionConfig",
            "type": "object"
        },
        "KafkaConsumerConnectionConfig": {
            "additionalProperties": false,
            "description": "Configuration class for holding connectivity information for Kafka consumers",
            "properties": {
                "bootstrap": {
                    "default": "localhost:9092",
                    "title": "Bootstrap",
                    "type": "string"
                },
                "schema_registry_url": {
                    "description": "Schema registry URL. Can be overridden with KAFKA_SCHEMAREGISTRY_URL environment variable, or will use DATAHUB_GMS_BASE_PATH if not set.",
                    "title": "Schema Registry Url",
                    "type": "string"
                },
                "schema_registry_config": {
                    "additionalProperties": true,
                    "description": "Extra schema registry config serialized as JSON. These options will be passed into Kafka's SchemaRegistryClient. https://docs.confluent.io/platform/current/clients/confluent-kafka-python/html/index.html?#schemaregistryclient",
                    "title": "Schema Registry Config",
                    "type": "object"
                },
                "client_timeout_seconds": {
                    "default": 60,
                    "description": "The request timeout used when interacting with the Kafka APIs.",
                    "title": "Client Timeout Seconds",
                    "type": "integer"
                },
                "consumer_config": {
                    "additionalProperties": true,
                    "description": "Extra consumer config serialized as JSON. These options will be passed into Kafka's DeserializingConsumer. See https://docs.confluent.io/platform/current/clients/confluent-kafka-python/html/index.html#deserializingconsumer and https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md .",
                    "title": "Consumer Config",
                    "type": "object"
                }
            },
            "title": "KafkaConsumerConnectionConfig",
            "type": "object"
        },
        "SQLAlchemyConnectionConfig": {
            "additionalProperties": false,
            "properties": {
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "username",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "password",
                    "title": "Password"
                },
                "host_port": {
                    "description": "host URL",
                    "title": "Host Port",
                    "type": "string"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "database (catalog)",
                    "title": "Database"
                },
                "scheme": {
                    "description": "scheme",
                    "title": "Scheme",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "title": "Sqlalchemy Uri"
                },
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "title": "Options",
                    "type": "object"
                }
            },
            "required": [
                "host_port",
                "scheme"
            ],
            "title": "SQLAlchemyConnectionConfig",
            "type": "object"
        },
        "StatefulIngestionConfig": {
            "additionalProperties": false,
            "description": "Basic Stateful Ingestion Specific Configuration for any source.",
            "properties": {
                "enabled": {
                    "default": false,
                    "description": "Whether or not to enable stateful ingest. Default: True if a pipeline_name is set and either a datahub-rest sink or `datahub_api` is specified, otherwise False",
                    "title": "Enabled",
                    "type": "boolean"
                }
            },
            "title": "StatefulIngestionConfig",
            "type": "object"
        },
        "HostingEnvironment": {
            "enum": [
                "SELF_HOSTED",
                "ATLAS",
                "AWS_DOCUMENTDB"
            ],
            "title": "HostingEnvironment",
            "type": "string"
        },
        "DataBricksPlatformDetail": {
            "additionalProperties": false,
            "description": "metastore is an additional field used in Databricks connector to generate the dataset urn",
            "properties": {
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "DataHub platform instance name. To generate correct urn for upstream dataset, this should match with platform instance name used in ingestion recipe of other datahub sources.",
                    "title": "Platform Instance"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by DataHub platform ingestion source belong to",
                    "title": "Env",
                    "type": "string"
                },
                "metastore": {
                    "description": "Databricks Unity Catalog metastore name.",
                    "title": "Metastore",
                    "type": "string"
                }
            },
            "required": [
                "metastore"
            ],
            "title": "DataBricksPlatformDetail",
            "type": "object"
        },
        "OwnershipMapping": {
            "additionalProperties": false,
            "properties": {
                "create_corp_user": {
                    "default": true,
                    "description": "Whether ingest PowerBI user as Datahub Corpuser",
                    "title": "Create Corp User",
                    "type": "boolean"
                },
                "use_powerbi_email": {
                    "default": true,
                    "description": "Use PowerBI User email to ingest as corpuser, default is powerbi user identifier",
                    "title": "Use Powerbi Email",
                    "type": "boolean"
                },
                "remove_email_suffix": {
                    "default": false,
                    "description": "Remove PowerBI User email suffix for example, @acryl.io",
                    "title": "Remove Email Suffix",
                    "type": "boolean"
                },
                "dataset_configured_by_as_owner": {
                    "default": false,
                    "description": "Take PBI dataset configuredBy as dataset owner if exist",
                    "title": "Dataset Configured By As Owner",
                    "type": "boolean"
                },
                "owner_criteria": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Need to have certain authority to qualify as owner for example ['ReadWriteReshareExplore','Owner','Admin']",
                    "title": "Owner Criteria"
                }
            },
            "title": "OwnershipMapping",
            "type": "object"
        },
        "PlatformDetail": {
            "additionalProperties": false,
            "properties": {
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                }
            },
            "title": "PlatformDetail",
            "type": "object"
        },
        "PowerBiProfilingConfig": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "default": false,
                    "description": "Whether profiling of PowerBI datasets should be done",
                    "title": "Enabled",
                    "type": "boolean"
                }
            },
            "title": "PowerBiProfilingConfig",
            "type": "object"
        },
        "S3": {
            "additionalProperties": false,
            "properties": {
                "aws_config": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AwsConnectionConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "AWS configuration"
                },
                "use_s3_bucket_tags": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Whether or not to create tags in datahub from the s3 bucket",
                    "title": "Use S3 Bucket Tags"
                },
                "use_s3_object_tags": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "# Whether or not to create tags in datahub from the s3 object",
                    "title": "Use S3 Object Tags"
                }
            },
            "title": "S3",
            "type": "object"
        },
        "HiveMetastoreConfigMode": {
            "enum": [
                "hive",
                "presto",
                "presto-on-hive",
                "trino"
            ],
            "title": "HiveMetastoreConfigMode",
            "type": "string"
        },
        "PostgresAuthMode": {
            "description": "Authentication mode for PostgreSQL connection.",
            "enum": [
                "PASSWORD",
                "AWS_IAM"
            ],
            "title": "PostgresAuthMode",
            "type": "string"
        },
        "CassandraCloudConfig": {
            "additionalProperties": false,
            "description": "Configuration for connecting to DataStax Astra DB in the cloud.",
            "properties": {
                "token": {
                    "description": "The Astra DB application token used for authentication.",
                    "title": "Token",
                    "type": "string"
                },
                "secure_connect_bundle": {
                    "description": "File path to the Secure Connect Bundle (.zip) used for a secure connection to DataStax Astra DB.",
                    "title": "Secure Connect Bundle",
                    "type": "string"
                },
                "connect_timeout": {
                    "default": 600,
                    "description": "Timeout in seconds for establishing new connections to Cassandra.",
                    "title": "Connect Timeout",
                    "type": "integer"
                },
                "request_timeout": {
                    "default": 600,
                    "description": "Timeout in seconds for individual Cassandra requests.",
                    "title": "Request Timeout",
                    "type": "integer"
                }
            },
            "required": [
                "token",
                "secure_connect_bundle"
            ],
            "title": "CassandraCloudConfig",
            "type": "object"
        },
        "GEProfilingBaseConfig": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "default": false,
                    "description": "Whether profiling should be done.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "operation_config": {
                    "$ref": "#/$defs/OperationConfig",
                    "description": "Experimental feature. To specify operation configs."
                },
                "limit": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Max number of documents to profile. By default, profiles all documents.",
                    "title": "Limit"
                },
                "offset": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Offset in documents to profile. By default, uses no offset.",
                    "title": "Offset"
                },
                "profile_table_level_only": {
                    "default": false,
                    "description": "Whether to perform profiling at table-level only, or include column-level profiling as well.",
                    "title": "Profile Table Level Only",
                    "type": "boolean"
                },
                "include_field_null_count": {
                    "default": true,
                    "description": "Whether to profile for the number of nulls for each column.",
                    "title": "Include Field Null Count",
                    "type": "boolean"
                },
                "include_field_distinct_count": {
                    "default": true,
                    "description": "Whether to profile for the number of distinct values for each column.",
                    "title": "Include Field Distinct Count",
                    "type": "boolean"
                },
                "include_field_min_value": {
                    "default": true,
                    "description": "Whether to profile for the min value of numeric columns.",
                    "title": "Include Field Min Value",
                    "type": "boolean"
                },
                "include_field_max_value": {
                    "default": true,
                    "description": "Whether to profile for the max value of numeric columns.",
                    "title": "Include Field Max Value",
                    "type": "boolean"
                },
                "include_field_mean_value": {
                    "default": true,
                    "description": "Whether to profile for the mean value of numeric columns.",
                    "title": "Include Field Mean Value",
                    "type": "boolean"
                },
                "include_field_median_value": {
                    "default": true,
                    "description": "Whether to profile for the median value of numeric columns.",
                    "title": "Include Field Median Value",
                    "type": "boolean"
                },
                "include_field_stddev_value": {
                    "default": true,
                    "description": "Whether to profile for the standard deviation of numeric columns.",
                    "title": "Include Field Stddev Value",
                    "type": "boolean"
                },
                "include_field_quantiles": {
                    "default": false,
                    "description": "Whether to profile for the quantiles of numeric columns.",
                    "title": "Include Field Quantiles",
                    "type": "boolean"
                },
                "include_field_distinct_value_frequencies": {
                    "default": false,
                    "description": "Whether to profile for distinct value frequencies.",
                    "title": "Include Field Distinct Value Frequencies",
                    "type": "boolean"
                },
                "include_field_histogram": {
                    "default": false,
                    "description": "Whether to profile for the histogram for numeric fields.",
                    "title": "Include Field Histogram",
                    "type": "boolean"
                },
                "include_field_sample_values": {
                    "default": true,
                    "description": "Whether to profile for the sample values for all columns.",
                    "title": "Include Field Sample Values",
                    "type": "boolean"
                },
                "max_workers": {
                    "default": 20,
                    "description": "Number of worker threads to use for profiling. Set to 1 to disable.",
                    "title": "Max Workers",
                    "type": "integer"
                }
            },
            "title": "GEProfilingBaseConfig",
            "type": "object"
        },
        "PermissionIngestionConfig": {
            "additionalProperties": false,
            "properties": {
                "enable_workbooks": {
                    "default": true,
                    "description": "Whether or not to enable group permission ingestion for workbooks. Default: True",
                    "title": "Enable Workbooks",
                    "type": "boolean"
                },
                "group_name_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Filter for Tableau group names when ingesting group permissions. For example, you could filter for groups that include the term 'Consumer' in their name by adding '^.*Consumer$' to the allow list.By default, all groups will be ingested. You can both allow and deny groups based on their name using their name, or a Regex pattern. Deny patterns always take precedence over allow patterns. "
                }
            },
            "title": "PermissionIngestionConfig",
            "type": "object"
        },
        "TableauLineageOverrides": {
            "additionalProperties": false,
            "properties": {
                "platform_override_map": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A holder for platform -> platform mappings to generate correct dataset urns",
                    "title": "Platform Override Map"
                },
                "database_override_map": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                                "type": "string"
                            },
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A holder for database -> database mappings to generate correct dataset urns",
                    "title": "Database Override Map"
                }
            },
            "title": "TableauLineageOverrides",
            "type": "object"
        },
        "BaseUsageConfig": {
            "additionalProperties": false,
            "properties": {
                "bucket_duration": {
                    "$ref": "#/$defs/BucketDuration",
                    "default": "DAY",
                    "description": "Size of the time window to aggregate usage stats."
                },
                "end_time": {
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "format": "date-time",
                    "title": "End Time",
                    "type": "string"
                },
                "start_time": {
                    "default": null,
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "format": "date-time",
                    "title": "Start Time",
                    "type": "string"
                },
                "top_n_queries": {
                    "default": 10,
                    "description": "Number of top queries to save to each table.",
                    "exclusiveMinimum": 0,
                    "title": "Top N Queries",
                    "type": "integer"
                },
                "user_email_pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "regex patterns for user emails to filter in usage."
                },
                "include_operational_stats": {
                    "default": true,
                    "description": "Whether to display operational stats.",
                    "title": "Include Operational Stats",
                    "type": "boolean"
                },
                "include_read_operational_stats": {
                    "default": false,
                    "description": "Whether to report read operational stats. Experimental.",
                    "title": "Include Read Operational Stats",
                    "type": "boolean"
                },
                "format_sql_queries": {
                    "default": false,
                    "description": "Whether to format sql queries",
                    "title": "Format Sql Queries",
                    "type": "boolean"
                },
                "include_top_n_queries": {
                    "default": true,
                    "description": "Whether to ingest the top_n_queries.",
                    "title": "Include Top N Queries",
                    "type": "boolean"
                }
            },
            "title": "BaseUsageConfig",
            "type": "object"
        },
        "BigQueryDestinationConfig": {
            "additionalProperties": false,
            "properties": {
                "credential": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/GCPCredential"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "BigQuery credential informations"
                },
                "extra_client_options": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "Additional options to pass to google.cloud.logging_v2.client.Client.",
                    "title": "Extra Client Options",
                    "type": "object"
                },
                "project_on_behalf": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "[Advanced] The BigQuery project in which queries are executed. Will be passed when creating a job. If not passed, falls back to the project associated with the service account.",
                    "title": "Project On Behalf"
                },
                "dataset": {
                    "description": "The fivetran connector log dataset.",
                    "title": "Dataset",
                    "type": "string"
                }
            },
            "required": [
                "dataset"
            ],
            "title": "BigQueryDestinationConfig",
            "type": "object"
        },
        "DatabricksDestinationConfig": {
            "additionalProperties": false,
            "properties": {
                "scheme": {
                    "default": "databricks",
                    "title": "Scheme",
                    "type": "string"
                },
                "token": {
                    "description": "Databricks personal access token",
                    "title": "Token",
                    "type": "string"
                },
                "workspace_url": {
                    "description": "Databricks workspace url. e.g. https://my-workspace.cloud.databricks.com",
                    "title": "Workspace Url",
                    "type": "string"
                },
                "warehouse_id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SQL Warehouse id, for running queries. Must be explicitly provided to enable SQL-based features. Required for the following features that need SQL access: 1) Tag extraction (include_tags=True) - queries system.information_schema.tags 2) Hive Metastore catalog (include_hive_metastore=True) - queries legacy hive_metastore catalog 3) System table lineage (lineage_data_source=SYSTEM_TABLES) - queries system.access.table_lineage/column_lineage 4) Data profiling (profiling.enabled=True) - runs SELECT/ANALYZE queries on tables. When warehouse_id is missing, these features will be automatically disabled (with warnings) to allow ingestion to continue.",
                    "title": "Warehouse Id"
                },
                "extra_client_options": {
                    "additionalProperties": true,
                    "default": {},
                    "description": "Additional options to pass to Databricks SQLAlchemy client.",
                    "title": "Extra Client Options",
                    "type": "object"
                },
                "catalog": {
                    "description": "The fivetran connector log catalog.",
                    "title": "Catalog",
                    "type": "string"
                },
                "log_schema": {
                    "description": "The fivetran connector log schema.",
                    "title": "Log Schema",
                    "type": "string"
                }
            },
            "required": [
                "token",
                "workspace_url",
                "catalog",
                "log_schema"
            ],
            "title": "DatabricksDestinationConfig",
            "type": "object"
        },
        "FivetranAPIConfig": {
            "additionalProperties": false,
            "properties": {
                "api_key": {
                    "description": "Fivetran API key",
                    "title": "Api Key",
                    "type": "string"
                },
                "api_secret": {
                    "description": "Fivetran API secret",
                    "title": "Api Secret",
                    "type": "string"
                },
                "base_url": {
                    "default": "https://api.fivetran.com",
                    "description": "Fivetran API base URL",
                    "title": "Base Url",
                    "type": "string"
                },
                "request_timeout_sec": {
                    "default": 30,
                    "description": "Request timeout in seconds",
                    "title": "Request Timeout Sec",
                    "type": "integer"
                }
            },
            "required": [
                "api_key",
                "api_secret"
            ],
            "title": "FivetranAPIConfig",
            "type": "object"
        },
        "FivetranLogConfig": {
            "additionalProperties": false,
            "properties": {
                "destination_platform": {
                    "default": "snowflake",
                    "description": "The destination platform where fivetran connector log tables are dumped.",
                    "enum": [
                        "snowflake",
                        "bigquery",
                        "databricks"
                    ],
                    "title": "Destination Platform",
                    "type": "string"
                },
                "snowflake_destination_config": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/SnowflakeDestinationConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "If destination platform is 'snowflake', provide snowflake configuration."
                },
                "bigquery_destination_config": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/BigQueryDestinationConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "If destination platform is 'bigquery', provide bigquery configuration."
                },
                "databricks_destination_config": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/DatabricksDestinationConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "If destination platform is 'databricks', provide databricks configuration."
                }
            },
            "title": "FivetranLogConfig",
            "type": "object"
        },
        "SnowflakeDestinationConfig": {
            "additionalProperties": false,
            "properties": {
                "options": {
                    "additionalProperties": true,
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs.",
                    "title": "Options",
                    "type": "object"
                },
                "username": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Snowflake username.",
                    "title": "Username"
                },
                "password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Snowflake password.",
                    "title": "Password"
                },
                "private_key": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Private key in a form of '-----BEGIN PRIVATE KEY-----\\nprivate-key\\n-----END PRIVATE KEY-----\\n' if using key pair authentication. Encrypted version of private key will be in a form of '-----BEGIN ENCRYPTED PRIVATE KEY-----\\nencrypted-private-key\\n-----END ENCRYPTED PRIVATE KEY-----\\n' See: https://docs.snowflake.com/en/user-guide/key-pair-auth.html",
                    "title": "Private Key"
                },
                "private_key_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The path to the private key if using key pair authentication. Ignored if `private_key` is set. See: https://docs.snowflake.com/en/user-guide/key-pair-auth.html",
                    "title": "Private Key Path"
                },
                "private_key_password": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Password for your private key. Required if using key pair authentication with encrypted private key.",
                    "title": "Private Key Password"
                },
                "oauth_config": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/OAuthConfiguration"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "oauth configuration - https://docs.snowflake.com/en/user-guide/python-connector-example.html#connecting-with-oauth"
                },
                "authentication_type": {
                    "default": "DEFAULT_AUTHENTICATOR",
                    "description": "The type of authenticator to use when connecting to Snowflake. Supports \"DEFAULT_AUTHENTICATOR\", \"OAUTH_AUTHENTICATOR\", \"EXTERNAL_BROWSER_AUTHENTICATOR\" and \"KEY_PAIR_AUTHENTICATOR\".",
                    "title": "Authentication Type",
                    "type": "string"
                },
                "account_id": {
                    "description": "Snowflake account identifier. e.g. xy12345,  xy12345.us-east-2.aws, xy12345.us-central1.gcp, xy12345.central-us.azure, xy12345.us-west-2.privatelink. Refer [Account Identifiers](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#format-2-legacy-account-locator-in-a-region) for more details.",
                    "title": "Account Id",
                    "type": "string"
                },
                "warehouse": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Snowflake warehouse.",
                    "title": "Warehouse"
                },
                "role": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Snowflake role.",
                    "title": "Role"
                },
                "connect_args": {
                    "anyOf": [
                        {
                            "additionalProperties": true,
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Connect args to pass to Snowflake SqlAlchemy driver",
                    "title": "Connect Args"
                },
                "token": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "OAuth token from external identity provider. Not recommended for most use cases because it will not be able to refresh once expired.",
                    "title": "Token"
                },
                "snowflake_domain": {
                    "default": "snowflakecomputing.com",
                    "description": "Snowflake domain. Use 'snowflakecomputing.com' for most regions or 'snowflakecomputing.cn' for China (cn-northwest-1) region.",
                    "title": "Snowflake Domain",
                    "type": "string"
                },
                "database": {
                    "description": "The fivetran connector log database.",
                    "title": "Database",
                    "type": "string"
                },
                "log_schema": {
                    "description": "The fivetran connector log schema.",
                    "title": "Log Schema",
                    "type": "string"
                }
            },
            "required": [
                "account_id",
                "database",
                "log_schema"
            ],
            "title": "SnowflakeDestinationConfig",
            "type": "object"
        },
        "DeltaLakeDetails": {
            "additionalProperties": false,
            "properties": {
                "platform_instance_name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Delta-lake paltform instance name",
                    "title": "Platform Instance Name"
                },
                "env": {
                    "default": "PROD",
                    "description": "Delta-lake environment",
                    "title": "Env",
                    "type": "string"
                }
            },
            "title": "DeltaLakeDetails",
            "type": "object"
        },
        "LineageDataSource": {
            "enum": [
                "AUTO",
                "SYSTEM_TABLES",
                "API"
            ],
            "title": "LineageDataSource",
            "type": "string"
        },
        "UnityCatalogAnalyzeProfilerConfig": {
            "additionalProperties": false,
            "properties": {
                "method": {
                    "const": "analyze",
                    "default": "analyze",
                    "title": "Method",
                    "type": "string"
                },
                "warehouse_id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SQL Warehouse id, for running profiling queries.",
                    "title": "Warehouse Id"
                },
                "pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables for profiling during ingestion. Specify regex to match the `catalog.schema.table` format. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "enabled": {
                    "default": false,
                    "description": "Whether profiling should be done.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "operation_config": {
                    "$ref": "#/$defs/OperationConfig",
                    "description": "Experimental feature. To specify operation configs."
                },
                "profile_table_level_only": {
                    "default": false,
                    "description": "Whether to perform profiling at table-level only or include column-level profiling as well.",
                    "title": "Profile Table Level Only",
                    "type": "boolean"
                },
                "call_analyze": {
                    "default": true,
                    "description": "Whether to call ANALYZE TABLE as part of profile ingestion.If false, will ingest the results of the most recent ANALYZE TABLE call, if any.",
                    "title": "Call Analyze",
                    "type": "boolean"
                },
                "max_wait_secs": {
                    "default": 3600,
                    "description": "Maximum time to wait for an ANALYZE TABLE query to complete.",
                    "title": "Max Wait Secs",
                    "type": "integer"
                },
                "max_workers": {
                    "default": 20,
                    "description": "Number of worker threads to use for profiling. Set to 1 to disable.",
                    "title": "Max Workers",
                    "type": "integer"
                }
            },
            "title": "UnityCatalogAnalyzeProfilerConfig",
            "type": "object"
        },
        "UnityCatalogGEProfilerConfig": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "default": false,
                    "description": "Whether profiling should be done.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "operation_config": {
                    "$ref": "#/$defs/OperationConfig",
                    "description": "Experimental feature. To specify operation configs."
                },
                "limit": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Max number of documents to profile. By default, profiles all documents.",
                    "title": "Limit"
                },
                "offset": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Offset in documents to profile. By default, uses no offset.",
                    "title": "Offset"
                },
                "profile_table_level_only": {
                    "default": false,
                    "description": "Whether to perform profiling at table-level only, or include column-level profiling as well.",
                    "title": "Profile Table Level Only",
                    "type": "boolean"
                },
                "include_field_null_count": {
                    "default": true,
                    "description": "Whether to profile for the number of nulls for each column.",
                    "title": "Include Field Null Count",
                    "type": "boolean"
                },
                "include_field_distinct_count": {
                    "default": true,
                    "description": "Whether to profile for the number of distinct values for each column.",
                    "title": "Include Field Distinct Count",
                    "type": "boolean"
                },
                "include_field_min_value": {
                    "default": true,
                    "description": "Whether to profile for the min value of numeric columns.",
                    "title": "Include Field Min Value",
                    "type": "boolean"
                },
                "include_field_max_value": {
                    "default": true,
                    "description": "Whether to profile for the max value of numeric columns.",
                    "title": "Include Field Max Value",
                    "type": "boolean"
                },
                "include_field_mean_value": {
                    "default": true,
                    "description": "Whether to profile for the mean value of numeric columns.",
                    "title": "Include Field Mean Value",
                    "type": "boolean"
                },
                "include_field_median_value": {
                    "default": true,
                    "description": "Whether to profile for the median value of numeric columns.",
                    "title": "Include Field Median Value",
                    "type": "boolean"
                },
                "include_field_stddev_value": {
                    "default": true,
                    "description": "Whether to profile for the standard deviation of numeric columns.",
                    "title": "Include Field Stddev Value",
                    "type": "boolean"
                },
                "include_field_quantiles": {
                    "default": false,
                    "description": "Whether to profile for the quantiles of numeric columns.",
                    "title": "Include Field Quantiles",
                    "type": "boolean"
                },
                "include_field_distinct_value_frequencies": {
                    "default": false,
                    "description": "Whether to profile for distinct value frequencies.",
                    "title": "Include Field Distinct Value Frequencies",
                    "type": "boolean"
                },
                "include_field_histogram": {
                    "default": false,
                    "description": "Whether to profile for the histogram for numeric fields.",
                    "title": "Include Field Histogram",
                    "type": "boolean"
                },
                "include_field_sample_values": {
                    "default": true,
                    "description": "Whether to profile for the sample values for all columns.",
                    "title": "Include Field Sample Values",
                    "type": "boolean"
                },
                "max_workers": {
                    "default": 20,
                    "description": "Number of worker threads to use for profiling. Set to 1 to disable.",
                    "title": "Max Workers",
                    "type": "integer"
                },
                "report_dropped_profiles": {
                    "default": false,
                    "description": "Whether to report datasets or dataset columns which were not profiled. Set to `True` for debugging purposes.",
                    "title": "Report Dropped Profiles",
                    "type": "boolean"
                },
                "turn_off_expensive_profiling_metrics": {
                    "default": false,
                    "description": "Whether to turn off expensive profiling or not. This turns off profiling for quantiles, distinct_value_frequencies, histogram & sample_values. This also limits maximum number of fields being profiled to 10.",
                    "title": "Turn Off Expensive Profiling Metrics",
                    "type": "boolean"
                },
                "field_sample_values_limit": {
                    "default": 20,
                    "description": "Upper limit for number of sample values to collect for all columns.",
                    "title": "Field Sample Values Limit",
                    "type": "integer"
                },
                "max_number_of_fields_to_profile": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A positive integer that specifies the maximum number of columns to profile for any table. `None` implies all columns. The cost of profiling goes up significantly as the number of columns to profile goes up.",
                    "title": "Max Number Of Fields To Profile"
                },
                "profile_if_updated_since_days": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Profile table only if it has been updated since these many number of days. If set to `null`, no constraint of last modified time for tables to profile. Supported only in `snowflake` and `BigQuery`.",
                    "schema_extra": {
                        "supported_sources": [
                            "snowflake",
                            "bigquery"
                        ]
                    },
                    "title": "Profile If Updated Since Days"
                },
                "profile_table_size_limit": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 5,
                    "description": "Profile tables only if their size is less than specified GBs. If set to `null`, no limit on the size of tables to profile. Supported only in `Snowflake`, `BigQuery` and `Databricks`. Supported for `Oracle` based on calculated size from gathered stats.",
                    "schema_extra": {
                        "supported_sources": [
                            "snowflake",
                            "bigquery",
                            "unity-catalog",
                            "oracle"
                        ]
                    },
                    "title": "Profile Table Size Limit"
                },
                "profile_table_row_limit": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 5000000,
                    "description": "Profile tables only if their row count is less than specified count. If set to `null`, no limit on the row count of tables to profile. Supported only in `Snowflake`, `BigQuery`. Supported for `Oracle` based on gathered stats.",
                    "schema_extra": {
                        "supported_sources": [
                            "snowflake",
                            "bigquery",
                            "oracle"
                        ]
                    },
                    "title": "Profile Table Row Limit"
                },
                "profile_table_row_count_estimate_only": {
                    "default": false,
                    "description": "Use an approximate query for row count. This will be much faster but slightly less accurate. Only supported for Postgres and MySQL. ",
                    "schema_extra": {
                        "supported_sources": [
                            "postgres",
                            "mysql"
                        ]
                    },
                    "title": "Profile Table Row Count Estimate Only",
                    "type": "boolean"
                },
                "query_combiner_enabled": {
                    "default": true,
                    "description": "*This feature is still experimental and can be disabled if it causes issues.* Reduces the total number of queries issued and speeds up profiling by dynamically combining SQL queries where possible.",
                    "title": "Query Combiner Enabled",
                    "type": "boolean"
                },
                "catch_exceptions": {
                    "default": true,
                    "description": "",
                    "title": "Catch Exceptions",
                    "type": "boolean"
                },
                "partition_profiling_enabled": {
                    "default": true,
                    "description": "Whether to profile partitioned tables. Only BigQuery and Aws Athena supports this. If enabled, latest partition data is used for profiling.",
                    "schema_extra": {
                        "supported_sources": [
                            "athena",
                            "bigquery"
                        ]
                    },
                    "title": "Partition Profiling Enabled",
                    "type": "boolean"
                },
                "partition_datetime": {
                    "anyOf": [
                        {
                            "format": "date-time",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "If specified, profile only the partition which matches this datetime. If not specified, profile the latest partition. Only Bigquery supports this.",
                    "schema_extra": {
                        "supported_sources": [
                            "bigquery"
                        ]
                    },
                    "title": "Partition Datetime"
                },
                "use_sampling": {
                    "default": true,
                    "description": "Whether to profile column level stats on sample of table. Only BigQuery and Snowflake support this. If enabled, profiling is done on rows sampled from table. Sampling is not done for smaller tables. ",
                    "schema_extra": {
                        "supported_sources": [
                            "bigquery",
                            "snowflake"
                        ]
                    },
                    "title": "Use Sampling",
                    "type": "boolean"
                },
                "sample_size": {
                    "default": 10000,
                    "description": "Number of rows to be sampled from table for column level profiling.Applicable only if `use_sampling` is set to True.",
                    "schema_extra": {
                        "supported_sources": [
                            "bigquery",
                            "snowflake"
                        ]
                    },
                    "title": "Sample Size",
                    "type": "integer"
                },
                "profile_external_tables": {
                    "default": false,
                    "description": "Whether to profile external tables. Only Snowflake and Redshift supports this.",
                    "schema_extra": {
                        "supported_sources": [
                            "redshift",
                            "snowflake"
                        ]
                    },
                    "title": "Profile External Tables",
                    "type": "boolean"
                },
                "tags_to_ignore_sampling": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Fixed list of tags to ignore sampling. If not specified, tables will be sampled based on `use_sampling`.",
                    "title": "Tags To Ignore Sampling"
                },
                "profile_nested_fields": {
                    "default": false,
                    "description": "Whether to profile complex types like structs, arrays and maps. ",
                    "title": "Profile Nested Fields",
                    "type": "boolean"
                },
                "method": {
                    "const": "ge",
                    "default": "ge",
                    "title": "Method",
                    "type": "string"
                },
                "warehouse_id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SQL Warehouse id, for running profiling queries.",
                    "title": "Warehouse Id"
                },
                "pattern": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns to filter tables for profiling during ingestion. Specify regex to match the `catalog.schema.table` format. Note that only tables allowed by the `table_pattern` will be considered."
                },
                "max_wait_secs": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Maximum time to wait for a table to be profiled.",
                    "title": "Max Wait Secs"
                }
            },
            "title": "UnityCatalogGEProfilerConfig",
            "type": "object"
        },
        "UsageDataSource": {
            "enum": [
                "AUTO",
                "SYSTEM_TABLES",
                "API"
            ],
            "title": "UsageDataSource",
            "type": "string"
        },
        "GitReference": {
            "additionalProperties": false,
            "description": "Reference to a hosted Git repository. Used to generate \"view source\" links.",
            "properties": {
                "repo": {
                    "description": "Name of your Git repo e.g. https://github.com/datahub-project/datahub or https://gitlab.com/gitlab-org/gitlab. If organization/repo is provided, we assume it is a GitHub repo.",
                    "title": "Repo",
                    "type": "string"
                },
                "branch": {
                    "default": "main",
                    "description": "Branch on which your files live by default. Typically main or master. This can also be a commit hash.",
                    "title": "Branch",
                    "type": "string"
                },
                "url_subdir": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Prefix to prepend when generating URLs for files - useful when files are in a subdirectory. Only affects URL generation, not git operations.",
                    "title": "Url Subdir"
                },
                "url_template": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Template for generating a URL to a file in the repo e.g. '{repo_url}/blob/{branch}/{file_path}'. We can infer this for GitHub and GitLab repos, and it is otherwise required.It supports the following variables: {repo_url}, {branch}, {file_path}",
                    "title": "Url Template"
                }
            },
            "required": [
                "repo"
            ],
            "title": "GitReference",
            "type": "object"
        },
        "PlatformConnectionConfig": {
            "additionalProperties": false,
            "description": "Platform connection configuration for mapping Grafana datasources to their actual platforms.",
            "properties": {
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform": {
                    "description": "The platform name (e.g., 'postgres', 'mysql', 'snowflake')",
                    "title": "Platform",
                    "type": "string"
                },
                "database": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Default database name",
                    "title": "Database"
                },
                "database_schema": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Default schema name",
                    "title": "Database Schema"
                }
            },
            "required": [
                "platform"
            ],
            "title": "PlatformConnectionConfig",
            "type": "object"
        },
        "AthenaProfilingConfig": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "default": false,
                    "description": "Whether profiling should be done.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "operation_config": {
                    "$ref": "#/$defs/OperationConfig",
                    "description": "Experimental feature. To specify operation configs."
                },
                "limit": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Max number of documents to profile. By default, profiles all documents.",
                    "title": "Limit"
                },
                "offset": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Offset in documents to profile. By default, uses no offset.",
                    "title": "Offset"
                },
                "profile_table_level_only": {
                    "default": false,
                    "description": "Whether to perform profiling at table-level only, or include column-level profiling as well.",
                    "title": "Profile Table Level Only",
                    "type": "boolean"
                },
                "include_field_null_count": {
                    "default": true,
                    "description": "Whether to profile for the number of nulls for each column.",
                    "title": "Include Field Null Count",
                    "type": "boolean"
                },
                "include_field_distinct_count": {
                    "default": true,
                    "description": "Whether to profile for the number of distinct values for each column.",
                    "title": "Include Field Distinct Count",
                    "type": "boolean"
                },
                "include_field_min_value": {
                    "default": true,
                    "description": "Whether to profile for the min value of numeric columns.",
                    "title": "Include Field Min Value",
                    "type": "boolean"
                },
                "include_field_max_value": {
                    "default": true,
                    "description": "Whether to profile for the max value of numeric columns.",
                    "title": "Include Field Max Value",
                    "type": "boolean"
                },
                "include_field_mean_value": {
                    "default": true,
                    "description": "Whether to profile for the mean value of numeric columns.",
                    "title": "Include Field Mean Value",
                    "type": "boolean"
                },
                "include_field_median_value": {
                    "default": true,
                    "description": "Whether to profile for the median value of numeric columns.",
                    "title": "Include Field Median Value",
                    "type": "boolean"
                },
                "include_field_stddev_value": {
                    "default": true,
                    "description": "Whether to profile for the standard deviation of numeric columns.",
                    "title": "Include Field Stddev Value",
                    "type": "boolean"
                },
                "include_field_quantiles": {
                    "default": false,
                    "description": "Whether to profile for the quantiles of numeric columns.",
                    "title": "Include Field Quantiles",
                    "type": "boolean"
                },
                "include_field_distinct_value_frequencies": {
                    "default": false,
                    "description": "Whether to profile for distinct value frequencies.",
                    "title": "Include Field Distinct Value Frequencies",
                    "type": "boolean"
                },
                "include_field_histogram": {
                    "default": false,
                    "description": "Whether to profile for the histogram for numeric fields.",
                    "title": "Include Field Histogram",
                    "type": "boolean"
                },
                "include_field_sample_values": {
                    "default": true,
                    "description": "Whether to profile for the sample values for all columns.",
                    "title": "Include Field Sample Values",
                    "type": "boolean"
                },
                "max_workers": {
                    "default": 20,
                    "description": "Number of worker threads to use for profiling. Set to 1 to disable.",
                    "title": "Max Workers",
                    "type": "integer"
                },
                "report_dropped_profiles": {
                    "default": false,
                    "description": "Whether to report datasets or dataset columns which were not profiled. Set to `True` for debugging purposes.",
                    "title": "Report Dropped Profiles",
                    "type": "boolean"
                },
                "turn_off_expensive_profiling_metrics": {
                    "default": false,
                    "description": "Whether to turn off expensive profiling or not. This turns off profiling for quantiles, distinct_value_frequencies, histogram & sample_values. This also limits maximum number of fields being profiled to 10.",
                    "title": "Turn Off Expensive Profiling Metrics",
                    "type": "boolean"
                },
                "field_sample_values_limit": {
                    "default": 20,
                    "description": "Upper limit for number of sample values to collect for all columns.",
                    "title": "Field Sample Values Limit",
                    "type": "integer"
                },
                "max_number_of_fields_to_profile": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A positive integer that specifies the maximum number of columns to profile for any table. `None` implies all columns. The cost of profiling goes up significantly as the number of columns to profile goes up.",
                    "title": "Max Number Of Fields To Profile"
                },
                "profile_if_updated_since_days": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0,
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Profile table only if it has been updated since these many number of days. If set to `null`, no constraint of last modified time for tables to profile. Supported only in `snowflake` and `BigQuery`.",
                    "schema_extra": {
                        "supported_sources": [
                            "snowflake",
                            "bigquery"
                        ]
                    },
                    "title": "Profile If Updated Since Days"
                },
                "profile_table_size_limit": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 5,
                    "description": "Profile tables only if their size is less than specified GBs. If set to `null`, no limit on the size of tables to profile. Supported only in `Snowflake`, `BigQuery` and `Databricks`. Supported for `Oracle` based on calculated size from gathered stats.",
                    "schema_extra": {
                        "supported_sources": [
                            "snowflake",
                            "bigquery",
                            "unity-catalog",
                            "oracle"
                        ]
                    },
                    "title": "Profile Table Size Limit"
                },
                "profile_table_row_limit": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 5000000,
                    "description": "Profile tables only if their row count is less than specified count. If set to `null`, no limit on the row count of tables to profile. Supported only in `Snowflake`, `BigQuery`. Supported for `Oracle` based on gathered stats.",
                    "schema_extra": {
                        "supported_sources": [
                            "snowflake",
                            "bigquery",
                            "oracle"
                        ]
                    },
                    "title": "Profile Table Row Limit"
                },
                "profile_table_row_count_estimate_only": {
                    "default": false,
                    "description": "Use an approximate query for row count. This will be much faster but slightly less accurate. Only supported for Postgres and MySQL. ",
                    "schema_extra": {
                        "supported_sources": [
                            "postgres",
                            "mysql"
                        ]
                    },
                    "title": "Profile Table Row Count Estimate Only",
                    "type": "boolean"
                },
                "query_combiner_enabled": {
                    "default": true,
                    "description": "*This feature is still experimental and can be disabled if it causes issues.* Reduces the total number of queries issued and speeds up profiling by dynamically combining SQL queries where possible.",
                    "title": "Query Combiner Enabled",
                    "type": "boolean"
                },
                "catch_exceptions": {
                    "default": true,
                    "description": "",
                    "title": "Catch Exceptions",
                    "type": "boolean"
                },
                "partition_profiling_enabled": {
                    "default": false,
                    "description": "Enable partition profiling. This will profile the latest partition of the table.",
                    "title": "Partition Profiling Enabled",
                    "type": "boolean"
                },
                "partition_datetime": {
                    "anyOf": [
                        {
                            "format": "date-time",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "If specified, profile only the partition which matches this datetime. If not specified, profile the latest partition. Only Bigquery supports this.",
                    "schema_extra": {
                        "supported_sources": [
                            "bigquery"
                        ]
                    },
                    "title": "Partition Datetime"
                },
                "use_sampling": {
                    "default": true,
                    "description": "Whether to profile column level stats on sample of table. Only BigQuery and Snowflake support this. If enabled, profiling is done on rows sampled from table. Sampling is not done for smaller tables. ",
                    "schema_extra": {
                        "supported_sources": [
                            "bigquery",
                            "snowflake"
                        ]
                    },
                    "title": "Use Sampling",
                    "type": "boolean"
                },
                "sample_size": {
                    "default": 10000,
                    "description": "Number of rows to be sampled from table for column level profiling.Applicable only if `use_sampling` is set to True.",
                    "schema_extra": {
                        "supported_sources": [
                            "bigquery",
                            "snowflake"
                        ]
                    },
                    "title": "Sample Size",
                    "type": "integer"
                },
                "profile_external_tables": {
                    "default": false,
                    "description": "Whether to profile external tables. Only Snowflake and Redshift supports this.",
                    "schema_extra": {
                        "supported_sources": [
                            "redshift",
                            "snowflake"
                        ]
                    },
                    "title": "Profile External Tables",
                    "type": "boolean"
                },
                "tags_to_ignore_sampling": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Fixed list of tags to ignore sampling. If not specified, tables will be sampled based on `use_sampling`.",
                    "title": "Tags To Ignore Sampling"
                },
                "profile_nested_fields": {
                    "default": false,
                    "description": "Whether to profile complex types like structs, arrays and maps. ",
                    "title": "Profile Nested Fields",
                    "type": "boolean"
                }
            },
            "title": "AthenaProfilingConfig",
            "type": "object"
        },
        "DomainApplyConfig": {
            "additionalProperties": false,
            "properties": {
                "assets": {
                    "description": "List of assets to apply domain hierarchically. Currently only containers and datasets are supported",
                    "items": {
                        "type": "string"
                    },
                    "title": "Assets",
                    "type": "array"
                },
                "domain_urn": {
                    "default": "",
                    "title": "Domain Urn",
                    "type": "string"
                }
            },
            "title": "DomainApplyConfig",
            "type": "object"
        },
        "OwnerApplyConfig": {
            "additionalProperties": false,
            "properties": {
                "assets": {
                    "description": "List of assets to apply owner hierarchically. Currently only containers and datasets are supported",
                    "items": {
                        "type": "string"
                    },
                    "title": "Assets",
                    "type": "array"
                },
                "owner_urn": {
                    "default": "",
                    "title": "Owner Urn",
                    "type": "string"
                }
            },
            "title": "OwnerApplyConfig",
            "type": "object"
        },
        "TagApplyConfig": {
            "additionalProperties": false,
            "properties": {
                "assets": {
                    "description": "List of assets to apply tag hierarchically. Currently only containers and datasets are supported",
                    "items": {
                        "type": "string"
                    },
                    "title": "Assets",
                    "type": "array"
                },
                "tag_urn": {
                    "default": "",
                    "title": "Tag Urn",
                    "type": "string"
                }
            },
            "title": "TagApplyConfig",
            "type": "object"
        },
        "TermApplyConfig": {
            "additionalProperties": false,
            "properties": {
                "assets": {
                    "description": "List of assets to apply term hierarchically. Currently only containers and datasets are supported",
                    "items": {
                        "type": "string"
                    },
                    "title": "Assets",
                    "type": "array"
                },
                "term_urn": {
                    "default": "",
                    "title": "Term Urn",
                    "type": "string"
                }
            },
            "title": "TermApplyConfig",
            "type": "object"
        },
        "LineageMode": {
            "enum": [
                "sql_based",
                "stl_scan_based",
                "mixed"
            ],
            "title": "LineageMode",
            "type": "string"
        },
        "S3LineageProviderConfig": {
            "additionalProperties": false,
            "description": "Any source that produces s3 lineage from/to Datasets should inherit this class.",
            "properties": {
                "path_specs": {
                    "default": [],
                    "description": "List of PathSpec. See below the details about PathSpec",
                    "items": {
                        "$ref": "#/$defs/PathSpec"
                    },
                    "title": "Path Specs",
                    "type": "array"
                },
                "strip_urls": {
                    "default": true,
                    "description": "Strip filename from s3 url. It only applies if path_specs are not specified.",
                    "title": "Strip Urls",
                    "type": "boolean"
                },
                "ignore_non_path_spec_path": {
                    "default": false,
                    "description": "Ignore paths that are not match in path_specs. It only applies if path_specs are specified.",
                    "title": "Ignore Non Path Spec Path",
                    "type": "boolean"
                }
            },
            "title": "S3LineageProviderConfig",
            "type": "object"
        },
        "URIReplacePattern": {
            "additionalProperties": false,
            "properties": {
                "match": {
                    "description": "Pattern to match on uri-s as part of reference resolution. See replace field",
                    "title": "Match",
                    "type": "string"
                },
                "replace": {
                    "description": "Pattern to replace with as part of reference resolution. See match field",
                    "title": "Replace",
                    "type": "string"
                }
            },
            "required": [
                "match",
                "replace"
            ],
            "title": "URIReplacePattern",
            "type": "object"
        },
        "GlueProfilingConfig": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "default": false,
                    "description": "Whether profiling should be done.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "profile_table_level_only": {
                    "default": false,
                    "description": "Whether to perform profiling at table-level only, or include column-level profiling as well.",
                    "title": "Profile Table Level Only",
                    "type": "boolean"
                },
                "row_count": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The parameter name for row count in glue table.",
                    "title": "Row Count"
                },
                "column_count": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The parameter name for column count in glue table.",
                    "title": "Column Count"
                },
                "unique_count": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The parameter name for the count of unique value in a column.",
                    "title": "Unique Count"
                },
                "unique_proportion": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The parameter name for the proportion of unique values in a column.",
                    "title": "Unique Proportion"
                },
                "null_count": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The parameter name for the count of null values in a column.",
                    "title": "Null Count"
                },
                "null_proportion": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The parameter name for the proportion of null values in a column.",
                    "title": "Null Proportion"
                },
                "min": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The parameter name for the min value of a column.",
                    "title": "Min"
                },
                "max": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The parameter name for the max value of a column.",
                    "title": "Max"
                },
                "mean": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The parameter name for the mean value of a column.",
                    "title": "Mean"
                },
                "median": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The parameter name for the median value of a column.",
                    "title": "Median"
                },
                "stdev": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The parameter name for the standard deviation of a column.",
                    "title": "Stdev"
                },
                "partition_patterns": {
                    "$ref": "#/$defs/AllowDenyPattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "description": "Regex patterns for filtering partitions for profile. The pattern should be a string like: \"{'key':'value'}\"."
                },
                "operation_config": {
                    "$ref": "#/$defs/OperationConfig",
                    "description": "Experimental feature. To specify operation configs."
                }
            },
            "title": "GlueProfilingConfig",
            "type": "object"
        },
        "DremioSourceMapping": {
            "additionalProperties": false,
            "properties": {
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",
                    "title": "Platform Instance"
                },
                "env": {
                    "default": "PROD",
                    "description": "The environment that all assets produced by this connector belong to",
                    "title": "Env",
                    "type": "string"
                },
                "platform": {
                    "description": "Source connection made by Dremio (e.g. S3, Snowflake)",
                    "title": "Platform",
                    "type": "string"
                },
                "source_name": {
                    "description": "Alias of platform in Dremio connection",
                    "title": "Source Name",
                    "type": "string"
                }
            },
            "required": [
                "platform",
                "source_name"
            ],
            "title": "DremioSourceMapping",
            "type": "object"
        },
        "ProfileConfig": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "default": false,
                    "description": "Whether profiling should be done.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "operation_config": {
                    "$ref": "#/$defs/OperationConfig",
                    "description": "Experimental feature. To specify operation configs."
                },
                "limit": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Max number of documents to profile. By default, profiles all documents.",
                    "title": "Limit"
                },
                "offset": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Offset in documents to profile. By default, uses no offset.",
                    "title": "Offset"
                },
                "profile_table_level_only": {
                    "default": false,
                    "description": "Whether to perform profiling at table-level only, or include column-level profiling as well.",
                    "title": "Profile Table Level Only",
                    "type": "boolean"
                },
                "include_field_null_count": {
                    "default": true,
                    "description": "Whether to profile for the number of nulls for each column.",
                    "title": "Include Field Null Count",
                    "type": "boolean"
                },
                "include_field_distinct_count": {
                    "default": true,
                    "description": "Whether to profile for the number of distinct values for each column.",
                    "title": "Include Field Distinct Count",
                    "type": "boolean"
                },
                "include_field_min_value": {
                    "default": true,
                    "description": "Whether to profile for the min value of numeric columns.",
                    "title": "Include Field Min Value",
                    "type": "boolean"
                },
                "include_field_max_value": {
                    "default": true,
                    "description": "Whether to profile for the max value of numeric columns.",
                    "title": "Include Field Max Value",
                    "type": "boolean"
                },
                "include_field_mean_value": {
                    "default": true,
                    "description": "Whether to profile for the mean value of numeric columns.",
                    "title": "Include Field Mean Value",
                    "type": "boolean"
                },
                "include_field_stddev_value": {
                    "default": true,
                    "description": "Whether to profile for the standard deviation of numeric columns.",
                    "title": "Include Field Stddev Value",
                    "type": "boolean"
                },
                "include_field_quantiles": {
                    "default": false,
                    "description": "Whether to profile for the quantiles of numeric columns.",
                    "title": "Include Field Quantiles",
                    "type": "boolean"
                },
                "include_field_distinct_value_frequencies": {
                    "default": false,
                    "description": "Whether to profile for distinct value frequencies.",
                    "title": "Include Field Distinct Value Frequencies",
                    "type": "boolean"
                },
                "include_field_histogram": {
                    "default": false,
                    "description": "Whether to profile for the histogram for numeric fields.",
                    "title": "Include Field Histogram",
                    "type": "boolean"
                },
                "include_field_sample_values": {
                    "default": true,
                    "description": "Whether to profile for the sample values for all columns.",
                    "title": "Include Field Sample Values",
                    "type": "boolean"
                },
                "max_workers": {
                    "default": 20,
                    "description": "Number of worker threads to use for profiling. Set to 1 to disable.",
                    "title": "Max Workers",
                    "type": "integer"
                },
                "query_timeout": {
                    "default": 300,
                    "description": "Time before cancelling Dremio profiling query",
                    "title": "Query Timeout",
                    "type": "integer"
                }
            },
            "title": "ProfileConfig",
            "type": "object"
        },
        "GitInfo": {
            "additionalProperties": false,
            "description": "A reference to a Git repository, including a deploy key that can be used to clone it.",
            "properties": {
                "repo": {
                    "description": "Name of your Git repo e.g. https://github.com/datahub-project/datahub or https://gitlab.com/gitlab-org/gitlab. If organization/repo is provided, we assume it is a GitHub repo.",
                    "title": "Repo",
                    "type": "string"
                },
                "branch": {
                    "default": "main",
                    "description": "Branch on which your files live by default. Typically main or master. This can also be a commit hash.",
                    "title": "Branch",
                    "type": "string"
                },
                "url_subdir": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Prefix to prepend when generating URLs for files - useful when files are in a subdirectory. Only affects URL generation, not git operations.",
                    "title": "Url Subdir"
                },
                "url_template": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Template for generating a URL to a file in the repo e.g. '{repo_url}/blob/{branch}/{file_path}'. We can infer this for GitHub and GitLab repos, and it is otherwise required.It supports the following variables: {repo_url}, {branch}, {file_path}",
                    "title": "Url Template"
                },
                "deploy_key_file": {
                    "anyOf": [
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A private key file that contains an ssh key that has been configured as a deploy key for this repository. Use a file where possible, else see deploy_key for a config field that accepts a raw string. We expect the key not have a passphrase.",
                    "title": "Deploy Key File"
                },
                "deploy_key": {
                    "anyOf": [
                        {
                            "format": "password",
                            "type": "string",
                            "writeOnly": true
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A private key that contains an ssh key that has been configured as a deploy key for this repository. See deploy_key_file if you want to use a file that contains this key.",
                    "title": "Deploy Key"
                },
                "repo_ssh_locator": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The url to call `git clone` on. We infer this for github and gitlab repos, but it is required for other hosts.",
                    "title": "Repo Ssh Locator"
                }
            },
            "required": [
                "repo"
            ],
            "title": "GitInfo",
            "type": "object"
        },
        "LookerAPIConfig": {
            "additionalProperties": false,
            "properties": {
                "client_id": {
                    "description": "Looker API client id.",
                    "title": "Client Id",
                    "type": "string"
                },
                "client_secret": {
                    "description": "Looker API client secret.",
                    "title": "Client Secret",
                    "type": "string"
                },
                "base_url": {
                    "description": "Url to your Looker instance: `https://company.looker.com:19999` or `https://looker.company.com`, or similar. Used for making API calls to Looker and constructing clickable dashboard and chart urls.",
                    "title": "Base Url",
                    "type": "string"
                },
                "transport_options": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/TransportOptionsConfig"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Populates the [TransportOptions](https://github.com/looker-open-source/sdk-codegen/blob/94d6047a0d52912ac082eb91616c1e7c379ab262/python/looker_sdk/rtl/transport.py#L70) struct for looker client"
                },
                "max_retries": {
                    "default": 3,
                    "description": "Number of retries for Looker API calls",
                    "title": "Max Retries",
                    "type": "integer"
                }
            },
            "required": [
                "client_id",
                "client_secret",
                "base_url"
            ],
            "title": "LookerAPIConfig",
            "type": "object"
        },
        "LookerConnectionDefinition": {
            "additionalProperties": false,
            "properties": {
                "platform": {
                    "title": "Platform",
                    "type": "string"
                },
                "default_db": {
                    "title": "Default Db",
                    "type": "string"
                },
                "default_schema": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Default Schema"
                },
                "platform_instance": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Platform Instance"
                },
                "platform_env": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The environment that the platform is located in. Leaving this empty will inherit defaults from the top level Looker configuration",
                    "title": "Platform Env"
                }
            },
            "required": [
                "platform",
                "default_db"
            ],
            "title": "LookerConnectionDefinition",
            "type": "object"
        },
        "LookerNamingPattern": {
            "additionalProperties": false,
            "properties": {
                "pattern": {
                    "title": "Pattern",
                    "type": "string"
                }
            },
            "required": [
                "pattern"
            ],
            "title": "LookerNamingPattern",
            "type": "object"
        },
        "LookerViewNamingPattern": {
            "additionalProperties": false,
            "properties": {
                "pattern": {
                    "title": "Pattern",
                    "type": "string"
                }
            },
            "required": [
                "pattern"
            ],
            "title": "LookerViewNamingPattern",
            "type": "object"
        },
        "TransportOptionsConfig": {
            "additionalProperties": false,
            "properties": {
                "timeout": {
                    "title": "Timeout",
                    "type": "integer"
                },
                "headers": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "title": "Headers",
                    "type": "object"
                }
            },
            "required": [
                "timeout",
                "headers"
            ],
            "title": "TransportOptionsConfig",
            "type": "object"
        },
        "SalesforceAuthType": {
            "enum": [
                "USERNAME_PASSWORD",
                "DIRECT_ACCESS_TOKEN",
                "JSON_WEB_TOKEN"
            ],
            "title": "SalesforceAuthType",
            "type": "string"
        },
        "SalesforceProfilingConfig": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "default": false,
                    "description": "Whether profiling should be done. Supports only table-level profiling at this stage",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "operation_config": {
                    "$ref": "#/$defs/OperationConfig",
                    "description": "Experimental feature. To specify operation configs."
                }
            },
            "title": "SalesforceProfilingConfig",
            "type": "object"
        },
        "NifiAuthType": {
            "enum": [
                "NO_AUTH",
                "SINGLE_USER",
                "CLIENT_CERT",
                "KERBEROS",
                "BASIC_AUTH"
            ],
            "title": "NifiAuthType",
            "type": "string"
        },
        "FileReadMode": {
            "enum": [
                "STREAM",
                "BATCH",
                "AUTO"
            ],
            "title": "FileReadMode",
            "type": "string"
        },
        "CollapseUrns": {
            "additionalProperties": false,
            "properties": {
                "urns_suffix_regex": {
                    "description": "List of regex patterns to remove from the name of the URN. All of the indices before removal of URNs are considered as the same dataset. These are applied in order for each URN.\n        The main case where you would want to have multiple of these if the name where you are trying to remove suffix from have different formats.\n        e.g. ending with -YYYY-MM-DD as well as ending -epochtime would require you to have 2 regex patterns to remove the suffixes across all URNs.",
                    "items": {
                        "type": "string"
                    },
                    "title": "Urns Suffix Regex",
                    "type": "array"
                }
            },
            "title": "CollapseUrns",
            "type": "object"
        },
        "ElasticProfiling": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "default": false,
                    "description": "Whether to enable profiling for the elastic search source.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "operation_config": {
                    "$ref": "#/$defs/OperationConfig",
                    "description": "Experimental feature. To specify operation configs."
                }
            },
            "title": "ElasticProfiling",
            "type": "object"
        },
        "GenericConnectorConfig": {
            "additionalProperties": false,
            "properties": {
                "connector_name": {
                    "title": "Connector Name",
                    "type": "string"
                },
                "source_dataset": {
                    "title": "Source Dataset",
                    "type": "string"
                },
                "source_platform": {
                    "title": "Source Platform",
                    "type": "string"
                }
            },
            "required": [
                "connector_name",
                "source_dataset",
                "source_platform"
            ],
            "title": "GenericConnectorConfig",
            "type": "object"
        },
        "ProvidedConfig": {
            "additionalProperties": false,
            "properties": {
                "provider": {
                    "title": "Provider",
                    "type": "string"
                },
                "path_key": {
                    "title": "Path Key",
                    "type": "string"
                },
                "value": {
                    "title": "Value",
                    "type": "string"
                }
            },
            "required": [
                "provider",
                "path_key",
                "value"
            ],
            "title": "ProvidedConfig",
            "type": "object"
        },
        "ModeAPIConfig": {
            "additionalProperties": false,
            "properties": {
                "retry_backoff_multiplier": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "default": 2,
                    "description": "Multiplier for exponential backoff when waiting to retry",
                    "title": "Retry Backoff Multiplier"
                },
                "max_retry_interval": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "default": 10,
                    "description": "Maximum interval to wait when retrying",
                    "title": "Max Retry Interval"
                },
                "max_attempts": {
                    "default": 5,
                    "description": "Maximum number of attempts to retry before failing",
                    "title": "Max Attempts",
                    "type": "integer"
                },
                "timeout": {
                    "default": 40,
                    "description": "Timout setting, how long to wait for the Mode rest api to send data before giving up",
                    "title": "Timeout",
                    "type": "integer"
                }
            },
            "title": "ModeAPIConfig",
            "type": "object"
        },
        "IcebergProfilingConfig": {
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "default": false,
                    "description": "Whether profiling should be done.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "include_field_null_count": {
                    "default": true,
                    "description": "Whether to profile for the number of nulls for each column.",
                    "title": "Include Field Null Count",
                    "type": "boolean"
                },
                "include_field_min_value": {
                    "default": true,
                    "description": "Whether to profile for the min value of numeric columns.",
                    "title": "Include Field Min Value",
                    "type": "boolean"
                },
                "include_field_max_value": {
                    "default": true,
                    "description": "Whether to profile for the max value of numeric columns.",
                    "title": "Include Field Max Value",
                    "type": "boolean"
                },
                "operation_config": {
                    "$ref": "#/$defs/OperationConfig",
                    "description": "Experimental feature. To specify operation configs."
                }
            },
            "title": "IcebergProfilingConfig",
            "type": "object"
        }
    },
    "type": "object",
    "properties": {
        "source": {
            "anyOf": [
                {
                    "$ref": "#/$defs/datahub-gc"
                },
                {
                    "$ref": "#/$defs/dbt-cloud"
                },
                {
                    "$ref": "#/$defs/demo-data"
                },
                {
                    "$ref": "#/$defs/presto"
                },
                {
                    "$ref": "#/$defs/snowflake"
                },
                {
                    "$ref": "#/$defs/csv-enricher"
                },
                {
                    "$ref": "#/$defs/gcs"
                },
                {
                    "$ref": "#/$defs/s3"
                },
                {
                    "$ref": "#/$defs/bigquery"
                },
                {
                    "$ref": "#/$defs/clickhouse"
                },
                {
                    "$ref": "#/$defs/sac"
                },
                {
                    "$ref": "#/$defs/mysql"
                },
                {
                    "$ref": "#/$defs/excel"
                },
                {
                    "$ref": "#/$defs/datahub"
                },
                {
                    "$ref": "#/$defs/mongodb"
                },
                {
                    "$ref": "#/$defs/powerbi"
                },
                {
                    "$ref": "#/$defs/okta"
                },
                {
                    "$ref": "#/$defs/mariadb"
                },
                {
                    "$ref": "#/$defs/delta-lake"
                },
                {
                    "$ref": "#/$defs/abs"
                },
                {
                    "$ref": "#/$defs/presto-on-hive"
                },
                {
                    "$ref": "#/$defs/datahub-lineage-file"
                },
                {
                    "$ref": "#/$defs/hive-metastore"
                },
                {
                    "$ref": "#/$defs/postgres"
                },
                {
                    "$ref": "#/$defs/oracle"
                },
                {
                    "$ref": "#/$defs/sqlalchemy"
                },
                {
                    "$ref": "#/$defs/cassandra"
                },
                {
                    "$ref": "#/$defs/tableau"
                },
                {
                    "$ref": "#/$defs/pulsar"
                },
                {
                    "$ref": "#/$defs/dynamodb"
                },
                {
                    "$ref": "#/$defs/sql-queries"
                },
                {
                    "$ref": "#/$defs/openapi"
                },
                {
                    "$ref": "#/$defs/kafka"
                },
                {
                    "$ref": "#/$defs/redash"
                },
                {
                    "$ref": "#/$defs/powerbi-report-server"
                },
                {
                    "$ref": "#/$defs/hive"
                },
                {
                    "$ref": "#/$defs/druid"
                },
                {
                    "$ref": "#/$defs/sigma"
                },
                {
                    "$ref": "#/$defs/neo4j"
                },
                {
                    "$ref": "#/$defs/mssql"
                },
                {
                    "$ref": "#/$defs/fivetran"
                },
                {
                    "$ref": "#/$defs/datahub-debug"
                },
                {
                    "$ref": "#/$defs/superset"
                },
                {
                    "$ref": "#/$defs/unity-catalog"
                },
                {
                    "$ref": "#/$defs/ldap"
                },
                {
                    "$ref": "#/$defs/dbt"
                },
                {
                    "$ref": "#/$defs/grafana"
                },
                {
                    "$ref": "#/$defs/azure-ad"
                },
                {
                    "$ref": "#/$defs/athena"
                },
                {
                    "$ref": "#/$defs/datahub-apply"
                },
                {
                    "$ref": "#/$defs/redshift"
                },
                {
                    "$ref": "#/$defs/feast"
                },
                {
                    "$ref": "#/$defs/cockroachdb"
                },
                {
                    "$ref": "#/$defs/clickhouse-usage"
                },
                {
                    "$ref": "#/$defs/json-schema"
                },
                {
                    "$ref": "#/$defs/preset"
                },
                {
                    "$ref": "#/$defs/glue"
                },
                {
                    "$ref": "#/$defs/metabase"
                },
                {
                    "$ref": "#/$defs/starburst-trino-usage"
                },
                {
                    "$ref": "#/$defs/sagemaker"
                },
                {
                    "$ref": "#/$defs/slack"
                },
                {
                    "$ref": "#/$defs/vertexai"
                },
                {
                    "$ref": "#/$defs/dremio"
                },
                {
                    "$ref": "#/$defs/lookml"
                },
                {
                    "$ref": "#/$defs/salesforce"
                },
                {
                    "$ref": "#/$defs/nifi"
                },
                {
                    "$ref": "#/$defs/mlflow"
                },
                {
                    "$ref": "#/$defs/trino"
                },
                {
                    "$ref": "#/$defs/file"
                },
                {
                    "$ref": "#/$defs/datahub-business-glossary"
                },
                {
                    "$ref": "#/$defs/elasticsearch"
                },
                {
                    "$ref": "#/$defs/hana"
                },
                {
                    "$ref": "#/$defs/looker"
                },
                {
                    "$ref": "#/$defs/kafka-connect"
                },
                {
                    "$ref": "#/$defs/snaplogic"
                },
                {
                    "$ref": "#/$defs/qlik-sense"
                },
                {
                    "$ref": "#/$defs/teradata"
                },
                {
                    "$ref": "#/$defs/mode"
                },
                {
                    "$ref": "#/$defs/hex"
                },
                {
                    "$ref": "#/$defs/iceberg"
                },
                {
                    "$ref": "#/$defs/vertica"
                }
            ]
        },
        "transformers": {
            "type": "array",
            "items": {
                "type": "object",
                "description": "Transformer configs see at https://docs.datahub.com/docs/metadata-ingestion/docs/transformer",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Transformer type"
                    },
                    "config": {
                        "type": "object",
                        "description": "Transformer config"
                    }
                },
                "required": [
                    "type"
                ],
                "additionalProperties": false
            }
        },
        "sink": {
            "description": "sink",
            "anyOf": [
                {
                    "$ref": "#/$defs/datahub_kafka_sink"
                },
                {
                    "$ref": "#/$defs/datahub_rest_sink"
                },
                {
                    "$ref": "#/$defs/console_sink"
                },
                {
                    "$ref": "#/$defs/file_sink"
                }
            ]
        }
    },
    "required": [
        "source"
    ]
}