include 'datahub-web-react'
include 'datahub-frontend'
include 'datahub-graphql-core'
include 'metadata-service:war'
include 'metadata-service:servlet'
include 'metadata-service:factories'
include 'metadata-service:auth-config'
include 'metadata-service:auth-impl'
include 'metadata-service:auth-filter'
include 'metadata-service:auth-servlet-impl'
include 'metadata-service:restli-api'
include 'metadata-service:restli-client-api'
include 'metadata-service:restli-client'
include 'metadata-service:restli-servlet-impl'
include 'metadata-service:graphql-servlet-impl'
include 'metadata-service:openapi-servlet'
include 'metadata-service:openapi-entity-servlet'
include 'metadata-service:openapi-entity-servlet:generators'
include 'metadata-service:openapi-analytics-servlet'
include 'metadata-service:plugin'
include 'metadata-service:plugin:src:test:sample-test-plugins'
include 'metadata-dao-impl:kafka-producer'
include 'metadata-events:mxe-avro'
include 'metadata-events:mxe-registration'
include 'metadata-events:mxe-schemas'
include 'metadata-events:mxe-utils-avro'
include 'metadata-ingestion'
include 'metadata-jobs:mae-consumer'
include 'metadata-jobs:mce-consumer'
include 'metadata-jobs:pe-consumer'
include 'metadata-jobs:mae-consumer-job'
include 'metadata-jobs:mce-consumer-job'
include ':docker'
include ':docker:elasticsearch-setup'
include ':docker:mysql-setup'
include ':docker:postgres-setup'
include ':docker:kafka-setup'
include ':docker:datahub-ingestion'
include ':docker:datahub-ingestion-base'
include 'metadata-models'
include 'metadata-models-validator'
include 'metadata-testing:metadata-models-test-utils'
include 'metadata-testing:metadata-test-utils'
include 'entity-registry'
include 'metadata-io'
include 'metadata-io:metadata-io-api'
include 'datahub-upgrade'
include 'metadata-utils'
include 'li-utils'
include 'test-models'
include 'metadata-perf'
include 'docs-website'
include 'metadata-models-custom'
include 'entity-registry:custom-test-model'
include 'metadata-integration:java:spark-lineage-legacy'
include 'metadata-integration:java:datahub-client'
include 'metadata-integration:java:custom-plugin-lib'
include 'metadata-integration:java:datahub-event'
include 'metadata-integration:java:datahub-protobuf'
include 'metadata-integration:java:openlineage-converter'
include 'metadata-integration:java:acryl-spark-lineage'
include 'ingestion-scheduler'
include 'metadata-ingestion-modules:airflow-plugin'
include 'metadata-ingestion-modules:gx-plugin'
include 'metadata-ingestion-modules:dagster-plugin'
include 'metadata-ingestion-modules:prefect-plugin'
include 'python-build'
include 'smoke-test'
include 'metadata-auth:auth-api'
include 'metadata-service:schema-registry-api'
include 'metadata-service:schema-registry-servlet'
include 'metadata-integration:java:examples'
include 'mock-entity-registry'
include 'metadata-service:services'
include 'metadata-service:configuration'
include ':metadata-jobs:common'
include ':metadata-operation-context'
include ':metadata-service:openapi-servlet:models'
include ':metadata-integration:java:datahub-schematron:lib'
include ':metadata-integration:java:datahub-schematron:cli'
include ':metadata-service:iceberg-catalog'
include ':metadata-service:events-service'
include ':datahub-actions'

buildCache {
    def depotSecret = System.getenv('DEPOT_TOKEN');



    remote(HttpBuildCache) {
        url = 'https://cache.depot.dev'
        enabled = depotSecret != null
        push = true
        credentials {
            username = ''
            password = depotSecret
        }
    }
}

def installPreCommitHooks() {
    if (System.getenv("CI") == "true") {
        println("Skipping pre-commit hooks in CI")
        return 
    }
    def preCommitInstalled = false
    try {
        def process = ["which", "pre-commit"].execute()
        def stdout = new StringBuilder()
        def stderr = new StringBuilder()
        process.waitForProcessOutput(stdout, stderr)
        preCommitInstalled = (process.exitValue() == 0)
        println "Pre-commit check: ${stdout}"
    } catch (Exception e) {
        println "Error checking pre-commit: ${e.message}"
        return
    }

    if (!preCommitInstalled) {
        try {
            def installProcess = ["python", "-m", "pip", "install", "pre-commit"].execute()
            def stdout = new StringBuilder()
            def stderr = new StringBuilder()
            installProcess.waitForProcessOutput(stdout, stderr)
            if (installProcess.exitValue() != 0) {
                println "Failed to install pre-commit: ${stderr}"
                return
            }
            println "Install output: ${stdout}"
        } catch (Exception e) {
            println "Error installing pre-commit: ${e.message}"
            return
        }
    }

    try {
        def installHooksProcess = ["python", "-m", "pre_commit", "install"].execute()
        def stdout = new StringBuilder()
        def stderr = new StringBuilder()
        installHooksProcess.waitForProcessOutput(stdout, stderr)
        if (installHooksProcess.exitValue() != 0) {
            println "Failed to install hooks: ${stdout}"
            return
        }
        println "Hooks output: ${stdout}"
    } catch (Exception e) {
        println "Error installing hooks: ${e.message}"
        return
    }
}

installPreCommitHooks()