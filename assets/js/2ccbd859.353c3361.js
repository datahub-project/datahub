"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[87],{15680:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>d});var r=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),b=o,d=u["".concat(c,".").concat(b)]||u[b]||f[b]||s;return n?r.createElement(d,a(a({ref:t},l),{},{components:n})):r.createElement(d,a({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=b;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var p=2;p<s;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},3772:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>u});n(96540);var r=n(15680);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const i={title:"Goal",slug:"/smoke-test/tests/openapi",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/smoke-test/tests/openapi/README.md"},c="Goal",p={unversionedId:"smoke-test/tests/openapi/README",id:"smoke-test/tests/openapi/README",title:"Goal",description:"This test is configuration driven by json files which contain request/response sequences intended to",source:"@site/genDocs/smoke-test/tests/openapi/README.md",sourceDirName:"smoke-test/tests/openapi",slug:"/smoke-test/tests/openapi",permalink:"/docs/smoke-test/tests/openapi",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/smoke-test/tests/openapi/README.md",tags:[],version:"current",frontMatter:{title:"Goal",slug:"/smoke-test/tests/openapi",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/smoke-test/tests/openapi/README.md"}},l={},u=[{value:"Adding a test",id:"adding-a-test",level:2}],f={toc:u},b="wrapper";function d(e){var{components:t}=e,n=a(e,["components"]);return(0,r.yg)(b,s(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}({},f,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"goal"},"Goal"),(0,r.yg)("p",null,"This test is configuration driven by json files which contain request/response sequences intended to\ndetect unexpected regressions between releases."),(0,r.yg)("p",null,"Files can be executed in parallel but each request within the file is sequential."),(0,r.yg)("h2",{id:"adding-a-test"},"Adding a test"),(0,r.yg)("p",null,"Create a file for a given OpenAPI version which contains a list of request/response pairs in the following\nformat."),(0,r.yg)("p",null,"The request json object is translated into the python request arguments and the response object is the\nexpected status code and optional body."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "request": {\n      "urn": "",\n      "description": "",\n      "method": "",\n      "json": {}\n    },\n    "response": {\n      "status_codes": [200],\n      "exclude_regex_paths": [],\n      "json": {}\n    }\n  }\n]\n')))}d.isMDXComponent=!0}}]);