"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[35078],{35935:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>p,default:()=>h,frontMatter:()=>m,metadata:()=>d,toc:()=>g});t(96540);var a=t(15680),r=t(53720),i=t(5400);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const m={sidebar_position:40,title:"Form",slug:"/generated/metamodel/entities/form",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/form.md"},p="Form",d={unversionedId:"docs/generated/metamodel/entities/form",id:"docs/generated/metamodel/entities/form",title:"Form",description:"The form entity is a core entity in DataHub's metadata model that enables structured metadata collection and compliance initiatives. Forms provide a centralized, template-based approach for capturing essential metadata across data assets through a collaborative, crowdsourced workflow.",source:"@site/genDocs/docs/generated/metamodel/entities/form.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/form",permalink:"/docs/generated/metamodel/entities/form",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/form.md",tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40,title:"Form",slug:"/generated/metamodel/entities/form",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/form.md"},sidebar:"overviewSidebar",previous:{title:"Structured Property",permalink:"/docs/generated/metamodel/entities/structuredproperty"},next:{title:"DataHubPageTemplate",permalink:"/docs/generated/metamodel/entities/datahubpagetemplate"}},c={},g=[{value:"Identity",id:"identity",level:2},{value:"Important Capabilities",id:"important-capabilities",level:2},{value:"Form Metadata and Configuration",id:"form-metadata-and-configuration",level:3},{value:"Dynamic Form Assignment",id:"dynamic-form-assignment",level:3},{value:"Form Assignment on Entities",id:"form-assignment-on-entities",level:3},{value:"Ownership",id:"ownership",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"Creating and Managing Forms",id:"creating-and-managing-forms",level:3},{value:"Querying Forms",id:"querying-forms",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"Relationship with Other Entities",id:"relationship-with-other-entities",level:3},{value:"Typical Usage Patterns",id:"typical-usage-patterns",level:3},{value:"Notable Exceptions",id:"notable-exceptions",level:2},{value:"Form Prompt Types",id:"form-prompt-types",level:3},{value:"Schema Field Prompts",id:"schema-field-prompts",level:3},{value:"Assignment Logic",id:"assignment-logic",level:3},{value:"Form Lifecycle",id:"form-lifecycle",level:3},{value:"Technical Reference Guide",id:"technical-reference-guide",level:2},{value:"Reading the Field Tables",id:"reading-the-field-tables",level:3},{value:"Aspects",id:"aspects",level:3},{value:"formInfo",id:"forminfo",level:4},{value:"dynamicFormAssignment",id:"dynamicformassignment",level:4},{value:"ownership",id:"ownership-1",level:4},{value:"Common Types",id:"common-types",level:3},{value:"AuditStamp",id:"auditstamp",level:4},{value:"Relationships",id:"relationships",level:3},{value:"Outgoing",id:"outgoing",level:4},{value:"Global Metadata Model",id:"global-metadata-model",level:3}],u={toc:g},y="wrapper";function h(e){var{components:n}=e,t=l(e,["components"]);return(0,a.yg)(y,s(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){o(e,n,t[n])}))}return e}({},u,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"form"},"Form"),(0,a.yg)("p",null,"The form entity is a core entity in DataHub's metadata model that enables structured metadata collection and compliance initiatives. Forms provide a centralized, template-based approach for capturing essential metadata across data assets through a collaborative, crowdsourced workflow."),(0,a.yg)("h2",{id:"identity"},"Identity"),(0,a.yg)("p",null,"Forms are identified by a unique string identifier that is chosen by the creator."),(0,a.yg)("p",null,"A form URN is structured as: ",(0,a.yg)("inlineCode",{parentName:"p"},"urn:li:form:<form-id>")),(0,a.yg)("p",null,"For example: ",(0,a.yg)("inlineCode",{parentName:"p"},"urn:li:form:metadataInitiative2024")),(0,a.yg)("p",null,"The form identifier should be meaningful and descriptive, typically representing the initiative or purpose of the form (e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"piiClassification2024"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"dataQualityCompliance"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"retentionPolicyForm"),")."),(0,a.yg)("h2",{id:"important-capabilities"},"Important Capabilities"),(0,a.yg)("h3",{id:"form-metadata-and-configuration"},"Form Metadata and Configuration"),(0,a.yg)("p",null,"Forms are defined using the ",(0,a.yg)("inlineCode",{parentName:"p"},"formInfo")," aspect, which contains all the core information about a form:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Name and Description"),": Display name and detailed description of the form's purpose"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Type"),": Two types are supported:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"COMPLETION"),": Forms designed purely for collecting metadata fields on entities"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"VERIFICATION"),": Forms used to verify that entities comply with a policy via presence of specific metadata fields"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Prompts"),": A list of prompts (questions) that users need to respond to. Each prompt represents a requirement to fill out specific metadata. Prompts currently support:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"STRUCTURED_PROPERTY"),": Prompts to apply structured properties to entities"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"FIELDS_STRUCTURED_PROPERTY"),": Prompts to apply structured properties to schema fields (columns) of datasets"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Actor Assignment"),": Defines who should complete the form. Forms can be assigned to:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Asset owners (default)"),(0,a.yg)("li",{parentName:"ul"},"Specific users"),(0,a.yg)("li",{parentName:"ul"},"Specific groups")))),(0,a.yg)("p",null,"Here's an example of form metadata:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Create a form"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/form_create.py\nimport logging\nimport os\n\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\n\n# Imports for metadata model classes\nfrom datahub.metadata.schema_classes import (\n    FormActorAssignmentClass,\n    FormInfoClass,\n    FormPromptClass,\n    FormPromptTypeClass,\n    FormTypeClass,\n    StructuredPropertyParamsClass,\n)\nfrom datahub.metadata.urns import FormUrn\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Use the structured property created by structured_property_create_basic.py\nretention_property_urn = "urn:li:structuredProperty:io.acryl.privacy.retentionTime"\n\n# define the prompts for our form\nprompt_1 = FormPromptClass(\n    id="1",  # ensure IDs are globally unique\n    title="Data Retention Policy",\n    type=FormPromptTypeClass.STRUCTURED_PROPERTY,  # structured property type prompt\n    structuredPropertyParams=StructuredPropertyParamsClass(urn=retention_property_urn),\n    required=True,\n)\nprompt_2 = FormPromptClass(\n    id="2",  # ensure IDs are globally unique\n    title="Field-Level Retention",\n    type=FormPromptTypeClass.FIELDS_STRUCTURED_PROPERTY,  # structured property prompt on dataset schema fields\n    structuredPropertyParams=StructuredPropertyParamsClass(urn=retention_property_urn),\n    required=False,  # dataset schema fields prompts should not be required\n)\n\nform_urn = FormUrn("metadata_initiative_1")\nform_info_aspect = FormInfoClass(\n    name="Metadata Initiative 2024",\n    description="Please respond to this form for metadata compliance purposes",\n    type=FormTypeClass.VERIFICATION,\n    actors=FormActorAssignmentClass(owners=True),\n    prompts=[prompt_1, prompt_2],\n)\n\nevent: MetadataChangeProposalWrapper = MetadataChangeProposalWrapper(\n    entityUrn=str(form_urn),\n    aspect=form_info_aspect,\n)\n\n# Create rest emitter\nrest_emitter = DatahubRestEmitter(\n    gms_server=os.getenv("DATAHUB_GMS_URL", "http://localhost:8080"),\n    token=os.getenv("DATAHUB_GMS_TOKEN"),\n)\nrest_emitter.emit_mcp(event)\nprint(f"Created form: {form_urn}")\n\n'))),(0,a.yg)("h3",{id:"dynamic-form-assignment"},"Dynamic Form Assignment"),(0,a.yg)("p",null,"Forms can be assigned to entities in two ways:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"Explicit Assignment"),": Directly assign a form to specific entity URNs"),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"Dynamic Assignment"),": Use the ",(0,a.yg)("inlineCode",{parentName:"li"},"dynamicFormAssignment")," aspect to automatically assign forms to entities matching certain criteria")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"dynamicFormAssignment")," aspect enables rule-based form assignment by specifying filters. Entities matching the filter criteria will automatically have the form applied. The filter supports:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Entity type (e.g., datasets, dashboards, charts)"),(0,a.yg)("li",{parentName:"ul"},"Platform (e.g., snowflake, bigquery, postgres)"),(0,a.yg)("li",{parentName:"ul"},"Domain membership"),(0,a.yg)("li",{parentName:"ul"},"Container membership")),(0,a.yg)("p",null,"This dynamic approach is particularly powerful for large-scale compliance initiatives where you want to apply forms to all assets of a certain type or within a specific domain."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Assign forms dynamically with filters"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/form_create_with_dynamic_assignment.py\nimport logging\nimport os\n\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import (\n    CriterionClass,\n    DynamicFormAssignmentClass,\n    FilterClass,\n    FormActorAssignmentClass,\n    FormInfoClass,\n    FormPromptClass,\n    FormPromptTypeClass,\n    FormTypeClass,\n    StructuredPropertyParamsClass,\n)\nfrom datahub.metadata.urns import FormUrn\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Create a form that will be dynamically assigned to all Snowflake datasets\n# in the "Finance" domain\n\n# Define the form metadata\nform_urn = FormUrn("snowflake_finance_compliance")\nform_info = FormInfoClass(\n    name="Snowflake Finance Data Compliance",\n    description="Compliance form for all Snowflake datasets in the Finance domain",\n    type=FormTypeClass.VERIFICATION,\n    actors=FormActorAssignmentClass(owners=True),\n    prompts=[\n        FormPromptClass(\n            id="retention_time_prompt",\n            title="Data Retention Period",\n            description="Specify how long this data should be retained",\n            type=FormPromptTypeClass.STRUCTURED_PROPERTY,\n            structuredPropertyParams=StructuredPropertyParamsClass(\n                urn="urn:li:structuredProperty:io.acryl.dataRetentionTime"\n            ),\n            required=True,\n        ),\n        FormPromptClass(\n            id="pii_classification_prompt",\n            title="PII Classification",\n            description="Classify whether this dataset contains PII",\n            type=FormPromptTypeClass.STRUCTURED_PROPERTY,\n            structuredPropertyParams=StructuredPropertyParamsClass(\n                urn="urn:li:structuredProperty:io.acryl.piiClassification"\n            ),\n            required=True,\n        ),\n    ],\n)\n\n# Define dynamic assignment filter\n# This form will be assigned to all entities matching these criteria\ndynamic_assignment = DynamicFormAssignmentClass(\n    filter=FilterClass(\n        criteria=[\n            CriterionClass(\n                field="platform",\n                value="urn:li:dataPlatform:snowflake",\n                condition="EQUAL",\n            ),\n            CriterionClass(\n                field="domains",\n                value="urn:li:domain:finance",\n                condition="EQUAL",\n            ),\n            CriterionClass(\n                field="_entityType",\n                value="urn:li:entityType:dataset",\n                condition="EQUAL",\n            ),\n        ]\n    )\n)\n\n# Create rest emitter\nrest_emitter = DatahubRestEmitter(\n    gms_server=os.getenv("DATAHUB_GMS_URL", "http://localhost:8080"),\n    token=os.getenv("DATAHUB_GMS_TOKEN"),\n)\n\n# Emit the form info\nform_info_event = MetadataChangeProposalWrapper(\n    entityUrn=str(form_urn),\n    aspect=form_info,\n)\nrest_emitter.emit(form_info_event)\n\n# Emit the dynamic assignment\ndynamic_assignment_event = MetadataChangeProposalWrapper(\n    entityUrn=str(form_urn),\n    aspect=dynamic_assignment,\n)\nrest_emitter.emit(dynamic_assignment_event)\n\nlog.info(\n    f"Created form {form_urn} with dynamic assignment to Snowflake datasets in Finance domain"\n)\n\n'))),(0,a.yg)("h3",{id:"form-assignment-on-entities"},"Form Assignment on Entities"),(0,a.yg)("p",null,"When forms are assigned to entities (either explicitly or dynamically), the assignments are tracked via the ",(0,a.yg)("inlineCode",{parentName:"p"},"forms")," aspect on the target entity. This aspect maintains:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Incomplete Forms"),": Forms that have outstanding prompts to be completed"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Complete Forms"),": Forms where all required prompts have been responded to"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Verifications"),": For verification-type forms, tracks which forms have been successfully verified"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Prompt Status"),": For each form, tracks which prompts are complete vs. incomplete, along with timestamps")),(0,a.yg)("p",null,"This allows DataHub to provide progress tracking, notifications, and analytics about form completion across your data catalog."),(0,a.yg)("h3",{id:"ownership"},"Ownership"),(0,a.yg)("p",null,"Forms can have owners assigned through the standard ",(0,a.yg)("inlineCode",{parentName:"p"},"ownership")," aspect. Owners of forms are typically the governance or compliance team members who are responsible for managing and maintaining the form."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Add owners to a form"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/form_add_owner.py\nimport logging\n\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import (\n    AuditStampClass,\n    OwnerClass,\n    OwnershipClass,\n    OwnershipTypeClass,\n)\nfrom datahub.metadata.urns import CorpUserUrn, FormUrn\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Form URN to add owner to\nform_urn = FormUrn("metadata_initiative_2024")\n\n# Create ownership aspect\nownership = OwnershipClass(\n    owners=[\n        OwnerClass(\n            owner=str(CorpUserUrn("governance_team")),\n            type=OwnershipTypeClass.TECHNICAL_OWNER,\n        )\n    ],\n    lastModified=AuditStampClass(\n        time=0, actor="urn:li:corpuser:datahub", impersonator=None\n    ),\n)\n\n# Create and emit metadata change proposal\nevent = MetadataChangeProposalWrapper(\n    entityUrn=str(form_urn),\n    aspect=ownership,\n)\n\nrest_emitter = DatahubRestEmitter(gms_server="http://localhost:8080")\nrest_emitter.emit(event)\n\nlog.info(f"Added owner to form {form_urn}")\n\n'))),(0,a.yg)("h2",{id:"code-examples"},"Code Examples"),(0,a.yg)("h3",{id:"creating-and-managing-forms"},"Creating and Managing Forms"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Create a verification form with multiple prompts"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/form_create.py\nimport logging\nimport os\n\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\n\n# Imports for metadata model classes\nfrom datahub.metadata.schema_classes import (\n    FormActorAssignmentClass,\n    FormInfoClass,\n    FormPromptClass,\n    FormPromptTypeClass,\n    FormTypeClass,\n    StructuredPropertyParamsClass,\n)\nfrom datahub.metadata.urns import FormUrn\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Use the structured property created by structured_property_create_basic.py\nretention_property_urn = "urn:li:structuredProperty:io.acryl.privacy.retentionTime"\n\n# define the prompts for our form\nprompt_1 = FormPromptClass(\n    id="1",  # ensure IDs are globally unique\n    title="Data Retention Policy",\n    type=FormPromptTypeClass.STRUCTURED_PROPERTY,  # structured property type prompt\n    structuredPropertyParams=StructuredPropertyParamsClass(urn=retention_property_urn),\n    required=True,\n)\nprompt_2 = FormPromptClass(\n    id="2",  # ensure IDs are globally unique\n    title="Field-Level Retention",\n    type=FormPromptTypeClass.FIELDS_STRUCTURED_PROPERTY,  # structured property prompt on dataset schema fields\n    structuredPropertyParams=StructuredPropertyParamsClass(urn=retention_property_urn),\n    required=False,  # dataset schema fields prompts should not be required\n)\n\nform_urn = FormUrn("metadata_initiative_1")\nform_info_aspect = FormInfoClass(\n    name="Metadata Initiative 2024",\n    description="Please respond to this form for metadata compliance purposes",\n    type=FormTypeClass.VERIFICATION,\n    actors=FormActorAssignmentClass(owners=True),\n    prompts=[prompt_1, prompt_2],\n)\n\nevent: MetadataChangeProposalWrapper = MetadataChangeProposalWrapper(\n    entityUrn=str(form_urn),\n    aspect=form_info_aspect,\n)\n\n# Create rest emitter\nrest_emitter = DatahubRestEmitter(\n    gms_server=os.getenv("DATAHUB_GMS_URL", "http://localhost:8080"),\n    token=os.getenv("DATAHUB_GMS_TOKEN"),\n)\nrest_emitter.emit_mcp(event)\nprint(f"Created form: {form_urn}")\n\n'))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Create a form with dynamic assignment"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/form_create_with_dynamic_assignment.py\nimport logging\nimport os\n\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import (\n    CriterionClass,\n    DynamicFormAssignmentClass,\n    FilterClass,\n    FormActorAssignmentClass,\n    FormInfoClass,\n    FormPromptClass,\n    FormPromptTypeClass,\n    FormTypeClass,\n    StructuredPropertyParamsClass,\n)\nfrom datahub.metadata.urns import FormUrn\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Create a form that will be dynamically assigned to all Snowflake datasets\n# in the "Finance" domain\n\n# Define the form metadata\nform_urn = FormUrn("snowflake_finance_compliance")\nform_info = FormInfoClass(\n    name="Snowflake Finance Data Compliance",\n    description="Compliance form for all Snowflake datasets in the Finance domain",\n    type=FormTypeClass.VERIFICATION,\n    actors=FormActorAssignmentClass(owners=True),\n    prompts=[\n        FormPromptClass(\n            id="retention_time_prompt",\n            title="Data Retention Period",\n            description="Specify how long this data should be retained",\n            type=FormPromptTypeClass.STRUCTURED_PROPERTY,\n            structuredPropertyParams=StructuredPropertyParamsClass(\n                urn="urn:li:structuredProperty:io.acryl.dataRetentionTime"\n            ),\n            required=True,\n        ),\n        FormPromptClass(\n            id="pii_classification_prompt",\n            title="PII Classification",\n            description="Classify whether this dataset contains PII",\n            type=FormPromptTypeClass.STRUCTURED_PROPERTY,\n            structuredPropertyParams=StructuredPropertyParamsClass(\n                urn="urn:li:structuredProperty:io.acryl.piiClassification"\n            ),\n            required=True,\n        ),\n    ],\n)\n\n# Define dynamic assignment filter\n# This form will be assigned to all entities matching these criteria\ndynamic_assignment = DynamicFormAssignmentClass(\n    filter=FilterClass(\n        criteria=[\n            CriterionClass(\n                field="platform",\n                value="urn:li:dataPlatform:snowflake",\n                condition="EQUAL",\n            ),\n            CriterionClass(\n                field="domains",\n                value="urn:li:domain:finance",\n                condition="EQUAL",\n            ),\n            CriterionClass(\n                field="_entityType",\n                value="urn:li:entityType:dataset",\n                condition="EQUAL",\n            ),\n        ]\n    )\n)\n\n# Create rest emitter\nrest_emitter = DatahubRestEmitter(\n    gms_server=os.getenv("DATAHUB_GMS_URL", "http://localhost:8080"),\n    token=os.getenv("DATAHUB_GMS_TOKEN"),\n)\n\n# Emit the form info\nform_info_event = MetadataChangeProposalWrapper(\n    entityUrn=str(form_urn),\n    aspect=form_info,\n)\nrest_emitter.emit(form_info_event)\n\n# Emit the dynamic assignment\ndynamic_assignment_event = MetadataChangeProposalWrapper(\n    entityUrn=str(form_urn),\n    aspect=dynamic_assignment,\n)\nrest_emitter.emit(dynamic_assignment_event)\n\nlog.info(\n    f"Created form {form_urn} with dynamic assignment to Snowflake datasets in Finance domain"\n)\n\n'))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Assign a form to specific entities"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/form_assign_to_entities.py\nimport logging\n\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import FormAssociationClass, FormsClass\nfrom datahub.metadata.urns import DatasetUrn, FormUrn\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Form to assign\nform_urn = FormUrn("metadata_initiative_2024")\n\n# Entities to assign the form to\ndataset_urns = [\n    DatasetUrn(platform="snowflake", name="prod.analytics.customer_data", env="PROD"),\n    DatasetUrn(platform="snowflake", name="prod.analytics.sales_data", env="PROD"),\n]\n\n# Create rest emitter\nrest_emitter = DatahubRestEmitter(gms_server="http://localhost:8080")\n\n# Assign the form to each entity by updating the forms aspect\nfor dataset_urn in dataset_urns:\n    # Create a forms aspect with the form marked as incomplete\n    forms_aspect = FormsClass(\n        incompleteForms=[FormAssociationClass(urn=str(form_urn))],\n        completedForms=[],\n        verifications=[],\n    )\n\n    # Emit the forms aspect for the entity\n    event = MetadataChangeProposalWrapper(\n        entityUrn=str(dataset_urn),\n        aspect=forms_aspect,\n    )\n    rest_emitter.emit(event)\n    log.info(f"Assigned form {form_urn} to entity {dataset_urn}")\n\nlog.info(f"Successfully assigned form to {len(dataset_urns)} entities")\n\n'))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Remove a form from entities"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/form_remove_from_entities.py\nimport logging\n\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import FormsClass\nfrom datahub.metadata.urns import DatasetUrn, FormUrn\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Form to remove\nform_urn = FormUrn("metadata_initiative_2024")\n\n# Entities to remove the form from\ndataset_urns = [\n    DatasetUrn(platform="snowflake", name="prod.analytics.customer_data", env="PROD"),\n    DatasetUrn(platform="snowflake", name="prod.analytics.sales_data", env="PROD"),\n]\n\n# Create rest emitter\nrest_emitter = DatahubRestEmitter(gms_server="http://localhost:8080")\n\n# Remove the form from each entity by setting empty forms aspect\nfor dataset_urn in dataset_urns:\n    # Create an empty forms aspect\n    # This will remove all form assignments from the entity\n    forms_aspect = FormsClass(\n        incompleteForms=[],\n        completedForms=[],\n        verifications=[],\n    )\n\n    # Emit the forms aspect for the entity\n    event = MetadataChangeProposalWrapper(\n        entityUrn=str(dataset_urn),\n        aspect=forms_aspect,\n    )\n    rest_emitter.emit(event)\n    log.info(f"Removed forms from entity {dataset_urn}")\n\nlog.info(f"Successfully removed forms from {len(dataset_urns)} entities")\n\n'))),(0,a.yg)("h3",{id:"querying-forms"},"Querying Forms"),(0,a.yg)("p",null,"Forms can be queried via the REST API to retrieve form definitions and check their assignment status."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Query a form via REST API"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"curl 'http://localhost:8080/entities/urn%3Ali%3Aform%3AmetadataInitiative2024'\n")),(0,a.yg)("p",null,"This will return the form entity with all its aspects including ",(0,a.yg)("inlineCode",{parentName:"p"},"formInfo"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"dynamicFormAssignment")," (if configured), and ",(0,a.yg)("inlineCode",{parentName:"p"},"ownership"),".")),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Check form assignments on an entity"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"curl 'http://localhost:8080/entities/urn%3Ali%3Adataset%3A(urn%3Ali%3AdataPlatform%3Asnowflake,mydb.schema.table,PROD)?aspects=forms'\n")),(0,a.yg)("p",null,"This returns the ",(0,a.yg)("inlineCode",{parentName:"p"},"forms")," aspect showing all incomplete and completed forms for the dataset.")),(0,a.yg)("h2",{id:"integration-points"},"Integration Points"),(0,a.yg)("h3",{id:"relationship-with-other-entities"},"Relationship with Other Entities"),(0,a.yg)("p",null,"Forms have several key integration points in the DataHub ecosystem:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Structured Properties"),": Forms primarily interact with structured properties through prompts. Each prompt can require users to fill out specific structured properties on entities or schema fields.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Assets (Datasets, Dashboards, Charts, etc.)"),": Forms are assigned to data assets to collect metadata. The relationship is tracked through:"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"forms")," aspect on the target entity"),(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"dynamicFormAssignment")," filter criteria on the form"))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Users and Groups"),": Forms are assigned to specific actors (users or groups) who are responsible for completing them. This creates a workflow where:"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Forms appear in assignees' task lists"),(0,a.yg)("li",{parentName:"ul"},"Assignees receive notifications about pending forms"),(0,a.yg)("li",{parentName:"ul"},"Completion tracking is maintained per user"))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Domains and Containers"),": Forms can be automatically assigned based on domain or container membership, enabling governance teams to apply compliance requirements at the domain or container level."))),(0,a.yg)("h3",{id:"typical-usage-patterns"},"Typical Usage Patterns"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Compliance Initiatives"),": Organizations create verification forms to ensure critical assets meet compliance requirements (e.g., PII classification, data retention policies)")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Metadata Enrichment"),": Completion forms help gather missing documentation, ownership, and domain assignments for high-value assets")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Governance Workflows"),": Forms enable systematic metadata collection by routing tasks to domain experts who are best positioned to provide accurate information")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Quality Improvement"),": Forms can be used to incrementally improve metadata quality by focusing on the most important assets first"))),(0,a.yg)("h2",{id:"notable-exceptions"},"Notable Exceptions"),(0,a.yg)("h3",{id:"form-prompt-types"},"Form Prompt Types"),(0,a.yg)("p",null,"Currently, forms only support structured property prompts. Each prompt requires users to set values for structured properties on entities or their schema fields. Future extensions may include prompts for other metadata types (e.g., documentation requirements, tag requirements)."),(0,a.yg)("h3",{id:"schema-field-prompts"},"Schema Field Prompts"),(0,a.yg)("p",null,"When using ",(0,a.yg)("inlineCode",{parentName:"p"},"FIELDS_STRUCTURED_PROPERTY")," prompt types, these prompts should not be marked as required, as they apply to an indeterminate number of schema fields. The form is considered complete when users have appropriately responded to the field-level prompts."),(0,a.yg)("h3",{id:"assignment-logic"},"Assignment Logic"),(0,a.yg)("p",null,"Forms are assigned to entities through two independent mechanisms:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Direct assignment"),": Explicitly specified entity URNs"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Dynamic assignment"),": Filter-based automatic assignment")),(0,a.yg)("p",null,"An entity can have the same form assigned through both mechanisms. The ",(0,a.yg)("inlineCode",{parentName:"p"},"forms")," aspect on the entity consolidates all assignments regardless of how they were made."),(0,a.yg)("h3",{id:"form-lifecycle"},"Form Lifecycle"),(0,a.yg)("p",null,"Once a form is created and published, assignees will see it in their task queue. Deleting a form requires:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Hard deleting the form entity itself"),(0,a.yg)("li",{parentName:"ol"},"Removing all references to the form from entities that have it assigned")),(0,a.yg)("p",null,"This two-step process ensures referential integrity across the metadata graph."),(0,a.yg)("h2",{id:"technical-reference-guide"},"Technical Reference Guide"),(0,a.yg)("p",null,"The sections above provide an overview of how to use this entity. The following sections provide detailed technical information about how metadata is stored and represented in DataHub."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Aspects")," are the individual pieces of metadata that can be attached to an entity. Each aspect contains specific information (like ownership, tags, or properties) and is stored as a separate record, allowing for flexible and incremental metadata updates."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Relationships")," show how this entity connects to other entities in the metadata graph. These connections are derived from the fields within each aspect and form the foundation of DataHub's knowledge graph."),(0,a.yg)("h3",{id:"reading-the-field-tables"},"Reading the Field Tables"),(0,a.yg)("p",null,"Each aspect's field table includes an ",(0,a.yg)("strong",{parentName:"p"},"Annotations")," column that provides additional metadata about how fields are used:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"\u26a0\ufe0f Deprecated"),": This field is deprecated and may be removed in a future version. Check the description for the recommended alternative"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Searchable"),": This field is indexed and can be searched in DataHub's search interface"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Searchable (fieldname)"),": When the field name in parentheses is shown, it indicates the field is indexed under a different name in the search index. For example, ",(0,a.yg)("inlineCode",{parentName:"li"},"dashboardTool")," is indexed as ",(0,a.yg)("inlineCode",{parentName:"li"},"tool")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"\u2192 RelationshipName"),": This field creates a relationship to another entity. The arrow indicates this field contains a reference (URN) to another entity, and the name indicates the type of relationship (e.g., ",(0,a.yg)("inlineCode",{parentName:"li"},"\u2192 Contains"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"\u2192 OwnedBy"),")")),(0,a.yg)("p",null,"Fields with complex types (like ",(0,a.yg)("inlineCode",{parentName:"p"},"Edge"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"AuditStamp"),") link to their definitions in the ",(0,a.yg)("a",{parentName:"p",href:"#common-types"},"Common Types")," section below."),(0,a.yg)("h3",{id:"aspects"},"Aspects"),(0,a.yg)("h4",{id:"forminfo"},"formInfo"),(0,a.yg)("p",null,"Information about a form to help with filling out metadata on entities."),(0,a.yg)(r.A,{mdxType:"Tabs"},(0,a.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Field"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Required"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"name"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Display name of the form"),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"description"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null},"Description of the form"),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"type"),(0,a.yg)("td",{parentName:"tr",align:null},"FormType"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"The type of this form"),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"prompts"),(0,a.yg)("td",{parentName:"tr",align:null},"FormPrompt[]"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"List of prompts to present to the user to encourage filling out metadata"),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"actors"),(0,a.yg)("td",{parentName:"tr",align:null},"FormActorAssignment"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Who the form is assigned to, e.g. who should see the form when visiting the entity page or govern..."),(0,a.yg)("td",{parentName:"tr",align:null}))))),(0,a.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "formInfo"\n  },\n  "name": "FormInfo",\n  "namespace": "com.linkedin.form",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "TEXT_PARTIAL"\n      },\n      "type": "string",\n      "name": "name",\n      "doc": "Display name of the form"\n    },\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "description",\n      "default": null,\n      "doc": "Description of the form"\n    },\n    {\n      "Searchable": {\n        "fieldType": "KEYWORD"\n      },\n      "type": {\n        "type": "enum",\n        "symbolDocs": {\n          "COMPLETION": "A form simply used for collecting metadata fields for an entity.",\n          "VERIFICATION": "This form is used for \\"verifying\\" that entities comply with a policy via presence of a specific set of metadata fields."\n        },\n        "name": "FormType",\n        "namespace": "com.linkedin.form",\n        "symbols": [\n          "COMPLETION",\n          "VERIFICATION"\n        ]\n      },\n      "name": "type",\n      "default": "COMPLETION",\n      "doc": "The type of this form"\n    },\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "FormPrompt",\n          "namespace": "com.linkedin.form",\n          "fields": [\n            {\n              "Searchable": {\n                "fieldName": "promptId",\n                "fieldType": "KEYWORD",\n                "queryByDefault": false\n              },\n              "type": "string",\n              "name": "id",\n              "doc": "The unique id for this prompt. This must be GLOBALLY unique."\n            },\n            {\n              "type": "string",\n              "name": "title",\n              "doc": "The title of this prompt"\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "description",\n              "default": null,\n              "doc": "The description of this prompt"\n            },\n            {\n              "type": {\n                "type": "enum",\n                "symbolDocs": {\n                  "FIELDS_STRUCTURED_PROPERTY": "This prompt is meant to apply a structured property to a schema fields entity",\n                  "STRUCTURED_PROPERTY": "This prompt is meant to apply a structured property to an entity"\n                },\n                "name": "FormPromptType",\n                "namespace": "com.linkedin.form",\n                "symbols": [\n                  "STRUCTURED_PROPERTY",\n                  "FIELDS_STRUCTURED_PROPERTY"\n                ]\n              },\n              "name": "type",\n              "doc": "The type of prompt"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "StructuredPropertyParams",\n                  "namespace": "com.linkedin.form",\n                  "fields": [\n                    {\n                      "Searchable": {\n                        "fieldName": "structuredPropertyPromptUrns",\n                        "fieldType": "URN"\n                      },\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "urn",\n                      "doc": "The structured property that is required on this entity"\n                    }\n                  ]\n                }\n              ],\n              "name": "structuredPropertyParams",\n              "default": null,\n              "doc": "An optional set of information specific to structured properties prompts.\\nThis should be filled out if the prompt is type STRUCTURED_PROPERTY or FIELDS_STRUCTURED_PROPERTY."\n            },\n            {\n              "type": "boolean",\n              "name": "required",\n              "default": false,\n              "doc": "Whether the prompt is required to be completed, in order for the form to be marked as complete."\n            }\n          ],\n          "doc": "A prompt to present to the user to encourage filling out metadata"\n        }\n      },\n      "name": "prompts",\n      "default": [],\n      "doc": "List of prompts to present to the user to encourage filling out metadata"\n    },\n    {\n      "type": {\n        "type": "record",\n        "name": "FormActorAssignment",\n        "namespace": "com.linkedin.form",\n        "fields": [\n          {\n            "Searchable": {\n              "fieldName": "isOwnershipForm",\n              "fieldType": "BOOLEAN"\n            },\n            "type": "boolean",\n            "name": "owners",\n            "default": true,\n            "doc": "Whether the form should be assigned to the owners of assets that it is applied to.\\nThis is the default."\n          },\n          {\n            "Searchable": {\n              "/*": {\n                "fieldName": "assignedGroups",\n                "fieldType": "URN"\n              }\n            },\n            "type": [\n              "null",\n              {\n                "type": "array",\n                "items": "string"\n              }\n            ],\n            "name": "groups",\n            "default": null,\n            "doc": "Optional: Specific set of groups that are targeted by this form assignment."\n          },\n          {\n            "Searchable": {\n              "/*": {\n                "fieldName": "assignedUsers",\n                "fieldType": "URN"\n              }\n            },\n            "type": [\n              "null",\n              {\n                "type": "array",\n                "items": "string"\n              }\n            ],\n            "name": "users",\n            "default": null,\n            "doc": "Optional: Specific set of users that are targeted by this form assignment."\n          }\n        ]\n      },\n      "name": "actors",\n      "default": {\n        "groups": null,\n        "owners": true,\n        "users": null\n      },\n      "doc": "Who the form is assigned to, e.g. who should see the form when visiting the entity page or governance center"\n    }\n  ],\n  "doc": "Information about a form to help with filling out metadata on entities."\n}\n')))),(0,a.yg)("h4",{id:"dynamicformassignment"},"dynamicFormAssignment"),(0,a.yg)("p",null,"Information about how a form is assigned to entities dynamically. Provide a filter to\nmatch a set of entities instead of explicitly applying a form to specific entities."),(0,a.yg)(r.A,{mdxType:"Tabs"},(0,a.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Field"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Required"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"filter"),(0,a.yg)("td",{parentName:"tr",align:null},"Filter"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"The filter applied when assigning this form to entities. Entities that match this filter will hav..."),(0,a.yg)("td",{parentName:"tr",align:null}))))),(0,a.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "dynamicFormAssignment"\n  },\n  "name": "DynamicFormAssignment",\n  "namespace": "com.linkedin.form",\n  "fields": [\n    {\n      "type": {\n        "type": "record",\n        "name": "Filter",\n        "namespace": "com.linkedin.metadata.query.filter",\n        "fields": [\n          {\n            "type": [\n              "null",\n              {\n                "type": "array",\n                "items": {\n                  "type": "record",\n                  "name": "ConjunctiveCriterion",\n                  "namespace": "com.linkedin.metadata.query.filter",\n                  "fields": [\n                    {\n                      "type": {\n                        "type": "array",\n                        "items": {\n                          "type": "record",\n                          "name": "Criterion",\n                          "namespace": "com.linkedin.metadata.query.filter",\n                          "fields": [\n                            {\n                              "type": "string",\n                              "name": "field",\n                              "doc": "The name of the field that the criterion refers to"\n                            },\n                            {\n                              "type": "string",\n                              "name": "value",\n                              "doc": "The value of the intended field"\n                            },\n                            {\n                              "type": {\n                                "type": "array",\n                                "items": "string"\n                              },\n                              "name": "values",\n                              "default": [],\n                              "doc": "Values. one of which the intended field should match\\nNote, if values is set, the above \\"value\\" field will be ignored"\n                            },\n                            {\n                              "type": {\n                                "type": "enum",\n                                "symbolDocs": {\n                                  "ANCESTORS_INCL": "Represent the relation: URN field matches any nested parent in addition to the given URN",\n                                  "CONTAIN": "Represent the relation: String field contains value, e.g. name contains Profile",\n                                  "DESCENDANTS_INCL": "Represent the relation: URN field any nested children in addition to the given URN",\n                                  "END_WITH": "Represent the relation: String field ends with value, e.g. name ends with Event",\n                                  "EQUAL": "Represent the relation: field = value, e.g. platform = hdfs",\n                                  "EXISTS": "Represents the relation: field exists and is non-empty, e.g. owners is not null and != [] (empty)",\n                                  "GREATER_THAN": "Represent the relation greater than, e.g. ownerCount > 5",\n                                  "GREATER_THAN_OR_EQUAL_TO": "Represent the relation greater than or equal to, e.g. ownerCount >= 5",\n                                  "IEQUAL": "Represent the relation: field = value and support case insensitive values, e.g. platform = hdfs",\n                                  "IN": "Represent the relation: String field is one of the array values to, e.g. name in [\\"Profile\\", \\"Event\\"]",\n                                  "IS_NULL": "Represent the relation: field is null, e.g. platform is null",\n                                  "LESS_THAN": "Represent the relation less than, e.g. ownerCount < 3",\n                                  "LESS_THAN_OR_EQUAL_TO": "Represent the relation less than or equal to, e.g. ownerCount <= 3",\n                                  "RELATED_INCL": "Represent the relation: URN field matches any nested child or parent in addition to the given URN",\n                                  "START_WITH": "Represent the relation: String field starts with value, e.g. name starts with PageView"\n                                },\n                                "name": "Condition",\n                                "namespace": "com.linkedin.metadata.query.filter",\n                                "symbols": [\n                                  "CONTAIN",\n                                  "END_WITH",\n                                  "EQUAL",\n                                  "IEQUAL",\n                                  "IS_NULL",\n                                  "EXISTS",\n                                  "GREATER_THAN",\n                                  "GREATER_THAN_OR_EQUAL_TO",\n                                  "IN",\n                                  "LESS_THAN",\n                                  "LESS_THAN_OR_EQUAL_TO",\n                                  "START_WITH",\n                                  "DESCENDANTS_INCL",\n                                  "ANCESTORS_INCL",\n                                  "RELATED_INCL"\n                                ],\n                                "doc": "The matching condition in a filter criterion"\n                              },\n                              "name": "condition",\n                              "default": "EQUAL",\n                              "doc": "The condition for the criterion, e.g. EQUAL, START_WITH"\n                            },\n                            {\n                              "type": "boolean",\n                              "name": "negated",\n                              "default": false,\n                              "doc": "Whether the condition should be negated"\n                            }\n                          ],\n                          "doc": "A criterion for matching a field with given value"\n                        }\n                      },\n                      "name": "and",\n                      "doc": "A list of and criteria the filter applies to the query"\n                    }\n                  ],\n                  "doc": "A list of criterion and\'d together."\n                }\n              }\n            ],\n            "name": "or",\n            "default": null,\n            "doc": "A list of disjunctive criterion for the filter. (or operation to combine filters)"\n          },\n          {\n            "type": [\n              "null",\n              {\n                "type": "array",\n                "items": "com.linkedin.metadata.query.filter.Criterion"\n              }\n            ],\n            "name": "criteria",\n            "default": null,\n            "doc": "Deprecated! A list of conjunctive criterion for the filter. If \\"or\\" field is provided, then this field is ignored."\n          }\n        ],\n        "doc": "The filter for finding a record or a collection of records"\n      },\n      "name": "filter",\n      "doc": "The filter applied when assigning this form to entities. Entities that match this filter\\nwill have this form applied to them. Right now this filter only supports filtering by\\nplatform, entity type, container, and domain through the UI."\n    }\n  ],\n  "doc": "Information about how a form is assigned to entities dynamically. Provide a filter to\\nmatch a set of entities instead of explicitly applying a form to specific entities."\n}\n')))),(0,a.yg)("h4",{id:"ownership-1"},"ownership"),(0,a.yg)("p",null,"Ownership information of an entity."),(0,a.yg)(r.A,{mdxType:"Tabs"},(0,a.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Field"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Required"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"owners"),(0,a.yg)("td",{parentName:"tr",align:null},"Owner[]"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"List of owners of the entity."),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"ownerTypes"),(0,a.yg)("td",{parentName:"tr",align:null},"map"),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null},"Ownership type to Owners map, populated via mutation hook."),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"lastModified"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"#auditstamp"},"AuditStamp")),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Audit stamp containing who last modified the record and when. A value of 0 in the time field indi..."),(0,a.yg)("td",{parentName:"tr",align:null}))))),(0,a.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "ownership"\n  },\n  "name": "Ownership",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "Owner",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "Relationship": {\n                "entityTypes": [\n                  "corpuser",\n                  "corpGroup"\n                ],\n                "name": "OwnedBy"\n              },\n              "Searchable": {\n                "addToFilters": true,\n                "fieldName": "owners",\n                "fieldType": "URN",\n                "filterNameOverride": "Owned By",\n                "hasValuesFieldName": "hasOwners",\n                "queryByDefault": false\n              },\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "owner",\n              "doc": "Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name\\n(Caveat: only corpuser is currently supported in the frontend.)"\n            },\n            {\n              "deprecated": true,\n              "type": {\n                "type": "enum",\n                "symbolDocs": {\n                  "BUSINESS_OWNER": "A person or group who is responsible for logical, or business related, aspects of the asset.",\n                  "CONSUMER": "A person, group, or service that consumes the data\\nDeprecated! Use TECHNICAL_OWNER or BUSINESS_OWNER instead.",\n                  "CUSTOM": "Set when ownership type is unknown or a when new one is specified as an ownership type entity for which we have no\\nenum value for. This is used for backwards compatibility",\n                  "DATAOWNER": "A person or group that is owning the data\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "DATA_STEWARD": "A steward, expert, or delegate responsible for the asset.",\n                  "DELEGATE": "A person or a group that overseas the operation, e.g. a DBA or SRE.\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "DEVELOPER": "A person or group that is in charge of developing the code\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "NONE": "No specific type associated to the owner.",\n                  "PRODUCER": "A person, group, or service that produces/generates the data\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "STAKEHOLDER": "A person or a group that has direct business interest\\nDeprecated! Use TECHNICAL_OWNER, BUSINESS_OWNER, or STEWARD instead.",\n                  "TECHNICAL_OWNER": "person or group who is responsible for technical aspects of the asset."\n                },\n                "deprecatedSymbols": {\n                  "CONSUMER": true,\n                  "DATAOWNER": true,\n                  "DELEGATE": true,\n                  "DEVELOPER": true,\n                  "PRODUCER": true,\n                  "STAKEHOLDER": true\n                },\n                "name": "OwnershipType",\n                "namespace": "com.linkedin.common",\n                "symbols": [\n                  "CUSTOM",\n                  "TECHNICAL_OWNER",\n                  "BUSINESS_OWNER",\n                  "DATA_STEWARD",\n                  "NONE",\n                  "DEVELOPER",\n                  "DATAOWNER",\n                  "DELEGATE",\n                  "PRODUCER",\n                  "CONSUMER",\n                  "STAKEHOLDER"\n                ],\n                "doc": "Asset owner types"\n              },\n              "name": "type",\n              "doc": "The type of the ownership"\n            },\n            {\n              "Relationship": {\n                "entityTypes": [\n                  "ownershipType"\n                ],\n                "name": "ownershipType"\n              },\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "typeUrn",\n              "default": null,\n              "doc": "The type of the ownership\\nUrn of type O"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "OwnershipSource",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": {\n                        "type": "enum",\n                        "symbolDocs": {\n                          "AUDIT": "Auditing system or audit logs",\n                          "DATABASE": "Database, e.g. GRANTS table",\n                          "FILE_SYSTEM": "File system, e.g. file/directory owner",\n                          "ISSUE_TRACKING_SYSTEM": "Issue tracking system, e.g. Jira",\n                          "MANUAL": "Manually provided by a user",\n                          "OTHER": "Other sources",\n                          "SERVICE": "Other ownership-like service, e.g. Nuage, ACL service etc",\n                          "SOURCE_CONTROL": "SCM system, e.g. GIT, SVN"\n                        },\n                        "name": "OwnershipSourceType",\n                        "namespace": "com.linkedin.common",\n                        "symbols": [\n                          "AUDIT",\n                          "DATABASE",\n                          "FILE_SYSTEM",\n                          "ISSUE_TRACKING_SYSTEM",\n                          "MANUAL",\n                          "SERVICE",\n                          "SOURCE_CONTROL",\n                          "OTHER"\n                        ]\n                      },\n                      "name": "type",\n                      "doc": "The type of the source"\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "url",\n                      "default": null,\n                      "doc": "A reference URL for the source"\n                    }\n                  ],\n                  "doc": "Source/provider of the ownership information"\n                }\n              ],\n              "name": "source",\n              "default": null,\n              "doc": "Source information for the ownership"\n            },\n            {\n              "Searchable": {\n                "/actor": {\n                  "fieldName": "ownerAttributionActors",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/source": {\n                  "fieldName": "ownerAttributionSources",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/time": {\n                  "fieldName": "ownerAttributionDates",\n                  "fieldType": "DATETIME",\n                  "queryByDefault": false\n                }\n              },\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "MetadataAttribution",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When this metadata was updated."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) responsible for applying the assocated metadata. This can\\neither be a user (in case of UI edits) or the datahub system for automation."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "source",\n                      "default": null,\n                      "doc": "The DataHub source responsible for applying the associated metadata. This will only be filled out\\nwhen a DataHub source is responsible. This includes the specific metadata test urn, the automation urn."\n                    },\n                    {\n                      "type": {\n                        "type": "map",\n                        "values": "string"\n                      },\n                      "name": "sourceDetail",\n                      "default": {},\n                      "doc": "The details associated with why this metadata was applied. For example, this could include\\nthe actual regex rule, sql statement, ingestion pipeline ID, etc."\n                    }\n                  ],\n                  "doc": "Information about who, why, and how this metadata was applied"\n                }\n              ],\n              "name": "attribution",\n              "default": null,\n              "doc": "Information about who, why, and how this metadata was applied"\n            }\n          ],\n          "doc": "Ownership information"\n        }\n      },\n      "name": "owners",\n      "doc": "List of owners of the entity."\n    },\n    {\n      "Searchable": {\n        "/*": {\n          "fieldType": "MAP_ARRAY",\n          "queryByDefault": false\n        }\n      },\n      "type": [\n        {\n          "type": "map",\n          "values": {\n            "type": "array",\n            "items": "string"\n          }\n        },\n        "null"\n      ],\n      "name": "ownerTypes",\n      "default": {},\n      "doc": "Ownership type to Owners map, populated via mutation hook."\n    },\n    {\n      "type": {\n        "type": "record",\n        "name": "AuditStamp",\n        "namespace": "com.linkedin.common",\n        "fields": [\n          {\n            "type": "long",\n            "name": "time",\n            "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": "string",\n            "name": "actor",\n            "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "impersonator",\n            "default": null,\n            "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n          },\n          {\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "message",\n            "default": null,\n            "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n          }\n        ],\n        "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n      },\n      "name": "lastModified",\n      "default": {\n        "actor": "urn:li:corpuser:unknown",\n        "impersonator": null,\n        "time": 0,\n        "message": null\n      },\n      "doc": "Audit stamp containing who last modified the record and when. A value of 0 in the time field indicates missing data."\n    }\n  ],\n  "doc": "Ownership information of an entity."\n}\n')))),(0,a.yg)("h3",{id:"common-types"},"Common Types"),(0,a.yg)("p",null,"These types are used across multiple aspects in this entity."),(0,a.yg)("h4",{id:"auditstamp"},"AuditStamp"),(0,a.yg)("p",null,"Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Fields:")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"time")," (long): When did the resource/association/sub-resource move into the specific lifecyc..."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"actor")," (string): The entity (e.g. a member URN) which will be credited for moving the resource..."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"impersonator")," (string?): The entity (e.g. a service URN) which performs the change on behalf of the Ac..."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"message")," (string?): Additional context around how DataHub was informed of the particular change. ...")),(0,a.yg)("h3",{id:"relationships"},"Relationships"),(0,a.yg)("h4",{id:"outgoing"},"Outgoing"),(0,a.yg)("p",null,"These are the relationships stored in this entity's aspects"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"OwnedBy"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Corpuser via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.owner")),(0,a.yg)("li",{parentName:"ul"},"CorpGroup via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.owner")))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"ownershipType"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"OwnershipType via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn"))))),(0,a.yg)("h3",{id:"global-metadata-model"},(0,a.yg)("a",{parentName:"h3",href:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,a.yg)("p",null,(0,a.yg)("img",{parentName:"p",src:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}h.isMDXComponent=!0}}]);