"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[45408],{21148:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>y,default:()=>c,frontMatter:()=>p,metadata:()=>d,toc:()=>h});t(96540);var a=t(15680),i=t(53720),r=t(5400);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}const p={sidebar_position:34,title:"OwnershipType",slug:"/generated/metamodel/entities/ownershiptype",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/ownershipType.md"},y="OwnershipType",d={unversionedId:"docs/generated/metamodel/entities/ownershipType",id:"docs/generated/metamodel/entities/ownershipType",title:"OwnershipType",description:"The ownershipType entity represents a custom ownership category in DataHub. Ownership Types define the roles and responsibilities that users or groups can have for data assets. While DataHub provides built-in ownership types (Technical Owner, Business Owner, Data Steward), organizations can create custom ownership types to match their specific governance models and organizational structures.",source:"@site/genDocs/docs/generated/metamodel/entities/ownershipType.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/ownershiptype",permalink:"/docs/generated/metamodel/entities/ownershiptype",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/ownershipType.md",tags:[],version:"current",sidebarPosition:34,frontMatter:{sidebar_position:34,title:"OwnershipType",slug:"/generated/metamodel/entities/ownershiptype",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/ownershipType.md"},sidebar:"overviewSidebar",previous:{title:"Application",permalink:"/docs/generated/metamodel/entities/application"},next:{title:"BusinessAttribute",permalink:"/docs/generated/metamodel/entities/businessattribute"}},m={},h=[{value:"Identity",id:"identity",level:2},{value:"Important Capabilities",id:"important-capabilities",level:2},{value:"Core Information",id:"core-information",level:3},{value:"Built-in vs Custom Ownership Types",id:"built-in-vs-custom-ownership-types",level:3},{value:"Usage in Ownership Assignments",id:"usage-in-ownership-assignments",level:3},{value:"Status Management",id:"status-management",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"Create a Custom Ownership Type",id:"create-a-custom-ownership-type",level:3},{value:"Use Custom Ownership Type with Assets",id:"use-custom-ownership-type-with-assets",level:3},{value:"List Ownership Types",id:"list-ownership-types",level:3},{value:"Query via REST API",id:"query-via-rest-api",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"Relationship with Owner Aspect",id:"relationship-with-owner-aspect",level:3},{value:"GraphQL API Integration",id:"graphql-api-integration",level:3},{value:"Authorization",id:"authorization",level:3},{value:"Common Usage Patterns",id:"common-usage-patterns",level:3},{value:"Notable Exceptions",id:"notable-exceptions",level:2},{value:"Backwards Compatibility",id:"backwards-compatibility",level:3},{value:"System Type Deletion",id:"system-type-deletion",level:3},{value:"Migration from Enum to Entity",id:"migration-from-enum-to-entity",level:3},{value:"ID Generation",id:"id-generation",level:3},{value:"Technical Reference Guide",id:"technical-reference-guide",level:2},{value:"Reading the Field Tables",id:"reading-the-field-tables",level:3},{value:"Aspects",id:"aspects",level:3},{value:"ownershipTypeInfo",id:"ownershiptypeinfo",level:4},{value:"status",id:"status",level:4},{value:"Common Types",id:"common-types",level:3},{value:"AuditStamp",id:"auditstamp",level:4},{value:"Relationships",id:"relationships",level:3},{value:"Incoming",id:"incoming",level:4},{value:"Global Metadata Model",id:"global-metadata-model",level:3}],u={toc:h},g="wrapper";function c(e){var{components:n}=e,t=l(e,["components"]);return(0,a.yg)(g,o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){s(e,n,t[n])}))}return e}({},u,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"ownershiptype"},"OwnershipType"),(0,a.yg)("p",null,"The ownershipType entity represents a custom ownership category in DataHub. Ownership Types define the roles and responsibilities that users or groups can have for data assets. While DataHub provides built-in ownership types (Technical Owner, Business Owner, Data Steward), organizations can create custom ownership types to match their specific governance models and organizational structures."),(0,a.yg)("h2",{id:"identity"},"Identity"),(0,a.yg)("p",null,"OwnershipType entities are uniquely identified by a single field:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"id"),": A unique identifier string for the ownership type. This is typically a UUID for custom ownership types or a system-prefixed identifier for built-in types.")),(0,a.yg)("p",null,"The URN structure follows the pattern: ",(0,a.yg)("inlineCode",{parentName:"p"},"urn:li:ownershipType:<id>")),(0,a.yg)("p",null,"Examples:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Built-in type: ",(0,a.yg)("inlineCode",{parentName:"li"},"urn:li:ownershipType:__system__technical_owner")),(0,a.yg)("li",{parentName:"ul"},"Custom type: ",(0,a.yg)("inlineCode",{parentName:"li"},"urn:li:ownershipType:8b3d78d1-a9d9-4f79-a948-10c52e3e8f9e")),(0,a.yg)("li",{parentName:"ul"},"Named custom type: ",(0,a.yg)("inlineCode",{parentName:"li"},"urn:li:ownershipType:data_quality_lead"))),(0,a.yg)("h2",{id:"important-capabilities"},"Important Capabilities"),(0,a.yg)("h3",{id:"core-information"},"Core Information"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"ownershipTypeInfo")," aspect contains the essential metadata for an ownership type:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"name"),': Display name of the ownership type (e.g., "Data Quality Lead", "Compliance Officer")'),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"description"),": Detailed explanation of this ownership type's responsibilities and scope"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"created"),": Audit stamp capturing when the ownership type was created and by whom"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"lastModified"),": Audit stamp tracking the last modification time and actor")),(0,a.yg)("h3",{id:"built-in-vs-custom-ownership-types"},"Built-in vs Custom Ownership Types"),(0,a.yg)("p",null,"DataHub ships with four built-in ownership types that are automatically created:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"Technical Owner")," (",(0,a.yg)("inlineCode",{parentName:"li"},"__system__technical_owner"),"): Involved in the production, maintenance, or distribution of the asset(s)"),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"Business Owner")," (",(0,a.yg)("inlineCode",{parentName:"li"},"__system__business_owner"),"): Principle stakeholders or domain experts associated with the asset(s)"),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"Data Steward")," (",(0,a.yg)("inlineCode",{parentName:"li"},"__system__data_steward"),"): Involved in governance of the asset(s)"),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"None")," (",(0,a.yg)("inlineCode",{parentName:"li"},"__system__none"),"): No ownership type specified")),(0,a.yg)("p",null,"Built-in types have IDs prefixed with ",(0,a.yg)("inlineCode",{parentName:"p"},"__system__")," and cannot be hard-deleted, only soft-deleted via the ",(0,a.yg)("inlineCode",{parentName:"p"},"status")," aspect. Custom ownership types can be fully deleted and do not have this prefix restriction."),(0,a.yg)("h3",{id:"usage-in-ownership-assignments"},"Usage in Ownership Assignments"),(0,a.yg)("p",null,"Ownership types are referenced in the ",(0,a.yg)("inlineCode",{parentName:"p"},"ownership")," aspect of data assets through the ",(0,a.yg)("inlineCode",{parentName:"p"},"typeUrn")," field of the ",(0,a.yg)("inlineCode",{parentName:"p"},"Owner")," record. This creates a relationship between the asset owner and their specific role:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"Owner {\n  owner: urn:li:corpuser:jdoe\n  typeUrn: urn:li:ownershipType:data_quality_lead\n  type: CUSTOM  // deprecated field, maintained for backwards compatibility\n}\n")),(0,a.yg)("p",null,"The ownership aspect also maintains an ",(0,a.yg)("inlineCode",{parentName:"p"},"ownerTypes")," map that groups owners by their ownership type URN, populated automatically via mutation hooks."),(0,a.yg)("h3",{id:"status-management"},"Status Management"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"status")," aspect controls whether an ownership type is active or soft-deleted:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"removed"),": When set to true, the ownership type is considered deleted but references are preserved")),(0,a.yg)("p",null,"Built-in ownership types can only be soft-deleted (status.removed = true), while custom types can be fully removed from the system."),(0,a.yg)("h2",{id:"code-examples"},"Code Examples"),(0,a.yg)("h3",{id:"create-a-custom-ownership-type"},"Create a Custom Ownership Type"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Create a custom ownership type"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/ownership_type_create_custom.py\nimport os\nimport time\n\nfrom datahub.emitter.mce_builder import make_user_urn\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import (\n    AuditStampClass,\n    OwnershipTypeInfoClass,\n    OwnershipTypeKeyClass,\n)\n\nemitter = DatahubRestEmitter(\n    gms_server=os.getenv("DATAHUB_GMS_URL", "http://localhost:8080"),\n    token=os.getenv("DATAHUB_GMS_TOKEN"),\n)\n\nownership_type_id = "data_quality_lead"\nownership_type_urn = f"urn:li:ownershipType:{ownership_type_id}"\n\ncurrent_timestamp = int(time.time() * 1000)\nactor_urn = make_user_urn("datahub")\n\n# Emit the key aspect\nownership_type_key = OwnershipTypeKeyClass(id=ownership_type_id)\nemitter.emit_mcp(\n    MetadataChangeProposalWrapper(\n        entityUrn=ownership_type_urn,\n        aspect=ownership_type_key,\n    )\n)\n\n# Emit the info aspect\nownership_type_info = OwnershipTypeInfoClass(\n    name="Data Quality Lead",\n    description="Responsible for ensuring data quality standards and monitoring data quality metrics",\n    created=AuditStampClass(time=current_timestamp, actor=actor_urn),\n    lastModified=AuditStampClass(time=current_timestamp, actor=actor_urn),\n)\n\nemitter.emit_mcp(\n    MetadataChangeProposalWrapper(\n        entityUrn=ownership_type_urn,\n        aspect=ownership_type_info,\n    )\n)\n\nprint(f"Created custom ownership type: {ownership_type_urn}")\n\n'))),(0,a.yg)("h3",{id:"use-custom-ownership-type-with-assets"},"Use Custom Ownership Type with Assets"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Assign owner with custom ownership type"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/dataset_add_owner_custom_type.py\n# Inlined from /metadata-ingestion/examples/library/dataset_add_owner_custom_type.py\n\nfrom datahub.emitter.mce_builder import (\n    make_dataset_urn,\n    make_ownership_type_urn,\n    make_user_urn,\n)\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.ingestion.graph.client import DataHubGraph, DataHubGraphConfig\nfrom datahub.metadata.schema_classes import (\n    OwnerClass,\n    OwnershipClass,\n    OwnershipTypeClass,\n)\n\n# Create DataHub client\ngraph = DataHubGraph(DataHubGraphConfig(server="http://localhost:8080"))\nemitter = DatahubRestEmitter("http://localhost:8080")\n\n# Create dataset URN\ndataset_urn = make_dataset_urn(platform="snowflake", name="analytics.users", env="PROD")\n\n# Create custom ownership type URN\n# This should reference a previously created custom ownership type\ncustom_ownership_type_urn = make_ownership_type_urn("data_quality_lead")\n\n# Create an owner with the custom ownership type\nowner = OwnerClass(\n    owner=make_user_urn("jdoe"),\n    type=OwnershipTypeClass.CUSTOM,  # Use CUSTOM enum for custom types\n    typeUrn=custom_ownership_type_urn,  # Reference the custom ownership type entity\n)\n\n# Get existing ownership or create new\ntry:\n    existing_ownership = graph.get_aspect(dataset_urn, OwnershipClass)\n    if existing_ownership:\n        # Add to existing owners\n        existing_ownership.owners.append(owner)\n        ownership = existing_ownership\n    else:\n        # Create new ownership aspect\n        ownership = OwnershipClass(owners=[owner])\nexcept Exception:\n    # Create new ownership aspect if retrieval fails\n    ownership = OwnershipClass(owners=[owner])\n\n# Emit the ownership aspect\nmcp = MetadataChangeProposalWrapper(\n    entityUrn=str(dataset_urn),\n    aspect=ownership,\n)\n\nemitter.emit_mcp(mcp)\n\nprint(\n    f"Added owner {owner.owner} with custom ownership type {custom_ownership_type_urn}"\n)\nprint(f"to dataset {dataset_urn}")\n\n'))),(0,a.yg)("h3",{id:"list-ownership-types"},"List Ownership Types"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Query all ownership types"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/ownership_type_list.py\n# Inlined from /metadata-ingestion/examples/library/ownership_type_list.py\n\nfrom datahub.ingestion.graph.client import DataHubGraph, DataHubGraphConfig\n\n# Create DataHub client\ngraph = DataHubGraph(DataHubGraphConfig(server="http://localhost:8080"))\n\n# Search for all ownership type entities\n# Note: The GraphQL API provides a listOwnershipTypes query, but we can also\n# use the search API to find all ownership types\nsearch_query = """\nquery listOwnershipTypes($input: ListOwnershipTypesInput!) {\n  listOwnershipTypes(input: $input) {\n    start\n    count\n    total\n    ownershipTypes {\n      urn\n      type\n      info {\n        name\n        description\n      }\n    }\n  }\n}\n"""\n\nvariables = {\n    "input": {\n        "start": 0,\n        "count": 100,  # Adjust as needed\n    }\n}\n\n# Execute the GraphQL query\nresult = graph.execute_graphql(query=search_query, variables=variables)\n\n# Process and display the results\nif result and "listOwnershipTypes" in result:\n    ownership_types = result["listOwnershipTypes"]["ownershipTypes"]\n    total = result["listOwnershipTypes"]["total"]\n\n    print(f"Found {total} ownership types:")\n    print("-" * 80)\n\n    for ownership_type in ownership_types:\n        urn = ownership_type["urn"]\n        name = ownership_type["info"]["name"]\n        description = ownership_type["info"].get("description", "No description")\n\n        print(f"URN: {urn}")\n        print(f"Name: {name}")\n        print(f"Description: {description}")\n        print("-" * 80)\nelse:\n    print("No ownership types found or query failed")\n\n'))),(0,a.yg)("h3",{id:"query-via-rest-api"},"Query via REST API"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Fetch ownership type via REST API"),(0,a.yg)("p",null,"Retrieve a specific ownership type:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"curl 'http://localhost:8080/entities/urn%3Ali%3AownershipType%3A__system__technical_owner'\n")),(0,a.yg)("p",null,"Response includes the ",(0,a.yg)("inlineCode",{parentName:"p"},"ownershipTypeInfo")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"status")," aspects:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "urn": "urn:li:ownershipType:__system__technical_owner",\n  "aspects": {\n    "ownershipTypeInfo": {\n      "value": {\n        "name": "Technical Owner",\n        "description": "Involved in the production, maintenance, or distribution of the asset(s).",\n        "created": {\n          "time": 1234567890000,\n          "actor": "urn:li:corpuser:datahub"\n        },\n        "lastModified": {\n          "time": 1234567890000,\n          "actor": "urn:li:corpuser:datahub"\n        }\n      }\n    }\n  }\n}\n'))),(0,a.yg)("h2",{id:"integration-points"},"Integration Points"),(0,a.yg)("h3",{id:"relationship-with-owner-aspect"},"Relationship with Owner Aspect"),(0,a.yg)("p",null,"The ownershipType entity has a primary relationship with the ",(0,a.yg)("inlineCode",{parentName:"p"},"ownership")," aspect found on most data assets (datasets, dashboards, charts, etc.). The ",(0,a.yg)("inlineCode",{parentName:"p"},"Owner")," record contains a ",(0,a.yg)("inlineCode",{parentName:"p"},"typeUrn")," field that references an ownershipType entity:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'@Relationship = {\n  "name": "ownershipType",\n  "entityTypes": [ "ownershipType" ]\n}\ntypeUrn: optional Urn\n')),(0,a.yg)("p",null,"This relationship enables:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Filtering assets by ownership type in search and discovery"),(0,a.yg)("li",{parentName:"ul"},"Grouping owners by their roles across the organization"),(0,a.yg)("li",{parentName:"ul"},"Tracking who has which responsibilities for each asset")),(0,a.yg)("h3",{id:"graphql-api-integration"},"GraphQL API Integration"),(0,a.yg)("p",null,"The GraphQL API exposes ownership types through several resolvers:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"CreateOwnershipTypeResolver"),": Creates new custom ownership types"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"UpdateOwnershipTypeResolver"),": Modifies existing ownership types"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"DeleteOwnershipTypeResolver"),": Removes ownership types (soft-delete for system types)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"ListOwnershipTypesResolver"),": Returns all available ownership types")),(0,a.yg)("p",null,"The GraphQL entity type is ",(0,a.yg)("inlineCode",{parentName:"p"},"CUSTOM_OWNERSHIP_TYPE")," and maps to the ",(0,a.yg)("inlineCode",{parentName:"p"},"OwnershipTypeEntity")," GraphQL type."),(0,a.yg)("h3",{id:"authorization"},"Authorization"),(0,a.yg)("p",null,"Managing ownership types requires specific authorization:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Creating, updating, or deleting ownership types requires the ",(0,a.yg)("inlineCode",{parentName:"li"},"canManageOwnershipTypes")," privilege"),(0,a.yg)("li",{parentName:"ul"},"This is typically restricted to platform administrators and governance teams")),(0,a.yg)("h3",{id:"common-usage-patterns"},"Common Usage Patterns"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Organization-specific roles"),': Define ownership types that match your org structure (e.g., "Product Manager", "Data Engineer", "Analytics Lead")')),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Compliance roles"),': Create types for regulatory compliance (e.g., "Privacy Officer", "Compliance Reviewer", "Audit Contact")')),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Lifecycle roles"),': Track different responsibilities through data lifecycle (e.g., "Data Producer", "Data Consumer", "Data Custodian")')),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Domain-specific roles"),': Establish ownership types for specific domains (e.g., "Marketing Data Owner", "Finance Data Steward")'))),(0,a.yg)("h2",{id:"notable-exceptions"},"Notable Exceptions"),(0,a.yg)("h3",{id:"backwards-compatibility"},"Backwards Compatibility"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"Owner")," record contains both a deprecated ",(0,a.yg)("inlineCode",{parentName:"p"},"type")," field (OwnershipType enum) and the newer ",(0,a.yg)("inlineCode",{parentName:"p"},"typeUrn")," field (Urn reference to ownershipType entity). The enum-based field is maintained for backwards compatibility but should not be used for new implementations. When a custom ownership type is used, the enum field is set to ",(0,a.yg)("inlineCode",{parentName:"p"},"CUSTOM"),"."),(0,a.yg)("h3",{id:"system-type-deletion"},"System Type Deletion"),(0,a.yg)("p",null,"Built-in ownership types (those with IDs starting with ",(0,a.yg)("inlineCode",{parentName:"p"},"__system__"),") cannot be fully deleted. The ",(0,a.yg)("inlineCode",{parentName:"p"},"OwnershipTypeService.deleteOwnershipType()")," method will:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Soft-delete system types by setting ",(0,a.yg)("inlineCode",{parentName:"li"},"status.removed = true")),(0,a.yg)("li",{parentName:"ul"},"Hard-delete custom types by removing the entity entirely")),(0,a.yg)("p",null,"This ensures that references to system types remain valid even if they are deactivated."),(0,a.yg)("h3",{id:"migration-from-enum-to-entity"},"Migration from Enum to Entity"),(0,a.yg)("p",null,"Historically, ownership types were defined as a fixed enum (",(0,a.yg)("inlineCode",{parentName:"p"},"OwnershipType.pdl"),"). The introduction of the ownershipType entity enables extensibility while maintaining compatibility. Deprecated enum values (DEVELOPER, DATAOWNER, DELEGATE, PRODUCER, CONSUMER, STAKEHOLDER) should be migrated to the appropriate system ownership types (TECHNICAL_OWNER, BUSINESS_OWNER, DATA_STEWARD)."),(0,a.yg)("h3",{id:"id-generation"},"ID Generation"),(0,a.yg)("p",null,"When creating custom ownership types:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The system automatically generates a UUID for the ",(0,a.yg)("inlineCode",{parentName:"li"},"id")," field"),(0,a.yg)("li",{parentName:"ul"},'Organizations can also use human-readable IDs (e.g., "data_quality_lead") for easier management'),(0,a.yg)("li",{parentName:"ul"},"IDs must not contain reserved characters and must be URL-safe"),(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"__system__")," prefix is reserved for built-in types")),(0,a.yg)("h2",{id:"technical-reference-guide"},"Technical Reference Guide"),(0,a.yg)("p",null,"The sections above provide an overview of how to use this entity. The following sections provide detailed technical information about how metadata is stored and represented in DataHub."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Aspects")," are the individual pieces of metadata that can be attached to an entity. Each aspect contains specific information (like ownership, tags, or properties) and is stored as a separate record, allowing for flexible and incremental metadata updates."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Relationships")," show how this entity connects to other entities in the metadata graph. These connections are derived from the fields within each aspect and form the foundation of DataHub's knowledge graph."),(0,a.yg)("h3",{id:"reading-the-field-tables"},"Reading the Field Tables"),(0,a.yg)("p",null,"Each aspect's field table includes an ",(0,a.yg)("strong",{parentName:"p"},"Annotations")," column that provides additional metadata about how fields are used:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"\u26a0\ufe0f Deprecated"),": This field is deprecated and may be removed in a future version. Check the description for the recommended alternative"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Searchable"),": This field is indexed and can be searched in DataHub's search interface"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Searchable (fieldname)"),": When the field name in parentheses is shown, it indicates the field is indexed under a different name in the search index. For example, ",(0,a.yg)("inlineCode",{parentName:"li"},"dashboardTool")," is indexed as ",(0,a.yg)("inlineCode",{parentName:"li"},"tool")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"\u2192 RelationshipName"),": This field creates a relationship to another entity. The arrow indicates this field contains a reference (URN) to another entity, and the name indicates the type of relationship (e.g., ",(0,a.yg)("inlineCode",{parentName:"li"},"\u2192 Contains"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"\u2192 OwnedBy"),")")),(0,a.yg)("p",null,"Fields with complex types (like ",(0,a.yg)("inlineCode",{parentName:"p"},"Edge"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"AuditStamp"),") link to their definitions in the ",(0,a.yg)("a",{parentName:"p",href:"#common-types"},"Common Types")," section below."),(0,a.yg)("h3",{id:"aspects"},"Aspects"),(0,a.yg)("h4",{id:"ownershiptypeinfo"},"ownershipTypeInfo"),(0,a.yg)("p",null,"Information about an ownership type"),(0,a.yg)(i.A,{mdxType:"Tabs"},(0,a.yg)(r.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Field"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Required"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"name"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Display name of the Ownership Type"),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"description"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null},"Description of the Ownership Type"),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"created"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"#auditstamp"},"AuditStamp")),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Audit stamp capturing the time and actor who created the Ownership Type."),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"lastModified"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"#auditstamp"},"AuditStamp")),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Audit stamp capturing the time and actor who last modified the Ownership Type."),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,a.yg)(r.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "ownershipTypeInfo"\n  },\n  "name": "OwnershipTypeInfo",\n  "namespace": "com.linkedin.ownership",\n  "fields": [\n    {\n      "Searchable": {\n        "boostScore": 10.0,\n        "enableAutocomplete": true,\n        "fieldType": "WORD_GRAM"\n      },\n      "type": "string",\n      "name": "name",\n      "doc": "Display name of the Ownership Type"\n    },\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "description",\n      "default": null,\n      "doc": "Description of the Ownership Type"\n    },\n    {\n      "Searchable": {\n        "/actor": {\n          "fieldName": "createdBy",\n          "fieldType": "URN"\n        },\n        "/time": {\n          "fieldName": "createdAt",\n          "fieldType": "DATETIME"\n        }\n      },\n      "type": {\n        "type": "record",\n        "name": "AuditStamp",\n        "namespace": "com.linkedin.common",\n        "fields": [\n          {\n            "type": "long",\n            "name": "time",\n            "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": "string",\n            "name": "actor",\n            "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "impersonator",\n            "default": null,\n            "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n          },\n          {\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "message",\n            "default": null,\n            "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n          }\n        ],\n        "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n      },\n      "name": "created",\n      "doc": "Audit stamp capturing the time and actor who created the Ownership Type."\n    },\n    {\n      "Searchable": {\n        "/actor": {\n          "fieldName": "lastModifiedBy",\n          "fieldType": "URN"\n        },\n        "/time": {\n          "fieldName": "lastModifiedAt",\n          "fieldType": "DATETIME"\n        }\n      },\n      "type": "com.linkedin.common.AuditStamp",\n      "name": "lastModified",\n      "doc": "Audit stamp capturing the time and actor who last modified the Ownership Type."\n    }\n  ],\n  "doc": "Information about an ownership type"\n}\n')))),(0,a.yg)("h4",{id:"status"},"status"),(0,a.yg)("p",null,"The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\nThis aspect is used to represent soft deletes conventionally."),(0,a.yg)(i.A,{mdxType:"Tabs"},(0,a.yg)(r.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Field"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Required"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"removed"),(0,a.yg)("td",{parentName:"tr",align:null},"boolean"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Whether the entity has been removed (soft-deleted)."),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,a.yg)(r.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "status"\n  },\n  "name": "Status",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "BOOLEAN"\n      },\n      "type": "boolean",\n      "name": "removed",\n      "default": false,\n      "doc": "Whether the entity has been removed (soft-deleted)."\n    }\n  ],\n  "doc": "The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\\nThis aspect is used to represent soft deletes conventionally."\n}\n')))),(0,a.yg)("h3",{id:"common-types"},"Common Types"),(0,a.yg)("p",null,"These types are used across multiple aspects in this entity."),(0,a.yg)("h4",{id:"auditstamp"},"AuditStamp"),(0,a.yg)("p",null,"Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Fields:")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"time")," (long): When did the resource/association/sub-resource move into the specific lifecyc..."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"actor")," (string): The entity (e.g. a member URN) which will be credited for moving the resource..."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"impersonator")," (string?): The entity (e.g. a service URN) which performs the change on behalf of the Ac..."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"message")," (string?): Additional context around how DataHub was informed of the particular change. ...")),(0,a.yg)("h3",{id:"relationships"},"Relationships"),(0,a.yg)("h4",{id:"incoming"},"Incoming"),(0,a.yg)("p",null,"These are the relationships stored in other entity's aspects"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"ownershipType"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Dataset via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"DataJob via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"DataFlow via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"DataProcess via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"Chart via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"Dashboard via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"Notebook via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"CorpGroup via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"Domain via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"Container via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"Tag via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"GlossaryTerm via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"GlossaryNode via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"DataHubIngestionSource via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"DataPlatformInstance via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"MlModel via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"MlModelGroup via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"MlModelDeployment via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"MlFeatureTable via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"MlFeature via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"MlPrimaryKey via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"ErModelRelationship via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"DataProduct via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")),(0,a.yg)("li",{parentName:"ul"},"Application via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn"))))),(0,a.yg)("h3",{id:"global-metadata-model"},(0,a.yg)("a",{parentName:"h3",href:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,a.yg)("p",null,(0,a.yg)("img",{parentName:"p",src:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}c.isMDXComponent=!0}}]);