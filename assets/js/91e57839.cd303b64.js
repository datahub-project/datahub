"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[94654],{7653:(e,t,a)=>{a.d(t,{A:()=>n});const n={icon:{tag:"svg",attrs:{"fill-rule":"evenodd",viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64c247.4 0 448 200.6 448 448S759.4 960 512 960 64 759.4 64 512 264.6 64 512 64zm127.98 274.82h-.04l-.08.06L512 466.75 384.14 338.88c-.04-.05-.06-.06-.08-.06a.12.12 0 00-.07 0c-.03 0-.05.01-.09.05l-45.02 45.02a.2.2 0 00-.05.09.12.12 0 000 .07v.02a.27.27 0 00.06.06L466.75 512 338.88 639.86c-.05.04-.06.06-.06.08a.12.12 0 000 .07c0 .03.01.05.05.09l45.02 45.02a.2.2 0 00.09.05.12.12 0 00.07 0c.02 0 .04-.01.08-.05L512 557.25l127.86 127.87c.04.04.06.05.08.05a.12.12 0 00.07 0c.03 0 .05-.01.09-.05l45.02-45.02a.2.2 0 00.05-.09.12.12 0 000-.07v-.02a.27.27 0 00-.05-.06L557.25 512l127.87-127.86c.04-.04.05-.06.05-.08a.12.12 0 000-.07c0-.03-.01-.05-.05-.09l-45.02-45.02a.2.2 0 00-.09-.05.12.12 0 00-.07 0z"}}]},name:"close-circle",theme:"filled"}},4732:(e,t,a)=>{a.d(t,{A:()=>l});var n=a(89379),r=a(96540),o=a(7653),s=a(89990),i=function(e,t){return r.createElement(s.A,(0,n.A)((0,n.A)({},e),{},{ref:t,icon:o.A}))};const l=r.forwardRef(i)},15680:(e,t,a)=>{a.d(t,{xA:()=>p,yg:()=>d});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(a),h=r,d=u["".concat(l,".").concat(h)]||u[h]||m[h]||o;return a?n.createElement(d,s(s({ref:t},p),{},{components:a})):n.createElement(d,s({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},43655:(e,t,a)=>{a.d(t,{A:()=>f});var n=a(96540),r=a(20053);const o="availabilityCard_P5od",s="managedIcon_AxXO",i="platform_wqXv",l="platformAvailable_Y8lN";var c=a(4732),p=a(89379);const u={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z"}}]},name:"check-circle",theme:"filled"};var m=a(89990),h=function(e,t){return n.createElement(m.A,(0,p.A)((0,p.A)({},e),{},{ref:t,icon:u}))};const d=n.forwardRef(h);const g={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M811.4 418.7C765.6 297.9 648.9 212 512.2 212S258.8 297.8 213 418.6C127.3 441.1 64 519.1 64 612c0 110.5 89.5 200 199.9 200h496.2C870.5 812 960 722.5 960 612c0-92.7-63.1-170.7-148.6-193.3zm36.3 281a123.07 123.07 0 01-87.6 36.3H263.9c-33.1 0-64.2-12.9-87.6-36.3A123.3 123.3 0 01140 612c0-28 9.1-54.3 26.2-76.3a125.7 125.7 0 0166.1-43.7l37.9-9.9 13.9-36.6c8.6-22.8 20.6-44.1 35.7-63.4a245.6 245.6 0 0152.4-49.9c41.1-28.9 89.5-44.2 140-44.2s98.9 15.3 140 44.2c19.9 14 37.5 30.8 52.4 49.9 15.1 19.3 27.1 40.7 35.7 63.4l13.8 36.5 37.8 10c54.3 14.5 92.1 63.8 92.1 120 0 33.1-12.9 64.3-36.3 87.7z"}}]},name:"cloud",theme:"outlined"};var y=function(e,t){return n.createElement(m.A,(0,p.A)((0,p.A)({},e),{},{ref:t,icon:g}))};const b=n.forwardRef(y),f=({saasOnly:e,ossOnly:t})=>n.createElement("div",{className:(0,r.A)(o,"card")},n.createElement("strong",null,"Feature Availability"),n.createElement("div",null,n.createElement("span",{className:(0,r.A)(i,!e&&l)},"Self-Hosted DataHub ",e?n.createElement(c.A,null):n.createElement(d,null))),n.createElement("div",null,n.createElement(b,{className:s}),n.createElement("span",{className:(0,r.A)(i,!t&&l)},"DataHub Cloud ",t?n.createElement(c.A,null):n.createElement(d,null))))},61486:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>g,frontMatter:()=>l,metadata:()=>p,toc:()=>m});a(96540);var n=a(15680),r=a(43655);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})),e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const l={description:"This page provides an overview of working with DataHub Schema Assertions",title:"Schema Assertions",slug:"/managed-datahub/observe/schema-assertions",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/managed-datahub/observe/schema-assertions.md"},c="Schema Assertions",p={unversionedId:"docs/managed-datahub/observe/schema-assertions",id:"version-1.1.0/docs/managed-datahub/observe/schema-assertions",title:"Schema Assertions",description:"This page provides an overview of working with DataHub Schema Assertions",source:"@site/versioned_docs/version-1.1.0/docs/managed-datahub/observe/schema-assertions.md",sourceDirName:"docs/managed-datahub/observe",slug:"/managed-datahub/observe/schema-assertions",permalink:"/docs/1.1.0/managed-datahub/observe/schema-assertions",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/managed-datahub/observe/schema-assertions.md",tags:[],version:"1.1.0",frontMatter:{description:"This page provides an overview of working with DataHub Schema Assertions",title:"Schema Assertions",slug:"/managed-datahub/observe/schema-assertions",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/managed-datahub/observe/schema-assertions.md"},sidebar:"overviewSidebar",previous:{title:"Freshness Assertions",permalink:"/docs/1.1.0/managed-datahub/observe/freshness-assertions"},next:{title:"Volume Assertions",permalink:"/docs/1.1.0/managed-datahub/observe/volume-assertions"}},u={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Support",id:"support",level:2},{value:"What is a Schema Assertion?",id:"what-is-a-schema-assertion",level:2},{value:"Anatomy of a Schema Assertion",id:"anatomy-of-a-schema-assertion",level:3},{value:"1. Condition Type",id:"1-condition-type",level:4},{value:"2. Expected Columns",id:"2-expected-columns",level:4},{value:"Creating a Schema Assertion",id:"creating-a-schema-assertion",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Steps",id:"steps",level:3},{value:"Stopping a Schema Assertion",id:"stopping-a-schema-assertion",level:2},{value:"Creating Schema Assertions via API",id:"creating-schema-assertions-via-api",level:2},{value:"GraphQL",id:"graphql",level:4},{value:"Examples",id:"examples",level:5},{value:"Tips",id:"tips",level:3}],h={toc:m},d="wrapper";function g(e){var{components:t}=e,a=i(e,["components"]);return(0,n.yg)(d,s(function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),n.forEach((function(t){o(e,t,a[t])}))}return e}({},h,a),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"schema-assertions"},"Schema Assertions"),(0,n.yg)(r.A,{saasOnly:!0,mdxType:"FeatureAvailability"}),(0,n.yg)("blockquote",null,(0,n.yg)("p",{parentName:"blockquote"},"The ",(0,n.yg)("strong",{parentName:"p"},"Schema Assertions")," feature is available as part of the ",(0,n.yg)("strong",{parentName:"p"},"DataHub Cloud Observe")," module of DataHub Cloud.\nIf you are interested in learning more about ",(0,n.yg)("strong",{parentName:"p"},"DataHub Cloud Observe")," or trying it out, please ",(0,n.yg)("a",{parentName:"p",href:"https://datahub.com/products/data-observability/"},"visit our website"),".")),(0,n.yg)("h2",{id:"introduction"},"Introduction"),(0,n.yg)("p",null,"Can you remember a time when columns were unexpectedly added, removed, or altered for a key Table in your Data Warehouse?\nPerhaps this caused downstream tables, views, dashboards, data pipelines, or AI models to break."),(0,n.yg)("p",null,"There are many reasons why the structure of an important Table on Snowflake, Redshift, or BigQuery may schema change, breaking the expectations\nof downstream consumers of the table."),(0,n.yg)("p",null,"What if you could reduce the time to detect these incidents, so that the people responsible for the data were made aware of data\nissues ",(0,n.yg)("em",{parentName:"p"},"before")," anyone else? With DataHub Cloud ",(0,n.yg)("strong",{parentName:"p"},"Schema Assertions"),", you can."),(0,n.yg)("p",null,"DataHub Cloud allows users to define expectations about a table's columns and their data types, and will monitor and validate these expectations over\ntime, notifying you when a breaking change occurs."),(0,n.yg)("p",null,"In this article, we'll cover the basics of monitoring Schema Assertions - what they are, how to configure them, and more - so that you and your team can\nstart building trust in your most important data assets."),(0,n.yg)("p",null,"Let's get started!"),(0,n.yg)("h2",{id:"support"},"Support"),(0,n.yg)("p",null,"Schema Assertions are currently supported for all data sources that provide a schema via the normal ingestion process."),(0,n.yg)("h2",{id:"what-is-a-schema-assertion"},"What is a Schema Assertion?"),(0,n.yg)("p",null,"A ",(0,n.yg)("strong",{parentName:"p"},"Schema Assertion"),' is a Data Quality rule used to monitor the columns in a particular table and their data types.\nThey allow you to define a set of "required" columns for the table along with their expected types, and then be notified\nif anything changes via a failing assertion.'),(0,n.yg)("p",null,"This type of assertion can be particularly useful if you want to monitor the structure of a table which is outside of your\ndirect control, for example the result of an ETL process from an upstream application or tables provided by a 3rd party data vendor. It\nallows you to get ahead of potentially breaking schema changes, by alerting you as soon as they occur, and before\nthey have a chance to negatively impact downstream assets."),(0,n.yg)("h3",{id:"anatomy-of-a-schema-assertion"},"Anatomy of a Schema Assertion"),(0,n.yg)("p",null,"At the most basic level, ",(0,n.yg)("strong",{parentName:"p"},"Schema Assertions")," consist of a few important parts:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"A ",(0,n.yg)("strong",{parentName:"li"},"Condition Type")),(0,n.yg)("li",{parentName:"ol"},"A set of ",(0,n.yg)("strong",{parentName:"li"},"Expected Columns"))),(0,n.yg)("p",null,"In this section, we'll give an overview of each."),(0,n.yg)("h4",{id:"1-condition-type"},"1. Condition Type"),(0,n.yg)("p",null,"The ",(0,n.yg)("strong",{parentName:"p"},"Condition Type")," defines the conditions under which the Assertion will ",(0,n.yg)("strong",{parentName:"p"},"fail"),". More concretely, it determines\nhow the ",(0,n.yg)("em",{parentName:"p"},"expected")," columns should be compared to the ",(0,n.yg)("em",{parentName:"p"},"actual")," columns found in the schema to determine a passing or failing\nstate for the data quality check."),(0,n.yg)("p",null,"The list of supported condition types:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Contains"),": The assertion will fail if the actual schema does not contain all expected columns and their types."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Exact Match"),": The assertion will fail if the actual schema does not EXACTLY match the expected columns and their types. No\nadditional columns will be permitted.")),(0,n.yg)("p",null,"Schema Assertions will be evaluated whenever a change in the schema of the underlying table is detected.\nThey also have an off switch: they can be started or stopped at any time by pressing the start (play) or stop (pause) buttons."),(0,n.yg)("h4",{id:"2-expected-columns"},"2. Expected Columns"),(0,n.yg)("p",null,"The ",(0,n.yg)("strong",{parentName:"p"},"Expected Columns")," are a set of column ",(0,n.yg)("strong",{parentName:"p"},"names")," along with their high-level ",(0,n.yg)("strong",{parentName:"p"},"data\ntypes")," that should be used to compare against the ",(0,n.yg)("em",{parentName:"p"},"actual"),' columns found in the table. By default, the expected column\nset will be derived from the current set of columns found in the table. This conveniently allows you to "freeze" or "lock"\nthe current schema of a table in just a few clicks.'),(0,n.yg)("p",null,'Each "expected column" is composed of a'),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Name"),": The name of the column that should be present in the table. Nested columns are supported in a flattened\nfashion by simply providing a dot-separated path to the nested column. For example, ",(0,n.yg)("inlineCode",{parentName:"p"},"user.id")," would be a nested column ",(0,n.yg)("inlineCode",{parentName:"p"},"id"),".\nIn the case of a complex array or map, each field in the elements of the array or map will be treated as dot-delimited columns.\nNote that verifying the specific type of object in primitive arrays or maps is not currently supported. Note that the comparison performed\nis currently not case-sensitive.")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Type"),': The high-level data type of the column in the table. This type intentionally "high level" to allow for normal column widening practices\nwithout the risk of failing the assertion unnecessarily. For example a ',(0,n.yg)("inlineCode",{parentName:"p"},"varchar(64)")," and a ",(0,n.yg)("inlineCode",{parentName:"p"},"varchar(256)"),' will both resolve to the same high-level\n"STRING" type. The currently supported set of data types include the following:'),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"String"),(0,n.yg)("li",{parentName:"ul"},"Number"),(0,n.yg)("li",{parentName:"ul"},"Boolean"),(0,n.yg)("li",{parentName:"ul"},"Date"),(0,n.yg)("li",{parentName:"ul"},"Timestamp"),(0,n.yg)("li",{parentName:"ul"},"Struct"),(0,n.yg)("li",{parentName:"ul"},"Array"),(0,n.yg)("li",{parentName:"ul"},"Map"),(0,n.yg)("li",{parentName:"ul"},"Union"),(0,n.yg)("li",{parentName:"ul"},"Bytes"),(0,n.yg)("li",{parentName:"ul"},"Enum")))),(0,n.yg)("h2",{id:"creating-a-schema-assertion"},"Creating a Schema Assertion"),(0,n.yg)("h3",{id:"prerequisites"},"Prerequisites"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Permissions"),": To create or delete Schema Assertions for a specific entity on DataHub, you'll need to be granted the\n",(0,n.yg)("inlineCode",{parentName:"li"},"Edit Assertions"),", ",(0,n.yg)("inlineCode",{parentName:"li"},"Edit Monitors")," privileges for the entity. This will be granted to Entity owners as part of the ",(0,n.yg)("inlineCode",{parentName:"li"},"Asset Owners - Metadata Policy"),"\nby default.")),(0,n.yg)("p",null,"Once these are in place, you're ready to create your Schema Assertions!"),(0,n.yg)("h3",{id:"steps"},"Steps"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"Navigate to the Table you want to monitor"),(0,n.yg)("li",{parentName:"ol"},"Click the ",(0,n.yg)("strong",{parentName:"li"},"Validations")," tab")),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"80%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/freshness/profile-validation-tab.png"})),(0,n.yg)("ol",{start:3},(0,n.yg)("li",{parentName:"ol"},"Click ",(0,n.yg)("strong",{parentName:"li"},"+ Create Assertion"))),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"45%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/schema/assertion-builder-choose-type.png"})),(0,n.yg)("ol",{start:4},(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Choose ",(0,n.yg)("strong",{parentName:"p"},"Schema"))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Select the ",(0,n.yg)("strong",{parentName:"p"},"condition type"),".")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Define the ",(0,n.yg)("strong",{parentName:"p"},"expected columns")," that will be continually compared against the actual column set. This defaults to the current columns for the table."))),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"40%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/schema/assertion-builder-config.png"})),(0,n.yg)("ol",{start:7},(0,n.yg)("li",{parentName:"ol"},"Configure actions that should be taken when the assertion passes or fails")),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"40%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/shared/assertion-builder-actions.png"})),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Raise incident"),": Automatically raise a new DataHub Incident for the Table whenever the Custom SQL Assertion is failing. This\nmay indicate that the Table is unfit for consumption. Configure Slack Notifications under ",(0,n.yg)("strong",{parentName:"p"},"Settings")," to be notified when\nan incident is created due to an Assertion failure.")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Resolve incident"),": Automatically resolved any incidents that were raised due to failures in this Custom SQL Assertion. Note that\nany other incidents will not be impacted."))),(0,n.yg)("p",null,"Then click ",(0,n.yg)("strong",{parentName:"p"},"Next"),"."),(0,n.yg)("ol",{start:7},(0,n.yg)("li",{parentName:"ol"},"(Optional) Add a ",(0,n.yg)("strong",{parentName:"li"},"description")," for the assertion. This is a human-readable description of the assertion. If you do not provide one, a description will be generated for you.")),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"40%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/shared/assertion-builder-description.png"})),(0,n.yg)("ol",{start:8},(0,n.yg)("li",{parentName:"ol"},"Click ",(0,n.yg)("strong",{parentName:"li"},"Save"),".")),(0,n.yg)("p",null,"And that's it! DataHub will now begin to monitor your Schema Assertion for the table."),(0,n.yg)("p",null,"Once your assertion has run, you will begin to see Success or Failure status:"),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"45%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/schema/assertion-results.png"})),(0,n.yg)("h2",{id:"stopping-a-schema-assertion"},"Stopping a Schema Assertion"),(0,n.yg)("p",null,"In order to temporarily stop the evaluation of the assertion:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"Navigate to the ",(0,n.yg)("strong",{parentName:"li"},"Validations")," tab of the Table with the assertion"),(0,n.yg)("li",{parentName:"ol"},"Click ",(0,n.yg)("strong",{parentName:"li"},"Schema")," to open the Schema Assertion"),(0,n.yg)("li",{parentName:"ol"},'Click the "Stop" button.')),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"25%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/shared/stop-assertion.png"})),(0,n.yg)("p",null,"To resume the assertion, simply click ",(0,n.yg)("strong",{parentName:"p"},"Start"),"."),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"25%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/shared/start-assertion.png"})),(0,n.yg)("h2",{id:"creating-schema-assertions-via-api"},"Creating Schema Assertions via API"),(0,n.yg)("p",null,"Note that to create or delete Assertions and Monitors for a specific entity on DataHub, you'll need the\n",(0,n.yg)("inlineCode",{parentName:"p"},"Edit Assertions")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"Edit Monitors")," privileges to create schema assertion via API."),(0,n.yg)("h4",{id:"graphql"},"GraphQL"),(0,n.yg)("p",null,"In order to create a Schema Assertions, you can use the ",(0,n.yg)("inlineCode",{parentName:"p"},"upsertDatasetSchemaAssertionMonitor")," mutation."),(0,n.yg)("h5",{id:"examples"},"Examples"),(0,n.yg)("p",null,"To create a Schema Assertion that checks for a the presence of a specific set of columns:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation upsertDatasetSchemaAssertionMonitor {\n  upsertDatasetSchemaAssertionMonitor(\n    input: {\n      entityUrn: "<urn of the table to be monitored>"\n      assertion: {\n        compatibility: SUPERSET # How the actual columns will be compared against the expected fields (provided next)\n        fields: [\n          { path: "id", type: STRING }\n          { path: "count", type: NUMBER }\n          { path: "struct", type: STRUCT }\n          { path: "struct.nestedBooleanField", type: BOOLEAN }\n        ]\n      }\n      description: "<description of the schema assertion>"\n      mode: ACTIVE\n    }\n  )\n}\n')),(0,n.yg)("p",null,"The supported compatibility types are ",(0,n.yg)("inlineCode",{parentName:"p"},"EXACT_MATCH")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"SUPERSET")," (Contains)."),(0,n.yg)("p",null,"You can use same endpoint with assertion urn input to update an existing Schema Assertion, simply add the ",(0,n.yg)("inlineCode",{parentName:"p"},"assertionUrn")," field:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation upsertDatasetSchemaAssertionMonitor {\n  upsertDatasetSchemaAssertionMonitor(\n    assertionUrn: "urn:li:assertion:existing-assertion-id"\n    input: {\n      entityUrn: "<urn of the table to be monitored>"\n      assertion: {\n        compatibility: EXACT_MATCH\n        fields: [\n          { path: "id", type: STRING }\n          { path: "count", type: NUMBER }\n          { path: "struct", type: STRUCT }\n          { path: "struct.nestedBooleanField", type: BOOLEAN }\n        ]\n      }\n      description: "<description of the schema assertion>"\n      mode: ACTIVE\n    }\n  )\n}\n')),(0,n.yg)("p",null,"You can delete assertions along with their monitors using GraphQL mutations: ",(0,n.yg)("inlineCode",{parentName:"p"},"deleteAssertion")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"deleteMonitor"),"."),(0,n.yg)("h3",{id:"tips"},"Tips"),(0,n.yg)("admonition",{type:"info"},(0,n.yg)("p",{parentName:"admonition"},(0,n.yg)("strong",{parentName:"p"},"Authorization")),(0,n.yg)("p",{parentName:"admonition"},"Remember to always provide a DataHub Personal Access Token when calling the GraphQL API. To do so, just add the 'Authorization' header as follows:"),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",{parentName:"pre"},"Authorization: Bearer <personal-access-token>\n")),(0,n.yg)("p",{parentName:"admonition"},(0,n.yg)("strong",{parentName:"p"},"Exploring GraphQL API")),(0,n.yg)("p",{parentName:"admonition"},"Also, remember that you can play with an interactive version of the DataHub Cloud GraphQL API at ",(0,n.yg)("inlineCode",{parentName:"p"},"https://your-account-id.acryl.io/api/graphiql"))))}g.isMDXComponent=!0}}]);