"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[39328],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>c});var a=n(96540);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},y="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),y=p(n),g=l,c=y["".concat(s,".").concat(g)]||y[g]||m[g]||i;return n?a.createElement(c,r(r({ref:t},u),{},{components:n})):a.createElement(c,r({ref:t},u))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[y]="string"==typeof e?e:l,r[1]=o;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},95639:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>y});n(96540);var a=n(15680);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function r(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}const o={title:"CLAUDE.md",slug:"/datahub-web-react/claude",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/datahub-web-react/CLAUDE.md"},s="CLAUDE.md",p={unversionedId:"datahub-web-react/CLAUDE",id:"datahub-web-react/CLAUDE",title:"CLAUDE.md",description:"This file provides guidance to Claude Code (claude.ai/code) when working with code in this directory.",source:"@site/genDocs/datahub-web-react/CLAUDE.md",sourceDirName:"datahub-web-react",slug:"/datahub-web-react/claude",permalink:"/docs/datahub-web-react/claude",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/datahub-web-react/CLAUDE.md",tags:[],version:"current",frontMatter:{title:"CLAUDE.md",slug:"/datahub-web-react/claude",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/datahub-web-react/CLAUDE.md"}},u={},y=[{value:"Style Guide",id:"style-guide",level:2},{value:"File Structure",id:"file-structure",level:3},{value:"Component Library",id:"component-library",level:3},{value:"Code Structure",id:"code-structure",level:3},{value:"Code Conventions",id:"code-conventions",level:3},{value:"Code Style",id:"code-style",level:3},{value:"Development Commands",id:"development-commands",level:2},{value:"Setup and Dependencies",id:"setup-and-dependencies",level:3},{value:"Running the Service",id:"running-the-service",level:3},{value:"Testing and Code Quality",id:"testing-and-code-quality",level:3},{value:"Writing Tests - Best Practices &amp; Common Pitfalls",id:"writing-tests---best-practices--common-pitfalls",level:2},{value:"Test Setup Essentials",id:"test-setup-essentials",level:3}],m={toc:y},g="wrapper";function c(e){var{components:t}=e,n=r(e,["components"]);return(0,a.yg)(g,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){l(e,t,n[t])}))}return e}({},m,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"claudemd"},"CLAUDE.md"),(0,a.yg)("p",null,"This file provides guidance to Claude Code (claude.ai/code) when working with code in this directory.\nIt also contains our style guide, which can be consumed by engineers."),(0,a.yg)("h2",{id:"style-guide"},"Style Guide"),(0,a.yg)("h3",{id:"file-structure"},"File Structure"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"What should our top-level folders be?",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"app"),": components that implement the entire application",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Based on nav page"),(0,a.yg)("li",{parentName:"ul"},"Each new high-level page gets a new top-level folder"),(0,a.yg)("li",{parentName:"ul"},"Nested pages are within the same top-level folder"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"graphql"),": graphql files and generated types"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"images"),": all custom images"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"conf")," / ",(0,a.yg)("inlineCode",{parentName:"li"},"fonts")," / ",(0,a.yg)("inlineCode",{parentName:"li"},"providers")," / ",(0,a.yg)("inlineCode",{parentName:"li"},"utils"),": do we need these?"),(0,a.yg)("li",{parentName:"ul"},"When do we create a new one?"))),(0,a.yg)("li",{parentName:"ul"},"What to put in ",(0,a.yg)("inlineCode",{parentName:"li"},"index.ts(x)"),"?",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Do not create these files"))),(0,a.yg)("li",{parentName:"ul"},"Where to put tests?",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"In ",(0,a.yg)("inlineCode",{parentName:"li"},"__tests__/")," in the same directory as the file"),(0,a.yg)("li",{parentName:"ul"},"Named ",(0,a.yg)("inlineCode",{parentName:"li"},"OriginalFile.test.ts(x)")))),(0,a.yg)("li",{parentName:"ul"},"Where to put utils?",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"For utils used in a single file: ",(0,a.yg)("inlineCode",{parentName:"li"},"SourceFile.utils.ts")),(0,a.yg)("li",{parentName:"ul"},"For utils used in a folder: ",(0,a.yg)("inlineCode",{parentName:"li"},"folderName/folderName.utils.ts")))),(0,a.yg)("li",{parentName:"ul"},"Where to put hooks?",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"For helper hooks used in a single file: ",(0,a.yg)("inlineCode",{parentName:"li"},"SourceFile.hooks.ts(x)")),(0,a.yg)("li",{parentName:"ul"},"For standalone, reusable hooks: ",(0,a.yg)("inlineCode",{parentName:"li"},"hookName.ts(x)")),(0,a.yg)("li",{parentName:"ul"},"Try not to write hooks that generate JSX, but sometimes it may make sense"))),(0,a.yg)("li",{parentName:"ul"},"Where to put types?",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Types only used once should be in the same file where they\u2019re used"),(0,a.yg)("li",{parentName:"ul"},"Shared types go in ",(0,a.yg)("inlineCode",{parentName:"li"},"folderName/folderName.types.ts")))),(0,a.yg)("li",{parentName:"ul"},"Where to put helper components?",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"If the component is only used once and is small: ",(0,a.yg)("inlineCode",{parentName:"li"},"parent/SourceFile.components.tsx"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"e.g. ",(0,a.yg)("inlineCode",{parentName:"li"},"search/SearchPage.components.tsx")))),(0,a.yg)("li",{parentName:"ul"},"If a component is shared / large and doesn\u2019t have its own children: ",(0,a.yg)("inlineCode",{parentName:"li"},"parent/NewComponent.tsx"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"e.g. ",(0,a.yg)("inlineCode",{parentName:"li"},"search/SearchPageHeader.tsx")))),(0,a.yg)("li",{parentName:"ul"},"If the component has its own child components, put it in a new folder:",(0,a.yg)("inlineCode",{parentName:"li"},"parent/NewComponent/NewComponent.tsx"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"e.g. ",(0,a.yg)("inlineCode",{parentName:"li"},"search/SearchCard/SearchCard.tsx"))))))),(0,a.yg)("h3",{id:"component-library"},"Component Library"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"What is an DataHub component? (previously: alchemy component)",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Can be reused anywhere in the app"),(0,a.yg)("li",{parentName:"ul"},"Generalized",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Doesn\u2019t depend on our aspect / data structure"),(0,a.yg)("li",{parentName:"ul"},"Doesn\u2019t depend on graphql types"))))),(0,a.yg)("li",{parentName:"ul"},"Where do reusable non-DataHub components go?",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"e.g. ",(0,a.yg)("inlineCode",{parentName:"li"},"EntityHealth")," icon, ",(0,a.yg)("inlineCode",{parentName:"li"},"HoverEntityTooltip"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Can be reused anywhere within the web app"),(0,a.yg)("li",{parentName:"ul"},"Not general: can take in very DataHub/gms specific inputs, e.g. graphql types"))),(0,a.yg)("li",{parentName:"ul"},"shared/",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"components/",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"entity/",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"entity.types.ts")),(0,a.yg)("li",{parentName:"ul"},"health/",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"EntityHealth")))),(0,a.yg)("li",{parentName:"ul"},"tooltip",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"HoverEntityTooltip")))))),(0,a.yg)("li",{parentName:"ul"},"button/",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"DownloadSearchResultsButton")))))),(0,a.yg)("li",{parentName:"ul"},"hooks/"),(0,a.yg)("li",{parentName:"ul"},"utils/")))))),(0,a.yg)("h3",{id:"code-structure"},"Code Structure"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"When to break into a new component?",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"We should err on the side of more and smaller components (files)")),(0,a.yg)("li",{parentName:"ul"},"When JSX is getting too large or complex"),(0,a.yg)("li",{parentName:"ul"},"Any logical or reusable chunk"))),(0,a.yg)("li",{parentName:"ul"},"When to break into a hook?",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"When a component\u2019s logic is getting too large or complex"),(0,a.yg)("li",{parentName:"ul"},"Any logical or reusable chunk of logic"))),(0,a.yg)("li",{parentName:"ul"},"When to use a React context vs passing props?",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("em",{parentName:"li"},"Err on the side of not creating contexts \u2014 only add when necessary")),(0,a.yg)("li",{parentName:"ul"},"Globally: use a context when we want values available globally, e.g. ",(0,a.yg)("inlineCode",{parentName:"li"},"AppContext")," or ",(0,a.yg)("inlineCode",{parentName:"li"},"UserContext")),(0,a.yg)("li",{parentName:"ul"},"Low-level, small-scope: use a tightly-defined context for a small, self-contained set of files",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"folder/<Folder>Context.ts"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Contains type, default value, helper hooks"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"folder/<Folder>ContextProvider.tsx"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Contains just the provider"))))),(0,a.yg)("li",{parentName:"ul"},"TBD: How to handle contexts for entity components?",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"shared/entity/EntityContext.tsx"),"?"))))),(0,a.yg)("li",{parentName:"ul"},"How to pass props?",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"For small amount of props, can use individual values"),(0,a.yg)("li",{parentName:"ul"},"When props gets larger, try to break into logical pieces",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"e.g. ",(0,a.yg)("inlineCode",{parentName:"li"},"entityData")," rather than individual props for each aspect of the entity"))),(0,a.yg)("li",{parentName:"ul"},"For components reused between OSS and SaaS:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"SaaS-only props should go in a single field: ",(0,a.yg)("inlineCode",{parentName:"li"},"acrylProps: { ... }")))))),(0,a.yg)("li",{parentName:"ul"},"Component file sections:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Imports"),(0,a.yg)("li",{parentName:"ul"},"Constants (in SNAKE_CASE)"),(0,a.yg)("li",{parentName:"ul"},"Styled components"),(0,a.yg)("li",{parentName:"ul"},"Props"),(0,a.yg)("li",{parentName:"ul"},"Main component")))),(0,a.yg)("h3",{id:"code-conventions"},"Code Conventions"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"How to pass styles to a component?",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Use styled components for any simple components"),(0,a.yg)("li",{parentName:"ul"},"For custom components (e.g. our DataHub components), take ",(0,a.yg)("inlineCode",{parentName:"li"},"className")," in as a prop and pass it to the top-level element \u2014 whatever it makes sense for custom styles to be applied to",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"This allows us to pass styles by styled component inheritance",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"e.g. if there\u2019s a custom component ",(0,a.yg)("inlineCode",{parentName:"li"},"Button"),", this allows us to define ",(0,a.yg)("inlineCode",{parentName:"li"},"const CustomButton = styled(Button)")))))),(0,a.yg)("li",{parentName:"ul"},"If there are multiple elements for which custom styles can be applied, non-top-level ones should be passed as a CSSProperties prop, with a specific name, e.g. ",(0,a.yg)("inlineCode",{parentName:"li"},"textStyle")," or ",(0,a.yg)("inlineCode",{parentName:"li"},"buttonStyle")))),(0,a.yg)("li",{parentName:"ul"},"How to handle images and icons",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"For component library icons, use ",(0,a.yg)("inlineCode",{parentName:"li"},"<Icon>")," DataHub component and specify color and size via props",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"If size is not known, use ",(0,a.yg)("inlineCode",{parentName:"li"},'size="inherit"')," and set ",(0,a.yg)("inlineCode",{parentName:"li"},"font-size")," in parent div"),(0,a.yg)("li",{parentName:"ul"},"Always use phosphor icons \u2014 ant and material ui icons are deprecated"))),(0,a.yg)("li",{parentName:"ul"},"For custom images, use ",(0,a.yg)("inlineCode",{parentName:"li"},"<Image>")," (once it\u2019s built) and specify color and size via props",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"For svgs, in svg definition, set ",(0,a.yg)("inlineCode",{parentName:"li"},'fill="currentColor"')," and then \u2026 TODO"),(0,a.yg)("li",{parentName:"ul"},"Alt text should be a required field"))))),(0,a.yg)("li",{parentName:"ul"},"How to do theming?",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Use ",(0,a.yg)("inlineCode",{parentName:"li"},"styled-components")," theming, with stringed css rather than object css"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"React Components"),": Use TypeScript interfaces for props instead of PropTypes (which are deprecated)")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-jsx"},"// YES\nstyled.div`\n    border-radius: 2px;\n`;\n\n// NO\nstyled.div({ borderRadius: '2px' });\n")),(0,a.yg)("h3",{id:"code-style"},"Code Style"),(0,a.yg)("p",null,(0,a.yg)("em",{parentName:"p"},"Mostly handled by linter and formatter (prettier). Mostly unimportant changes that we should be consistent on to improve readability.")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Functions vs lambdas",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Top-level, prefer named functions (",(0,a.yg)("inlineCode",{parentName:"li"},"export default function f() { }"),")"),(0,a.yg)("li",{parentName:"ul"},"Nested, use lambdas (",(0,a.yg)("inlineCode",{parentName:"li"},"const onClick = () => { }"),")"))),(0,a.yg)("li",{parentName:"ul"},"Prefer ",(0,a.yg)("inlineCode",{parentName:"li"},"type")," over ",(0,a.yg)("inlineCode",{parentName:"li"},"interface")," (except when using classes)"),(0,a.yg)("li",{parentName:"ul"},"When to omit types",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"For variables, do not need to specify"),(0,a.yg)("li",{parentName:"ul"},"For function signatures, try to specify, unless it\u2019s too difficult. In that case, prefer inferred typing over ",(0,a.yg)("inlineCode",{parentName:"li"},"any")),(0,a.yg)("li",{parentName:"ul"},"Prefer a mapper function over unsafe type casting",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"If you must cast types, do so as early (high) as possible"))))),(0,a.yg)("li",{parentName:"ul"},"Prefer destructuring over dot notation, but use your own intuition",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"When accessing arrays, always option chain (i.e. ",(0,a.yg)("inlineCode",{parentName:"li"},"x?.[0]"),")"))),(0,a.yg)("li",{parentName:"ul"},"When to optional chain",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"If it type checks, it should be fine, except for the array access case above"))),(0,a.yg)("li",{parentName:"ul"},"Prefer direct imports, e.g. ",(0,a.yg)("inlineCode",{parentName:"li"},"import React, { useState } from 'react'")," over ",(0,a.yg)("inlineCode",{parentName:"li"},"React.useState"))),(0,a.yg)("h2",{id:"development-commands"},"Development Commands"),(0,a.yg)("h3",{id:"setup-and-dependencies"},"Setup and Dependencies"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"# Install dependencies and set up dev environment\n# Update dependencies after changes to package.json\n../gradlew yarnInstall\n")),(0,a.yg)("h3",{id:"running-the-service"},"Running the Service"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'# Local development on localhost:3000 (with hot reload)\n../gradlew yarnServe\n\n# Development with remote GMS (e.g., dev01)\n../gradlew yarnPreview -Pproxy="<remote-instance-url>"\n# e.g. ../gradlew yarnPreview -Pproxy="https://dev01.acryl.io/"\n')),(0,a.yg)("h3",{id:"testing-and-code-quality"},"Testing and Code Quality"),(0,a.yg)("p",null,"Run formatting / linting / type checking / relevant tests after all changes"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"# Generate ts files based on graphql\nyarn generate\n\n# Run formatting\nyarn format\n\n# Run linting on all files\n../gradlew yarnLint\n\n# Run lint-fix on a single file\n../gradlew -x yarnInstall -x yarnGenerate yarnLintFix -Pfile=src/path/to/file.tsx\n\n# Run linting on a single file\n# This does not run full type-check when we run for a single file\n# that should be run at the end of all changes before commit\n../gradlew -x yarnInstall -x yarnGenerate yarnLint -Pfile=src/path/to/file.tsx\n\n# Run lint-fix on all files\n../gradlew yarnLintFix\n\n# Run type checking\nyarn type-check\n\n# Run tests\nyarn test\n\n# Run specific test file\nyarn test path/to/file.test.tsx --run\n")),(0,a.yg)("h2",{id:"writing-tests---best-practices--common-pitfalls"},"Writing Tests - Best Practices & Common Pitfalls"),(0,a.yg)("h3",{id:"test-setup-essentials"},"Test Setup Essentials"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Always use the existing test infrastructure:")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Use ",(0,a.yg)("inlineCode",{parentName:"li"},"TestPageContainer")," from ",(0,a.yg)("inlineCode",{parentName:"li"},"@utils/test-utils/TestPageContainer")," - it provides all necessary providers"),(0,a.yg)("li",{parentName:"ul"},"Use ",(0,a.yg)("inlineCode",{parentName:"li"},"MockedProvider")," from ",(0,a.yg)("inlineCode",{parentName:"li"},"@apollo/client/testing")," for GraphQL components"),(0,a.yg)("li",{parentName:"ul"},"Use Vitest with React Testing Library")))}c.isMDXComponent=!0}}]);