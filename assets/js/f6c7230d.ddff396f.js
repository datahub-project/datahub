"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[61288],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>h});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),g=s(t),d=r,h=g["".concat(l,".").concat(d)]||g[d]||c[d]||i;return t?a.createElement(h,o(o({ref:n},u),{},{components:t})):a.createElement(h,o({ref:n},u))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[g]="string"==typeof e?e:r,o[1]=p;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},37069:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>p,metadata:()=>s,toc:()=>g});t(96540);var a=t(15680);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const p={title:"OpenLineage",slug:"/lineage/openlineage",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/lineage/openlineage.md"},l="OpenLineage",s={unversionedId:"docs/lineage/openlineage",id:"version-1.1.0/docs/lineage/openlineage",title:"OpenLineage",description:"DataHub, now supports OpenLineage integration. With this support, DataHub can ingest and display lineage information from various data processing frameworks, providing users with a comprehensive understanding of their data pipelines.",source:"@site/versioned_docs/version-1.1.0/docs/lineage/openlineage.md",sourceDirName:"docs/lineage",slug:"/lineage/openlineage",permalink:"/docs/1.1.0/lineage/openlineage",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/lineage/openlineage.md",tags:[],version:"1.1.0",frontMatter:{title:"OpenLineage",slug:"/lineage/openlineage",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/lineage/openlineage.md"},sidebar:"overviewSidebar",previous:{title:"Iceberg Catalog",permalink:"/docs/1.1.0/iceberg-catalog"},next:{title:"APIs",permalink:"/docs/1.1.0/api/datahub-apis"}},u={},g=[{value:"Features",id:"features",level:2},{value:"OpenLineage Support with DataHub",id:"openlineage-support-with-datahub",level:2},{value:"1. REST Endpoint Support",id:"1-rest-endpoint-support",level:3},{value:"How to Use",id:"how-to-use",level:4},{value:"How to set up Airflow",id:"how-to-set-up-airflow",level:5},{value:"Known Limitations",id:"known-limitations",level:4},{value:"2. Spark Event Listener Plugin",id:"2-spark-event-listener-plugin",level:3},{value:"How to Use",id:"how-to-use-1",level:4},{value:"References",id:"references",level:2}],c={toc:g},d="wrapper";function h(e){var{components:n}=e,t=o(e,["components"]);return(0,a.yg)(d,i(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){r(e,n,t[n])}))}return e}({},c,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"openlineage"},"OpenLineage"),(0,a.yg)("p",null,"DataHub, now supports ",(0,a.yg)("a",{parentName:"p",href:"https://openlineage.io/"},"OpenLineage")," integration. With this support, DataHub can ingest and display lineage information from various data processing frameworks, providing users with a comprehensive understanding of their data pipelines."),(0,a.yg)("h2",{id:"features"},"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"REST Endpoint Support"),": DataHub now includes a REST endpoint that can understand OpenLineage events. This allows users to send lineage information directly to DataHub, enabling easy integration with various data processing frameworks.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},(0,a.yg)("a",{parentName:"strong",href:"/docs/metadata-integration/java/acryl-spark-lineage"},"Spark Event Listener Plugin")),": DataHub provides a Spark Event Listener plugin that seamlessly integrates OpenLineage's Spark plugin. This plugin enhances DataHub's OpenLineage support by offering additional features such as PathSpec support, column-level lineage, patch support and more."))),(0,a.yg)("h2",{id:"openlineage-support-with-datahub"},"OpenLineage Support with DataHub"),(0,a.yg)("h3",{id:"1-rest-endpoint-support"},"1. REST Endpoint Support"),(0,a.yg)("p",null,"DataHub's REST endpoint allows users to send OpenLineage events directly to DataHub. This enables easy integration with various data processing frameworks, providing users with a centralized location for viewing and managing data lineage information."),(0,a.yg)("p",null,"With Spark and Airflow we recommend using the Spark Lineage or DataHub's Airflow plugin for tighter integration with DataHub."),(0,a.yg)("h4",{id:"how-to-use"},"How to Use"),(0,a.yg)("p",null,"To send OpenLineage messages to DataHub using the REST endpoint, simply make a POST request to the following endpoint:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"POST GMS_SERVER_HOST:GMS_PORT/api/v2/lineage\n")),(0,a.yg)("p",null,"Include the OpenLineage message in the request body in JSON format."),(0,a.yg)("p",null,"Example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "eventType": "START",\n  "eventTime": "2020-12-28T19:52:00.001+10:00",\n  "run": {\n    "runId": "d46e465b-d358-4d32-83d4-df660ff614dd"\n  },\n  "job": {\n    "namespace": "workshop",\n    "name": "process_taxes"\n  },\n  "inputs": [\n    {\n      "namespace": "postgres://workshop-db:None",\n      "name": "workshop.public.taxes",\n      "facets": {\n        "dataSource": {\n          "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.10.0/integration/airflow",\n          "_schemaURL": "https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/DataSourceDatasetFacet",\n          "name": "postgres://workshop-db:None",\n          "uri": "workshop-db"\n        }\n      }\n    }\n  ],\n  "producer": "https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/client"\n}\n')),(0,a.yg)("h5",{id:"how-to-set-up-airflow"},"How to set up Airflow"),(0,a.yg)("p",null,"Follow the Airflow guide to setup the Airflow DAGs to send lineage information to DataHub. The guide can be found ",(0,a.yg)("a",{parentName:"p",href:"https://airflow.apache.org/docs/apache-airflow-providers-openlineage/stable/guides/user.html"},"here"),".\nThe transport should look like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "http",\n  "url": "https://GMS_SERVER_HOST:GMS_PORT/openapi/openlineage/",\n  "endpoint": "api/v1/lineage",\n  "auth": {\n    "type": "api_key",\n    "api_key": "your-datahub-api-key"\n  }\n}\n')),(0,a.yg)("h4",{id:"known-limitations"},"Known Limitations"),(0,a.yg)("p",null,"With Spark and Airflow we recommend using the Spark Lineage or DataHub's Airflow plugin for tighter integration with DataHub."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},(0,a.yg)("a",{parentName:"strong",href:"/docs/metadata-integration/java/acryl-spark-lineage/#configuring-hdfs-based-dataset-urns"},"PathSpec")," Support"),": While the REST endpoint supports OpenLineage messages, full ",(0,a.yg)("a",{parentName:"li",href:"/docs/metadata-integration/java/acryl-spark-lineage/#configuring-hdfs-based-dataset-urns"},"PathSpec"),") support is not yet available in the OpenLineage endpoint but it is available in the DataHub Cloud Spark Plugin.")),(0,a.yg)("p",null,"etc..."),(0,a.yg)("h3",{id:"2-spark-event-listener-plugin"},"2. Spark Event Listener Plugin"),(0,a.yg)("p",null,"DataHub's Spark Event Listener plugin enhances OpenLineage support by providing additional features such as PathSpec support, column-level lineage, and more."),(0,a.yg)("h4",{id:"how-to-use-1"},"How to Use"),(0,a.yg)("p",null,"Follow the guides of the Spark Lineage plugin page for more information on how to set up the Spark Lineage plugin. The guide can be found ",(0,a.yg)("a",{parentName:"p",href:"/docs/metadata-integration/java/acryl-spark-lineage"},"here")),(0,a.yg)("h2",{id:"references"},"References"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://openlineage.io/"},"OpenLineage")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/docs/1.1.0/api/openapi/openapi-usage-guide"},"DataHub OpenAPI Guide")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/docs/metadata-integration/java/acryl-spark-lineage"},"DataHub Spark Lineage Plugin"))))}h.isMDXComponent=!0}}]);