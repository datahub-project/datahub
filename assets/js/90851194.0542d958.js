"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[16792],{4751:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>c,default:()=>f,frontMatter:()=>u,metadata:()=>p,toc:()=>d});t(96540);var a=t(15680),i=t(53720),s=t(5400);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}const u={title:"Subscriptions",slug:"/api/tutorials/subscriptions",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/subscriptions.md"},c="Subscriptions",p={unversionedId:"docs/api/tutorials/subscriptions",id:"docs/api/tutorials/subscriptions",title:"Subscriptions",description:"Why Would You Use Subscriptions on Datasets?",source:"@site/genDocs/docs/api/tutorials/subscriptions.md",sourceDirName:"docs/api/tutorials",slug:"/api/tutorials/subscriptions",permalink:"/docs/api/tutorials/subscriptions",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/subscriptions.md",tags:[],version:"current",frontMatter:{title:"Subscriptions",slug:"/api/tutorials/subscriptions",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/subscriptions.md"},sidebar:"overviewSidebar",previous:{title:"Structured Properties",permalink:"/docs/api/tutorials/structured-properties"},next:{title:"Tags",permalink:"/docs/api/tutorials/tags"}},g={},d=[{value:"Why Would You Use Subscriptions on Datasets?",id:"why-would-you-use-subscriptions-on-datasets",level:2},{value:"Goal Of This Guide",id:"goal-of-this-guide",level:3},{value:"Create Subscription",id:"create-subscription",level:2},{value:"Remove Subscription",id:"remove-subscription",level:2},{value:"Schema Changes",id:"schema-changes",level:4},{value:"Operational Metadata Changes",id:"operational-metadata-changes",level:4},{value:"Assertion Events",id:"assertion-events",level:4},{value:"Incident Status Changes",id:"incident-status-changes",level:4},{value:"Test Status Changes",id:"test-status-changes",level:4},{value:"Deprecation Status Changes",id:"deprecation-status-changes",level:4},{value:"Ingestion Status Changes",id:"ingestion-status-changes",level:4},{value:"Documentation Changes",id:"documentation-changes",level:4},{value:"Ownership Changes",id:"ownership-changes",level:4},{value:"Glossary Term Changes",id:"glossary-term-changes",level:4},{value:"Tag Changes",id:"tag-changes",level:4}],y=(h="FeatureAvailability",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",e)});var h;const m={toc:d},b="wrapper";function f(e){var{components:n}=e,t=l(e,["components"]);return(0,a.yg)(b,o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){r(e,n,t[n])}))}return e}({},m,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"subscriptions"},"Subscriptions"),(0,a.yg)(y,{saasOnly:!0,mdxType:"FeatureAvailability"}),(0,a.yg)("h2",{id:"why-would-you-use-subscriptions-on-datasets"},"Why Would You Use Subscriptions on Datasets?"),(0,a.yg)("p",null,"Subscriptions are a way to receive notifications when entity changes occur (e.g. deprecations, schema changes, ownership changes, etc.) or when assertions change state (pass, fail, or error). Subscriptions can be created at the dataset level (affecting any changes on the dataset, as well as all assertions on the dataset) or at the assertion level (affecting only specific assertions)."),(0,a.yg)("h3",{id:"goal-of-this-guide"},"Goal Of This Guide"),(0,a.yg)("p",null,"This guide specifically covers how to use the ",(0,a.yg)("a",{parentName:"p",href:"https://pypi.org/project/acryl-datahub-cloud/"},"DataHub Cloud Python SDK")," for managing Subscriptions:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Create: create a subscription to a dataset or assertion."),(0,a.yg)("li",{parentName:"ul"},"Remove: remove a subscription.")),(0,a.yg)("h1",{id:"prerequisites"},"Prerequisites"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"DataHub Cloud Python SDK installed (",(0,a.yg)("inlineCode",{parentName:"li"},"pip install acryl-datahub-cloud"),")"),(0,a.yg)("li",{parentName:"ul"},"The actor making API calls must have the ",(0,a.yg)("inlineCode",{parentName:"li"},"Manage User Subscriptions")," privilege for the datasets at hand."),(0,a.yg)("li",{parentName:"ul"},"If subscribing to a group, the actor should also be a member of the group.")),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Before creating subscriptions, you need to ensure the target datasets and groups are already present in your DataHub instance.\nIf you attempt to create subscriptions for entities that do not exist, GMS will continuously report errors to the logs.")),(0,a.yg)("h2",{id:"create-subscription"},"Create Subscription"),(0,a.yg)("p",null,"You can create subscriptions to receive notifications when assertions change state (pass, fail, or error) or when other entity changes occur. Subscriptions can be created at the dataset level (affecting any changes on the dataset, as well as all assertions on the dataset) or at the assertion level (affecting only specific assertions)."),(0,a.yg)(i.A,{mdxType:"Tabs"},(0,a.yg)(s.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/subscription_create.py\nimport logging\n\nfrom datahub.sdk import DataHubClient\n\nlog = logging.getLogger(__name__)\n\n# Initialize the client\nclient = DataHubClient.from_env()\n\n# Subscribe to all assertion changes for a dataset\nclient.subscriptions.subscribe(\n    urn="urn:li:dataset:(urn:li:dataPlatform:snowflake,purchases,PROD)",\n    subscriber_urn="urn:li:corpuser:john.doe",\n    # entity_change_types defaults to all available change types for datasets\n)\nlog.info("Successfully subscribed to dataset notifications")\n\n# Subscribe to specific assertion changes\nclient.subscriptions.subscribe(\n    urn="urn:li:assertion:your-assertion-id",\n    subscriber_urn="urn:li:corpuser:john.doe",\n    entity_change_types=["ASSERTION_PASSED", "ASSERTION_FAILED"],\n)\nlog.info("Successfully subscribed to specific assertion changes")\n\n# Subscribe a group to assertion changes\nclient.subscriptions.subscribe(\n    urn="urn:li:assertion:your-assertion-id",\n    subscriber_urn="urn:li:corpGroup:data-team",\n    entity_change_types=["ASSERTION_FAILED", "ASSERTION_ERROR"],\n)\nlog.info("Successfully subscribed group to assertion failures and errors")\n\n')))),(0,a.yg)("h2",{id:"remove-subscription"},"Remove Subscription"),(0,a.yg)("p",null,"You can remove existing subscriptions to stop receiving notifications. The unsubscribe method supports selective removal of specific change types or complete removal of subscriptions."),(0,a.yg)(i.A,{mdxType:"Tabs"},(0,a.yg)(s.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/subscription_remove.py\nimport logging\n\nfrom datahub.sdk import DataHubClient\n\nlog = logging.getLogger(__name__)\n\n# Initialize the client\nclient = DataHubClient(\n    server="https://your-datahub-cloud-instance.com", token="your-token"\n)\n\n# Unsubscribe from all changes for a dataset\nclient.subscriptions.unsubscribe(\n    urn="urn:li:dataset:(urn:li:dataPlatform:snowflake,purchases,PROD)",\n    subscriber_urn="urn:li:corpuser:john.doe",\n    # entity_change_types defaults to all existing change types\n)\nlog.info("Successfully unsubscribed from all dataset notifications")\n\n# Unsubscribe from specific assertion change types\nclient.subscriptions.unsubscribe(\n    urn="urn:li:assertion:your-assertion-id",\n    subscriber_urn="urn:li:corpuser:john.doe",\n    entity_change_types=[\n        "ASSERTION_PASSED"\n    ],  # Keep ASSERTION_FAILED and ASSERTION_ERROR\n)\nlog.info("Successfully unsubscribed from specific assertion change types")\n\n# Unsubscribe a group from assertion changes\nclient.subscriptions.unsubscribe(\n    urn="urn:li:assertion:your-assertion-id",\n    subscriber_urn="urn:li:corpGroup:data-team",\n    entity_change_types=["ASSERTION_FAILED", "ASSERTION_ERROR"],\n)\nlog.info("Successfully unsubscribed group from assertion notifications")\n\n')))),(0,a.yg)("h1",{id:"available-change-types"},"Available Change Types"),(0,a.yg)("p",null,"The following change types are available for subscriptions:"),(0,a.yg)("h4",{id:"schema-changes"},"Schema Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"OPERATION_COLUMN_ADDED")," - When a new column is added to a dataset"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"OPERATION_COLUMN_REMOVED")," - When a column is removed from a dataset"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"OPERATION_COLUMN_MODIFIED")," - When an existing column is modified")),(0,a.yg)("h4",{id:"operational-metadata-changes"},"Operational Metadata Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"OPERATION_ROWS_INSERTED")," - When rows are inserted into a dataset"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"OPERATION_ROWS_UPDATED")," - When rows are updated in a dataset"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"OPERATION_ROWS_REMOVED")," - When rows are removed from a dataset")),(0,a.yg)("h4",{id:"assertion-events"},"Assertion Events"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"ASSERTION_PASSED")," - When an assertion run passes"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"ASSERTION_FAILED")," - When an assertion run fails"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"ASSERTION_ERROR")," - When an assertion run encounters an error")),(0,a.yg)("h4",{id:"incident-status-changes"},"Incident Status Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"INCIDENT_RAISED")," - When a new incident is raised"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"INCIDENT_RESOLVED")," - When an incident is resolved")),(0,a.yg)("h4",{id:"test-status-changes"},"Test Status Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"TEST_PASSED")," - When a test passes"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"TEST_FAILED")," - When a test fails")),(0,a.yg)("h4",{id:"deprecation-status-changes"},"Deprecation Status Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"DEPRECATED")," - When an entity is marked as deprecated"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"UNDEPRECATED")," - When an entity's deprecation status is removed")),(0,a.yg)("h4",{id:"ingestion-status-changes"},"Ingestion Status Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"INGESTION_SUCCEEDED")," - When ingestion completes successfully"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"INGESTION_FAILED")," - When ingestion fails")),(0,a.yg)("h4",{id:"documentation-changes"},"Documentation Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"DOCUMENTATION_CHANGE")," - When documentation is modified")),(0,a.yg)("h4",{id:"ownership-changes"},"Ownership Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"OWNER_ADDED")," - When an owner is added to an entity"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"OWNER_REMOVED")," - When an owner is removed from an entity")),(0,a.yg)("h4",{id:"glossary-term-changes"},"Glossary Term Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"GLOSSARY_TERM_ADDED")," - When a glossary term is added to an entity"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"GLOSSARY_TERM_REMOVED")," - When a glossary term is removed from an entity"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"GLOSSARY_TERM_PROPOSED")," - When a glossary term is proposed for an entity")),(0,a.yg)("h4",{id:"tag-changes"},"Tag Changes"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"TAG_ADDED")," - When a tag is added to an entity"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"TAG_REMOVED")," - When a tag is removed from an entity"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"TAG_PROPOSED")," - When a tag is proposed for an entity")))}f.isMDXComponent=!0}}]);