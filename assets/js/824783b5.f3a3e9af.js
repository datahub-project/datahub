"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[54410],{22239:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>f,frontMatter:()=>g,metadata:()=>d,toc:()=>c});a(96540);var n=a(15680),i=a(53720),r=a(5400);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})),e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}const g={sidebar_position:40,title:"MLflow",slug:"/generated/ingestion/sources/mlflow",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/mlflow.md"},p="MLflow",d={unversionedId:"docs/generated/ingestion/sources/mlflow",id:"version-1.1.0/docs/generated/ingestion/sources/mlflow",title:"MLflow",description:"Testing",source:"@site/versioned_docs/version-1.1.0/docs/generated/ingestion/sources/mlflow.md",sourceDirName:"docs/generated/ingestion/sources",slug:"/generated/ingestion/sources/mlflow",permalink:"/docs/1.1.0/generated/ingestion/sources/mlflow",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/mlflow.md",tags:[],version:"1.1.0",sidebarPosition:40,frontMatter:{sidebar_position:40,title:"MLflow",slug:"/generated/ingestion/sources/mlflow",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/mlflow.md"},sidebar:"overviewSidebar",previous:{title:"Microsoft SQL Server",permalink:"/docs/1.1.0/generated/ingestion/sources/mssql"},next:{title:"Mode",permalink:"/docs/1.1.0/generated/ingestion/sources/mode"}},m={},c=[{value:"Important Capabilities",id:"important-capabilities",level:3},{value:"Concept Mapping",id:"concept-mapping",level:3},{value:"CLI based Ingestion",id:"cli-based-ingestion",level:3},{value:"Starter Recipe",id:"starter-recipe",level:3},{value:"Config Details",id:"config-details",level:3},{value:"Auth Configuration",id:"auth-configuration",level:3},{value:"Dataset Lineage",id:"dataset-lineage",level:3},{value:"Code Coordinates",id:"code-coordinates",level:3}],y={toc:c},u="wrapper";function f(e){var{components:t}=e,a=o(e,["components"]);return(0,n.yg)(u,l(function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),n.forEach((function(t){s(e,t,a[t])}))}return e}({},y,a),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"mlflow"},"MLflow"),(0,n.yg)("p",null,(0,n.yg)("img",{parentName:"p",src:"https://img.shields.io/badge/support%20status-testing-lightgrey",alt:"Testing"})),(0,n.yg)("h3",{id:"important-capabilities"},"Important Capabilities"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Capability"),(0,n.yg)("th",{parentName:"tr",align:null},"Status"),(0,n.yg)("th",{parentName:"tr",align:null},"Notes"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Descriptions"),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705"),(0,n.yg)("td",{parentName:"tr",align:null},"Extract descriptions for MLflow Registered Models and Model Versions")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("a",{parentName:"td",href:"/docs/1.1.0/metadata-ingestion/docs/dev_guides/stateful#stale-entity-removal"},"Detect Deleted Entities")),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705"),(0,n.yg)("td",{parentName:"tr",align:null},"Optionally enabled via ",(0,n.yg)("inlineCode",{parentName:"td"},"stateful_ingestion.remove_stale_metadata"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Extract Tags"),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705"),(0,n.yg)("td",{parentName:"tr",align:null},"Extract tags for MLflow Registered Model Stages")))),(0,n.yg)("admonition",{title:"Version Compatbility",type:"note"},(0,n.yg)("p",{parentName:"admonition"},"This connector requires an MLflow server version ",(0,n.yg)("strong",{parentName:"p"},"1.28.0 or later"),".",(0,n.yg)("br",{parentName:"p"}),"\n","If you're using an earlier version, ingestion of ",(0,n.yg)("strong",{parentName:"p"},"Experiments")," and ",(0,n.yg)("strong",{parentName:"p"},"Runs")," will be skipped.")),(0,n.yg)("h3",{id:"concept-mapping"},"Concept Mapping"),(0,n.yg)("p",null,"This ingestion source maps the following MLflow Concepts to DataHub Concepts:"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:"center"},"Source Concept"),(0,n.yg)("th",{parentName:"tr",align:"center"},"DataHub Concept"),(0,n.yg)("th",{parentName:"tr",align:null},"Notes"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"center"},(0,n.yg)("a",{parentName:"td",href:"https://mlflow.org/docs/latest/model-registry/#registered-model"},(0,n.yg)("inlineCode",{parentName:"a"},"Registered Model"))),(0,n.yg)("td",{parentName:"tr",align:"center"},(0,n.yg)("a",{parentName:"td",href:"/docs/generated/metamodel/entities/mlmodelgroup/"},(0,n.yg)("inlineCode",{parentName:"a"},"MlModelGroup"))),(0,n.yg)("td",{parentName:"tr",align:null},"The name of a Model Group is the same as a Registered Model's name (e.g. my_mlflow_model). Registered Models serve as containers for multiple versions of the same model in MLflow.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"center"},(0,n.yg)("a",{parentName:"td",href:"https://mlflow.org/docs/latest/model-registry/#model-version"},(0,n.yg)("inlineCode",{parentName:"a"},"Model Version"))),(0,n.yg)("td",{parentName:"tr",align:"center"},(0,n.yg)("a",{parentName:"td",href:"/docs/generated/metamodel/entities/mlmodel/"},(0,n.yg)("inlineCode",{parentName:"a"},"MlModel"))),(0,n.yg)("td",{parentName:"tr",align:null},"The name of a Model is ",(0,n.yg)("inlineCode",{parentName:"td"},"{registered_model_name}{model_name_separator}{model_version}")," (e.g. my_mlflow_model_1 for Registered Model named my_mlflow_model and Version 1, my_mlflow_model_2, etc.). Each Model Version represents a specific iteration of a model with its own artifacts and metadata.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"center"},(0,n.yg)("a",{parentName:"td",href:"https://mlflow.org/docs/latest/tracking/#experiments"},(0,n.yg)("inlineCode",{parentName:"a"},"Experiment"))),(0,n.yg)("td",{parentName:"tr",align:"center"},(0,n.yg)("a",{parentName:"td",href:"/docs/generated/metamodel/entities/container/"},(0,n.yg)("inlineCode",{parentName:"a"},"Container"))),(0,n.yg)("td",{parentName:"tr",align:null},"Each Experiment in MLflow is mapped to a Container in DataHub. Experiments organize related runs and serve as logical groupings for model development iterations, allowing tracking of parameters, metrics, and artifacts.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"center"},(0,n.yg)("a",{parentName:"td",href:"https://mlflow.org/docs/latest/tracking/#runs"},(0,n.yg)("inlineCode",{parentName:"a"},"Run"))),(0,n.yg)("td",{parentName:"tr",align:"center"},(0,n.yg)("a",{parentName:"td",href:"/docs/generated/metamodel/entities/dataprocessinstance/"},(0,n.yg)("inlineCode",{parentName:"a"},"DataProcessInstance"))),(0,n.yg)("td",{parentName:"tr",align:null},"Captures the run's execution details, parameters, metrics, and lineage to a model.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"center"},(0,n.yg)("a",{parentName:"td",href:"https://mlflow.org/docs/latest/model-registry/#deprecated-using-model-stages"},(0,n.yg)("inlineCode",{parentName:"a"},"Model Stage"))),(0,n.yg)("td",{parentName:"tr",align:"center"},(0,n.yg)("a",{parentName:"td",href:"/docs/generated/metamodel/entities/tag/"},(0,n.yg)("inlineCode",{parentName:"a"},"Tag"))),(0,n.yg)("td",{parentName:"tr",align:null},"The mapping between Model Stages and generated Tags is the following:",(0,n.yg)("br",null),"- Production: mlflow_production",(0,n.yg)("br",null),"- Staging: mlflow_staging",(0,n.yg)("br",null),"- Archived: mlflow_archived",(0,n.yg)("br",null),"- None: mlflow_none. Model Stages indicate the deployment status of each version.")))),(0,n.yg)("h3",{id:"cli-based-ingestion"},"CLI based Ingestion"),(0,n.yg)("h3",{id:"starter-recipe"},"Starter Recipe"),(0,n.yg)("p",null,"Check out the following recipe to get started with ingestion! See ",(0,n.yg)("a",{parentName:"p",href:"#config-details"},"below")," for full configuration options."),(0,n.yg)("p",null,"For general pointers on writing and running a recipe, see our ",(0,n.yg)("a",{parentName:"p",href:"/docs/1.1.0/metadata-ingestion#recipes"},"main recipe guide"),"."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},"source:\n  type: mlflow\n  config:\n    # Coordinates\n    tracking_uri: tracking_uri\n\nsink:\n  # sink configs\n\n")),(0,n.yg)("h3",{id:"config-details"},"Config Details"),(0,n.yg)(i.A,{mdxType:"Tabs"},(0,n.yg)(r.A,{value:"options",label:"Options",default:!0,mdxType:"TabItem"},(0,n.yg)("p",null,"Note that a ",(0,n.yg)("inlineCode",{parentName:"p"},".")," is used to denote nested fields in the YAML recipe."),(0,n.yg)("div",{className:"config-table"},(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:"left"},"Field"),(0,n.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},(0,n.yg)("div",{className:"path-line"},(0,n.yg)("span",{className:"path-main"},"base_external_url"))," ",(0,n.yg)("div",{className:"type-name-line"},(0,n.yg)("span",{className:"type-name"},"string"))),(0,n.yg)("td",{parentName:"tr",align:"left"},"Base URL to use when constructing external URLs to MLflow. If not set, tracking_uri is used if it's an HTTP URL. If neither is set, external URLs are not generated.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},(0,n.yg)("div",{className:"path-line"},(0,n.yg)("span",{className:"path-main"},"materialize_dataset_inputs"))," ",(0,n.yg)("div",{className:"type-name-line"},(0,n.yg)("span",{className:"type-name"},"boolean"))),(0,n.yg)("td",{parentName:"tr",align:"left"},"Whether to materialize dataset inputs for each run ",(0,n.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.yg)("span",{className:"default-value"},"False")))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},(0,n.yg)("div",{className:"path-line"},(0,n.yg)("span",{className:"path-main"},"model_name_separator"))," ",(0,n.yg)("div",{className:"type-name-line"},(0,n.yg)("span",{className:"type-name"},"string"))),(0,n.yg)("td",{parentName:"tr",align:"left"},"A string which separates model name from its version (e.g. model_1 or model-1) ",(0,n.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.yg)("span",{className:"default-value"},"_")))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},(0,n.yg)("div",{className:"path-line"},(0,n.yg)("span",{className:"path-main"},"password"))," ",(0,n.yg)("div",{className:"type-name-line"},(0,n.yg)("span",{className:"type-name"},"string"))),(0,n.yg)("td",{parentName:"tr",align:"left"},"Password for MLflow authentication")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},(0,n.yg)("div",{className:"path-line"},(0,n.yg)("span",{className:"path-main"},"registry_uri"))," ",(0,n.yg)("div",{className:"type-name-line"},(0,n.yg)("span",{className:"type-name"},"string"))),(0,n.yg)("td",{parentName:"tr",align:"left"},"Registry server URI. If not set, an MLflow default registry_uri is used (value of tracking_uri or ",(0,n.yg)("inlineCode",{parentName:"td"},"MLFLOW_REGISTRY_URI")," environment variable)")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},(0,n.yg)("div",{className:"path-line"},(0,n.yg)("span",{className:"path-main"},"source_mapping_to_platform"))," ",(0,n.yg)("div",{className:"type-name-line"},(0,n.yg)("span",{className:"type-name"},"object"))),(0,n.yg)("td",{parentName:"tr",align:"left"},"Mapping of source type to datahub platform")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},(0,n.yg)("div",{className:"path-line"},(0,n.yg)("span",{className:"path-main"},"tracking_uri"))," ",(0,n.yg)("div",{className:"type-name-line"},(0,n.yg)("span",{className:"type-name"},"string"))),(0,n.yg)("td",{parentName:"tr",align:"left"},"Tracking server URI. If not set, an MLflow default tracking_uri is used (local ",(0,n.yg)("inlineCode",{parentName:"td"},"mlruns/")," directory or ",(0,n.yg)("inlineCode",{parentName:"td"},"MLFLOW_TRACKING_URI")," environment variable)")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},(0,n.yg)("div",{className:"path-line"},(0,n.yg)("span",{className:"path-main"},"username"))," ",(0,n.yg)("div",{className:"type-name-line"},(0,n.yg)("span",{className:"type-name"},"string"))),(0,n.yg)("td",{parentName:"tr",align:"left"},"Username for MLflow authentication")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},(0,n.yg)("div",{className:"path-line"},(0,n.yg)("span",{className:"path-main"},"env"))," ",(0,n.yg)("div",{className:"type-name-line"},(0,n.yg)("span",{className:"type-name"},"string"))),(0,n.yg)("td",{parentName:"tr",align:"left"},"The environment that all assets produced by this connector belong to ",(0,n.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.yg)("span",{className:"default-value"},"PROD")))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},(0,n.yg)("div",{className:"path-line"},(0,n.yg)("span",{className:"path-main"},"stateful_ingestion"))," ",(0,n.yg)("div",{className:"type-name-line"},(0,n.yg)("span",{className:"type-name"},"StatefulStaleMetadataRemovalConfig"))),(0,n.yg)("td",{parentName:"tr",align:"left"},"Base specialized config for Stateful Ingestion with stale metadata removal capability.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},(0,n.yg)("div",{className:"path-line"},(0,n.yg)("span",{className:"path-prefix"},"stateful_ingestion."),(0,n.yg)("span",{className:"path-main"},"enabled"))," ",(0,n.yg)("div",{className:"type-name-line"},(0,n.yg)("span",{className:"type-name"},"boolean"))),(0,n.yg)("td",{parentName:"tr",align:"left"},"Whether or not to enable stateful ingest. Default: True if a pipeline_name is set and either a datahub-rest sink or ",(0,n.yg)("inlineCode",{parentName:"td"},"datahub_api")," is specified, otherwise False ",(0,n.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.yg)("span",{className:"default-value"},"False")))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},(0,n.yg)("div",{className:"path-line"},(0,n.yg)("span",{className:"path-prefix"},"stateful_ingestion."),(0,n.yg)("span",{className:"path-main"},"fail_safe_threshold"))," ",(0,n.yg)("div",{className:"type-name-line"},(0,n.yg)("span",{className:"type-name"},"number"))),(0,n.yg)("td",{parentName:"tr",align:"left"},"Prevents large amount of soft deletes & the state from committing from accidental changes to the source configuration if the relative change percent in entities compared to the previous state is above the 'fail_safe_threshold'. ",(0,n.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.yg)("span",{className:"default-value"},"75.0")))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},(0,n.yg)("div",{className:"path-line"},(0,n.yg)("span",{className:"path-prefix"},"stateful_ingestion."),(0,n.yg)("span",{className:"path-main"},"remove_stale_metadata"))," ",(0,n.yg)("div",{className:"type-name-line"},(0,n.yg)("span",{className:"type-name"},"boolean"))),(0,n.yg)("td",{parentName:"tr",align:"left"},"Soft-deletes the entities present in the last successful run but missing in the current run with stateful_ingestion enabled. ",(0,n.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.yg)("span",{className:"default-value"},"True")))))))),(0,n.yg)(r.A,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,n.yg)("p",null,"The ",(0,n.yg)("a",{parentName:"p",href:"https://json-schema.org/"},"JSONSchema")," for this configuration is inlined below."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "title": "MLflowConfig",\n  "description": "Base configuration class for stateful ingestion for source configs to inherit from.",\n  "type": "object",\n  "properties": {\n    "env": {\n      "title": "Env",\n      "description": "The environment that all assets produced by this connector belong to",\n      "default": "PROD",\n      "type": "string"\n    },\n    "stateful_ingestion": {\n      "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"\n    },\n    "tracking_uri": {\n      "title": "Tracking Uri",\n      "description": "Tracking server URI. If not set, an MLflow default tracking_uri is used (local `mlruns/` directory or `MLFLOW_TRACKING_URI` environment variable)",\n      "type": "string"\n    },\n    "registry_uri": {\n      "title": "Registry Uri",\n      "description": "Registry server URI. If not set, an MLflow default registry_uri is used (value of tracking_uri or `MLFLOW_REGISTRY_URI` environment variable)",\n      "type": "string"\n    },\n    "model_name_separator": {\n      "title": "Model Name Separator",\n      "description": "A string which separates model name from its version (e.g. model_1 or model-1)",\n      "default": "_",\n      "type": "string"\n    },\n    "base_external_url": {\n      "title": "Base External Url",\n      "description": "Base URL to use when constructing external URLs to MLflow. If not set, tracking_uri is used if it\'s an HTTP URL. If neither is set, external URLs are not generated.",\n      "type": "string"\n    },\n    "materialize_dataset_inputs": {\n      "title": "Materialize Dataset Inputs",\n      "description": "Whether to materialize dataset inputs for each run",\n      "default": false,\n      "type": "boolean"\n    },\n    "source_mapping_to_platform": {\n      "title": "Source Mapping To Platform",\n      "description": "Mapping of source type to datahub platform",\n      "type": "object"\n    },\n    "username": {\n      "title": "Username",\n      "description": "Username for MLflow authentication",\n      "type": "string"\n    },\n    "password": {\n      "title": "Password",\n      "description": "Password for MLflow authentication",\n      "type": "string"\n    }\n  },\n  "additionalProperties": false,\n  "definitions": {\n    "DynamicTypedStateProviderConfig": {\n      "title": "DynamicTypedStateProviderConfig",\n      "type": "object",\n      "properties": {\n        "type": {\n          "title": "Type",\n          "description": "The type of the state provider to use. For DataHub use `datahub`",\n          "type": "string"\n        },\n        "config": {\n          "title": "Config",\n          "description": "The configuration required for initializing the state provider. Default: The datahub_api config if set at pipeline level. Otherwise, the default DatahubClientConfig. See the defaults (https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/graph/client.py#L19).",\n          "default": {},\n          "type": "object"\n        }\n      },\n      "required": [\n        "type"\n      ],\n      "additionalProperties": false\n    },\n    "StatefulStaleMetadataRemovalConfig": {\n      "title": "StatefulStaleMetadataRemovalConfig",\n      "description": "Base specialized config for Stateful Ingestion with stale metadata removal capability.",\n      "type": "object",\n      "properties": {\n        "enabled": {\n          "title": "Enabled",\n          "description": "Whether or not to enable stateful ingest. Default: True if a pipeline_name is set and either a datahub-rest sink or `datahub_api` is specified, otherwise False",\n          "default": false,\n          "type": "boolean"\n        },\n        "remove_stale_metadata": {\n          "title": "Remove Stale Metadata",\n          "description": "Soft-deletes the entities present in the last successful run but missing in the current run with stateful_ingestion enabled.",\n          "default": true,\n          "type": "boolean"\n        },\n        "fail_safe_threshold": {\n          "title": "Fail Safe Threshold",\n          "description": "Prevents large amount of soft deletes & the state from committing from accidental changes to the source configuration if the relative change percent in entities compared to the previous state is above the \'fail_safe_threshold\'.",\n          "default": 75.0,\n          "minimum": 0.0,\n          "maximum": 100.0,\n          "type": "number"\n        }\n      },\n      "additionalProperties": false\n    }\n  }\n}\n')))),(0,n.yg)("h3",{id:"auth-configuration"},"Auth Configuration"),(0,n.yg)("p",null,"You can configure the MLflow source to authenticate with the MLflow server using the ",(0,n.yg)("inlineCode",{parentName:"p"},"username")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"password")," configuration options."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},'source:\n  type: mlflow\n  config:\n    tracking_uri: "http://127.0.0.1:5000"\n    username: <username>\n    password: <password>\n')),(0,n.yg)("h3",{id:"dataset-lineage"},"Dataset Lineage"),(0,n.yg)("p",null,"You can map MLflow run datasets to specific DataHub platforms using the ",(0,n.yg)("inlineCode",{parentName:"p"},"source_mapping_to_platform")," configuration option. This allows you to specify which DataHub platform should be associated with datasets from different MLflow engines."),(0,n.yg)("p",null,"Example:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},"source_mapping_to_platform:\n  huggingface: snowflake # Maps Hugging Face datasets to Snowflake platform\n  http: s3 # Maps HTTP data sources to s3 platform\n")),(0,n.yg)("p",null,"By default, DataHub will attempt to connect lineage with existing datasets based on the platform and name, but will not create new datasets if they don't exist."),(0,n.yg)("p",null,"To enable automatic dataset creation and lineage mapping, use the ",(0,n.yg)("inlineCode",{parentName:"p"},"materialize_dataset_inputs")," option:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},"materlize_dataset_inputs: true # Creates new datasets if they don't exist\n")),(0,n.yg)("p",null,"You can configure these options independently:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},"# Only map to existing datasets\nmaterlize_dataset_inputs: false\nsource_mapping_to_platform:\n    huggingface: snowflake  # Maps Hugging Face datasets to Snowflake platform\n    pytorch: snowflake      # Maps PyTorch datasets to Snowflake platform\n\n# Create new datasets and map platforms\nmaterlize_dataset_inputs: true\nsource_mapping_to_platform:\n    huggingface: snowflake\n    pytorch: snowflake\n")),(0,n.yg)("h3",{id:"code-coordinates"},"Code Coordinates"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Class Name: ",(0,n.yg)("inlineCode",{parentName:"li"},"datahub.ingestion.source.mlflow.MLflowSource")),(0,n.yg)("li",{parentName:"ul"},"Browse on ",(0,n.yg)("a",{parentName:"li",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/source/mlflow.py"},"GitHub"))),(0,n.yg)("h2",null,"Questions"),(0,n.yg)("p",null,"If you've got any questions on configuring ingestion for MLflow, feel free to ping us on ",(0,n.yg)("a",{parentName:"p",href:"https://datahub.com/slack"},"our Slack"),"."))}f.isMDXComponent=!0}}]);