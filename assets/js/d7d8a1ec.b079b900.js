"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[17210],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>m});var s=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=s.createContext({}),p=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return s.createElement(l.Provider,{value:t},e.children)},c="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},g=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),g=r,m=c["".concat(l,".").concat(g)]||c[g]||y[g]||a;return n?s.createElement(m,i(i({ref:t},u),{},{components:n})):s.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<a;p++)i[p]=n[p];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}g.displayName="MDXCreateElement"},12803:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>c});n(96540);var s=n(15680);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const o={title:"DataHub Smoke Tests",sidebar_label:"Smoke Tests",slug:"/smoke-test",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/smoke-test/README.md"},l="DataHub Smoke Tests",p={unversionedId:"smoke-test/README",id:"smoke-test/README",title:"DataHub Smoke Tests",description:"This directory contains end-to-end smoke tests for DataHub functionality. These tests can be run locally for faster development and debugging compared to the full CI pipeline.",source:"@site/genDocs/smoke-test/README.md",sourceDirName:"smoke-test",slug:"/smoke-test",permalink:"/docs/smoke-test",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/smoke-test/README.md",tags:[],version:"current",frontMatter:{title:"DataHub Smoke Tests",sidebar_label:"Smoke Tests",slug:"/smoke-test",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/smoke-test/README.md"}},u={},c=[{value:"Quick Start",id:"quick-start",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Running Tests",id:"running-tests",level:3},{value:"Test Categories",id:"test-categories",level:2},{value:"System Info Tests (<code>test_system_info.py</code>)",id:"system-info-tests-test_system_infopy",level:3},{value:"Core E2E Tests (<code>test_e2e.py</code>)",id:"core-e2e-tests-test_e2epy",level:3},{value:"Development Workflow",id:"development-workflow",level:2},{value:"Testing System Info Changes",id:"testing-system-info-changes",level:3},{value:"Quick API Verification",id:"quick-api-verification",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Environment Debug",id:"environment-debug",level:3},{value:"CI vs Local Testing",id:"ci-vs-local-testing",level:2},{value:"Test Organization",id:"test-organization",level:2}],y={toc:c},g="wrapper";function m(e){var{components:t}=e,n=i(e,["components"]);return(0,s.yg)(g,a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},s=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(s=s.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),s.forEach((function(t){r(e,t,n[t])}))}return e}({},y,n),{components:t,mdxType:"MDXLayout"}),(0,s.yg)("h1",{id:"datahub-smoke-tests"},"DataHub Smoke Tests"),(0,s.yg)("p",null,"This directory contains end-to-end smoke tests for DataHub functionality. These tests can be run locally for faster development and debugging compared to the full CI pipeline."),(0,s.yg)("h2",{id:"quick-start"},"Quick Start"),(0,s.yg)("h3",{id:"prerequisites"},"Prerequisites"),(0,s.yg)("ol",null,(0,s.yg)("li",{parentName:"ol"},(0,s.yg)("p",{parentName:"li"},(0,s.yg)("strong",{parentName:"p"},"DataHub must be running locally")),(0,s.yg)("pre",{parentName:"li"},(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"# From project root\n./gradlew quickstartDebug\n"))),(0,s.yg)("li",{parentName:"ol"},(0,s.yg)("p",{parentName:"li"},(0,s.yg)("strong",{parentName:"p"},"Set up Python environment")," (one-time setup)"),(0,s.yg)("pre",{parentName:"li"},(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"# From project root - sets up metadata-ingestion venv\n./gradlew :metadata-ingestion:installDev\n\n# Set up smoke-test specific environment\ncd smoke-test\npython3 -m venv venv\nsource venv/bin/activate\npip install --upgrade pip wheel setuptools\npip install -r requirements.txt\n")))),(0,s.yg)("h3",{id:"environment-variables"},"Environment Variables"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"export DATAHUB_VERSION=v1.0.0rc3-SNAPSHOT  # or current version\nexport TEST_STRATEGY=no_cypress_suite0     # for non-Cypress tests\n")),(0,s.yg)("h3",{id:"running-tests"},"Running Tests"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"cd smoke-test\nsource venv/bin/activate\n\n# Set environment variables\nexport DATAHUB_VERSION=v1.0.0rc3-SNAPSHOT\nexport TEST_STRATEGY=no_cypress_suite0\n\n# Run all tests (WARNING: Takes a long time, requires full setup)\npytest -vv\n\n# Run specific test file (RECOMMENDED for development)\npytest test_system_info.py -vv\n\n# Run specific test method\npytest test_system_info.py::test_system_info_main_endpoint -vv\n\n# Run multiple specific tests\npytest test_e2e.py::test_healthchecks test_e2e.py::test_gms_usage_fetch -v\n")),(0,s.yg)("h2",{id:"test-categories"},"Test Categories"),(0,s.yg)("h3",{id:"system-info-tests-test_system_infopy"},"System Info Tests (",(0,s.yg)("inlineCode",{parentName:"h3"},"test_system_info.py"),")"),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"\u2705 FAST - Can run independently")),(0,s.yg)("p",null,"Tests the system info API endpoints:"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("inlineCode",{parentName:"li"},"/openapi/v1/system-info")," - Spring components only"),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("inlineCode",{parentName:"li"},"/openapi/v1/system-info/properties")," - Detailed properties"),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("inlineCode",{parentName:"li"},"/openapi/v1/system-info/spring-components")," - Component status")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"# Run all system info tests (takes ~30 seconds)\npytest test_system_info.py -vv\n")),(0,s.yg)("h3",{id:"core-e2e-tests-test_e2epy"},"Core E2E Tests (",(0,s.yg)("inlineCode",{parentName:"h3"},"test_e2e.py"),")"),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"\u26a0\ufe0f SLOW - Requires full ingestion pipeline")),(0,s.yg)("p",null,"Tests that require data ingestion and full DataHub functionality. Many tests depend on the initial ingestion fixture which can fail if Kafka/Schema Registry aren't properly configured."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"# Run health checks only (fast)\npytest test_e2e.py::test_healthchecks -v\n\n# Run authentication tests (fast)\npytest test_e2e.py::test_frontend_auth -v\n\n# Run full e2e tests (slow, requires full setup)\npytest test_e2e.py -vv\n")),(0,s.yg)("h2",{id:"development-workflow"},"Development Workflow"),(0,s.yg)("h3",{id:"testing-system-info-changes"},"Testing System Info Changes"),(0,s.yg)("p",null,"After making changes to system info APIs:"),(0,s.yg)("ol",null,(0,s.yg)("li",{parentName:"ol"},(0,s.yg)("p",{parentName:"li"},(0,s.yg)("strong",{parentName:"p"},"Restart DataHub")),(0,s.yg)("pre",{parentName:"li"},(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"# Kill existing processes\n./gradlew :datahub-frontend:stop :datahub-gms:stop\n\n# Restart\n./gradlew quickstartDebug\n"))),(0,s.yg)("li",{parentName:"ol"},(0,s.yg)("p",{parentName:"li"},(0,s.yg)("strong",{parentName:"p"},"Run System Info Tests")),(0,s.yg)("pre",{parentName:"li"},(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"cd smoke-test\nsource venv/bin/activate\nexport DATAHUB_VERSION=v1.0.0rc3-SNAPSHOT\nexport TEST_STRATEGY=no_cypress_suite0\n\npytest test_system_info.py -vv\n")))),(0,s.yg)("h3",{id:"quick-api-verification"},"Quick API Verification"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"# Check if DataHub is running\ncurl -s http://localhost:8080/health | head -5\n\n# Test system info endpoint directly\ncurl -s http://localhost:8080/openapi/v1/system-info | jq . | head -20\n")),(0,s.yg)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,s.yg)("h3",{id:"common-issues"},"Common Issues"),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},'\u274c "Connection refused" errors')),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"DataHub is not running"),(0,s.yg)("li",{parentName:"ul"},"Wrong port (should be 8080 for GMS)"),(0,s.yg)("li",{parentName:"ul"},"Services still starting up (wait a few minutes)")),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},'\u274c "401 Unauthorized" for direct curl')),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Expected behavior - tests handle authentication"),(0,s.yg)("li",{parentName:"ul"},"Use the test suite instead of direct curl for authenticated endpoints")),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"\u274c Kafka/Schema Registry connection errors")),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},"Only affects full e2e tests with ingestion"),(0,s.yg)("li",{parentName:"ul"},"System info tests should still work"),(0,s.yg)("li",{parentName:"ul"},"Try running individual test methods instead of full suite")),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"\u274c Python environment issues")),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"# Recreate virtual environment\nrm -rf venv\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n")),(0,s.yg)("h3",{id:"environment-debug"},"Environment Debug"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},'# Check if services are running\ncurl -s http://localhost:8080/health\ncurl -s http://localhost:9092  # Kafka (will show connection refused if not running)\n\n# Verify Python environment\nsource venv/bin/activate\nwhich python\npython --version\npip list | grep datahub\n\n# Check environment variables\necho "DATAHUB_VERSION: $DATAHUB_VERSION"\necho "TEST_STRATEGY: $TEST_STRATEGY"\n')),(0,s.yg)("h2",{id:"ci-vs-local-testing"},"CI vs Local Testing"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("strong",{parentName:"li"},"CI"),": Uses ",(0,s.yg)("inlineCode",{parentName:"li"},"./gradlew :smoke-test:pytest")," - full pipeline with Docker containers"),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("strong",{parentName:"li"},"Local"),": Uses direct pytest - faster, uses locally running DataHub instance"),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("strong",{parentName:"li"},"Recommendation"),": Use local for development, CI for final validation")),(0,s.yg)("h2",{id:"test-organization"},"Test Organization"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("inlineCode",{parentName:"li"},"test_e2e.py")," - Main test suite (1387 lines)"),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("inlineCode",{parentName:"li"},"test_system_info.py")," - System info API tests (169 lines)"),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("inlineCode",{parentName:"li"},"conftest.py")," - Test configuration and fixtures"),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("inlineCode",{parentName:"li"},"tests/utils.py")," - Test utilities and helpers")),(0,s.yg)("hr",null),(0,s.yg)("p",null,"\ud83d\udca1 ",(0,s.yg)("strong",{parentName:"p"},"Pro Tip"),": For rapid development, use ",(0,s.yg)("inlineCode",{parentName:"p"},"pytest test_system_info.py -vv")," which runs in ~30 seconds vs the full test suite which can take 30+ minutes."))}m.isMDXComponent=!0}}]);