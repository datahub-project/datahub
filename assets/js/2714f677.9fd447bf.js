"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[8251],{46771:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>h,frontMatter:()=>d,metadata:()=>m,toc:()=>g});n(96540);var a=n(15680),i=n(53720),l=n(5400);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const d={sidebar_position:28,title:"Post",slug:"/generated/metamodel/entities/post",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/post.md"},p="Post",m={unversionedId:"docs/generated/metamodel/entities/post",id:"docs/generated/metamodel/entities/post",title:"Post",description:"Technical Reference Guide",source:"@site/genDocs/docs/generated/metamodel/entities/post.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/post",permalink:"/docs/generated/metamodel/entities/post",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/post.md",tags:[],version:"current",sidebarPosition:28,frontMatter:{sidebar_position:28,title:"Post",slug:"/generated/metamodel/entities/post",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/post.md"},sidebar:"overviewSidebar",previous:{title:"DataHubRole",permalink:"/docs/generated/metamodel/entities/datahubrole"},next:{title:"DataHubView",permalink:"/docs/generated/metamodel/entities/datahubview"}},c={},g=[{value:"Technical Reference Guide",id:"technical-reference-guide",level:2},{value:"Reading the Field Tables",id:"reading-the-field-tables",level:3},{value:"Aspects",id:"aspects",level:3},{value:"postInfo",id:"postinfo",level:4},{value:"subTypes",id:"subtypes",level:4},{value:"Common Types",id:"common-types",level:3},{value:"AuditStamp",id:"auditstamp",level:4},{value:"Relationships",id:"relationships",level:3},{value:"Outgoing",id:"outgoing",level:4},{value:"Global Metadata Model",id:"global-metadata-model",level:3}],u={toc:g},y="wrapper";function h(e){var{components:t}=e,n=s(e,["components"]);return(0,a.yg)(y,r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){o(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"post"},"Post"),(0,a.yg)("h2",{id:"technical-reference-guide"},"Technical Reference Guide"),(0,a.yg)("p",null,"The sections above provide an overview of how to use this entity. The following sections provide detailed technical information about how metadata is stored and represented in DataHub."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Aspects")," are the individual pieces of metadata that can be attached to an entity. Each aspect contains specific information (like ownership, tags, or properties) and is stored as a separate record, allowing for flexible and incremental metadata updates."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Relationships")," show how this entity connects to other entities in the metadata graph. These connections are derived from the fields within each aspect and form the foundation of DataHub's knowledge graph."),(0,a.yg)("h3",{id:"reading-the-field-tables"},"Reading the Field Tables"),(0,a.yg)("p",null,"Each aspect's field table includes an ",(0,a.yg)("strong",{parentName:"p"},"Annotations")," column that provides additional metadata about how fields are used:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"\u26a0\ufe0f Deprecated"),": This field is deprecated and may be removed in a future version. Check the description for the recommended alternative"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Searchable"),": This field is indexed and can be searched in DataHub's search interface"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Searchable (fieldname)"),": When the field name in parentheses is shown, it indicates the field is indexed under a different name in the search index. For example, ",(0,a.yg)("inlineCode",{parentName:"li"},"dashboardTool")," is indexed as ",(0,a.yg)("inlineCode",{parentName:"li"},"tool")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"\u2192 RelationshipName"),": This field creates a relationship to another entity. The arrow indicates this field contains a reference (URN) to another entity, and the name indicates the type of relationship (e.g., ",(0,a.yg)("inlineCode",{parentName:"li"},"\u2192 Contains"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"\u2192 OwnedBy"),")")),(0,a.yg)("p",null,"Fields with complex types (like ",(0,a.yg)("inlineCode",{parentName:"p"},"Edge"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"AuditStamp"),") link to their definitions in the ",(0,a.yg)("a",{parentName:"p",href:"#common-types"},"Common Types")," section below."),(0,a.yg)("h3",{id:"aspects"},"Aspects"),(0,a.yg)("h4",{id:"postinfo"},"postInfo"),(0,a.yg)("p",null,"Information about a DataHub Post."),(0,a.yg)(i.A,{mdxType:"Tabs"},(0,a.yg)(l.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Field"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Required"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"type"),(0,a.yg)("td",{parentName:"tr",align:null},"PostType"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Type of the Post."),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"content"),(0,a.yg)("td",{parentName:"tr",align:null},"PostContent"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Content stored in the post."),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"created"),(0,a.yg)("td",{parentName:"tr",align:null},"long"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"The time at which the post was initially created"),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"lastModified"),(0,a.yg)("td",{parentName:"tr",align:null},"long"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"The time at which the post was last modified"),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"auditStamp"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"#auditstamp"},"AuditStamp")),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null},"The audit stamp at which the request was last updated"),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"target"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null},"Optional Entity URN that the post is associated with."),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 PostTarget"))))),(0,a.yg)(l.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "postInfo"\n  },\n  "name": "PostInfo",\n  "namespace": "com.linkedin.post",\n  "fields": [\n    {\n      "Searchable": {},\n      "type": {\n        "type": "enum",\n        "symbolDocs": {\n          "ENTITY_ANNOUNCEMENT": "The Post is an Entity level announcement.",\n          "HOME_PAGE_ANNOUNCEMENT": "The Post is an Home Page announcement."\n        },\n        "name": "PostType",\n        "namespace": "com.linkedin.post",\n        "symbols": [\n          "HOME_PAGE_ANNOUNCEMENT",\n          "ENTITY_ANNOUNCEMENT"\n        ],\n        "doc": "Enum defining types of Posts."\n      },\n      "name": "type",\n      "doc": "Type of the Post."\n    },\n    {\n      "type": {\n        "type": "record",\n        "name": "PostContent",\n        "namespace": "com.linkedin.post",\n        "fields": [\n          {\n            "Searchable": {\n              "fieldType": "TEXT_PARTIAL"\n            },\n            "type": "string",\n            "name": "title",\n            "doc": "Title of the post."\n          },\n          {\n            "type": {\n              "type": "enum",\n              "symbolDocs": {\n                "LINK": "Link content",\n                "TEXT": "Text content"\n              },\n              "name": "PostContentType",\n              "namespace": "com.linkedin.post",\n              "symbols": [\n                "TEXT",\n                "LINK"\n              ],\n              "doc": "Enum defining the type of content held in a Post."\n            },\n            "name": "type",\n            "doc": "Type of content held in the post."\n          },\n          {\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "description",\n            "default": null,\n            "doc": "Optional description of the post."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.url.Url",\n              "coercerClass": "com.linkedin.common.url.UrlCoercer"\n            },\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "link",\n            "default": null,\n            "doc": "Optional link that the post is associated with."\n          },\n          {\n            "type": [\n              "null",\n              {\n                "type": "record",\n                "name": "Media",\n                "namespace": "com.linkedin.common",\n                "fields": [\n                  {\n                    "type": {\n                      "type": "enum",\n                      "symbolDocs": {\n                        "IMAGE": "The Media holds an image."\n                      },\n                      "name": "MediaType",\n                      "namespace": "com.linkedin.common",\n                      "symbols": [\n                        "IMAGE"\n                      ],\n                      "doc": "Enum defining the type of content a Media object holds."\n                    },\n                    "name": "type",\n                    "doc": "Type of content the Media is storing, e.g. image, video, etc."\n                  },\n                  {\n                    "java": {\n                      "class": "com.linkedin.common.url.Url",\n                      "coercerClass": "com.linkedin.common.url.UrlCoercer"\n                    },\n                    "type": "string",\n                    "name": "location",\n                    "doc": "Where the media content is stored."\n                  }\n                ],\n                "doc": "Carries information about which roles a user is assigned to."\n              }\n            ],\n            "name": "media",\n            "default": null,\n            "doc": "Optional media that the post is storing"\n          }\n        ],\n        "doc": "Content stored inside a Post."\n      },\n      "name": "content",\n      "doc": "Content stored in the post."\n    },\n    {\n      "Searchable": {\n        "fieldType": "COUNT"\n      },\n      "type": "long",\n      "name": "created",\n      "doc": "The time at which the post was initially created"\n    },\n    {\n      "Searchable": {\n        "fieldType": "COUNT"\n      },\n      "type": "long",\n      "name": "lastModified",\n      "doc": "The time at which the post was last modified"\n    },\n    {\n      "Searchable": {\n        "/time": {\n          "fieldName": "created",\n          "fieldType": "COUNT"\n        }\n      },\n      "type": [\n        "null",\n        {\n          "type": "record",\n          "name": "AuditStamp",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "type": "long",\n              "name": "time",\n              "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n            },\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "actor",\n              "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n            },\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "impersonator",\n              "default": null,\n              "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "message",\n              "default": null,\n              "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n            }\n          ],\n          "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n        }\n      ],\n      "name": "auditStamp",\n      "default": null,\n      "doc": "The audit stamp at which the request was last updated"\n    },\n    {\n      "Relationship": {\n        "entityTypes": [\n          "dataset",\n          "schemaField",\n          "chart",\n          "container",\n          "dashboard",\n          "dataFlow",\n          "dataJob",\n          "dataProduct",\n          "glossaryTerm",\n          "glossaryNode",\n          "mlModel",\n          "mlFeature",\n          "notebook",\n          "mlFeatureTable",\n          "mlPrimaryKey",\n          "mlModelGroup",\n          "domain",\n          "dataProduct"\n        ],\n        "name": "PostTarget"\n      },\n      "Searchable": {},\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "target",\n      "default": null,\n      "doc": "Optional Entity URN that the post is associated with."\n    }\n  ],\n  "doc": "Information about a DataHub Post."\n}\n')))),(0,a.yg)("h4",{id:"subtypes"},"subTypes"),(0,a.yg)("p",null,"Sub Types. Use this aspect to specialize a generic Entity\ne.g. Making a Dataset also be a View or also be a LookerExplore"),(0,a.yg)(i.A,{mdxType:"Tabs"},(0,a.yg)(l.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Field"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Required"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"typeNames"),(0,a.yg)("td",{parentName:"tr",align:null},"string[]"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"The names of the specific types."),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,a.yg)(l.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "subTypes"\n  },\n  "name": "SubTypes",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "/*": {\n          "addToFilters": true,\n          "fieldType": "KEYWORD",\n          "filterNameOverride": "Sub Type",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": "string"\n      },\n      "name": "typeNames",\n      "doc": "The names of the specific types."\n    }\n  ],\n  "doc": "Sub Types. Use this aspect to specialize a generic Entity\\ne.g. Making a Dataset also be a View or also be a LookerExplore"\n}\n')))),(0,a.yg)("h3",{id:"common-types"},"Common Types"),(0,a.yg)("p",null,"These types are used across multiple aspects in this entity."),(0,a.yg)("h4",{id:"auditstamp"},"AuditStamp"),(0,a.yg)("p",null,"Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Fields:")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"time")," (long): When did the resource/association/sub-resource move into the specific lifecyc..."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"actor")," (string): The entity (e.g. a member URN) which will be credited for moving the resource..."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"impersonator")," (string?): The entity (e.g. a service URN) which performs the change on behalf of the Ac..."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"message")," (string?): Additional context around how DataHub was informed of the particular change. ...")),(0,a.yg)("h3",{id:"relationships"},"Relationships"),(0,a.yg)("h4",{id:"outgoing"},"Outgoing"),(0,a.yg)("p",null,"These are the relationships stored in this entity's aspects"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"PostTarget"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Dataset via ",(0,a.yg)("inlineCode",{parentName:"li"},"postInfo.target")),(0,a.yg)("li",{parentName:"ul"},"SchemaField via ",(0,a.yg)("inlineCode",{parentName:"li"},"postInfo.target")),(0,a.yg)("li",{parentName:"ul"},"Chart via ",(0,a.yg)("inlineCode",{parentName:"li"},"postInfo.target")),(0,a.yg)("li",{parentName:"ul"},"Container via ",(0,a.yg)("inlineCode",{parentName:"li"},"postInfo.target")),(0,a.yg)("li",{parentName:"ul"},"Dashboard via ",(0,a.yg)("inlineCode",{parentName:"li"},"postInfo.target")),(0,a.yg)("li",{parentName:"ul"},"DataFlow via ",(0,a.yg)("inlineCode",{parentName:"li"},"postInfo.target")),(0,a.yg)("li",{parentName:"ul"},"DataJob via ",(0,a.yg)("inlineCode",{parentName:"li"},"postInfo.target")),(0,a.yg)("li",{parentName:"ul"},"DataProduct via ",(0,a.yg)("inlineCode",{parentName:"li"},"postInfo.target")),(0,a.yg)("li",{parentName:"ul"},"GlossaryTerm via ",(0,a.yg)("inlineCode",{parentName:"li"},"postInfo.target")),(0,a.yg)("li",{parentName:"ul"},"GlossaryNode via ",(0,a.yg)("inlineCode",{parentName:"li"},"postInfo.target")),(0,a.yg)("li",{parentName:"ul"},"MlModel via ",(0,a.yg)("inlineCode",{parentName:"li"},"postInfo.target")),(0,a.yg)("li",{parentName:"ul"},"MlFeature via ",(0,a.yg)("inlineCode",{parentName:"li"},"postInfo.target")),(0,a.yg)("li",{parentName:"ul"},"Notebook via ",(0,a.yg)("inlineCode",{parentName:"li"},"postInfo.target")),(0,a.yg)("li",{parentName:"ul"},"MlFeatureTable via ",(0,a.yg)("inlineCode",{parentName:"li"},"postInfo.target")),(0,a.yg)("li",{parentName:"ul"},"MlPrimaryKey via ",(0,a.yg)("inlineCode",{parentName:"li"},"postInfo.target")),(0,a.yg)("li",{parentName:"ul"},"MlModelGroup via ",(0,a.yg)("inlineCode",{parentName:"li"},"postInfo.target")),(0,a.yg)("li",{parentName:"ul"},"Domain via ",(0,a.yg)("inlineCode",{parentName:"li"},"postInfo.target"))))),(0,a.yg)("h3",{id:"global-metadata-model"},(0,a.yg)("a",{parentName:"h3",href:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,a.yg)("p",null,(0,a.yg)("img",{parentName:"p",src:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}h.isMDXComponent=!0}}]);