"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[8239],{15680:(e,t,a)=>{a.d(t,{xA:()=>p,yg:()=>m});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(a),g=r,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||o;return a?n.createElement(m,i(i({ref:t},p),{},{components:a})):n.createElement(m,i({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},13231:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>u});a(96540);var n=a(15680);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})),e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const l={title:"Logical Models",slug:"/features/feature-guides/logical-models/overview",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/features/feature-guides/logical-models/overview.md"},s="Logical Models",c={unversionedId:"docs/features/feature-guides/logical-models/overview",id:"docs/features/feature-guides/logical-models/overview",title:"Logical Models",description:"Currently we only support datasets and by extension schema fields for logical models. No other entity types are supported.",source:"@site/genDocs/docs/features/feature-guides/logical-models/overview.md",sourceDirName:"docs/features/feature-guides/logical-models",slug:"/features/feature-guides/logical-models/overview",permalink:"/docs/features/feature-guides/logical-models/overview",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/features/feature-guides/logical-models/overview.md",tags:[],version:"current",frontMatter:{title:"Logical Models",slug:"/features/feature-guides/logical-models/overview",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/features/feature-guides/logical-models/overview.md"},sidebar:"overviewSidebar",previous:{title:"Managing Data Lineage via UI",permalink:"/docs/features/feature-guides/ui-lineage"},next:{title:"Logical Models",permalink:"/docs/features/feature-guides/logical-models/overview"}},p={},u=[{value:"What is a Logical Model",id:"what-is-a-logical-model",level:2},{value:"How It Looks",id:"how-it-looks",level:2},{value:"Creating Logical Models",id:"creating-logical-models",level:2},{value:"OpenAPI",id:"openapi",level:3},{value:"Python SDK",id:"python-sdk",level:3}],d={toc:u},g="wrapper";function m(e){var{components:t}=e,a=i(e,["components"]);return(0,n.yg)(g,o(function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),n.forEach((function(t){r(e,t,a[t])}))}return e}({},d,a),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"logical-models"},"Logical Models"),(0,n.yg)("admonition",{title:"Supported Entity Types",type:"note"},(0,n.yg)("p",{parentName:"admonition"},"Currently we only support datasets and by extension schema fields for logical models. No other entity types are supported.")),(0,n.yg)("h2",{id:"what-is-a-logical-model"},"What is a Logical Model"),(0,n.yg)("p",null,"A logical model represents the concept and structure of a database table, without being tied to any single physical instantiation in some source system. Like any DataHub dataset entity, a logical model describes its columns, including data types and descriptions, and can be attributed with other metadata like tags, terms, owners, and custom properties. But unlike physical datasets, logical models do not represent a table in a source system that actually exists, in which data is stored and can be queried."),(0,n.yg)("p",null,"Logical models are useful for those who have multiple tables that represent the same type or shap of data, or store the same data. This is common for multi-cloud data ecosystems, in which the same table may be replicated across several cloud providers, e.g. Snowflake, Redshift, and BigQuery. It is also useful in cases where multiple replicas exist in a single system, such as gold/silver/bronze layers. Logical models should be linked to each physical representation to expose this relationship DataHub. DataHub Cloud customers can take advantage further with ",(0,n.yg)("a",{parentName:"p",href:"/docs/features/feature-guides/logical-models/centralized-management"},"Centralized Management"),", in which every physical child's metadata can be managed at the logical model level."),(0,n.yg)("h2",{id:"how-it-looks"},"How It Looks"),(0,n.yg)("admonition",{title:"Feature Flag",type:"note"},(0,n.yg)("p",{parentName:"admonition"},"The environment variable ",(0,n.yg)("inlineCode",{parentName:"p"},"LOGICAL_MODELS_ENABLED")," must be set to ",(0,n.yg)("inlineCode",{parentName:"p"},"true")," on ",(0,n.yg)("inlineCode",{parentName:"p"},"datahub-gms")," for logical models to be viewed in the UI.")),(0,n.yg)("p",null,"For example, suppose there exists a ",(0,n.yg)("inlineCode",{parentName:"p"},"Users")," table Snowflake, an ",(0,n.yg)("inlineCode",{parentName:"p"},"AllUsers")," table in BigQuery, and a ",(0,n.yg)("inlineCode",{parentName:"p"},"UsersAttributes")," table Apache Hive. These three tables may have different names and slightly different structures, but logically represent the same data: a table of users, with certain information (columns) for each user. We create a logical table called ",(0,n.yg)("inlineCode",{parentName:"p"},"Users")," and link it to each physical child:"),(0,n.yg)("p",{style:{display:"flex",flexDirection:"row",justifyContent:"center",gap:"60px"}},(0,n.yg)("img",{width:"40%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/logical/relationship-diagram.png"})),(0,n.yg)("p",null,"Once the relationships are ",(0,n.yg)("a",{parentName:"p",href:"#creating-logical-models"},"created"),", they will show up in the entity sidebar for both logical parents and their physical children:"),(0,n.yg)("p",{style:{display:"flex",flexDirection:"row",justifyContent:"center",gap:"60px"}},(0,n.yg)("img",{width:"40%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/logical/logical-parent.png"}),(0,n.yg)("img",{width:"40%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/logical/physical-child.png"})),(0,n.yg)("p",null,"Columns on the logical parent and physical children can be linked as well:"),(0,n.yg)("p",{style:{display:"flex",flexDirection:"row",justifyContent:"center",gap:"60px"}},(0,n.yg)("img",{width:"40%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/logical/logical-parent-column.png"}),(0,n.yg)("img",{width:"40%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/logical/physical-child-column.png"})),(0,n.yg)("h2",{id:"creating-logical-models"},"Creating Logical Models"),(0,n.yg)("p",null,"At its core, the logical -> physical relationship is created by the ",(0,n.yg)("a",{parentName:"p",href:"/docs/generated/metamodel/entities/dataset#logicalparent"},(0,n.yg)("inlineCode",{parentName:"a"},"LogicalParent"))," aspect. To link columns, this aspect must also be created on each child schmea field entity. However, for ease of use, we recommend the OpenAPI endpoint."),(0,n.yg)("h3",{id:"openapi"},"OpenAPI"),(0,n.yg)("p",null,"The OpenAPI endpoint creates a logical -> physical relationship for a single logical-physical pair, as well as the column-level relationships between their columns, if specified."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-shell"},'curl -X POST \'http://localhost:8080/openapi/v3/entity/logical/<physical_child_urn>/relationship/physicalInstanceOf/<logical_model_urn>\' \\\n  -H \'accept: application/json\' \\\n  -H \'Content-Type: application/json\' \\\n  -d \'{\n    "<logical_column_name_0>": "<physical_column_name_0>",\n    "<logical_column_name_1>": "<physical_column_name_1>",\n    "<logical_column_name_2>": "<physical_column_name_2>"\n  }\'\n')),(0,n.yg)("h3",{id:"python-sdk"},"Python SDK"),(0,n.yg)("p",null,"The Python SDK can also query the same endpoint:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'    from datahub.sdk import DataHubClient\n    client = DataHubClient.from_env()\n    url = f"{client._graph.config.server}/openapi/v3/entity/logical/{child_urn}/relationship/physicalInstanceOf/{parent_urn}"\n    client._graph._post_generic(url, {column.parent_name: column.child_name for column in columns})\n')),(0,n.yg)("p",null,"Or it can create a single relationship by emitting the ",(0,n.yg)("inlineCode",{parentName:"p"},"LogicalParent")," aspect."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"    from datahub.sdk import DataHubClient\n    from datahub.emitter.mcp import MetadataChangeProposalWrapper\n    from datahub.metadata.schema_classes import EdgeClass, LogicalParentClass\n    client = DataHubClient.from_env()\n\n    client._graph.emit(MetadataChangeProposalWrapper(entityUrn=child_urn, aspect=LogicalParentClass(parent=EdgeClass(destinationUrn=parent_urn))))\n")),(0,n.yg)("p",null,"The relationship can also be removed:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},"    from datahub.sdk import DataHubClient\n    from datahub.emitter.mcp import MetadataChangeProposalWrapper\n    from datahub.metadata.schema_classes import EdgeClass, LogicalParentClass\n    client = DataHubClient.from_env()\n\n    client._graph.emit(MetadataChangeProposalWrapper(entityUrn=child_urn, aspect=LogicalParentClass(parent=None)))\n")))}m.isMDXComponent=!0}}]);