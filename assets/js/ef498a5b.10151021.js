"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[43323],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>y});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,y=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return t?a.createElement(y,i(i({ref:n},d),{},{components:t})):a.createElement(y,i({ref:n},d))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},39931:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>y,frontMatter:()=>l,metadata:()=>c,toc:()=>u});t(96540);var a=t(15680);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const l={sidebar_position:39,title:"StructuredProperty",slug:"/generated/metamodel/entities/structuredproperty",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/structuredProperty.md"},s="StructuredProperty",c={unversionedId:"docs/generated/metamodel/entities/structuredProperty",id:"version-1.1.0/docs/generated/metamodel/entities/structuredProperty",title:"StructuredProperty",description:"Structured Property represents a property meant for extending the core model of a logical entity",source:"@site/versioned_docs/version-1.1.0/docs/generated/metamodel/entities/structuredProperty.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/structuredproperty",permalink:"/docs/1.1.0/generated/metamodel/entities/structuredproperty",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/structuredProperty.md",tags:[],version:"1.1.0",sidebarPosition:39,frontMatter:{sidebar_position:39,title:"StructuredProperty",slug:"/generated/metamodel/entities/structuredproperty",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/structuredProperty.md"},sidebar:"overviewSidebar",previous:{title:"DataType",permalink:"/docs/1.1.0/generated/metamodel/entities/datatype"},next:{title:"Form",permalink:"/docs/1.1.0/generated/metamodel/entities/form"}},d={},u=[{value:"Aspects",id:"aspects",level:2},{value:"propertyDefinition",id:"propertydefinition",level:3},{value:"structuredPropertySettings",id:"structuredpropertysettings",level:3},{value:"institutionalMemory",id:"institutionalmemory",level:3},{value:"status",id:"status",level:3},{value:"Relationships",id:"relationships",level:2},{value:"Outgoing",id:"outgoing",level:3},{value:"Global Metadata Model",id:"global-metadata-model",level:2}],p={toc:u},m="wrapper";function y(e){var{components:n}=e,t=i(e,["components"]);return(0,a.yg)(m,o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){r(e,n,t[n])}))}return e}({},p,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"structuredproperty"},"StructuredProperty"),(0,a.yg)("p",null,"Structured Property represents a property meant for extending the core model of a logical entity"),(0,a.yg)("h2",{id:"aspects"},"Aspects"),(0,a.yg)("h3",{id:"propertydefinition"},"propertyDefinition"),(0,a.yg)("p",null,"None"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Schema"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "propertyDefinition"\n  },\n  "name": "StructuredPropertyDefinition",\n  "namespace": "com.linkedin.structured",\n  "fields": [\n    {\n      "Searchable": {},\n      "type": "string",\n      "name": "qualifiedName",\n      "doc": "The fully qualified name of the property. e.g. io.acryl.datahub.myProperty"\n    },\n    {\n      "Searchable": {},\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "displayName",\n      "default": null,\n      "doc": "The display name of the property. This is the name that will be shown in the UI and can be used to look up the property id."\n    },\n    {\n      "UrnValidation": {\n        "entityTypes": [\n          "dataType"\n        ],\n        "exist": true,\n        "strict": true\n      },\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": "string",\n      "name": "valueType",\n      "doc": "The value type of the property. Must be a dataType.\\ne.g. To indicate that the property is of type DATE, use urn:li:dataType:datahub.date"\n    },\n    {\n      "type": [\n        "null",\n        {\n          "type": "map",\n          "values": {\n            "type": "array",\n            "items": "string"\n          }\n        }\n      ],\n      "name": "typeQualifier",\n      "default": null,\n      "doc": "A map that allows for type specialization of the valueType.\\ne.g. a valueType of urn:li:dataType:datahub.urn\\ncan be specialized to be a USER or GROUP URN by adding a typeQualifier like \\n{ \\"allowedTypes\\": [\\"urn:li:entityType:datahub.corpuser\\", \\"urn:li:entityType:datahub.corpGroup\\"] }"\n    },\n    {\n      "type": [\n        "null",\n        {\n          "type": "array",\n          "items": {\n            "type": "record",\n            "name": "PropertyValue",\n            "namespace": "com.linkedin.structured",\n            "fields": [\n              {\n                "type": [\n                  "string",\n                  "double"\n                ],\n                "name": "value"\n              },\n              {\n                "type": [\n                  "null",\n                  "string"\n                ],\n                "name": "description",\n                "default": null,\n                "doc": "Optional description of the property value"\n              }\n            ]\n          }\n        }\n      ],\n      "name": "allowedValues",\n      "default": null,\n      "doc": "A list of allowed values that the property is allowed to take. \\nIf this is not specified, then the property can take any value of given type."\n    },\n    {\n      "type": [\n        {\n          "type": "enum",\n          "name": "PropertyCardinality",\n          "namespace": "com.linkedin.structured",\n          "symbols": [\n            "SINGLE",\n            "MULTIPLE"\n          ]\n        },\n        "null"\n      ],\n      "name": "cardinality",\n      "default": "SINGLE",\n      "doc": "The cardinality of the property. If not specified, then the property is assumed to be single valued.."\n    },\n    {\n      "Relationship": {\n        "/*": {\n          "entityTypes": [\n            "entityType"\n          ],\n          "name": "StructuredPropertyOf"\n        }\n      },\n      "Searchable": {\n        "/*": {\n          "fieldName": "entityTypes"\n        }\n      },\n      "UrnValidation": {\n        "entityTypes": [\n          "entityType"\n        ],\n        "exist": true,\n        "strict": true\n      },\n      "type": {\n        "type": "array",\n        "items": "string"\n      },\n      "name": "entityTypes"\n    },\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "description",\n      "default": null,\n      "doc": "The description of the property. This is the description that will be shown in the UI."\n    },\n    {\n      "type": [\n        "null",\n        {\n          "type": "record",\n          "name": "DataHubSearchConfig",\n          "namespace": "com.linkedin.datahub",\n          "fields": [\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "fieldName",\n              "default": null,\n              "doc": "Name of the field in the search index. Defaults to the field name otherwise"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "enum",\n                  "name": "SearchFieldType",\n                  "namespace": "com.linkedin.datahub",\n                  "symbols": [\n                    "KEYWORD",\n                    "TEXT",\n                    "TEXT_PARTIAL",\n                    "BROWSE_PATH",\n                    "URN",\n                    "URN_PARTIAL",\n                    "BOOLEAN",\n                    "COUNT",\n                    "DATETIME",\n                    "OBJECT",\n                    "BROWSE_PATH_V2",\n                    "WORD_GRAM"\n                  ]\n                }\n              ],\n              "name": "fieldType",\n              "default": null,\n              "doc": "Type of the field. Defines how the field is indexed and matched"\n            },\n            {\n              "type": "boolean",\n              "name": "queryByDefault",\n              "default": false,\n              "doc": "Whether we should match the field for the default search query"\n            },\n            {\n              "type": "boolean",\n              "name": "enableAutocomplete",\n              "default": false,\n              "doc": "Whether we should use the field for default autocomplete"\n            },\n            {\n              "type": "boolean",\n              "name": "addToFilters",\n              "default": false,\n              "doc": "Whether or not to add field to filters."\n            },\n            {\n              "type": "boolean",\n              "name": "addHasValuesToFilters",\n              "default": true,\n              "doc": "Whether or not to add the \\"has values\\" to filters.\\ncheck if this is conditional on addToFilters being true"\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "filterNameOverride",\n              "default": null,\n              "doc": "Display name of the filter"\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "hasValuesFilterNameOverride",\n              "default": null,\n              "doc": "Display name of the has values filter"\n            },\n            {\n              "type": "double",\n              "name": "boostScore",\n              "default": 1.0,\n              "doc": "Boost multiplier to the match score. Matches on fields with higher boost score ranks higher"\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "hasValuesFieldName",\n              "default": null,\n              "doc": "If set, add a index field of the given name that checks whether the field exists"\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "numValuesFieldName",\n              "default": null,\n              "doc": "If set, add a index field of the given name that checks the number of elements"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "map",\n                  "values": "double"\n                }\n              ],\n              "name": "weightsPerFieldValue",\n              "default": null,\n              "doc": "(Optional) Weights to apply to score for a given value"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "array",\n                  "items": "string"\n                }\n              ],\n              "name": "fieldNameAliases",\n              "default": null,\n              "doc": "(Optional) Aliases for this given field that can be used for sorting etc."\n            }\n          ],\n          "doc": "Configuration for how any given field should be indexed and matched in the DataHub search index."\n        }\n      ],\n      "name": "searchConfiguration",\n      "default": null,\n      "doc": "Search configuration for this property. If not specified, then the property is indexed using the default mapping.\\nfrom the logical type."\n    },\n    {\n      "Searchable": {\n        "fieldType": "BOOLEAN"\n      },\n      "type": "boolean",\n      "name": "immutable",\n      "default": false,\n      "doc": "Whether the structured property value is immutable once applied to an entity."\n    },\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "version",\n      "default": null,\n      "doc": "Definition version - Allows breaking schema changes. String is compared case-insensitive and new\\n                     versions must be monotonically increasing. Cannot use periods/dots.\\n                     Suggestions: v1, v2\\n                                  20240610, 20240611"\n    },\n    {\n      "Searchable": {\n        "/time": {\n          "fieldName": "createdTime",\n          "fieldType": "DATETIME"\n        }\n      },\n      "type": [\n        "null",\n        {\n          "type": "record",\n          "name": "AuditStamp",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "type": "long",\n              "name": "time",\n              "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n            },\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "actor",\n              "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n            },\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "impersonator",\n              "default": null,\n              "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "message",\n              "default": null,\n              "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n            }\n          ],\n          "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n        }\n      ],\n      "name": "created",\n      "default": null,\n      "doc": "Created Audit stamp"\n    },\n    {\n      "Searchable": {\n        "/time": {\n          "fieldName": "lastModified",\n          "fieldType": "DATETIME"\n        }\n      },\n      "type": [\n        "null",\n        "com.linkedin.common.AuditStamp"\n      ],\n      "name": "lastModified",\n      "default": null,\n      "doc": "Last Modified Audit stamp"\n    }\n  ]\n}\n'))),(0,a.yg)("h3",{id:"structuredpropertysettings"},"structuredPropertySettings"),(0,a.yg)("p",null,"Settings specific to a structured property entity"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Schema"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "structuredPropertySettings"\n  },\n  "name": "StructuredPropertySettings",\n  "namespace": "com.linkedin.structured",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "BOOLEAN"\n      },\n      "type": "boolean",\n      "name": "isHidden",\n      "default": false,\n      "doc": "Whether or not this asset should be hidden in the main application"\n    },\n    {\n      "Searchable": {\n        "fieldType": "BOOLEAN"\n      },\n      "type": "boolean",\n      "name": "showInSearchFilters",\n      "default": false,\n      "doc": "Whether or not this asset should be displayed as a search filter"\n    },\n    {\n      "Searchable": {\n        "fieldType": "BOOLEAN"\n      },\n      "type": "boolean",\n      "name": "showInAssetSummary",\n      "default": false,\n      "doc": "Whether or not this asset should be displayed in the asset sidebar"\n    },\n    {\n      "Searchable": {\n        "fieldType": "BOOLEAN"\n      },\n      "type": "boolean",\n      "name": "showAsAssetBadge",\n      "default": false,\n      "doc": "Whether or not this asset should be displayed as an asset badge on other\\nasset\'s headers"\n    },\n    {\n      "Searchable": {\n        "fieldType": "BOOLEAN"\n      },\n      "type": "boolean",\n      "name": "showInColumnsTable",\n      "default": false,\n      "doc": "Whether or not this asset should be displayed as a column in the schema field table\\nin a Dataset\'s \\"Columns\\" tab."\n    },\n    {\n      "Searchable": {\n        "/time": {\n          "fieldName": "lastModifiedSettings",\n          "fieldType": "DATETIME"\n        }\n      },\n      "type": [\n        "null",\n        {\n          "type": "record",\n          "name": "AuditStamp",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "type": "long",\n              "name": "time",\n              "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n            },\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "actor",\n              "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n            },\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "impersonator",\n              "default": null,\n              "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "message",\n              "default": null,\n              "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n            }\n          ],\n          "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n        }\n      ],\n      "name": "lastModified",\n      "default": null,\n      "doc": "Last Modified Audit stamp"\n    }\n  ],\n  "doc": "Settings specific to a structured property entity"\n}\n'))),(0,a.yg)("h3",{id:"institutionalmemory"},"institutionalMemory"),(0,a.yg)("p",null,"Institutional memory of an entity. This is a way to link to relevant documentation and provide description of the documentation. Institutional or tribal knowledge is very important for users to leverage the entity."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Schema"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "institutionalMemory"\n  },\n  "name": "InstitutionalMemory",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "InstitutionalMemoryMetadata",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.url.Url",\n                "coercerClass": "com.linkedin.common.url.UrlCoercer"\n              },\n              "type": "string",\n              "name": "url",\n              "doc": "Link to an engineering design document or a wiki page."\n            },\n            {\n              "type": "string",\n              "name": "description",\n              "doc": "Description of the link."\n            },\n            {\n              "type": {\n                "type": "record",\n                "name": "AuditStamp",\n                "namespace": "com.linkedin.common",\n                "fields": [\n                  {\n                    "type": "long",\n                    "name": "time",\n                    "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n                  },\n                  {\n                    "java": {\n                      "class": "com.linkedin.common.urn.Urn"\n                    },\n                    "type": "string",\n                    "name": "actor",\n                    "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n                  },\n                  {\n                    "java": {\n                      "class": "com.linkedin.common.urn.Urn"\n                    },\n                    "type": [\n                      "null",\n                      "string"\n                    ],\n                    "name": "impersonator",\n                    "default": null,\n                    "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n                  },\n                  {\n                    "type": [\n                      "null",\n                      "string"\n                    ],\n                    "name": "message",\n                    "default": null,\n                    "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n                  }\n                ],\n                "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n              },\n              "name": "createStamp",\n              "doc": "Audit stamp associated with creation of this record"\n            }\n          ],\n          "doc": "Metadata corresponding to a record of institutional memory."\n        }\n      },\n      "name": "elements",\n      "doc": "List of records that represent institutional memory of an entity. Each record consists of a link, description, creator and timestamps associated with that record."\n    }\n  ],\n  "doc": "Institutional memory of an entity. This is a way to link to relevant documentation and provide description of the documentation. Institutional or tribal knowledge is very important for users to leverage the entity."\n}\n'))),(0,a.yg)("h3",{id:"status"},"status"),(0,a.yg)("p",null,"The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\nThis aspect is used to represent soft deletes conventionally."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Schema"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "status"\n  },\n  "name": "Status",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "BOOLEAN"\n      },\n      "type": "boolean",\n      "name": "removed",\n      "default": false,\n      "doc": "Whether the entity has been removed (soft-deleted)."\n    }\n  ],\n  "doc": "The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\\nThis aspect is used to represent soft deletes conventionally."\n}\n'))),(0,a.yg)("h2",{id:"relationships"},"Relationships"),(0,a.yg)("h3",{id:"outgoing"},"Outgoing"),(0,a.yg)("p",null,"These are the relationships stored in this entity's aspects"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"StructuredPropertyOf"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"EntityType via ",(0,a.yg)("inlineCode",{parentName:"li"},"propertyDefinition.entityTypes"))))),(0,a.yg)("h2",{id:"global-metadata-model"},(0,a.yg)("a",{parentName:"h2",href:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,a.yg)("p",null,(0,a.yg)("img",{parentName:"p",src:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}y.isMDXComponent=!0}}]);