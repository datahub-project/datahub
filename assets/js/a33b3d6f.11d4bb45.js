"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[91013],{49957:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>m,contentTitle:()=>p,default:()=>h,frontMatter:()=>g,metadata:()=>d,toc:()=>u});n(96540);var t=n(15680),i=n(53720),r=n(5400);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){return a=null!=a?a:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):function(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))})),e}function o(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const g={sidebar_position:13,title:"Tag",slug:"/generated/metamodel/entities/tag",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/tag.md"},p="Tag",d={unversionedId:"docs/generated/metamodel/entities/tag",id:"docs/generated/metamodel/entities/tag",title:"Tag",description:"Tags are one of the core metadata entities in DataHub, providing a flexible mechanism for classification, categorization, and organization of data assets. They represent labels that can be applied to entities such as datasets, dashboards, charts, and more, enabling users to quickly identify, filter, and group related assets across the data ecosystem.",source:"@site/genDocs/docs/generated/metamodel/entities/tag.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/tag",permalink:"/docs/generated/metamodel/entities/tag",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/tag.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13,title:"Tag",slug:"/generated/metamodel/entities/tag",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/tag.md"},sidebar:"overviewSidebar",previous:{title:"Container",permalink:"/docs/generated/metamodel/entities/container"},next:{title:"GlossaryTerm",permalink:"/docs/generated/metamodel/entities/glossaryterm"}},m={},u=[{value:"Identity",id:"identity",level:2},{value:"Important Capabilities",id:"important-capabilities",level:2},{value:"Tag Properties",id:"tag-properties",level:3},{value:"Applying Tags to Entities",id:"applying-tags-to-entities",level:3},{value:"Tag vs. Glossary Terms",id:"tag-vs-glossary-terms",level:3},{value:"Ownership",id:"ownership",level:3},{value:"Deprecation and Status",id:"deprecation-and-status",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"Creating a Tag",id:"creating-a-tag",level:3},{value:"Adding Ownership to a Tag",id:"adding-ownership-to-a-tag",level:3},{value:"Applying Tags to Datasets",id:"applying-tags-to-datasets",level:3},{value:"Querying Tag Information",id:"querying-tag-information",level:3},{value:"Searching for Tagged Assets",id:"searching-for-tagged-assets",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"Relationship with Other Entities",id:"relationship-with-other-entities",level:3},{value:"GraphQL API Support",id:"graphql-api-support",level:3},{value:"Search and Discovery",id:"search-and-discovery",level:3},{value:"Notable Exceptions",id:"notable-exceptions",level:2},{value:"Tag Naming Conventions",id:"tag-naming-conventions",level:3},{value:"Tag Proliferation",id:"tag-proliferation",level:3},{value:"System vs. User Tags",id:"system-vs-user-tags",level:3},{value:"Tags and Access Control",id:"tags-and-access-control",level:3},{value:"Technical Reference Guide",id:"technical-reference-guide",level:2},{value:"Reading the Field Tables",id:"reading-the-field-tables",level:3},{value:"Aspects",id:"aspects",level:3},{value:"tagKey",id:"tagkey",level:4},{value:"ownership",id:"ownership-1",level:4},{value:"tagProperties",id:"tagproperties",level:4},{value:"status",id:"status",level:4},{value:"deprecation",id:"deprecation",level:4},{value:"testResults",id:"testresults",level:4},{value:"Common Types",id:"common-types",level:3},{value:"AuditStamp",id:"auditstamp",level:4},{value:"TestResult",id:"testresult",level:4},{value:"Relationships",id:"relationships",level:3},{value:"Outgoing",id:"outgoing",level:4},{value:"Incoming",id:"incoming",level:4},{value:"Global Metadata Model",id:"global-metadata-model",level:3}],y={toc:u},c="wrapper";function h(e){var{components:a}=e,n=o(e,["components"]);return(0,t.yg)(c,s(function(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{},t=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),t.forEach((function(a){l(e,a,n[a])}))}return e}({},y,n),{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"tag"},"Tag"),(0,t.yg)("p",null,"Tags are one of the core metadata entities in DataHub, providing a flexible mechanism for classification, categorization, and organization of data assets. They represent labels that can be applied to entities such as datasets, dashboards, charts, and more, enabling users to quickly identify, filter, and group related assets across the data ecosystem."),(0,t.yg)("h2",{id:"identity"},"Identity"),(0,t.yg)("p",null,"Tags are identified by a single piece of information:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"The tag name"),": A unique string identifier that serves as both the technical key and the human-readable reference for the tag. The name should be simple, descriptive, and typically follows lowercase naming conventions (e.g., ",(0,t.yg)("inlineCode",{parentName:"li"},"pii"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"deprecated"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"quarterly"),").")),(0,t.yg)("p",null,"An example of a tag identifier is ",(0,t.yg)("inlineCode",{parentName:"p"},"urn:li:tag:pii"),"."),(0,t.yg)("p",null,"The URN structure is straightforward:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"urn:li:tag:<tag_name>\n")),(0,t.yg)("p",null,"Where ",(0,t.yg)("inlineCode",{parentName:"p"},"<tag_name>")," is the unique identifier for the tag. Unlike many other DataHub entities, tags do not require platform qualifiers or environment specifications, making them universally applicable across all data assets."),(0,t.yg)("h2",{id:"important-capabilities"},"Important Capabilities"),(0,t.yg)("h3",{id:"tag-properties"},"Tag Properties"),(0,t.yg)("p",null,"Tags support several properties that enhance their usability and appearance in DataHub:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Display Name"),": A human-friendly name that may differ from the technical identifier. For example, a tag with name ",(0,t.yg)("inlineCode",{parentName:"li"},"pii"),' might have display name "Personally Identifiable Information".'),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Description"),": Detailed documentation explaining what the tag represents, when it should be used, and any organizational policies related to it."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Color"),": A hex color code (e.g., ",(0,t.yg)("inlineCode",{parentName:"li"},"#FF0000"),") that allows for visual distinction in the UI, making it easier to spot tagged assets at a glance.")),(0,t.yg)("p",null,"These properties are stored in the ",(0,t.yg)("inlineCode",{parentName:"p"},"tagProperties")," aspect and can be set when creating a tag or updated later."),(0,t.yg)("h3",{id:"applying-tags-to-entities"},"Applying Tags to Entities"),(0,t.yg)("p",null,"Tags are applied to other entities through the ",(0,t.yg)("inlineCode",{parentName:"p"},"globalTags")," aspect. Almost all core DataHub entities support tagging, including:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Datasets"),": Tables, views, streams, and other data collections"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Dashboards"),": BI dashboards and reporting interfaces"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Charts"),": Individual visualizations and reports"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Data Jobs"),": ETL jobs, transformation pipelines"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Data Flows"),": Complete data pipelines and workflows"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"ML Models"),": Machine learning models and deployments"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Containers"),": Databases, schemas, and other organizational structures"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Glossary Terms"),": Business terminology and concepts")),(0,t.yg)("p",null,"Tags can be applied at multiple levels:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Entity-level"),": Applied to the entire asset (e.g., tagging a whole dataset as ",(0,t.yg)("inlineCode",{parentName:"li"},"sensitive"),")"),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Field-level"),": Applied to specific columns or fields within datasets (e.g., tagging only the ",(0,t.yg)("inlineCode",{parentName:"li"},"email")," column as ",(0,t.yg)("inlineCode",{parentName:"li"},"pii"),")")),(0,t.yg)("h3",{id:"tag-vs-glossary-terms"},"Tag vs. Glossary Terms"),(0,t.yg)("p",null,"While both tags and glossary terms provide classification capabilities, they serve different purposes:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Tags")," are lightweight, informal labels for quick categorization. They're ideal for operational concerns like data quality states (",(0,t.yg)("inlineCode",{parentName:"li"},"needs_review"),"), security classifications (",(0,t.yg)("inlineCode",{parentName:"li"},"confidential"),"), or project associations (",(0,t.yg)("inlineCode",{parentName:"li"},"q4_initiative"),")."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Glossary Terms"),' are formal business vocabulary with rich metadata, relationships, and governance. They\'re best for business concepts like "Customer", "Revenue", or "Product SKU".')),(0,t.yg)("p",null,"Read ",(0,t.yg)("a",{parentName:"p",href:"https://medium.com/datahub-project/tags-and-terms-two-powerful-datahub-features-used-in-two-different-scenarios-b5b4791e892e"},"this blog")," for a detailed comparison."),(0,t.yg)("h3",{id:"ownership"},"Ownership"),(0,t.yg)("p",null,"Like other core entities, tags support the ",(0,t.yg)("inlineCode",{parentName:"p"},"ownership")," aspect. This allows organizations to designate who is responsible for maintaining tag definitions and ensuring consistent usage. Tag owners can be users or groups with various ownership types (e.g., ",(0,t.yg)("inlineCode",{parentName:"p"},"DATAOWNER"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"STEWARD"),")."),(0,t.yg)("h3",{id:"deprecation-and-status"},"Deprecation and Status"),(0,t.yg)("p",null,"Tags can be marked as deprecated through the ",(0,t.yg)("inlineCode",{parentName:"p"},"deprecation")," aspect, signaling that they should no longer be used. The ",(0,t.yg)("inlineCode",{parentName:"p"},"status")," aspect allows tags to be soft-deleted while maintaining historical references."),(0,t.yg)("h2",{id:"code-examples"},"Code Examples"),(0,t.yg)("h3",{id:"creating-a-tag"},"Creating a Tag"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Create a basic tag"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/tag_create_basic.py\n# metadata-ingestion/examples/library/tag_create_basic.py\nimport logging\nimport os\n\nfrom datahub.emitter.mce_builder import make_tag_urn\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import TagPropertiesClass\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Create a tag URN\ntag_urn = make_tag_urn("pii")\n\n# Define tag properties\ntag_properties = TagPropertiesClass(\n    name="Personally Identifiable Information",\n    description="This tag indicates that the asset contains PII data and should be handled according to data privacy regulations.",\n    colorHex="#FF0000",\n)\n\n# Create the metadata change proposal\nevent = MetadataChangeProposalWrapper(\n    entityUrn=tag_urn,\n    aspect=tag_properties,\n)\n\n# Emit to DataHub\nrest_emitter = DatahubRestEmitter(\n    gms_server=os.getenv("DATAHUB_GMS_URL", "http://localhost:8080"),\n    token=os.getenv("DATAHUB_GMS_TOKEN"),\n)\nrest_emitter.emit(event)\nlog.info(f"Created tag {tag_urn}")\n\n'))),(0,t.yg)("h3",{id:"adding-ownership-to-a-tag"},"Adding Ownership to a Tag"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Add an owner to a tag"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/tag_add_ownership.py\n# metadata-ingestion/examples/library/tag_add_ownership.py\nimport logging\n\nfrom datahub.emitter.mce_builder import make_tag_urn, make_user_urn\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import (\n    OwnerClass,\n    OwnershipClass,\n    OwnershipTypeClass,\n)\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Create a tag URN\ntag_urn = make_tag_urn("data_quality")\n\n# Define ownership\nownership = OwnershipClass(\n    owners=[\n        OwnerClass(\n            owner=make_user_urn("data_steward"),\n            type=OwnershipTypeClass.DATAOWNER,\n        )\n    ]\n)\n\n# Create the metadata change proposal\nevent = MetadataChangeProposalWrapper(\n    entityUrn=tag_urn,\n    aspect=ownership,\n)\n\n# Emit to DataHub\nrest_emitter = DatahubRestEmitter(gms_server="http://localhost:8080")\nrest_emitter.emit(event)\nlog.info(f"Added ownership to tag {tag_urn}")\n\n'))),(0,t.yg)("h3",{id:"applying-tags-to-datasets"},"Applying Tags to Datasets"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Apply a tag to a dataset"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/tag_apply_to_dataset.py\n# metadata-ingestion/examples/library/tag_apply_to_dataset.py\nimport logging\n\nfrom datahub.emitter.mce_builder import make_dataset_urn, make_tag_urn\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import GlobalTagsClass, TagAssociationClass\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Create URNs\ndataset_urn = make_dataset_urn(\n    platform="snowflake", name="db.schema.customers", env="PROD"\n)\ntag_urn = make_tag_urn("pii")\n\n# Define global tags\nglobal_tags = GlobalTagsClass(\n    tags=[\n        TagAssociationClass(tag=tag_urn),\n    ]\n)\n\n# Create the metadata change proposal\nevent = MetadataChangeProposalWrapper(\n    entityUrn=dataset_urn,\n    aspect=global_tags,\n)\n\n# Emit to DataHub\nrest_emitter = DatahubRestEmitter(gms_server="http://localhost:8080")\nrest_emitter.emit(event)\nlog.info(f"Applied tag {tag_urn} to dataset {dataset_urn}")\n\n'))),(0,t.yg)("h3",{id:"querying-tag-information"},"Querying Tag Information"),(0,t.yg)("p",null,"The standard REST APIs can be used to retrieve tag metadata and see which entities are tagged."),(0,t.yg)("details",null,(0,t.yg)("summary",null,"REST API: Fetch tag entity information"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/tag_query_rest.py\n# metadata-ingestion/examples/library/tag_query_rest.py\nimport logging\nfrom urllib.parse import quote\n\nimport requests\n\nfrom datahub.emitter.mce_builder import make_tag_urn\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Configuration\ngms_server = "http://localhost:8080"\ntag_urn = make_tag_urn("pii")\n\n# Fetch tag entity\nresponse = requests.get(f"{gms_server}/entities/{quote(tag_urn, safe=\'\')}")\n\nif response.status_code == 200:\n    tag_data = response.json()\n    log.info(f"Successfully retrieved tag: {tag_urn}")\n\n    # Extract tag properties\n    if "aspects" in tag_data and "tagProperties" in tag_data["aspects"]:\n        properties = tag_data["aspects"]["tagProperties"]["value"]\n        log.info(f"Tag name: {properties.get(\'name\')}")\n        log.info(f"Description: {properties.get(\'description\')}")\n        log.info(f"Color: {properties.get(\'colorHex\')}")\n\n    # Extract ownership if present\n    if "aspects" in tag_data and "ownership" in tag_data["aspects"]:\n        ownership = tag_data["aspects"]["ownership"]["value"]\n        log.info(f"Number of owners: {len(ownership.get(\'owners\', []))}")\n        for owner in ownership.get("owners", []):\n            log.info(f"  - Owner: {owner[\'owner\']}, Type: {owner[\'type\']}")\nelse:\n    log.error(f"Failed to retrieve tag: {response.status_code} - {response.text}")\n\n# Query relationships to find all entities tagged with this tag\nrelationships_url = (\n    f"{gms_server}/relationships"\n    f"?direction=INCOMING"\n    f"&urn={quote(tag_urn, safe=\'\')}"\n    f"&types=TaggedWith"\n)\n\nresponse = requests.get(relationships_url)\n\nif response.status_code == 200:\n    relationships = response.json()\n    total = relationships.get("total", 0)\n    log.info(f"Found {total} entities tagged with this tag")\n\n    for rel in relationships.get("relationships", []):\n        log.info(f"  - {rel[\'entity\']} (type: {rel[\'type\']})")\nelse:\n    log.error(\n        f"Failed to retrieve relationships: {response.status_code} - {response.text}"\n    )\n\n'))),(0,t.yg)("h3",{id:"searching-for-tagged-assets"},"Searching for Tagged Assets"),(0,t.yg)("p",null,"Tags are fully integrated with DataHub's search capabilities, allowing you to find all assets with a specific tag."),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Search for assets by tag"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'from datahub.sdk import DataHubClient\nfrom datahub.sdk.search_filters import FilterDsl as F\n\nclient = DataHubClient.from_env()\n\n# Find all assets tagged with "pii"\nresults = client.search.get_urns(filter=F.tag("urn:li:tag:pii"))\n\nprint(f"Found {len(results)} assets tagged with \'pii\'")\nfor urn in results:\n    print(f"  - {urn}")\n'))),(0,t.yg)("h2",{id:"integration-points"},"Integration Points"),(0,t.yg)("h3",{id:"relationship-with-other-entities"},"Relationship with Other Entities"),(0,t.yg)("p",null,"Tags create a ",(0,t.yg)("inlineCode",{parentName:"p"},"TaggedWith")," relationship between the tagged entity and the tag entity. This bidirectional relationship enables:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Forward navigation"),": From a dataset, see all its tags"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Reverse navigation"),": From a tag, see all entities using it"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Impact analysis"),": Understand the scope of a tag before deprecating it")),(0,t.yg)("h3",{id:"graphql-api-support"},"GraphQL API Support"),(0,t.yg)("p",null,"Tags are fully supported in DataHub's GraphQL API, with dedicated resolvers for:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Creating tags"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"CreateTagResolver")," allows programmatic tag creation with authorization checks"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Updating tags"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"SetTagColorResolver")," and update operations for tag properties"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Deleting tags"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"DeleteTagResolver")," for removing obsolete tags"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Adding tags to entities"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"AddTagResolver"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"AddTagsResolver"),", and batch operations"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Removing tags from entities"),": ",(0,t.yg)("inlineCode",{parentName:"li"},"RemoveTagResolver")," and batch removal operations")),(0,t.yg)("p",null,"These resolvers enforce authorization policies, ensuring only users with appropriate privileges (",(0,t.yg)("inlineCode",{parentName:"p"},"CREATE_TAG"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"MANAGE_TAGS"),", or ",(0,t.yg)("inlineCode",{parentName:"p"},"EDIT_ENTITY"),") can modify tags and tag assignments."),(0,t.yg)("h3",{id:"search-and-discovery"},"Search and Discovery"),(0,t.yg)("p",null,"Tags are indexed for search with the following capabilities:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Full-text search"),": Tag names and descriptions are searchable"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Autocomplete"),": Tag names support autocomplete for easy selection"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Filtering"),": Assets can be filtered by tag in all search interfaces"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Faceting"),": Tags appear as filter options in search results")),(0,t.yg)("h2",{id:"notable-exceptions"},"Notable Exceptions"),(0,t.yg)("h3",{id:"tag-naming-conventions"},"Tag Naming Conventions"),(0,t.yg)("p",null,"While DataHub doesn't enforce strict naming conventions, consider these best practices:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Use lowercase"),": Makes tags case-insensitive in practice (",(0,t.yg)("inlineCode",{parentName:"li"},"pii")," vs ",(0,t.yg)("inlineCode",{parentName:"li"},"PII"),")"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Use underscores or hyphens"),": For multi-word tags (",(0,t.yg)("inlineCode",{parentName:"li"},"data_quality")," or ",(0,t.yg)("inlineCode",{parentName:"li"},"data-quality"),")"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Keep it concise"),": Short names are easier to read and apply"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Avoid special characters"),": Stick to alphanumeric characters, underscores, and hyphens")),(0,t.yg)("h3",{id:"tag-proliferation"},"Tag Proliferation"),(0,t.yg)("p",null,'Organizations should establish governance around tag creation to avoid "tag sprawl":'),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Define a core set"),": Start with 10-20 essential tags"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Document usage"),": Maintain clear descriptions for when each tag should be used"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Regular audits"),": Periodically review and consolidate similar or unused tags"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Ownership model"),": Assign tag owners who can approve new tags or changes")),(0,t.yg)("h3",{id:"system-vs-user-tags"},"System vs. User Tags"),(0,t.yg)("p",null,"While DataHub doesn't formally distinguish between system and user tags, organizations often establish conventions:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"System tags"),": Created by automated processes (e.g., ",(0,t.yg)("inlineCode",{parentName:"li"},"ingestion_error"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"schema_drift"),")"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"User tags"),": Created manually by data practitioners (e.g., ",(0,t.yg)("inlineCode",{parentName:"li"},"important"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"sandbox"),")")),(0,t.yg)("p",null,"Consider using prefixes or namespacing to distinguish these categories if needed."),(0,t.yg)("h3",{id:"tags-and-access-control"},"Tags and Access Control"),(0,t.yg)("p",null,"Tags themselves don't grant or restrict access to data. However, they can be used in conjunction with DataHub policies to:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Control who can view certain tagged assets"),(0,t.yg)("li",{parentName:"ul"},"Restrict who can apply sensitive tags"),(0,t.yg)("li",{parentName:"ul"},"Trigger workflows based on tag presence (e.g., auto-generating documentation for assets tagged ",(0,t.yg)("inlineCode",{parentName:"li"},"requires_docs"),")")),(0,t.yg)("p",null,"Tags are metadata about your data, not a security mechanism. Use DataHub's authorization features for access control."),(0,t.yg)("h2",{id:"technical-reference-guide"},"Technical Reference Guide"),(0,t.yg)("p",null,"The sections above provide an overview of how to use this entity. The following sections provide detailed technical information about how metadata is stored and represented in DataHub."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Aspects")," are the individual pieces of metadata that can be attached to an entity. Each aspect contains specific information (like ownership, tags, or properties) and is stored as a separate record, allowing for flexible and incremental metadata updates."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Relationships")," show how this entity connects to other entities in the metadata graph. These connections are derived from the fields within each aspect and form the foundation of DataHub's knowledge graph."),(0,t.yg)("h3",{id:"reading-the-field-tables"},"Reading the Field Tables"),(0,t.yg)("p",null,"Each aspect's field table includes an ",(0,t.yg)("strong",{parentName:"p"},"Annotations")," column that provides additional metadata about how fields are used:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"\u26a0\ufe0f Deprecated"),": This field is deprecated and may be removed in a future version. Check the description for the recommended alternative"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Searchable"),": This field is indexed and can be searched in DataHub's search interface"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Searchable (fieldname)"),": When the field name in parentheses is shown, it indicates the field is indexed under a different name in the search index. For example, ",(0,t.yg)("inlineCode",{parentName:"li"},"dashboardTool")," is indexed as ",(0,t.yg)("inlineCode",{parentName:"li"},"tool")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"\u2192 RelationshipName"),": This field creates a relationship to another entity. The arrow indicates this field contains a reference (URN) to another entity, and the name indicates the type of relationship (e.g., ",(0,t.yg)("inlineCode",{parentName:"li"},"\u2192 Contains"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"\u2192 OwnedBy"),")")),(0,t.yg)("p",null,"Fields with complex types (like ",(0,t.yg)("inlineCode",{parentName:"p"},"Edge"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"AuditStamp"),") link to their definitions in the ",(0,t.yg)("a",{parentName:"p",href:"#common-types"},"Common Types")," section below."),(0,t.yg)("h3",{id:"aspects"},"Aspects"),(0,t.yg)("h4",{id:"tagkey"},"tagKey"),(0,t.yg)("p",null,"Key for a Tag"),(0,t.yg)(i.A,{mdxType:"Tabs"},(0,t.yg)(r.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"name"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"The tag name, which serves as a unique id"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable (id)"))))),(0,t.yg)(r.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "tagKey"\n  },\n  "name": "TagKey",\n  "namespace": "com.linkedin.metadata.key",\n  "fields": [\n    {\n      "Searchable": {\n        "boostScore": 10.0,\n        "enableAutocomplete": true,\n        "fieldName": "id",\n        "fieldType": "WORD_GRAM"\n      },\n      "type": "string",\n      "name": "name",\n      "doc": "The tag name, which serves as a unique id"\n    }\n  ],\n  "doc": "Key for a Tag"\n}\n')))),(0,t.yg)("h4",{id:"ownership-1"},"ownership"),(0,t.yg)("p",null,"Ownership information of an entity."),(0,t.yg)(i.A,{mdxType:"Tabs"},(0,t.yg)(r.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"owners"),(0,t.yg)("td",{parentName:"tr",align:null},"Owner[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"List of owners of the entity."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"ownerTypes"),(0,t.yg)("td",{parentName:"tr",align:null},"map"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Ownership type to Owners map, populated via mutation hook."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"lastModified"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#auditstamp"},"AuditStamp")),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Audit stamp containing who last modified the record and when. A value of 0 in the time field indi..."),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(r.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "ownership"\n  },\n  "name": "Ownership",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "Owner",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "Relationship": {\n                "entityTypes": [\n                  "corpuser",\n                  "corpGroup"\n                ],\n                "name": "OwnedBy"\n              },\n              "Searchable": {\n                "addToFilters": true,\n                "fieldName": "owners",\n                "fieldType": "URN",\n                "filterNameOverride": "Owned By",\n                "hasValuesFieldName": "hasOwners",\n                "queryByDefault": false\n              },\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "owner",\n              "doc": "Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name\\n(Caveat: only corpuser is currently supported in the frontend.)"\n            },\n            {\n              "deprecated": true,\n              "type": {\n                "type": "enum",\n                "symbolDocs": {\n                  "BUSINESS_OWNER": "A person or group who is responsible for logical, or business related, aspects of the asset.",\n                  "CONSUMER": "A person, group, or service that consumes the data\\nDeprecated! Use TECHNICAL_OWNER or BUSINESS_OWNER instead.",\n                  "CUSTOM": "Set when ownership type is unknown or a when new one is specified as an ownership type entity for which we have no\\nenum value for. This is used for backwards compatibility",\n                  "DATAOWNER": "A person or group that is owning the data\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "DATA_STEWARD": "A steward, expert, or delegate responsible for the asset.",\n                  "DELEGATE": "A person or a group that overseas the operation, e.g. a DBA or SRE.\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "DEVELOPER": "A person or group that is in charge of developing the code\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "NONE": "No specific type associated to the owner.",\n                  "PRODUCER": "A person, group, or service that produces/generates the data\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "STAKEHOLDER": "A person or a group that has direct business interest\\nDeprecated! Use TECHNICAL_OWNER, BUSINESS_OWNER, or STEWARD instead.",\n                  "TECHNICAL_OWNER": "person or group who is responsible for technical aspects of the asset."\n                },\n                "deprecatedSymbols": {\n                  "CONSUMER": true,\n                  "DATAOWNER": true,\n                  "DELEGATE": true,\n                  "DEVELOPER": true,\n                  "PRODUCER": true,\n                  "STAKEHOLDER": true\n                },\n                "name": "OwnershipType",\n                "namespace": "com.linkedin.common",\n                "symbols": [\n                  "CUSTOM",\n                  "TECHNICAL_OWNER",\n                  "BUSINESS_OWNER",\n                  "DATA_STEWARD",\n                  "NONE",\n                  "DEVELOPER",\n                  "DATAOWNER",\n                  "DELEGATE",\n                  "PRODUCER",\n                  "CONSUMER",\n                  "STAKEHOLDER"\n                ],\n                "doc": "Asset owner types"\n              },\n              "name": "type",\n              "doc": "The type of the ownership"\n            },\n            {\n              "Relationship": {\n                "entityTypes": [\n                  "ownershipType"\n                ],\n                "name": "ownershipType"\n              },\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "typeUrn",\n              "default": null,\n              "doc": "The type of the ownership\\nUrn of type O"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "OwnershipSource",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": {\n                        "type": "enum",\n                        "symbolDocs": {\n                          "AUDIT": "Auditing system or audit logs",\n                          "DATABASE": "Database, e.g. GRANTS table",\n                          "FILE_SYSTEM": "File system, e.g. file/directory owner",\n                          "ISSUE_TRACKING_SYSTEM": "Issue tracking system, e.g. Jira",\n                          "MANUAL": "Manually provided by a user",\n                          "OTHER": "Other sources",\n                          "SERVICE": "Other ownership-like service, e.g. Nuage, ACL service etc",\n                          "SOURCE_CONTROL": "SCM system, e.g. GIT, SVN"\n                        },\n                        "name": "OwnershipSourceType",\n                        "namespace": "com.linkedin.common",\n                        "symbols": [\n                          "AUDIT",\n                          "DATABASE",\n                          "FILE_SYSTEM",\n                          "ISSUE_TRACKING_SYSTEM",\n                          "MANUAL",\n                          "SERVICE",\n                          "SOURCE_CONTROL",\n                          "OTHER"\n                        ]\n                      },\n                      "name": "type",\n                      "doc": "The type of the source"\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "url",\n                      "default": null,\n                      "doc": "A reference URL for the source"\n                    }\n                  ],\n                  "doc": "Source/provider of the ownership information"\n                }\n              ],\n              "name": "source",\n              "default": null,\n              "doc": "Source information for the ownership"\n            },\n            {\n              "Searchable": {\n                "/actor": {\n                  "fieldName": "ownerAttributionActors",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/source": {\n                  "fieldName": "ownerAttributionSources",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/time": {\n                  "fieldName": "ownerAttributionDates",\n                  "fieldType": "DATETIME",\n                  "queryByDefault": false\n                }\n              },\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "MetadataAttribution",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When this metadata was updated."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) responsible for applying the assocated metadata. This can\\neither be a user (in case of UI edits) or the datahub system for automation."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "source",\n                      "default": null,\n                      "doc": "The DataHub source responsible for applying the associated metadata. This will only be filled out\\nwhen a DataHub source is responsible. This includes the specific metadata test urn, the automation urn."\n                    },\n                    {\n                      "type": {\n                        "type": "map",\n                        "values": "string"\n                      },\n                      "name": "sourceDetail",\n                      "default": {},\n                      "doc": "The details associated with why this metadata was applied. For example, this could include\\nthe actual regex rule, sql statement, ingestion pipeline ID, etc."\n                    }\n                  ],\n                  "doc": "Information about who, why, and how this metadata was applied"\n                }\n              ],\n              "name": "attribution",\n              "default": null,\n              "doc": "Information about who, why, and how this metadata was applied"\n            }\n          ],\n          "doc": "Ownership information"\n        }\n      },\n      "name": "owners",\n      "doc": "List of owners of the entity."\n    },\n    {\n      "Searchable": {\n        "/*": {\n          "fieldType": "MAP_ARRAY",\n          "queryByDefault": false\n        }\n      },\n      "type": [\n        {\n          "type": "map",\n          "values": {\n            "type": "array",\n            "items": "string"\n          }\n        },\n        "null"\n      ],\n      "name": "ownerTypes",\n      "default": {},\n      "doc": "Ownership type to Owners map, populated via mutation hook."\n    },\n    {\n      "type": {\n        "type": "record",\n        "name": "AuditStamp",\n        "namespace": "com.linkedin.common",\n        "fields": [\n          {\n            "type": "long",\n            "name": "time",\n            "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": "string",\n            "name": "actor",\n            "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "impersonator",\n            "default": null,\n            "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n          },\n          {\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "message",\n            "default": null,\n            "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n          }\n        ],\n        "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n      },\n      "name": "lastModified",\n      "default": {\n        "actor": "urn:li:corpuser:unknown",\n        "impersonator": null,\n        "time": 0,\n        "message": null\n      },\n      "doc": "Audit stamp containing who last modified the record and when. A value of 0 in the time field indicates missing data."\n    }\n  ],\n  "doc": "Ownership information of an entity."\n}\n')))),(0,t.yg)("h4",{id:"tagproperties"},"tagProperties"),(0,t.yg)("p",null,"Properties associated with a Tag"),(0,t.yg)(i.A,{mdxType:"Tabs"},(0,t.yg)(r.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"name"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Display name of the tag"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"description"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Documentation of the tag"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"colorHex"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"The color associated with the Tag in Hex. For example #FFFFFF."),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(r.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "tagProperties"\n  },\n  "name": "TagProperties",\n  "namespace": "com.linkedin.tag",\n  "fields": [\n    {\n      "Searchable": {\n        "boostScore": 10.0,\n        "enableAutocomplete": true,\n        "fieldNameAliases": [\n          "_entityName"\n        ],\n        "fieldType": "WORD_GRAM"\n      },\n      "type": "string",\n      "name": "name",\n      "doc": "Display name of the tag"\n    },\n    {\n      "Searchable": {},\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "description",\n      "default": null,\n      "doc": "Documentation of the tag"\n    },\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "colorHex",\n      "default": null,\n      "doc": "The color associated with the Tag in Hex. For example #FFFFFF."\n    }\n  ],\n  "doc": "Properties associated with a Tag"\n}\n')))),(0,t.yg)("h4",{id:"status"},"status"),(0,t.yg)("p",null,"The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\nThis aspect is used to represent soft deletes conventionally."),(0,t.yg)(i.A,{mdxType:"Tabs"},(0,t.yg)(r.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"removed"),(0,t.yg)("td",{parentName:"tr",align:null},"boolean"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Whether the entity has been removed (soft-deleted)."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,t.yg)(r.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "status"\n  },\n  "name": "Status",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "BOOLEAN"\n      },\n      "type": "boolean",\n      "name": "removed",\n      "default": false,\n      "doc": "Whether the entity has been removed (soft-deleted)."\n    }\n  ],\n  "doc": "The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\\nThis aspect is used to represent soft deletes conventionally."\n}\n')))),(0,t.yg)("h4",{id:"deprecation"},"deprecation"),(0,t.yg)("p",null,"Deprecation status of an entity"),(0,t.yg)(i.A,{mdxType:"Tabs"},(0,t.yg)(r.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"deprecated"),(0,t.yg)("td",{parentName:"tr",align:null},"boolean"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Whether the entity is deprecated."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"decommissionTime"),(0,t.yg)("td",{parentName:"tr",align:null},"long"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"The time user plan to decommission this entity."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"note"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Additional information about the entity deprecation plan, such as the wiki, doc, RB."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"actor"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"The user URN which will be credited for modifying this deprecation content."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"replacement"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(r.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "deprecation"\n  },\n  "name": "Deprecation",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "addToFilters": true,\n        "fieldType": "BOOLEAN",\n        "filterNameOverride": "Deprecated",\n        "weightsPerFieldValue": {\n          "true": 0.5\n        }\n      },\n      "type": "boolean",\n      "name": "deprecated",\n      "doc": "Whether the entity is deprecated."\n    },\n    {\n      "type": [\n        "null",\n        "long"\n      ],\n      "name": "decommissionTime",\n      "default": null,\n      "doc": "The time user plan to decommission this entity."\n    },\n    {\n      "type": "string",\n      "name": "note",\n      "doc": "Additional information about the entity deprecation plan, such as the wiki, doc, RB."\n    },\n    {\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": "string",\n      "name": "actor",\n      "doc": "The user URN which will be credited for modifying this deprecation content."\n    },\n    {\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "replacement",\n      "default": null\n    }\n  ],\n  "doc": "Deprecation status of an entity"\n}\n')))),(0,t.yg)("h4",{id:"testresults"},"testResults"),(0,t.yg)("p",null,"Information about a Test Result"),(0,t.yg)(i.A,{mdxType:"Tabs"},(0,t.yg)(r.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"failing"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#testresult"},"TestResult"),"[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Results that are failing"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 IsFailing")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"passing"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#testresult"},"TestResult"),"[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Results that are passing"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 IsPassing"))))),(0,t.yg)(r.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "testResults"\n  },\n  "name": "TestResults",\n  "namespace": "com.linkedin.test",\n  "fields": [\n    {\n      "Relationship": {\n        "/*/test": {\n          "entityTypes": [\n            "test"\n          ],\n          "name": "IsFailing"\n        }\n      },\n      "Searchable": {\n        "/*/test": {\n          "fieldName": "failingTests",\n          "fieldType": "URN",\n          "hasValuesFieldName": "hasFailingTests",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "TestResult",\n          "namespace": "com.linkedin.test",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "test",\n              "doc": "The urn of the test"\n            },\n            {\n              "type": {\n                "type": "enum",\n                "symbolDocs": {\n                  "FAILURE": " The Test Failed",\n                  "SUCCESS": " The Test Succeeded"\n                },\n                "name": "TestResultType",\n                "namespace": "com.linkedin.test",\n                "symbols": [\n                  "SUCCESS",\n                  "FAILURE"\n                ]\n              },\n              "name": "type",\n              "doc": "The type of the result"\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "testDefinitionMd5",\n              "default": null,\n              "doc": "The md5 of the test definition that was used to compute this result.\\nSee TestInfo.testDefinition.md5 for more information."\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "AuditStamp",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "impersonator",\n                      "default": null,\n                      "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "message",\n                      "default": null,\n                      "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n                    }\n                  ],\n                  "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n                }\n              ],\n              "name": "lastComputed",\n              "default": null,\n              "doc": "The audit stamp of when the result was computed, including the actor who computed it."\n            }\n          ],\n          "doc": "Information about a Test Result"\n        }\n      },\n      "name": "failing",\n      "doc": "Results that are failing"\n    },\n    {\n      "Relationship": {\n        "/*/test": {\n          "entityTypes": [\n            "test"\n          ],\n          "name": "IsPassing"\n        }\n      },\n      "Searchable": {\n        "/*/test": {\n          "fieldName": "passingTests",\n          "fieldType": "URN",\n          "hasValuesFieldName": "hasPassingTests",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": "com.linkedin.test.TestResult"\n      },\n      "name": "passing",\n      "doc": "Results that are passing"\n    }\n  ],\n  "doc": "Information about a Test Result"\n}\n')))),(0,t.yg)("h3",{id:"common-types"},"Common Types"),(0,t.yg)("p",null,"These types are used across multiple aspects in this entity."),(0,t.yg)("h4",{id:"auditstamp"},"AuditStamp"),(0,t.yg)("p",null,"Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Fields:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"time")," (long): When did the resource/association/sub-resource move into the specific lifecyc..."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"actor")," (string): The entity (e.g. a member URN) which will be credited for moving the resource..."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"impersonator")," (string?): The entity (e.g. a service URN) which performs the change on behalf of the Ac..."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"message")," (string?): Additional context around how DataHub was informed of the particular change. ...")),(0,t.yg)("h4",{id:"testresult"},"TestResult"),(0,t.yg)("p",null,"Information about a Test Result"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Fields:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"test")," (string): The urn of the test"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"type")," (TestResultType): The type of the result"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"testDefinitionMd5")," (string?): The md5 of the test definition that was used to compute this result. See Test..."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"lastComputed")," (AuditStamp?): The audit stamp of when the result was computed, including the actor who comp...")),(0,t.yg)("h3",{id:"relationships"},"Relationships"),(0,t.yg)("h4",{id:"outgoing"},"Outgoing"),(0,t.yg)("p",null,"These are the relationships stored in this entity's aspects"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"OwnedBy"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Corpuser via ",(0,t.yg)("inlineCode",{parentName:"li"},"ownership.owners.owner")),(0,t.yg)("li",{parentName:"ul"},"CorpGroup via ",(0,t.yg)("inlineCode",{parentName:"li"},"ownership.owners.owner")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"ownershipType"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"OwnershipType via ",(0,t.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"IsFailing"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Test via ",(0,t.yg)("inlineCode",{parentName:"li"},"testResults.failing")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"IsPassing"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Test via ",(0,t.yg)("inlineCode",{parentName:"li"},"testResults.passing"))))),(0,t.yg)("h4",{id:"incoming"},"Incoming"),(0,t.yg)("p",null,"These are the relationships stored in other entity's aspects"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"SchemaFieldTaggedWith"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Dataset via ",(0,t.yg)("inlineCode",{parentName:"li"},"schemaMetadata.fields.globalTags")),(0,t.yg)("li",{parentName:"ul"},"Chart via ",(0,t.yg)("inlineCode",{parentName:"li"},"inputFields.fields.schemaField.globalTags")),(0,t.yg)("li",{parentName:"ul"},"Dashboard via ",(0,t.yg)("inlineCode",{parentName:"li"},"inputFields.fields.schemaField.globalTags")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"TaggedWith"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Dataset via ",(0,t.yg)("inlineCode",{parentName:"li"},"schemaMetadata.fields.globalTags.tags")),(0,t.yg)("li",{parentName:"ul"},"Dataset via ",(0,t.yg)("inlineCode",{parentName:"li"},"editableSchemaMetadata.editableSchemaFieldInfo.globalTags.tags")),(0,t.yg)("li",{parentName:"ul"},"Dataset via ",(0,t.yg)("inlineCode",{parentName:"li"},"globalTags.tags")),(0,t.yg)("li",{parentName:"ul"},"DataJob via ",(0,t.yg)("inlineCode",{parentName:"li"},"globalTags.tags")),(0,t.yg)("li",{parentName:"ul"},"DataFlow via ",(0,t.yg)("inlineCode",{parentName:"li"},"globalTags.tags")),(0,t.yg)("li",{parentName:"ul"},"Chart via ",(0,t.yg)("inlineCode",{parentName:"li"},"globalTags.tags")),(0,t.yg)("li",{parentName:"ul"},"Chart via ",(0,t.yg)("inlineCode",{parentName:"li"},"inputFields.fields.schemaField.globalTags.tags")),(0,t.yg)("li",{parentName:"ul"},"Dashboard via ",(0,t.yg)("inlineCode",{parentName:"li"},"globalTags.tags")),(0,t.yg)("li",{parentName:"ul"},"Dashboard via ",(0,t.yg)("inlineCode",{parentName:"li"},"inputFields.fields.schemaField.globalTags.tags")),(0,t.yg)("li",{parentName:"ul"},"Notebook via ",(0,t.yg)("inlineCode",{parentName:"li"},"globalTags.tags")),(0,t.yg)("li",{parentName:"ul"},"Corpuser via ",(0,t.yg)("inlineCode",{parentName:"li"},"globalTags.tags")),(0,t.yg)("li",{parentName:"ul"},"CorpGroup via ",(0,t.yg)("inlineCode",{parentName:"li"},"globalTags.tags")),(0,t.yg)("li",{parentName:"ul"},"Container via ",(0,t.yg)("inlineCode",{parentName:"li"},"globalTags.tags")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"EditableSchemaFieldTaggedWith"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Dataset via ",(0,t.yg)("inlineCode",{parentName:"li"},"editableSchemaMetadata.editableSchemaFieldInfo.globalTags"))))),(0,t.yg)("h3",{id:"global-metadata-model"},(0,t.yg)("a",{parentName:"h3",href:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,t.yg)("p",null,(0,t.yg)("img",{parentName:"p",src:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}h.isMDXComponent=!0}}]);