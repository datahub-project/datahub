"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[98359],{56563:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>y,frontMatter:()=>s,metadata:()=>m,toc:()=>u});t(96540);var a=t(15680),i=t(53720),r=t(5400);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function d(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}const s={sidebar_position:29,title:"DataHubView",slug:"/generated/metamodel/entities/datahubview",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataHubView.md"},c="DataHubView",m={unversionedId:"docs/generated/metamodel/entities/dataHubView",id:"docs/generated/metamodel/entities/dataHubView",title:"DataHubView",description:"Technical Reference Guide",source:"@site/genDocs/docs/generated/metamodel/entities/dataHubView.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/datahubview",permalink:"/docs/generated/metamodel/entities/datahubview",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataHubView.md",tags:[],version:"current",sidebarPosition:29,frontMatter:{sidebar_position:29,title:"DataHubView",slug:"/generated/metamodel/entities/datahubview",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataHubView.md"},sidebar:"overviewSidebar",previous:{title:"Post",permalink:"/docs/generated/metamodel/entities/post"},next:{title:"ER Model Relationship",permalink:"/docs/generated/metamodel/entities/ermodelrelationship"}},p={},u=[{value:"Technical Reference Guide",id:"technical-reference-guide",level:2},{value:"Reading the Field Tables",id:"reading-the-field-tables",level:3},{value:"Aspects",id:"aspects",level:3},{value:"dataHubViewInfo",id:"datahubviewinfo",level:4},{value:"Common Types",id:"common-types",level:3},{value:"AuditStamp",id:"auditstamp",level:4},{value:"Relationships",id:"relationships",level:3},{value:"Incoming",id:"incoming",level:4},{value:"Global Metadata Model",id:"global-metadata-model",level:3}],g={toc:u},h="wrapper";function y(e){var{components:n}=e,t=d(e,["components"]);return(0,a.yg)(h,o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){l(e,n,t[n])}))}return e}({},g,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"datahubview"},"DataHubView"),(0,a.yg)("h2",{id:"technical-reference-guide"},"Technical Reference Guide"),(0,a.yg)("p",null,"The sections above provide an overview of how to use this entity. The following sections provide detailed technical information about how metadata is stored and represented in DataHub."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Aspects")," are the individual pieces of metadata that can be attached to an entity. Each aspect contains specific information (like ownership, tags, or properties) and is stored as a separate record, allowing for flexible and incremental metadata updates."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Relationships")," show how this entity connects to other entities in the metadata graph. These connections are derived from the fields within each aspect and form the foundation of DataHub's knowledge graph."),(0,a.yg)("h3",{id:"reading-the-field-tables"},"Reading the Field Tables"),(0,a.yg)("p",null,"Each aspect's field table includes an ",(0,a.yg)("strong",{parentName:"p"},"Annotations")," column that provides additional metadata about how fields are used:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"\u26a0\ufe0f Deprecated"),": This field is deprecated and may be removed in a future version. Check the description for the recommended alternative"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Searchable"),": This field is indexed and can be searched in DataHub's search interface"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Searchable (fieldname)"),": When the field name in parentheses is shown, it indicates the field is indexed under a different name in the search index. For example, ",(0,a.yg)("inlineCode",{parentName:"li"},"dashboardTool")," is indexed as ",(0,a.yg)("inlineCode",{parentName:"li"},"tool")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"\u2192 RelationshipName"),": This field creates a relationship to another entity. The arrow indicates this field contains a reference (URN) to another entity, and the name indicates the type of relationship (e.g., ",(0,a.yg)("inlineCode",{parentName:"li"},"\u2192 Contains"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"\u2192 OwnedBy"),")")),(0,a.yg)("p",null,"Fields with complex types (like ",(0,a.yg)("inlineCode",{parentName:"p"},"Edge"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"AuditStamp"),") link to their definitions in the ",(0,a.yg)("a",{parentName:"p",href:"#common-types"},"Common Types")," section below."),(0,a.yg)("h3",{id:"aspects"},"Aspects"),(0,a.yg)("h4",{id:"datahubviewinfo"},"dataHubViewInfo"),(0,a.yg)("p",null,"Information about a DataHub View. -- TODO: Understand whether an entity type filter is required."),(0,a.yg)(i.A,{mdxType:"Tabs"},(0,a.yg)(r.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Field"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Required"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"name"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"The name of the View"),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"description"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null},"Description of the view"),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"type"),(0,a.yg)("td",{parentName:"tr",align:null},"DataHubViewType"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"The type of View"),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"definition"),(0,a.yg)("td",{parentName:"tr",align:null},"DataHubViewDefinition"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"The view itself"),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"created"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"#auditstamp"},"AuditStamp")),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Audit stamp capturing the time and actor who created the View."),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"lastModified"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"#auditstamp"},"AuditStamp")),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Audit stamp capturing the time and actor who last modified the View."),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,a.yg)(r.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "dataHubViewInfo"\n  },\n  "name": "DataHubViewInfo",\n  "namespace": "com.linkedin.view",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "TEXT_PARTIAL"\n      },\n      "type": "string",\n      "name": "name",\n      "doc": "The name of the View"\n    },\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "description",\n      "default": null,\n      "doc": "Description of the view"\n    },\n    {\n      "Searchable": {},\n      "type": {\n        "type": "enum",\n        "symbolDocs": {\n          "GLOBAL": "A global view, which all users can see and use.",\n          "PERSONAL": "A view private for a specific person."\n        },\n        "name": "DataHubViewType",\n        "namespace": "com.linkedin.view",\n        "symbols": [\n          "PERSONAL",\n          "GLOBAL"\n        ]\n      },\n      "name": "type",\n      "doc": "The type of View"\n    },\n    {\n      "type": {\n        "type": "record",\n        "name": "DataHubViewDefinition",\n        "namespace": "com.linkedin.view",\n        "fields": [\n          {\n            "type": {\n              "type": "array",\n              "items": "string"\n            },\n            "name": "entityTypes",\n            "doc": "The Entity Types in the scope of the View."\n          },\n          {\n            "type": {\n              "type": "record",\n              "name": "Filter",\n              "namespace": "com.linkedin.metadata.query.filter",\n              "fields": [\n                {\n                  "type": [\n                    "null",\n                    {\n                      "type": "array",\n                      "items": {\n                        "type": "record",\n                        "name": "ConjunctiveCriterion",\n                        "namespace": "com.linkedin.metadata.query.filter",\n                        "fields": [\n                          {\n                            "type": {\n                              "type": "array",\n                              "items": {\n                                "type": "record",\n                                "name": "Criterion",\n                                "namespace": "com.linkedin.metadata.query.filter",\n                                "fields": [\n                                  {\n                                    "type": "string",\n                                    "name": "field",\n                                    "doc": "The name of the field that the criterion refers to"\n                                  },\n                                  {\n                                    "type": "string",\n                                    "name": "value",\n                                    "doc": "The value of the intended field"\n                                  },\n                                  {\n                                    "type": {\n                                      "type": "array",\n                                      "items": "string"\n                                    },\n                                    "name": "values",\n                                    "default": [],\n                                    "doc": "Values. one of which the intended field should match\\nNote, if values is set, the above \\"value\\" field will be ignored"\n                                  },\n                                  {\n                                    "type": {\n                                      "type": "enum",\n                                      "symbolDocs": {\n                                        "ANCESTORS_INCL": "Represent the relation: URN field matches any nested parent in addition to the given URN",\n                                        "CONTAIN": "Represent the relation: String field contains value, e.g. name contains Profile",\n                                        "DESCENDANTS_INCL": "Represent the relation: URN field any nested children in addition to the given URN",\n                                        "END_WITH": "Represent the relation: String field ends with value, e.g. name ends with Event",\n                                        "EQUAL": "Represent the relation: field = value, e.g. platform = hdfs",\n                                        "EXISTS": "Represents the relation: field exists and is non-empty, e.g. owners is not null and != [] (empty)",\n                                        "GREATER_THAN": "Represent the relation greater than, e.g. ownerCount > 5",\n                                        "GREATER_THAN_OR_EQUAL_TO": "Represent the relation greater than or equal to, e.g. ownerCount >= 5",\n                                        "IEQUAL": "Represent the relation: field = value and support case insensitive values, e.g. platform = hdfs",\n                                        "IN": "Represent the relation: String field is one of the array values to, e.g. name in [\\"Profile\\", \\"Event\\"]",\n                                        "IS_NULL": "Represent the relation: field is null, e.g. platform is null",\n                                        "LESS_THAN": "Represent the relation less than, e.g. ownerCount < 3",\n                                        "LESS_THAN_OR_EQUAL_TO": "Represent the relation less than or equal to, e.g. ownerCount <= 3",\n                                        "RELATED_INCL": "Represent the relation: URN field matches any nested child or parent in addition to the given URN",\n                                        "START_WITH": "Represent the relation: String field starts with value, e.g. name starts with PageView"\n                                      },\n                                      "name": "Condition",\n                                      "namespace": "com.linkedin.metadata.query.filter",\n                                      "symbols": [\n                                        "CONTAIN",\n                                        "END_WITH",\n                                        "EQUAL",\n                                        "IEQUAL",\n                                        "IS_NULL",\n                                        "EXISTS",\n                                        "GREATER_THAN",\n                                        "GREATER_THAN_OR_EQUAL_TO",\n                                        "IN",\n                                        "LESS_THAN",\n                                        "LESS_THAN_OR_EQUAL_TO",\n                                        "START_WITH",\n                                        "DESCENDANTS_INCL",\n                                        "ANCESTORS_INCL",\n                                        "RELATED_INCL"\n                                      ],\n                                      "doc": "The matching condition in a filter criterion"\n                                    },\n                                    "name": "condition",\n                                    "default": "EQUAL",\n                                    "doc": "The condition for the criterion, e.g. EQUAL, START_WITH"\n                                  },\n                                  {\n                                    "type": "boolean",\n                                    "name": "negated",\n                                    "default": false,\n                                    "doc": "Whether the condition should be negated"\n                                  }\n                                ],\n                                "doc": "A criterion for matching a field with given value"\n                              }\n                            },\n                            "name": "and",\n                            "doc": "A list of and criteria the filter applies to the query"\n                          }\n                        ],\n                        "doc": "A list of criterion and\'d together."\n                      }\n                    }\n                  ],\n                  "name": "or",\n                  "default": null,\n                  "doc": "A list of disjunctive criterion for the filter. (or operation to combine filters)"\n                },\n                {\n                  "type": [\n                    "null",\n                    {\n                      "type": "array",\n                      "items": "com.linkedin.metadata.query.filter.Criterion"\n                    }\n                  ],\n                  "name": "criteria",\n                  "default": null,\n                  "doc": "Deprecated! A list of conjunctive criterion for the filter. If \\"or\\" field is provided, then this field is ignored."\n                }\n              ],\n              "doc": "The filter for finding a record or a collection of records"\n            },\n            "name": "filter",\n            "doc": "The filter criteria, which represents the view itself"\n          }\n        ],\n        "doc": "A View definition."\n      },\n      "name": "definition",\n      "doc": "The view itself"\n    },\n    {\n      "Searchable": {\n        "/actor": {\n          "fieldName": "createdBy",\n          "fieldType": "URN"\n        },\n        "/time": {\n          "fieldName": "createdAt",\n          "fieldType": "DATETIME"\n        }\n      },\n      "type": {\n        "type": "record",\n        "name": "AuditStamp",\n        "namespace": "com.linkedin.common",\n        "fields": [\n          {\n            "type": "long",\n            "name": "time",\n            "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": "string",\n            "name": "actor",\n            "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "impersonator",\n            "default": null,\n            "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n          },\n          {\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "message",\n            "default": null,\n            "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n          }\n        ],\n        "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n      },\n      "name": "created",\n      "doc": "Audit stamp capturing the time and actor who created the View."\n    },\n    {\n      "Searchable": {\n        "/time": {\n          "fieldName": "lastModifiedAt",\n          "fieldType": "DATETIME"\n        }\n      },\n      "type": "com.linkedin.common.AuditStamp",\n      "name": "lastModified",\n      "doc": "Audit stamp capturing the time and actor who last modified the View."\n    }\n  ],\n  "doc": "Information about a DataHub View. -- TODO: Understand whether an entity type filter is required."\n}\n')))),(0,a.yg)("h3",{id:"common-types"},"Common Types"),(0,a.yg)("p",null,"These types are used across multiple aspects in this entity."),(0,a.yg)("h4",{id:"auditstamp"},"AuditStamp"),(0,a.yg)("p",null,"Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Fields:")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"time")," (long): When did the resource/association/sub-resource move into the specific lifecyc..."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"actor")," (string): The entity (e.g. a member URN) which will be credited for moving the resource..."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"impersonator")," (string?): The entity (e.g. a service URN) which performs the change on behalf of the Ac..."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"message")," (string?): Additional context around how DataHub was informed of the particular change. ...")),(0,a.yg)("h3",{id:"relationships"},"Relationships"),(0,a.yg)("h4",{id:"incoming"},"Incoming"),(0,a.yg)("p",null,"These are the relationships stored in other entity's aspects"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"viewedWith"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"GlobalSettings via ",(0,a.yg)("inlineCode",{parentName:"li"},"globalSettingsInfo.views.defaultView"))))),(0,a.yg)("h3",{id:"global-metadata-model"},(0,a.yg)("a",{parentName:"h3",href:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,a.yg)("p",null,(0,a.yg)("img",{parentName:"p",src:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}y.isMDXComponent=!0}}]);