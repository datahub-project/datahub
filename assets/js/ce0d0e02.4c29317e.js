"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[38660],{91362:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>u,toc:()=>m});t(96540);var n=t(15680),i=t(53720),p=t(5400);function o(a,e,t){return e in a?Object.defineProperty(a,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):a[e]=t,a}function r(a,e){return e=null!=e?e:{},Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(e)):function(a,e){var t=Object.keys(a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),t.push.apply(t,n)}return t}(Object(e)).forEach((function(t){Object.defineProperty(a,t,Object.getOwnPropertyDescriptor(e,t))})),a}function s(a,e){if(null==a)return{};var t,n,i=function(a,e){if(null==a)return{};var t,n,i={},p=Object.keys(a);for(n=0;n<p.length;n++)t=p[n],e.indexOf(t)>=0||(i[t]=a[t]);return i}(a,e);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(a);for(n=0;n<p.length;n++)t=p[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(a,t)&&(i[t]=a[t])}return i}const l={title:"Applications (Experimental - Beta Feature)",slug:"/api/tutorials/applications",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/applications.md"},c="Applications (Experimental - Beta Feature)",u={unversionedId:"docs/api/tutorials/applications",id:"docs/api/tutorials/applications",title:"Applications (Experimental - Beta Feature)",description:"Why Would You Use Applications?",source:"@site/genDocs/docs/api/tutorials/applications.md",sourceDirName:"docs/api/tutorials",slug:"/api/tutorials/applications",permalink:"/docs/api/tutorials/applications",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/applications.md",tags:[],version:"current",frontMatter:{title:"Applications (Experimental - Beta Feature)",slug:"/api/tutorials/applications",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/applications.md"},sidebar:"overviewSidebar",previous:{title:"MLModel & MLModelGroup",permalink:"/docs/api/tutorials/mlmodel-mlmodelgroup"},next:{title:"AI/ML Framework Integration with DataHub",permalink:"/docs/api/tutorials/ml"}},d={},m=[{value:"Why Would You Use Applications?",id:"why-would-you-use-applications",level:2},{value:"Goal Of This Guide",id:"goal-of-this-guide",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Create Application",id:"create-application",level:2},{value:"Expected Outcomes of Creating Applications",id:"expected-outcomes-of-creating-applications",level:3},{value:"Read Applications",id:"read-applications",level:2},{value:"Add Application",id:"add-application",level:2},{value:"Expected Outcomes of Adding Application",id:"expected-outcomes-of-adding-application",level:3},{value:"Remove Applications",id:"remove-applications",level:2}],g={toc:m},y="wrapper";function h(a){var{components:e}=a,t=s(a,["components"]);return(0,n.yg)(y,r(function(a){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{},n=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(t).filter((function(a){return Object.getOwnPropertyDescriptor(t,a).enumerable})))),n.forEach((function(e){o(a,e,t[e])}))}return a}({},g,t),{components:e,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"applications-experimental---beta-feature"},"Applications (Experimental - Beta Feature)"),(0,n.yg)("h2",{id:"why-would-you-use-applications"},"Why Would You Use Applications?"),(0,n.yg)("p",null,"Applications are groupings of assets based on a particular purpose, similar to domains and data products.\nFor more information on what an Application is, and how it differs from other concepts, refer to ",(0,n.yg)("a",{parentName:"p",href:"/docs/features/feature-guides/applications"},"About DataHub Applications"),"."),(0,n.yg)("h3",{id:"goal-of-this-guide"},"Goal Of This Guide"),(0,n.yg)("p",null,"This guide will show you how to"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Create an application."),(0,n.yg)("li",{parentName:"ul"},"Read the application attached to a dataset."),(0,n.yg)("li",{parentName:"ul"},"Add a dataset to an application"),(0,n.yg)("li",{parentName:"ul"},"Remove the application from a dataset.")),(0,n.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,n.yg)("p",null,"For this tutorial, you need to deploy DataHub Quickstart and ingest sample data.\nFor detailed steps, please refer to ",(0,n.yg)("a",{parentName:"p",href:"/docs/quickstart"},"Datahub Quickstart Guide"),"."),(0,n.yg)("h2",{id:"create-application"},"Create Application"),(0,n.yg)(i.A,{mdxType:"Tabs"},(0,n.yg)(p.A,{value:"graphql",label:"GraphQL",default:!0,mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'mutation createApplication {\n  createApplication(\n    input: {\n      properties: {\n        name: "My New Application"\n        description: "An optional description"\n      }\n    }\n  )\n}\n')),(0,n.yg)("p",null,"If you see the following response, the operation was successful:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createApplication": "<application_urn>"\n  },\n  "extensions": {}\n}\n'))),(0,n.yg)(p.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/application_create_full.py\n#!/usr/bin/env python3\n\nimport os\n\nfrom datahub.emitter.mce_builder import make_dataset_urn, make_user_urn\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import (\n    ApplicationPropertiesClass,\n    ApplicationsClass,\n    DomainsClass,\n    GlobalTagsClass,\n    OwnerClass,\n    OwnershipClass,\n    OwnershipTypeClass,\n    TagAssociationClass,\n)\n\n\n# Utility function for creating application URNs (not yet in SDK)\ndef make_application_urn(application_id: str) -> str:\n    """Create a DataHub application URN."""\n    return f"urn:li:application:{application_id}"\n\n\ndef create_banking_application():\n    """Complete example of creating an application and associating entities."""\n\n    # Initialize emitter\n    gms_server = os.getenv("DATAHUB_GMS_URL", "http://localhost:8080")\n    token = os.getenv("DATAHUB_GMS_TOKEN")\n    emitter = DatahubRestEmitter(gms_server=gms_server, token=token)\n\n    try:\n        # Create application\n        application_urn = make_application_urn("banking-app")\n\n        # 1. Application Properties\n        application_properties = ApplicationPropertiesClass(\n            name="Banking Application",\n            description="Core banking application handling customer accounts and transactions.",\n        )\n\n        emitter.emit(\n            MetadataChangeProposalWrapper(\n                entityUrn=application_urn, aspect=application_properties\n            )\n        )\n\n        # 2. Ownership\n        ownership = OwnershipClass(\n            owners=[\n                OwnerClass(\n                    owner=make_user_urn("john.smith@company.com"),\n                    type=OwnershipTypeClass.TECHNICAL_OWNER,\n                ),\n                OwnerClass(\n                    owner=make_user_urn("jane.doe@company.com"),\n                    type=OwnershipTypeClass.BUSINESS_OWNER,\n                ),\n            ]\n        )\n        emitter.emit(\n            MetadataChangeProposalWrapper(entityUrn=application_urn, aspect=ownership)\n        )\n\n        # 3. Tags and Domain\n        tags = GlobalTagsClass(tags=[TagAssociationClass(tag="urn:li:tag:Production")])\n        emitter.emit(\n            MetadataChangeProposalWrapper(entityUrn=application_urn, aspect=tags)\n        )\n\n        domains = DomainsClass(domains=["urn:li:domain:finance-domain"])\n        emitter.emit(\n            MetadataChangeProposalWrapper(entityUrn=application_urn, aspect=domains)\n        )\n\n        # 4. Associate datasets\n        datasets = ["customer_accounts", "transaction_history", "account_balances"]\n\n        for dataset_name in datasets:\n            dataset_urn = make_dataset_urn("hive", dataset_name, "PROD")\n            applications_aspect = ApplicationsClass(applications=[application_urn])\n\n            emitter.emit(\n                MetadataChangeProposalWrapper(\n                    entityUrn=dataset_urn, aspect=applications_aspect\n                )\n            )\n\n        print(f"Successfully created application: {application_urn}")\n        print(f"Associated {len(datasets)} datasets with the application")\n\n    finally:\n        emitter.close()\n\n\nif __name__ == "__main__":\n    create_banking_application()\n\n')))),(0,n.yg)("h3",{id:"expected-outcomes-of-creating-applications"},"Expected Outcomes of Creating Applications"),(0,n.yg)("p",null,"You can now see the applications under ",(0,n.yg)("inlineCode",{parentName:"p"},"Applications")," sidebar section."),(0,n.yg)("p",{align:"center"},(0,n.yg)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/master//imgs/applications/ManageApplicationsScreen.png"})),(0,n.yg)("h2",{id:"read-applications"},"Read Applications"),(0,n.yg)(i.A,{mdxType:"Tabs"},(0,n.yg)(p.A,{value:"graphql",label:"GraphQL",default:!0,mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'query {\n  dataset(urn: "urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_created,PROD)") {\n    application {\n      application {\n        urn\n        properties {\n          name\n          description\n        }\n      }\n    }\n  }\n}\n')),(0,n.yg)("p",null,"If you see the following response, the operation was successful:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'{\n  "data": {\n    "dataset": {\n      "application": {\n        "application": {\n          "urn": "urn:li:application:71b3bf7b-2e3f-4686-bfe1-93172c8c4e10",\n          "properties": {\n            "name": "Cancellation Processing"\n          }\n        }\n      }\n    }\n  },\n  "extensions": {}\n}\n')))),(0,n.yg)("h2",{id:"add-application"},"Add Application"),(0,n.yg)(i.A,{mdxType:"Tabs"},(0,n.yg)(p.A,{value:"graphql",label:"GraphQL",default:!0,mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'mutation batchSetApplication {\n  batchSetApplication(\n    input: {\n      resourceUrns: [\n        "urn:li:dataset:(urn:li:dataPlatform:bigquery,banking.public.customer,PROD)"\n      ]\n      applicationUrn: "urn:li:application:new-customer-signup"\n    }\n  )\n}\n')),(0,n.yg)("p",null,"If you see the following response, the operation was successful:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "batchSetApplication": true\n  },\n  "extensions": {}\n}\n'))),(0,n.yg)(p.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/application_add.py\n#!/usr/bin/env python3\nfrom datahub.emitter.mce_builder import make_dataset_urn\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import ApplicationsClass\n\n\n# Utility function for creating application URNs (not yet in SDK)\ndef make_application_urn(application_id: str) -> str:\n    """Create a DataHub application URN."""\n    return f"urn:li:application:{application_id}"\n\n\ndef add_application_aspect():\n    emitter = DatahubRestEmitter(gms_server="http://localhost:8080", token="")\n    dataset_urn = make_dataset_urn("snowflake", "database.schema.table", "PROD")\n\n    application_urn = make_application_urn("my_application")\n    applications_aspect = ApplicationsClass(applications=[application_urn])\n\n    emitter.emit(\n        MetadataChangeProposalWrapper(entityUrn=dataset_urn, aspect=applications_aspect)\n    )\n\n    print(f"Successfully added application: {application_urn}")\n\n\nif __name__ == "__main__":\n    add_application_aspect()\n\n')))),(0,n.yg)("h3",{id:"expected-outcomes-of-adding-application"},"Expected Outcomes of Adding Application"),(0,n.yg)("p",null,"You can now see the application has been added to the dataset."),(0,n.yg)("h2",{id:"remove-applications"},"Remove Applications"),(0,n.yg)(i.A,{mdxType:"Tabs"},(0,n.yg)(p.A,{value:"graphql",label:"GraphQL",default:!0,mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'mutation batchSetApplication {\n  batchSetApplication(\n    input: {\n      resourceUrns: [\n        "urn:li:dataset:(urn:li:dataPlatform:bigquery,banking.public.customer,PROD)"\n      ],\n      applicationUrn: null\n    }\n  )\n}\n')),(0,n.yg)("p",null,"Expected Response:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'{\n  "data": {\n    "batchSetApplication": true\n  },\n  "extensions": {}\n}\n'))),(0,n.yg)(p.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/application_remove.py\n#!/usr/bin/env python3\n\nfrom datahub.emitter.mce_builder import make_dataset_urn\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import ApplicationsClass\n\n\ndef remove_application_aspect():\n    emitter = DatahubRestEmitter(gms_server="http://localhost:8080", token="")\n    dataset_urn = make_dataset_urn("snowflake", "database.schema.table", "PROD")\n\n    applications_aspect = ApplicationsClass(applications=[])\n\n    emitter.emit(\n        MetadataChangeProposalWrapper(entityUrn=dataset_urn, aspect=applications_aspect)\n    )\n\n    print("Successfully removed application")\n\n\nif __name__ == "__main__":\n    remove_application_aspect()\n\n')))))}h.isMDXComponent=!0}}]);