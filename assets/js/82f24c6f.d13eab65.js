"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[32354],{10489:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>m,default:()=>h,frontMatter:()=>d,metadata:()=>p,toc:()=>y});a(96540);var t=a(15680),r=a(53720),i=a(5400);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))})),e}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const d={sidebar_position:15,title:"GlossaryNode",slug:"/generated/metamodel/entities/glossarynode",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/glossaryNode.md"},m="GlossaryNode",p={unversionedId:"docs/generated/metamodel/entities/glossaryNode",id:"docs/generated/metamodel/entities/glossaryNode",title:"GlossaryNode",description:"A GlossaryNode represents a hierarchical grouping or category within DataHub's Business Glossary. GlossaryNodes act as folders or containers that organize GlossaryTerms into a logical structure, making it easier to navigate and manage large business glossaries.",source:"@site/genDocs/docs/generated/metamodel/entities/glossaryNode.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/glossarynode",permalink:"/docs/generated/metamodel/entities/glossarynode",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/glossaryNode.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15,title:"GlossaryNode",slug:"/generated/metamodel/entities/glossarynode",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/glossaryNode.md"},sidebar:"overviewSidebar",previous:{title:"GlossaryTerm",permalink:"/docs/generated/metamodel/entities/glossaryterm"},next:{title:"Assertion",permalink:"/docs/generated/metamodel/entities/assertion"}},c={},y=[{value:"Identity",id:"identity",level:2},{value:"URN Structure",id:"urn-structure",level:3},{value:"Examples",id:"examples",level:3},{value:"Best Practices for Node Names",id:"best-practices-for-node-names",level:3},{value:"Important Capabilities",id:"important-capabilities",level:2},{value:"Core Node Information (glossaryNodeInfo)",id:"core-node-information-glossarynodeinfo",level:3},{value:"Hierarchical Structure",id:"hierarchical-structure",level:3},{value:"Ownership and Governance",id:"ownership-and-governance",level:3},{value:"Documentation and Links",id:"documentation-and-links",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"Creating a GlossaryNode",id:"creating-a-glossarynode",level:3},{value:"Managing Hierarchy",id:"managing-hierarchy",level:3},{value:"Adding Ownership",id:"adding-ownership",level:3},{value:"Querying GlossaryNodes",id:"querying-glossarynodes",level:3},{value:"Bulk Operations",id:"bulk-operations",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"Relationship with GlossaryTerm",id:"relationship-with-glossaryterm",level:3},{value:"Parent-Child Relationships",id:"parent-child-relationships",level:3},{value:"GraphQL API",id:"graphql-api",level:3},{value:"Access Control and Permissions",id:"access-control-and-permissions",level:3},{value:"Manage Direct Glossary Children",id:"manage-direct-glossary-children",level:4},{value:"Manage All Glossary Children",id:"manage-all-glossary-children",level:4},{value:"Global Privilege: Manage Glossaries",id:"global-privilege-manage-glossaries",level:4},{value:"Integration with Search and Discovery",id:"integration-with-search-and-discovery",level:3},{value:"Notable Exceptions",id:"notable-exceptions",level:2},{value:"Node Name vs Display Name",id:"node-name-vs-display-name",level:3},{value:"Circular References Not Allowed",id:"circular-references-not-allowed",level:3},{value:"Root-Level Nodes",id:"root-level-nodes",level:3},{value:"Deleting Nodes with Children",id:"deleting-nodes-with-children",level:3},{value:"Display Properties",id:"display-properties",level:3},{value:"No Direct Application to Assets",id:"no-direct-application-to-assets",level:3},{value:"Moving Nodes Affects All Descendants",id:"moving-nodes-affects-all-descendants",level:3},{value:"Technical Reference Guide",id:"technical-reference-guide",level:2},{value:"Reading the Field Tables",id:"reading-the-field-tables",level:3},{value:"Aspects",id:"aspects",level:3},{value:"glossaryNodeKey",id:"glossarynodekey",level:4},{value:"glossaryNodeInfo",id:"glossarynodeinfo",level:4},{value:"ownership",id:"ownership",level:4},{value:"status",id:"status",level:4},{value:"institutionalMemory",id:"institutionalmemory",level:4},{value:"structuredProperties",id:"structuredproperties",level:4},{value:"forms",id:"forms",level:4},{value:"testResults",id:"testresults",level:4},{value:"subTypes",id:"subtypes",level:4},{value:"displayProperties",id:"displayproperties",level:4},{value:"assetSettings",id:"assetsettings",level:4},{value:"Common Types",id:"common-types",level:3},{value:"AuditStamp",id:"auditstamp",level:4},{value:"FormAssociation",id:"formassociation",level:4},{value:"TestResult",id:"testresult",level:4},{value:"Relationships",id:"relationships",level:3},{value:"Self",id:"self",level:4},{value:"Outgoing",id:"outgoing",level:4},{value:"Incoming",id:"incoming",level:4},{value:"Global Metadata Model",id:"global-metadata-model",level:3}],g={toc:y},u="wrapper";function h(e){var{components:n}=e,a=s(e,["components"]);return(0,t.yg)(u,o(function(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{},t=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),t.forEach((function(n){l(e,n,a[n])}))}return e}({},g,a),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"glossarynode"},"GlossaryNode"),(0,t.yg)("p",null,"A GlossaryNode represents a hierarchical grouping or category within DataHub's Business Glossary. GlossaryNodes act as folders or containers that organize GlossaryTerms into a logical structure, making it easier to navigate and manage large business glossaries."),(0,t.yg)("p",null,"In practice, GlossaryNodes allow you to:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Create hierarchical categories for organizing business terminology"),(0,t.yg)("li",{parentName:"ul"},"Build multi-level taxonomies (e.g., Finance > Revenue > Recurring Revenue)"),(0,t.yg)("li",{parentName:"ul"},"Establish ownership and governance over specific glossary sections"),(0,t.yg)("li",{parentName:"ul"},"Apply metadata consistently across related terms within a category"),(0,t.yg)("li",{parentName:"ul"},"Manage permissions at the category level")),(0,t.yg)("p",null,'For example, you might create a GlossaryNode called "Finance" containing terms like "Revenue", "Profit", and "EBITDA", with a nested GlossaryNode "Compliance" underneath containing "SOX", "GDPR", and "CCPA" terms.'),(0,t.yg)("h2",{id:"identity"},"Identity"),(0,t.yg)("p",null,"GlossaryNodes are uniquely identified by a single field: their ",(0,t.yg)("strong",{parentName:"p"},"name"),". This name serves as the persistent identifier for the node throughout its lifecycle."),(0,t.yg)("h3",{id:"urn-structure"},"URN Structure"),(0,t.yg)("p",null,"The URN (Uniform Resource Name) for a GlossaryNode follows this pattern:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"urn:li:glossaryNode:<node_name>\n")),(0,t.yg)("p",null,"Where:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"<node_name>"),': A unique string identifier for the node. This can be human-readable (e.g., "Finance") or a generated ID (e.g., "fin-category-001" or a UUID).')),(0,t.yg)("h3",{id:"examples"},"Examples"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"# Simple node name\nurn:li:glossaryNode:Finance\n\n# Hierarchical naming convention (common pattern)\nurn:li:glossaryNode:Finance.Revenue\nurn:li:glossaryNode:Classification\nurn:li:glossaryNode:Classification.DataSensitivity\n\n# UUID-based identifier\nurn:li:glossaryNode:41516e31-0acb-fd90-76ff-fc2c98d2d1a3\n\n# Descriptive identifier\nurn:li:glossaryNode:PersonalInformation\n")),(0,t.yg)("h3",{id:"best-practices-for-node-names"},"Best Practices for Node Names"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Use hierarchical notation"),": Prefix nodes with their parent category (e.g., ",(0,t.yg)("inlineCode",{parentName:"li"},"Finance.Revenue"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"Classification.PII"),") to indicate structure even though the name is flat."),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Be consistent"),": Choose a naming convention (camelCase, dot notation, etc.) and apply it uniformly across your glossary."),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Keep it permanent"),": The node name is the identifier and should not change. Use the ",(0,t.yg)("inlineCode",{parentName:"li"},"name")," field in ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryNodeInfo")," for the display name."),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Consider depth"),": While nesting is supported, keep hierarchies manageable (typically 2-4 levels deep) for usability.")),(0,t.yg)("h2",{id:"important-capabilities"},"Important Capabilities"),(0,t.yg)("h3",{id:"core-node-information-glossarynodeinfo"},"Core Node Information (glossaryNodeInfo)"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"glossaryNodeInfo")," aspect contains the essential information about a glossary node:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"definition")," (required): A description of what this node/category represents. This helps users understand the purpose and scope of terms within this node."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"name"),': The display name shown in the UI. This can be more human-friendly than the URN identifier (e.g., "Financial Metrics" vs. "FinancialMetrics").'),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"parentNode"),": A reference to another GlossaryNode that acts as the parent in the hierarchy. This creates the tree structure visible in the UI."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"id"),": An optional identifier field that can store an external reference or alternate ID."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"customProperties"),": Key-value pairs for additional metadata specific to your organization.")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'{\n  "name": "Financial Metrics",\n  "definition": "Category for all financial and accounting-related business terms including revenue, costs, and profitability measures.",\n  "parentNode": "urn:li:glossaryNode:Finance"\n}\n')),(0,t.yg)("h3",{id:"hierarchical-structure"},"Hierarchical Structure"),(0,t.yg)("p",null,"GlossaryNodes support arbitrary nesting through the ",(0,t.yg)("inlineCode",{parentName:"p"},"parentNode")," field, creating tree structures:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"GlossaryNode: DataGovernance\n  \u251c\u2500\u2500 GlossaryNode: Classification\n  \u2502   \u251c\u2500\u2500 GlossaryTerm: Public\n  \u2502   \u251c\u2500\u2500 GlossaryTerm: Internal\n  \u2502   \u2514\u2500\u2500 GlossaryTerm: Confidential\n  \u2502\n  \u251c\u2500\u2500 GlossaryNode: PersonalInformation\n  \u2502   \u251c\u2500\u2500 GlossaryNode: DirectIdentifiers\n  \u2502   \u2502   \u251c\u2500\u2500 GlossaryTerm: Email\n  \u2502   \u2502   \u2514\u2500\u2500 GlossaryTerm: SSN\n  \u2502   \u2514\u2500\u2500 GlossaryNode: IndirectIdentifiers\n  \u2502       \u251c\u2500\u2500 GlossaryTerm: IPAddress\n  \u2502       \u2514\u2500\u2500 GlossaryTerm: DeviceID\n  \u2502\n  \u2514\u2500\u2500 GlossaryNode: Compliance\n      \u251c\u2500\u2500 GlossaryTerm: GDPR\n      \u2514\u2500\u2500 GlossaryTerm: CCPA\n")),(0,t.yg)("p",null,"Key characteristics:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"A GlossaryNode can have at most one parent node (single inheritance)"),(0,t.yg)("li",{parentName:"ul"},"A GlossaryNode can contain both GlossaryTerms and child GlossaryNodes"),(0,t.yg)("li",{parentName:"ul"},"Nodes at the root level (no parent) appear at the top of the glossary hierarchy"),(0,t.yg)("li",{parentName:"ul"},"Moving a node automatically moves all its descendants")),(0,t.yg)("h3",{id:"ownership-and-governance"},"Ownership and Governance"),(0,t.yg)("p",null,"GlossaryNodes support standard ownership metadata through the ",(0,t.yg)("inlineCode",{parentName:"p"},"ownership")," aspect. Ownership at the node level can represent:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Stewardship responsibility for maintaining the category and its terms"),(0,t.yg)("li",{parentName:"ul"},"Subject matter expertise for the business domain"),(0,t.yg)("li",{parentName:"ul"},"Accountability for term quality and accuracy within the category")),(0,t.yg)("p",null,"Ownership is particularly powerful for GlossaryNodes because:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Owners can be granted special permissions (Manage Direct Children, Manage All Children)"),(0,t.yg)("li",{parentName:"ul"},"Ownership can cascade to terms within the node"),(0,t.yg)("li",{parentName:"ul"},"It establishes clear accountability for glossary sections")),(0,t.yg)("h3",{id:"documentation-and-links"},"Documentation and Links"),(0,t.yg)("p",null,"GlossaryNodes support the ",(0,t.yg)("inlineCode",{parentName:"p"},"institutionalMemory")," aspect, allowing you to:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Link to external documentation (Confluence pages, wikis, etc.)"),(0,t.yg)("li",{parentName:"ul"},"Reference governance policies or standards"),(0,t.yg)("li",{parentName:"ul"},"Point to training materials or style guides"),(0,t.yg)("li",{parentName:"ul"},"Maintain a history of important links related to the category")),(0,t.yg)("p",null,"This is especially useful for top-level nodes representing major domains or initiatives."),(0,t.yg)("h2",{id:"code-examples"},"Code Examples"),(0,t.yg)("h3",{id:"creating-a-glossarynode"},"Creating a GlossaryNode"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Create a root-level GlossaryNode"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/glossary_node_create.py\nimport logging\nimport os\n\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata._urns.urn_defs import GlossaryNodeUrn\nfrom datahub.metadata.schema_classes import GlossaryNodeInfoClass\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Create a GlossaryNode URN\nnode_urn = GlossaryNodeUrn("Finance")\n\n# Create the glossary node info with definition and display name\nnode_info = GlossaryNodeInfoClass(\n    definition="Category for all financial and accounting-related business terms including revenue, costs, and profitability measures.",\n    name="Financial Metrics",\n)\n\n# Create metadata change proposal\nevent: MetadataChangeProposalWrapper = MetadataChangeProposalWrapper(\n    entityUrn=str(node_urn),\n    aspect=node_info,\n)\n\n# Emit to DataHub\ngms_server = os.getenv("DATAHUB_GMS_URL", "http://localhost:8080")\ntoken = os.getenv("DATAHUB_GMS_TOKEN")\nrest_emitter = DatahubRestEmitter(gms_server=gms_server, token=token)\nrest_emitter.emit(event)\n\nlog.info(f"Created glossary node {node_urn}")\n\n'))),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Create a nested GlossaryNode with parent"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/glossary_node_create_nested.py\nimport logging\nimport os\n\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata._urns.urn_defs import GlossaryNodeUrn\nfrom datahub.metadata.schema_classes import GlossaryNodeInfoClass\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# First, ensure the parent node exists (Finance)\nparent_node_urn = GlossaryNodeUrn("Finance")\nparent_node_info = GlossaryNodeInfoClass(\n    definition="Top-level category for financial metrics and terms",\n    name="Finance",\n)\n\nparent_event = MetadataChangeProposalWrapper(\n    entityUrn=str(parent_node_urn),\n    aspect=parent_node_info,\n)\n\n# Create a nested child node under Finance\nchild_node_urn = GlossaryNodeUrn("RevenueMetrics")\nchild_node_info = GlossaryNodeInfoClass(\n    definition="Metrics related to revenue recognition and reporting",\n    name="Revenue Metrics",\n    parentNode=str(parent_node_urn),  # Set the parent relationship\n)\n\nchild_event = MetadataChangeProposalWrapper(\n    entityUrn=str(child_node_urn),\n    aspect=child_node_info,\n)\n\n# Emit both to DataHub\nrest_emitter = DatahubRestEmitter(\n    gms_server=os.getenv("DATAHUB_GMS_URL", "http://localhost:8080"),\n    token=os.getenv("DATAHUB_GMS_TOKEN"),\n)\nrest_emitter.emit(parent_event)\nrest_emitter.emit(child_event)\n\nlog.info(f"Created parent glossary node {parent_node_urn}")\nlog.info(f"Created child glossary node {child_node_urn} under {parent_node_urn}")\n\n'))),(0,t.yg)("h3",{id:"managing-hierarchy"},"Managing Hierarchy"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Build a multi-level glossary hierarchy"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/glossary_term_create_hierarchy.py\nimport logging\nimport os\n\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata._urns.urn_defs import GlossaryNodeUrn, GlossaryTermUrn\nfrom datahub.metadata.schema_classes import (\n    GlossaryNodeInfoClass,\n    GlossaryTermInfoClass,\n)\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Create a multi-level glossary hierarchy:\n# DataGovernance\n#   \u251c\u2500\u2500 Classification\n#   \u2502   \u251c\u2500\u2500 Public (term)\n#   \u2502   \u2514\u2500\u2500 Confidential (term)\n#   \u2514\u2500\u2500 PersonalInformation\n#       \u251c\u2500\u2500 Email (term)\n#       \u2514\u2500\u2500 SSN (term)\n\nrest_emitter = DatahubRestEmitter(\n    gms_server=os.getenv("DATAHUB_GMS_URL", "http://localhost:8080"),\n    token=os.getenv("DATAHUB_GMS_TOKEN"),\n)\n\n# Level 1: Root node\nroot_urn = GlossaryNodeUrn("DataGovernance")\nroot_info = GlossaryNodeInfoClass(\n    definition="Top-level governance structure for data classification and management",\n    name="Data Governance",\n)\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=str(root_urn),\n        aspect=root_info,\n    )\n)\nlog.info(f"Created root node: {root_urn}")\n\n# Level 2: Child nodes\nclassification_urn = GlossaryNodeUrn("Classification")\nclassification_info = GlossaryNodeInfoClass(\n    definition="Data classification categories",\n    name="Classification",\n    parentNode=str(root_urn),\n)\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=str(classification_urn),\n        aspect=classification_info,\n    )\n)\nlog.info(f"Created child node: {classification_urn}")\n\npii_urn = GlossaryNodeUrn("PersonalInformation")\npii_info = GlossaryNodeInfoClass(\n    definition="Personal and sensitive data categories",\n    name="Personal Information",\n    parentNode=str(root_urn),\n)\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=str(pii_urn),\n        aspect=pii_info,\n    )\n)\nlog.info(f"Created child node: {pii_urn}")\n\n# Level 3: Terms under Classification\npublic_term_urn = GlossaryTermUrn("Public")\npublic_term_info = GlossaryTermInfoClass(\n    definition="Publicly available data with no restrictions",\n    termSource="INTERNAL",\n    name="Public",\n    parentNode=str(classification_urn),\n)\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=str(public_term_urn),\n        aspect=public_term_info,\n    )\n)\nlog.info(f"Created term: {public_term_urn}")\n\nconfidential_term_urn = GlossaryTermUrn("Confidential")\nconfidential_term_info = GlossaryTermInfoClass(\n    definition="Restricted access data for internal use only",\n    termSource="INTERNAL",\n    name="Confidential",\n    parentNode=str(classification_urn),\n)\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=str(confidential_term_urn),\n        aspect=confidential_term_info,\n    )\n)\nlog.info(f"Created term: {confidential_term_urn}")\n\n# Level 3: Terms under PersonalInformation\nemail_term_urn = GlossaryTermUrn("Email")\nemail_term_info = GlossaryTermInfoClass(\n    definition="Email addresses that can identify individuals",\n    termSource="INTERNAL",\n    name="Email Address",\n    parentNode=str(pii_urn),\n)\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=str(email_term_urn),\n        aspect=email_term_info,\n    )\n)\nlog.info(f"Created term: {email_term_urn}")\n\nssn_term_urn = GlossaryTermUrn("SSN")\nssn_term_info = GlossaryTermInfoClass(\n    definition="Social Security Numbers - highly sensitive personal identifiers",\n    termSource="INTERNAL",\n    name="Social Security Number",\n    parentNode=str(pii_urn),\n)\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=str(ssn_term_urn),\n        aspect=ssn_term_info,\n    )\n)\nlog.info(f"Created term: {ssn_term_urn}")\n\nlog.info("Successfully created glossary hierarchy with nodes and terms")\n\n'))),(0,t.yg)("h3",{id:"adding-ownership"},"Adding Ownership"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Add an owner to a GlossaryNode"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/glossary_node_add_owner.py\nimport logging\n\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata._urns.urn_defs import CorpUserUrn, GlossaryNodeUrn\nfrom datahub.metadata.schema_classes import (\n    OwnerClass,\n    OwnershipClass,\n    OwnershipTypeClass,\n)\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n# Create a glossary node URN\nnode_urn = GlossaryNodeUrn("Finance")\n\n# Define the owner\nowner_urn = CorpUserUrn("jdoe")\n\n# Create ownership aspect\n# This makes jdoe a TECHNICAL_OWNER of the Finance glossary node\nownership = OwnershipClass(\n    owners=[\n        OwnerClass(\n            owner=str(owner_urn),\n            type=OwnershipTypeClass.TECHNICAL_OWNER,\n        )\n    ]\n)\n\n# Create the metadata change proposal\nevent = MetadataChangeProposalWrapper(\n    entityUrn=str(node_urn),\n    aspect=ownership,\n)\n\n# Emit to DataHub\nrest_emitter = DatahubRestEmitter(gms_server="http://localhost:8080")\nrest_emitter.emit(event)\n\nlog.info(f"Added owner {owner_urn} to glossary node {node_urn}")\n\n'))),(0,t.yg)("h3",{id:"querying-glossarynodes"},"Querying GlossaryNodes"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"REST API: Get a GlossaryNode by URN"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},"# Fetch a GlossaryNode entity\ncurl -X GET 'http://localhost:8080/entities/urn%3Ali%3AglossaryNode%3AFinance' \\\n  -H 'Authorization: Bearer <token>'\n\n# Response includes all aspects:\n# - glossaryNodeKey (identity)\n# - glossaryNodeInfo (definition, name, parentNode, etc.)\n# - ownership (who owns this node)\n# - institutionalMemory (links to documentation)\n# - etc.\n"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,"GraphQL: Query root-level GlossaryNodes"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-graphql"},"query GetRootGlossaryNodes {\n  getRootGlossaryNodes {\n    nodes {\n      urn\n      properties {\n        name\n        definition\n      }\n      ownership {\n        owners {\n          owner {\n            ... on CorpUser {\n              urn\n              username\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,"GraphQL: Query children of a GlossaryNode"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-graphql"},'query GetGlossaryNodeChildren {\n  glossaryNode(urn: "urn:li:glossaryNode:Finance") {\n    urn\n    properties {\n      name\n      definition\n    }\n    children {\n      count\n      relationships {\n        entity {\n          ... on GlossaryNode {\n            urn\n            properties {\n              name\n            }\n          }\n          ... on GlossaryTerm {\n            urn\n            properties {\n              name\n              definition\n            }\n          }\n        }\n      }\n    }\n  }\n}\n'))),(0,t.yg)("h3",{id:"bulk-operations"},"Bulk Operations"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"YAML Ingestion: Create node hierarchy from Business Glossary file"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'# business_glossary.yml\nversion: "1"\nsource: MyOrganization\nowners:\n  users:\n    - datahub\nnodes:\n  - name: DataGovernance\n    description: Top-level governance structure\n    nodes:\n      - name: Classification\n        description: Data classification categories\n        terms:\n          - name: Public\n            description: Publicly available data\n          - name: Internal\n            description: Internal use only\n          - name: Confidential\n            description: Restricted access data\n\n      - name: PersonalInformation\n        description: Personal and sensitive data categories\n        nodes:\n          - name: DirectIdentifiers\n            description: Direct personal identifiers\n            terms:\n              - name: Email\n                description: Email addresses\n              - name: SSN\n                description: Social Security Numbers\n\n          - name: IndirectIdentifiers\n            description: Indirect identifiers\n            terms:\n              - name: IPAddress\n                description: Internet Protocol addresses\n              - name: DeviceID\n                description: Device identifiers\n# Ingest using the DataHub CLI:\n# datahub ingest -c business_glossary.yml\n')),(0,t.yg)("p",null,"See the ",(0,t.yg)("a",{parentName:"p",href:"/docs/generated/ingestion/sources/business-glossary"},"Business Glossary Source")," documentation for the full YAML format specification.")),(0,t.yg)("h2",{id:"integration-points"},"Integration Points"),(0,t.yg)("h3",{id:"relationship-with-glossaryterm"},"Relationship with GlossaryTerm"),(0,t.yg)("p",null,"GlossaryNodes provide organizational structure for GlossaryTerms. The relationship is established through:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"GlossaryTerm \u2192 GlossaryNode"),": A term's ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryTermInfo.parentNode")," field references its containing node"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Navigation"),": The UI renders this as a browsable hierarchy where users can expand nodes to see contained terms"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Search"),": Users can filter by glossary node to find all terms within a category")),(0,t.yg)("p",null,"Think of this relationship as:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"GlossaryNode"),": Folder/directory (can contain terms and other nodes)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"GlossaryTerm"),": File (the actual business definition)")),(0,t.yg)("h3",{id:"parent-child-relationships"},"Parent-Child Relationships"),(0,t.yg)("p",null,"GlossaryNodes form a tree structure through self-referential parent-child relationships:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"A child node references its parent via ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryNodeInfo.parentNode")),(0,t.yg)("li",{parentName:"ul"},"A parent node can have many children (both nodes and terms)"),(0,t.yg)("li",{parentName:"ul"},"The DataHub UI displays this as an expandable tree in the glossary browser"),(0,t.yg)("li",{parentName:"ul"},"GraphQL resolvers provide specialized queries for traversing the hierarchy")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Key operations:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"getRootGlossaryNodes"),": Fetch all top-level nodes (no parent)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"parentNodes"),": Navigate upward to find all ancestors"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"children"),": Navigate downward to find immediate children"),(0,t.yg)("li",{parentName:"ul"},"Moving a node updates its ",(0,t.yg)("inlineCode",{parentName:"li"},"parentNode")," reference and affects the entire subtree")),(0,t.yg)("h3",{id:"graphql-api"},"GraphQL API"),(0,t.yg)("p",null,"The GraphQL API provides specialized operations for GlossaryNodes:"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Queries:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"glossaryNode(urn)"),": Fetch a specific node with children"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"getRootGlossaryNodes"),": Get all root-level nodes"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},'search(entity: "glossaryNode")'),": Search nodes by name/definition")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Mutations:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"createGlossaryNode"),": Create a new node with optional parent"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"updateParentNode"),": Move a node to a different parent"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"updateName"),": Update the display name"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"updateDescription"),": Update the definition")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Resolvers:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"children"),": Fetch immediate children (nodes and terms)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"childrenCount"),": Count of children under this node"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"parentNodes"),": Fetch ancestor path from node to root")),(0,t.yg)("p",null,"See the ",(0,t.yg)("a",{parentName:"p",href:"/docs/glossary/business-glossary"},"Business Glossary documentation")," for UI operations."),(0,t.yg)("h3",{id:"access-control-and-permissions"},"Access Control and Permissions"),(0,t.yg)("p",null,"GlossaryNodes support fine-grained access control through special glossary-specific privileges:"),(0,t.yg)("h4",{id:"manage-direct-glossary-children"},"Manage Direct Glossary Children"),(0,t.yg)("p",null,"Users with this privilege on a node can:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Create new terms and nodes directly under this node"),(0,t.yg)("li",{parentName:"ul"},"Edit terms and nodes directly under this node"),(0,t.yg)("li",{parentName:"ul"},"Delete terms and nodes directly under this node"),(0,t.yg)("li",{parentName:"ul"},"Cannot affect grandchildren or deeper descendants")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Use case"),": Department leads managing their immediate category structure"),(0,t.yg)("h4",{id:"manage-all-glossary-children"},"Manage All Glossary Children"),(0,t.yg)("p",null,"Users with this privilege on a node can:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Create, edit, and delete any term or node in the entire subtree"),(0,t.yg)("li",{parentName:"ul"},"Manage nested hierarchies of any depth"),(0,t.yg)("li",{parentName:"ul"},"Full control over the category and all descendants")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Use case"),": Data governance team managing an entire domain (e.g., all PII-related terms)"),(0,t.yg)("h4",{id:"global-privilege-manage-glossaries"},"Global Privilege: Manage Glossaries"),(0,t.yg)("p",null,"Users with this platform-level privilege can:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Manage any node or term across the entire glossary"),(0,t.yg)("li",{parentName:"ul"},"Create root-level nodes"),(0,t.yg)("li",{parentName:"ul"},"Full administrative control")),(0,t.yg)("p",null,"These privileges are checked hierarchically - if you have permission on a parent node, it may grant permissions on children depending on the privilege type."),(0,t.yg)("h3",{id:"integration-with-search-and-discovery"},"Integration with Search and Discovery"),(0,t.yg)("p",null,"While GlossaryNodes don't get applied to data assets directly (that's the role of GlossaryTerms), they enhance discoverability by:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Faceted Navigation"),": Users can browse the glossary hierarchy to find relevant terms"),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Context"),": The node structure provides semantic grouping that helps users understand term relationships"),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Filtering"),": Search interfaces can filter terms by their containing node"),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Autocomplete"),": Node structure influences term suggestions and grouping")),(0,t.yg)("h2",{id:"notable-exceptions"},"Notable Exceptions"),(0,t.yg)("h3",{id:"node-name-vs-display-name"},"Node Name vs Display Name"),(0,t.yg)("p",null,"Similar to GlossaryTerms, the URN identifier (",(0,t.yg)("inlineCode",{parentName:"p"},"name")," in ",(0,t.yg)("inlineCode",{parentName:"p"},"glossaryNodeKey"),") is separate from the display name (",(0,t.yg)("inlineCode",{parentName:"p"},"name")," in ",(0,t.yg)("inlineCode",{parentName:"p"},"glossaryNodeInfo"),"):"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"URN name"),': Use a stable, unchanging identifier (e.g., "finance-001", "DataGovernance")'),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Display name"),': Use a human-friendly label that can be updated (e.g., "Financial Metrics", "Data Governance")')),(0,t.yg)("p",null,"This separation allows you to rename nodes in the UI without breaking references."),(0,t.yg)("h3",{id:"circular-references-not-allowed"},"Circular References Not Allowed"),(0,t.yg)("p",null,"The hierarchy must be a tree structure (directed acyclic graph):"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"A node cannot be its own ancestor"),(0,t.yg)("li",{parentName:"ul"},"Moving a node under one of its descendants is prevented"),(0,t.yg)("li",{parentName:"ul"},"DataHub validates the hierarchy to prevent cycles")),(0,t.yg)("p",null,"If you attempt to create a circular reference, the operation will fail with a validation error."),(0,t.yg)("h3",{id:"root-level-nodes"},"Root-Level Nodes"),(0,t.yg)("p",null,"Nodes with no parent (",(0,t.yg)("inlineCode",{parentName:"p"},"parentNode")," is null or not set) appear at the root level of the glossary:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"These represent top-level categories"),(0,t.yg)("li",{parentName:"ul"},"Creating root-level nodes may require higher privileges"),(0,t.yg)("li",{parentName:"ul"},"Root nodes typically represent major domains or organizational divisions")),(0,t.yg)("h3",{id:"deleting-nodes-with-children"},"Deleting Nodes with Children"),(0,t.yg)("p",null,"Current behavior (subject to change):"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"DataHub may require nodes to be empty before deletion")),(0,t.yg)("li",{parentName:"ul"},"You must first delete or move all child nodes and terms"),(0,t.yg)("li",{parentName:"ul"},"This prevents accidental loss of large glossary sections")),(0,t.yg)("p",null,"Best practice: Always move or reassign children before deleting a node, or use bulk operations that handle the entire subtree."),(0,t.yg)("h3",{id:"display-properties"},"Display Properties"),(0,t.yg)("p",null,"GlossaryNodes support the ",(0,t.yg)("inlineCode",{parentName:"p"},"displayProperties")," aspect (added in newer versions), which provides additional UI customization:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Custom icons or colors for the node"),(0,t.yg)("li",{parentName:"ul"},"Display order hints"),(0,t.yg)("li",{parentName:"ul"},"UI-specific rendering preferences")),(0,t.yg)("p",null,"This is an optional enhancement for organizations that want more visual control over their glossary."),(0,t.yg)("h3",{id:"no-direct-application-to-assets"},"No Direct Application to Assets"),(0,t.yg)("p",null,"Unlike GlossaryTerms, GlossaryNodes are ",(0,t.yg)("strong",{parentName:"p"},"not")," directly applied to data assets:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"You cannot tag a dataset with a GlossaryNode"),(0,t.yg)("li",{parentName:"ul"},"Only GlossaryTerms can be applied to datasets, columns, dashboards, etc."),(0,t.yg)("li",{parentName:"ul"},"Nodes exist solely for organizational purposes within the glossary itself")),(0,t.yg)("p",null,"If you need to tag assets with a category, create a GlossaryTerm within that node and apply the term."),(0,t.yg)("h3",{id:"moving-nodes-affects-all-descendants"},"Moving Nodes Affects All Descendants"),(0,t.yg)("p",null,"When you move a node to a new parent:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"All child nodes and terms move with it"),(0,t.yg)("li",{parentName:"ul"},"The entire subtree is relocated"),(0,t.yg)("li",{parentName:"ul"},"References from terms to their parent node are automatically maintained"),(0,t.yg)("li",{parentName:"ul"},"No manual updates to individual terms are needed")),(0,t.yg)("p",null,"This makes reorganization efficient but requires care to avoid unintended moves."),(0,t.yg)("h2",{id:"technical-reference-guide"},"Technical Reference Guide"),(0,t.yg)("p",null,"The sections above provide an overview of how to use this entity. The following sections provide detailed technical information about how metadata is stored and represented in DataHub."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Aspects")," are the individual pieces of metadata that can be attached to an entity. Each aspect contains specific information (like ownership, tags, or properties) and is stored as a separate record, allowing for flexible and incremental metadata updates."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Relationships")," show how this entity connects to other entities in the metadata graph. These connections are derived from the fields within each aspect and form the foundation of DataHub's knowledge graph."),(0,t.yg)("h3",{id:"reading-the-field-tables"},"Reading the Field Tables"),(0,t.yg)("p",null,"Each aspect's field table includes an ",(0,t.yg)("strong",{parentName:"p"},"Annotations")," column that provides additional metadata about how fields are used:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"\u26a0\ufe0f Deprecated"),": This field is deprecated and may be removed in a future version. Check the description for the recommended alternative"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Searchable"),": This field is indexed and can be searched in DataHub's search interface"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Searchable (fieldname)"),": When the field name in parentheses is shown, it indicates the field is indexed under a different name in the search index. For example, ",(0,t.yg)("inlineCode",{parentName:"li"},"dashboardTool")," is indexed as ",(0,t.yg)("inlineCode",{parentName:"li"},"tool")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"\u2192 RelationshipName"),": This field creates a relationship to another entity. The arrow indicates this field contains a reference (URN) to another entity, and the name indicates the type of relationship (e.g., ",(0,t.yg)("inlineCode",{parentName:"li"},"\u2192 Contains"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"\u2192 OwnedBy"),")")),(0,t.yg)("p",null,"Fields with complex types (like ",(0,t.yg)("inlineCode",{parentName:"p"},"Edge"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"AuditStamp"),") link to their definitions in the ",(0,t.yg)("a",{parentName:"p",href:"#common-types"},"Common Types")," section below."),(0,t.yg)("h3",{id:"aspects"},"Aspects"),(0,t.yg)("h4",{id:"glossarynodekey"},"glossaryNodeKey"),(0,t.yg)("p",null,"Key for a GlossaryNode"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"name"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "glossaryNodeKey"\n  },\n  "name": "GlossaryNodeKey",\n  "namespace": "com.linkedin.metadata.key",\n  "fields": [\n    {\n      "Searchable": {\n        "enableAutocomplete": true,\n        "fieldType": "WORD_GRAM"\n      },\n      "type": "string",\n      "name": "name"\n    }\n  ],\n  "doc": "Key for a GlossaryNode"\n}\n')))),(0,t.yg)("h4",{id:"glossarynodeinfo"},"glossaryNodeInfo"),(0,t.yg)("p",null,"Properties associated with a GlossaryNode"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"customProperties"),(0,t.yg)("td",{parentName:"tr",align:null},"map"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Custom property bag."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"definition"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Definition of business node"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"parentNode"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Parent node of the glossary term"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 IsPartOf")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"name"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Display name of the node"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable (displayName)")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"id"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Optional id for the GlossaryNode"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "glossaryNodeInfo"\n  },\n  "name": "GlossaryNodeInfo",\n  "namespace": "com.linkedin.glossary",\n  "fields": [\n    {\n      "Searchable": {\n        "/*": {\n          "fieldType": "TEXT",\n          "queryByDefault": true\n        }\n      },\n      "type": {\n        "type": "map",\n        "values": "string"\n      },\n      "name": "customProperties",\n      "default": {},\n      "doc": "Custom property bag."\n    },\n    {\n      "Searchable": {},\n      "type": "string",\n      "name": "definition",\n      "doc": "Definition of business node"\n    },\n    {\n      "Relationship": {\n        "entityTypes": [\n          "glossaryNode"\n        ],\n        "name": "IsPartOf"\n      },\n      "Searchable": {\n        "fieldName": "parentNode",\n        "fieldType": "URN",\n        "hasValuesFieldName": "hasParentNode"\n      },\n      "java": {\n        "class": "com.linkedin.common.urn.GlossaryNodeUrn"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "parentNode",\n      "default": null,\n      "doc": "Parent node of the glossary term"\n    },\n    {\n      "Searchable": {\n        "boostScore": 10.0,\n        "enableAutocomplete": true,\n        "fieldName": "displayName",\n        "fieldNameAliases": [\n          "_entityName"\n        ],\n        "fieldType": "WORD_GRAM"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "name",\n      "default": null,\n      "doc": "Display name of the node"\n    },\n    {\n      "Searchable": {\n        "fieldType": "TEXT_PARTIAL"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "id",\n      "default": null,\n      "doc": "Optional id for the GlossaryNode"\n    }\n  ],\n  "doc": "Properties associated with a GlossaryNode"\n}\n')))),(0,t.yg)("h4",{id:"ownership"},"ownership"),(0,t.yg)("p",null,"Ownership information of an entity."),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"owners"),(0,t.yg)("td",{parentName:"tr",align:null},"Owner[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"List of owners of the entity."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"ownerTypes"),(0,t.yg)("td",{parentName:"tr",align:null},"map"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Ownership type to Owners map, populated via mutation hook."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"lastModified"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#auditstamp"},"AuditStamp")),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Audit stamp containing who last modified the record and when. A value of 0 in the time field indi..."),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "ownership"\n  },\n  "name": "Ownership",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "Owner",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "Relationship": {\n                "entityTypes": [\n                  "corpuser",\n                  "corpGroup"\n                ],\n                "name": "OwnedBy"\n              },\n              "Searchable": {\n                "addToFilters": true,\n                "fieldName": "owners",\n                "fieldType": "URN",\n                "filterNameOverride": "Owned By",\n                "hasValuesFieldName": "hasOwners",\n                "queryByDefault": false\n              },\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "owner",\n              "doc": "Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name\\n(Caveat: only corpuser is currently supported in the frontend.)"\n            },\n            {\n              "deprecated": true,\n              "type": {\n                "type": "enum",\n                "symbolDocs": {\n                  "BUSINESS_OWNER": "A person or group who is responsible for logical, or business related, aspects of the asset.",\n                  "CONSUMER": "A person, group, or service that consumes the data\\nDeprecated! Use TECHNICAL_OWNER or BUSINESS_OWNER instead.",\n                  "CUSTOM": "Set when ownership type is unknown or a when new one is specified as an ownership type entity for which we have no\\nenum value for. This is used for backwards compatibility",\n                  "DATAOWNER": "A person or group that is owning the data\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "DATA_STEWARD": "A steward, expert, or delegate responsible for the asset.",\n                  "DELEGATE": "A person or a group that overseas the operation, e.g. a DBA or SRE.\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "DEVELOPER": "A person or group that is in charge of developing the code\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "NONE": "No specific type associated to the owner.",\n                  "PRODUCER": "A person, group, or service that produces/generates the data\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "STAKEHOLDER": "A person or a group that has direct business interest\\nDeprecated! Use TECHNICAL_OWNER, BUSINESS_OWNER, or STEWARD instead.",\n                  "TECHNICAL_OWNER": "person or group who is responsible for technical aspects of the asset."\n                },\n                "deprecatedSymbols": {\n                  "CONSUMER": true,\n                  "DATAOWNER": true,\n                  "DELEGATE": true,\n                  "DEVELOPER": true,\n                  "PRODUCER": true,\n                  "STAKEHOLDER": true\n                },\n                "name": "OwnershipType",\n                "namespace": "com.linkedin.common",\n                "symbols": [\n                  "CUSTOM",\n                  "TECHNICAL_OWNER",\n                  "BUSINESS_OWNER",\n                  "DATA_STEWARD",\n                  "NONE",\n                  "DEVELOPER",\n                  "DATAOWNER",\n                  "DELEGATE",\n                  "PRODUCER",\n                  "CONSUMER",\n                  "STAKEHOLDER"\n                ],\n                "doc": "Asset owner types"\n              },\n              "name": "type",\n              "doc": "The type of the ownership"\n            },\n            {\n              "Relationship": {\n                "entityTypes": [\n                  "ownershipType"\n                ],\n                "name": "ownershipType"\n              },\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "typeUrn",\n              "default": null,\n              "doc": "The type of the ownership\\nUrn of type O"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "OwnershipSource",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": {\n                        "type": "enum",\n                        "symbolDocs": {\n                          "AUDIT": "Auditing system or audit logs",\n                          "DATABASE": "Database, e.g. GRANTS table",\n                          "FILE_SYSTEM": "File system, e.g. file/directory owner",\n                          "ISSUE_TRACKING_SYSTEM": "Issue tracking system, e.g. Jira",\n                          "MANUAL": "Manually provided by a user",\n                          "OTHER": "Other sources",\n                          "SERVICE": "Other ownership-like service, e.g. Nuage, ACL service etc",\n                          "SOURCE_CONTROL": "SCM system, e.g. GIT, SVN"\n                        },\n                        "name": "OwnershipSourceType",\n                        "namespace": "com.linkedin.common",\n                        "symbols": [\n                          "AUDIT",\n                          "DATABASE",\n                          "FILE_SYSTEM",\n                          "ISSUE_TRACKING_SYSTEM",\n                          "MANUAL",\n                          "SERVICE",\n                          "SOURCE_CONTROL",\n                          "OTHER"\n                        ]\n                      },\n                      "name": "type",\n                      "doc": "The type of the source"\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "url",\n                      "default": null,\n                      "doc": "A reference URL for the source"\n                    }\n                  ],\n                  "doc": "Source/provider of the ownership information"\n                }\n              ],\n              "name": "source",\n              "default": null,\n              "doc": "Source information for the ownership"\n            },\n            {\n              "Searchable": {\n                "/actor": {\n                  "fieldName": "ownerAttributionActors",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/source": {\n                  "fieldName": "ownerAttributionSources",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/time": {\n                  "fieldName": "ownerAttributionDates",\n                  "fieldType": "DATETIME",\n                  "queryByDefault": false\n                }\n              },\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "MetadataAttribution",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When this metadata was updated."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) responsible for applying the assocated metadata. This can\\neither be a user (in case of UI edits) or the datahub system for automation."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "source",\n                      "default": null,\n                      "doc": "The DataHub source responsible for applying the associated metadata. This will only be filled out\\nwhen a DataHub source is responsible. This includes the specific metadata test urn, the automation urn."\n                    },\n                    {\n                      "type": {\n                        "type": "map",\n                        "values": "string"\n                      },\n                      "name": "sourceDetail",\n                      "default": {},\n                      "doc": "The details associated with why this metadata was applied. For example, this could include\\nthe actual regex rule, sql statement, ingestion pipeline ID, etc."\n                    }\n                  ],\n                  "doc": "Information about who, why, and how this metadata was applied"\n                }\n              ],\n              "name": "attribution",\n              "default": null,\n              "doc": "Information about who, why, and how this metadata was applied"\n            }\n          ],\n          "doc": "Ownership information"\n        }\n      },\n      "name": "owners",\n      "doc": "List of owners of the entity."\n    },\n    {\n      "Searchable": {\n        "/*": {\n          "fieldType": "MAP_ARRAY",\n          "queryByDefault": false\n        }\n      },\n      "type": [\n        {\n          "type": "map",\n          "values": {\n            "type": "array",\n            "items": "string"\n          }\n        },\n        "null"\n      ],\n      "name": "ownerTypes",\n      "default": {},\n      "doc": "Ownership type to Owners map, populated via mutation hook."\n    },\n    {\n      "type": {\n        "type": "record",\n        "name": "AuditStamp",\n        "namespace": "com.linkedin.common",\n        "fields": [\n          {\n            "type": "long",\n            "name": "time",\n            "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": "string",\n            "name": "actor",\n            "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "impersonator",\n            "default": null,\n            "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n          },\n          {\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "message",\n            "default": null,\n            "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n          }\n        ],\n        "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n      },\n      "name": "lastModified",\n      "default": {\n        "actor": "urn:li:corpuser:unknown",\n        "impersonator": null,\n        "time": 0,\n        "message": null\n      },\n      "doc": "Audit stamp containing who last modified the record and when. A value of 0 in the time field indicates missing data."\n    }\n  ],\n  "doc": "Ownership information of an entity."\n}\n')))),(0,t.yg)("h4",{id:"status"},"status"),(0,t.yg)("p",null,"The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\nThis aspect is used to represent soft deletes conventionally."),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"removed"),(0,t.yg)("td",{parentName:"tr",align:null},"boolean"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Whether the entity has been removed (soft-deleted)."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "status"\n  },\n  "name": "Status",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "BOOLEAN"\n      },\n      "type": "boolean",\n      "name": "removed",\n      "default": false,\n      "doc": "Whether the entity has been removed (soft-deleted)."\n    }\n  ],\n  "doc": "The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\\nThis aspect is used to represent soft deletes conventionally."\n}\n')))),(0,t.yg)("h4",{id:"institutionalmemory"},"institutionalMemory"),(0,t.yg)("p",null,"Institutional memory of an entity. This is a way to link to relevant documentation and provide description of the documentation. Institutional or tribal knowledge is very important for users to leverage the entity."),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"elements"),(0,t.yg)("td",{parentName:"tr",align:null},"InstitutionalMemoryMetadata[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"List of records that represent institutional memory of an entity. Each record consists of a link,..."),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "institutionalMemory"\n  },\n  "name": "InstitutionalMemory",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "InstitutionalMemoryMetadata",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.url.Url",\n                "coercerClass": "com.linkedin.common.url.UrlCoercer"\n              },\n              "type": "string",\n              "name": "url",\n              "doc": "Link to an engineering design document or a wiki page."\n            },\n            {\n              "type": "string",\n              "name": "description",\n              "doc": "Description of the link."\n            },\n            {\n              "type": {\n                "type": "record",\n                "name": "AuditStamp",\n                "namespace": "com.linkedin.common",\n                "fields": [\n                  {\n                    "type": "long",\n                    "name": "time",\n                    "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n                  },\n                  {\n                    "java": {\n                      "class": "com.linkedin.common.urn.Urn"\n                    },\n                    "type": "string",\n                    "name": "actor",\n                    "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n                  },\n                  {\n                    "java": {\n                      "class": "com.linkedin.common.urn.Urn"\n                    },\n                    "type": [\n                      "null",\n                      "string"\n                    ],\n                    "name": "impersonator",\n                    "default": null,\n                    "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n                  },\n                  {\n                    "type": [\n                      "null",\n                      "string"\n                    ],\n                    "name": "message",\n                    "default": null,\n                    "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n                  }\n                ],\n                "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n              },\n              "name": "createStamp",\n              "doc": "Audit stamp associated with creation of this record"\n            },\n            {\n              "type": [\n                "null",\n                "com.linkedin.common.AuditStamp"\n              ],\n              "name": "updateStamp",\n              "default": null,\n              "doc": "Audit stamp associated with updation of this record"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "InstitutionalMemoryMetadataSettings",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "boolean",\n                      "name": "showInAssetPreview",\n                      "default": false,\n                      "doc": "Show record in asset preview like on entity header and search previews"\n                    }\n                  ],\n                  "doc": "Settings related to a record of InstitutionalMemoryMetadata"\n                }\n              ],\n              "name": "settings",\n              "default": null,\n              "doc": "Settings for this record"\n            }\n          ],\n          "doc": "Metadata corresponding to a record of institutional memory."\n        }\n      },\n      "name": "elements",\n      "doc": "List of records that represent institutional memory of an entity. Each record consists of a link, description, creator and timestamps associated with that record."\n    }\n  ],\n  "doc": "Institutional memory of an entity. This is a way to link to relevant documentation and provide description of the documentation. Institutional or tribal knowledge is very important for users to leverage the entity."\n}\n')))),(0,t.yg)("h4",{id:"structuredproperties"},"structuredProperties"),(0,t.yg)("p",null,"Properties about an entity governed by StructuredPropertyDefinition"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"properties"),(0,t.yg)("td",{parentName:"tr",align:null},"StructuredPropertyValueAssignment[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Custom property bag."),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "structuredProperties"\n  },\n  "name": "StructuredProperties",\n  "namespace": "com.linkedin.structured",\n  "fields": [\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "StructuredPropertyValueAssignment",\n          "namespace": "com.linkedin.structured",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "propertyUrn",\n              "doc": "The property that is being assigned a value."\n            },\n            {\n              "type": {\n                "type": "array",\n                "items": [\n                  "string",\n                  "double"\n                ]\n              },\n              "name": "values",\n              "doc": "The value assigned to the property."\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "AuditStamp",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "impersonator",\n                      "default": null,\n                      "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "message",\n                      "default": null,\n                      "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n                    }\n                  ],\n                  "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n                }\n              ],\n              "name": "created",\n              "default": null,\n              "doc": "Audit stamp containing who created this relationship edge and when"\n            },\n            {\n              "type": [\n                "null",\n                "com.linkedin.common.AuditStamp"\n              ],\n              "name": "lastModified",\n              "default": null,\n              "doc": "Audit stamp containing who last modified this relationship edge and when"\n            },\n            {\n              "Searchable": {\n                "/actor": {\n                  "fieldName": "structuredPropertyAttributionActors",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/source": {\n                  "fieldName": "structuredPropertyAttributionSources",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/time": {\n                  "fieldName": "structuredPropertyAttributionDates",\n                  "fieldType": "DATETIME",\n                  "queryByDefault": false\n                }\n              },\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "MetadataAttribution",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When this metadata was updated."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) responsible for applying the assocated metadata. This can\\neither be a user (in case of UI edits) or the datahub system for automation."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "source",\n                      "default": null,\n                      "doc": "The DataHub source responsible for applying the associated metadata. This will only be filled out\\nwhen a DataHub source is responsible. This includes the specific metadata test urn, the automation urn."\n                    },\n                    {\n                      "type": {\n                        "type": "map",\n                        "values": "string"\n                      },\n                      "name": "sourceDetail",\n                      "default": {},\n                      "doc": "The details associated with why this metadata was applied. For example, this could include\\nthe actual regex rule, sql statement, ingestion pipeline ID, etc."\n                    }\n                  ],\n                  "doc": "Information about who, why, and how this metadata was applied"\n                }\n              ],\n              "name": "attribution",\n              "default": null,\n              "doc": "Information about who, why, and how this metadata was applied"\n            }\n          ]\n        }\n      },\n      "name": "properties",\n      "doc": "Custom property bag."\n    }\n  ],\n  "doc": "Properties about an entity governed by StructuredPropertyDefinition"\n}\n')))),(0,t.yg)("h4",{id:"forms"},"forms"),(0,t.yg)("p",null,"Forms that are assigned to this entity to be filled out"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"incompleteForms"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#formassociation"},"FormAssociation"),"[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"All incomplete forms assigned to the entity."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"completedForms"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#formassociation"},"FormAssociation"),"[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"All complete forms assigned to the entity."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"verifications"),(0,t.yg)("td",{parentName:"tr",align:null},"FormVerificationAssociation[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Verifications that have been applied to the entity via completed forms."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "forms"\n  },\n  "name": "Forms",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "/*/completedPrompts/*/id": {\n          "fieldName": "incompleteFormsCompletedPromptIds",\n          "fieldType": "KEYWORD",\n          "queryByDefault": false\n        },\n        "/*/completedPrompts/*/lastModified/time": {\n          "fieldName": "incompleteFormsCompletedPromptResponseTimes",\n          "fieldType": "DATETIME",\n          "queryByDefault": false\n        },\n        "/*/incompletePrompts/*/id": {\n          "fieldName": "incompleteFormsIncompletePromptIds",\n          "fieldType": "KEYWORD",\n          "queryByDefault": false\n        },\n        "/*/urn": {\n          "fieldName": "incompleteForms",\n          "fieldType": "URN",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "FormAssociation",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "urn",\n              "doc": "Urn of the applied form"\n            },\n            {\n              "type": {\n                "type": "array",\n                "items": {\n                  "type": "record",\n                  "name": "FormPromptAssociation",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "string",\n                      "name": "id",\n                      "doc": "The id for the prompt. This must be GLOBALLY UNIQUE."\n                    },\n                    {\n                      "type": {\n                        "type": "record",\n                        "name": "AuditStamp",\n                        "namespace": "com.linkedin.common",\n                        "fields": [\n                          {\n                            "type": "long",\n                            "name": "time",\n                            "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n                          },\n                          {\n                            "java": {\n                              "class": "com.linkedin.common.urn.Urn"\n                            },\n                            "type": "string",\n                            "name": "actor",\n                            "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n                          },\n                          {\n                            "java": {\n                              "class": "com.linkedin.common.urn.Urn"\n                            },\n                            "type": [\n                              "null",\n                              "string"\n                            ],\n                            "name": "impersonator",\n                            "default": null,\n                            "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n                          },\n                          {\n                            "type": [\n                              "null",\n                              "string"\n                            ],\n                            "name": "message",\n                            "default": null,\n                            "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n                          }\n                        ],\n                        "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n                      },\n                      "name": "lastModified",\n                      "doc": "The last time this prompt was touched for the entity (set, unset)"\n                    },\n                    {\n                      "type": [\n                        "null",\n                        {\n                          "type": "record",\n                          "name": "FormPromptFieldAssociations",\n                          "namespace": "com.linkedin.common",\n                          "fields": [\n                            {\n                              "type": [\n                                "null",\n                                {\n                                  "type": "array",\n                                  "items": {\n                                    "type": "record",\n                                    "name": "FieldFormPromptAssociation",\n                                    "namespace": "com.linkedin.common",\n                                    "fields": [\n                                      {\n                                        "type": "string",\n                                        "name": "fieldPath",\n                                        "doc": "The field path on a schema field."\n                                      },\n                                      {\n                                        "type": "com.linkedin.common.AuditStamp",\n                                        "name": "lastModified",\n                                        "doc": "The last time this prompt was touched for the field on the entity (set, unset)"\n                                      }\n                                    ],\n                                    "doc": "Information about the status of a particular prompt for a specific schema field\\non an entity."\n                                  }\n                                }\n                              ],\n                              "name": "completedFieldPrompts",\n                              "default": null,\n                              "doc": "A list of field-level prompt associations that are not yet complete for this form."\n                            },\n                            {\n                              "type": [\n                                "null",\n                                {\n                                  "type": "array",\n                                  "items": "com.linkedin.common.FieldFormPromptAssociation"\n                                }\n                              ],\n                              "name": "incompleteFieldPrompts",\n                              "default": null,\n                              "doc": "A list of field-level prompt associations that are complete for this form."\n                            }\n                          ],\n                          "doc": "Information about the field-level prompt associations on a top-level prompt association."\n                        }\n                      ],\n                      "name": "fieldAssociations",\n                      "default": null,\n                      "doc": "Optional information about the field-level prompt associations."\n                    }\n                  ],\n                  "doc": "Information about the status of a particular prompt.\\nNote that this is where we can add additional information about individual responses:\\nactor, timestamp, and the response itself."\n                }\n              },\n              "name": "incompletePrompts",\n              "default": [],\n              "doc": "A list of prompts that are not yet complete for this form."\n            },\n            {\n              "type": {\n                "type": "array",\n                "items": "com.linkedin.common.FormPromptAssociation"\n              },\n              "name": "completedPrompts",\n              "default": [],\n              "doc": "A list of prompts that have been completed for this form."\n            }\n          ],\n          "doc": "Properties of an applied form."\n        }\n      },\n      "name": "incompleteForms",\n      "doc": "All incomplete forms assigned to the entity."\n    },\n    {\n      "Searchable": {\n        "/*/completedPrompts/*/id": {\n          "fieldName": "completedFormsCompletedPromptIds",\n          "fieldType": "KEYWORD",\n          "queryByDefault": false\n        },\n        "/*/completedPrompts/*/lastModified/time": {\n          "fieldName": "completedFormsCompletedPromptResponseTimes",\n          "fieldType": "DATETIME",\n          "queryByDefault": false\n        },\n        "/*/incompletePrompts/*/id": {\n          "fieldName": "completedFormsIncompletePromptIds",\n          "fieldType": "KEYWORD",\n          "queryByDefault": false\n        },\n        "/*/urn": {\n          "fieldName": "completedForms",\n          "fieldType": "URN",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": "com.linkedin.common.FormAssociation"\n      },\n      "name": "completedForms",\n      "doc": "All complete forms assigned to the entity."\n    },\n    {\n      "Searchable": {\n        "/*/form": {\n          "fieldName": "verifiedForms",\n          "fieldType": "URN",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "FormVerificationAssociation",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "form",\n              "doc": "The urn of the form that granted this verification."\n            },\n            {\n              "type": [\n                "null",\n                "com.linkedin.common.AuditStamp"\n              ],\n              "name": "lastModified",\n              "default": null,\n              "doc": "An audit stamp capturing who and when verification was applied for this form."\n            }\n          ],\n          "doc": "An association between a verification and an entity that has been granted\\nvia completion of one or more forms of type \'VERIFICATION\'."\n        }\n      },\n      "name": "verifications",\n      "default": [],\n      "doc": "Verifications that have been applied to the entity via completed forms."\n    }\n  ],\n  "doc": "Forms that are assigned to this entity to be filled out"\n}\n')))),(0,t.yg)("h4",{id:"testresults"},"testResults"),(0,t.yg)("p",null,"Information about a Test Result"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"failing"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#testresult"},"TestResult"),"[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Results that are failing"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 IsFailing")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"passing"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#testresult"},"TestResult"),"[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Results that are passing"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 IsPassing"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "testResults"\n  },\n  "name": "TestResults",\n  "namespace": "com.linkedin.test",\n  "fields": [\n    {\n      "Relationship": {\n        "/*/test": {\n          "entityTypes": [\n            "test"\n          ],\n          "name": "IsFailing"\n        }\n      },\n      "Searchable": {\n        "/*/test": {\n          "fieldName": "failingTests",\n          "fieldType": "URN",\n          "hasValuesFieldName": "hasFailingTests",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "TestResult",\n          "namespace": "com.linkedin.test",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "test",\n              "doc": "The urn of the test"\n            },\n            {\n              "type": {\n                "type": "enum",\n                "symbolDocs": {\n                  "FAILURE": " The Test Failed",\n                  "SUCCESS": " The Test Succeeded"\n                },\n                "name": "TestResultType",\n                "namespace": "com.linkedin.test",\n                "symbols": [\n                  "SUCCESS",\n                  "FAILURE"\n                ]\n              },\n              "name": "type",\n              "doc": "The type of the result"\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "testDefinitionMd5",\n              "default": null,\n              "doc": "The md5 of the test definition that was used to compute this result.\\nSee TestInfo.testDefinition.md5 for more information."\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "AuditStamp",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "impersonator",\n                      "default": null,\n                      "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "message",\n                      "default": null,\n                      "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n                    }\n                  ],\n                  "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n                }\n              ],\n              "name": "lastComputed",\n              "default": null,\n              "doc": "The audit stamp of when the result was computed, including the actor who computed it."\n            }\n          ],\n          "doc": "Information about a Test Result"\n        }\n      },\n      "name": "failing",\n      "doc": "Results that are failing"\n    },\n    {\n      "Relationship": {\n        "/*/test": {\n          "entityTypes": [\n            "test"\n          ],\n          "name": "IsPassing"\n        }\n      },\n      "Searchable": {\n        "/*/test": {\n          "fieldName": "passingTests",\n          "fieldType": "URN",\n          "hasValuesFieldName": "hasPassingTests",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": "com.linkedin.test.TestResult"\n      },\n      "name": "passing",\n      "doc": "Results that are passing"\n    }\n  ],\n  "doc": "Information about a Test Result"\n}\n')))),(0,t.yg)("h4",{id:"subtypes"},"subTypes"),(0,t.yg)("p",null,"Sub Types. Use this aspect to specialize a generic Entity\ne.g. Making a Dataset also be a View or also be a LookerExplore"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"typeNames"),(0,t.yg)("td",{parentName:"tr",align:null},"string[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"The names of the specific types."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "subTypes"\n  },\n  "name": "SubTypes",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "/*": {\n          "addToFilters": true,\n          "fieldType": "KEYWORD",\n          "filterNameOverride": "Sub Type",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": "string"\n      },\n      "name": "typeNames",\n      "doc": "The names of the specific types."\n    }\n  ],\n  "doc": "Sub Types. Use this aspect to specialize a generic Entity\\ne.g. Making a Dataset also be a View or also be a LookerExplore"\n}\n')))),(0,t.yg)("h4",{id:"displayproperties"},"displayProperties"),(0,t.yg)("p",null,"Properties related to how the entity is displayed in the Datahub UI"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"colorHex"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"The color associated with the entity in Hex. For example #FFFFFF."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"icon"),(0,t.yg)("td",{parentName:"tr",align:null},"IconProperties"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"The icon associated with the entity"),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "displayProperties"\n  },\n  "name": "DisplayProperties",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "colorHex",\n      "default": null,\n      "doc": "The color associated with the entity in Hex. For example #FFFFFF."\n    },\n    {\n      "type": [\n        "null",\n        {\n          "type": "record",\n          "name": "IconProperties",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "type": {\n                "type": "enum",\n                "symbolDocs": {\n                  "MATERIAL": "Material UI"\n                },\n                "name": "IconLibrary",\n                "namespace": "com.linkedin.common",\n                "symbols": [\n                  "MATERIAL"\n                ],\n                "doc": "Enum of possible icon sources"\n              },\n              "name": "iconLibrary",\n              "doc": "The source of the icon: e.g. Antd, Material, etc"\n            },\n            {\n              "type": "string",\n              "name": "name",\n              "doc": "The name of the icon"\n            },\n            {\n              "type": "string",\n              "name": "style",\n              "doc": "Any modifier for the icon, this will be library-specific, e.g. filled/outlined, etc"\n            }\n          ],\n          "doc": "Properties describing an icon associated with an entity"\n        }\n      ],\n      "name": "icon",\n      "default": null,\n      "doc": "The icon associated with the entity"\n    }\n  ],\n  "doc": "Properties related to how the entity is displayed in the Datahub UI"\n}\n')))),(0,t.yg)("h4",{id:"assetsettings"},"assetSettings"),(0,t.yg)("p",null,"Settings associated with this asset"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"assetSummary"),(0,t.yg)("td",{parentName:"tr",align:null},"AssetSummarySettings"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Information related to the asset summary for this asset"),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "assetSettings"\n  },\n  "name": "AssetSettings",\n  "namespace": "com.linkedin.settings.asset",\n  "fields": [\n    {\n      "type": [\n        "null",\n        {\n          "type": "record",\n          "name": "AssetSummarySettings",\n          "namespace": "com.linkedin.settings.asset",\n          "fields": [\n            {\n              "Relationship": {\n                "/*/template": {\n                  "entityTypes": [\n                    "dataHubPageTemplate"\n                  ],\n                  "name": "HasSummaryTemplate"\n                }\n              },\n              "type": [\n                {\n                  "type": "array",\n                  "items": {\n                    "type": "record",\n                    "name": "AssetSummarySettingsTemplate",\n                    "namespace": "com.linkedin.settings.asset",\n                    "fields": [\n                      {\n                        "java": {\n                          "class": "com.linkedin.common.urn.Urn"\n                        },\n                        "type": "string",\n                        "name": "template",\n                        "doc": "The urn of the template"\n                      }\n                    ],\n                    "doc": "Object containing the template and any additional info for asset summary settings"\n                  }\n                },\n                "null"\n              ],\n              "name": "templates",\n              "default": [],\n              "doc": "The list of templates applied to this asset in order. Right now we only expect one."\n            }\n          ],\n          "doc": "Information related to the asset summary for this asset"\n        }\n      ],\n      "name": "assetSummary",\n      "default": null,\n      "doc": "Information related to the asset summary for this asset"\n    }\n  ],\n  "doc": "Settings associated with this asset"\n}\n')))),(0,t.yg)("h3",{id:"common-types"},"Common Types"),(0,t.yg)("p",null,"These types are used across multiple aspects in this entity."),(0,t.yg)("h4",{id:"auditstamp"},"AuditStamp"),(0,t.yg)("p",null,"Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Fields:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"time")," (long): When did the resource/association/sub-resource move into the specific lifecyc..."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"actor")," (string): The entity (e.g. a member URN) which will be credited for moving the resource..."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"impersonator")," (string?): The entity (e.g. a service URN) which performs the change on behalf of the Ac..."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"message")," (string?): Additional context around how DataHub was informed of the particular change. ...")),(0,t.yg)("h4",{id:"formassociation"},"FormAssociation"),(0,t.yg)("p",null,"Properties of an applied form."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Fields:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"urn")," (string): Urn of the applied form"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"incompletePrompts")," (FormPromptAssociation[]): A list of prompts that are not yet complete for this form."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"completedPrompts")," (FormPromptAssociation[]): A list of prompts that have been completed for this form.")),(0,t.yg)("h4",{id:"testresult"},"TestResult"),(0,t.yg)("p",null,"Information about a Test Result"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Fields:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"test")," (string): The urn of the test"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"type")," (TestResultType): The type of the result"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"testDefinitionMd5")," (string?): The md5 of the test definition that was used to compute this result. See Test..."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"lastComputed")," (AuditStamp?): The audit stamp of when the result was computed, including the actor who comp...")),(0,t.yg)("h3",{id:"relationships"},"Relationships"),(0,t.yg)("h4",{id:"self"},"Self"),(0,t.yg)("p",null,"These are the relationships to itself, stored in this entity's aspects"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"IsPartOf (via ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryNodeInfo.parentNode"),")")),(0,t.yg)("h4",{id:"outgoing"},"Outgoing"),(0,t.yg)("p",null,"These are the relationships stored in this entity's aspects"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"OwnedBy"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Corpuser via ",(0,t.yg)("inlineCode",{parentName:"li"},"ownership.owners.owner")),(0,t.yg)("li",{parentName:"ul"},"CorpGroup via ",(0,t.yg)("inlineCode",{parentName:"li"},"ownership.owners.owner")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"ownershipType"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"OwnershipType via ",(0,t.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"IsFailing"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Test via ",(0,t.yg)("inlineCode",{parentName:"li"},"testResults.failing")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"IsPassing"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Test via ",(0,t.yg)("inlineCode",{parentName:"li"},"testResults.passing")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"HasSummaryTemplate"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"DataHubPageTemplate via ",(0,t.yg)("inlineCode",{parentName:"li"},"assetSettings.assetSummary.templates"))))),(0,t.yg)("h4",{id:"incoming"},"Incoming"),(0,t.yg)("p",null,"These are the relationships stored in other entity's aspects"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"IsPartOf"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"GlossaryTerm via ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryTermInfo.parentNode"))))),(0,t.yg)("h3",{id:"global-metadata-model"},(0,t.yg)("a",{parentName:"h3",href:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,t.yg)("p",null,(0,t.yg)("img",{parentName:"p",src:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}h.isMDXComponent=!0}}]);