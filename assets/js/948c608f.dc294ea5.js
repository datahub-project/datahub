"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[89915],{15680:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>y});var a=r(96540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(r),m=n,y=u["".concat(l,".").concat(m)]||u[m]||g[m]||i;return r?a.createElement(y,s(s({ref:t},p),{},{components:r})):a.createElement(y,s({ref:t},p))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:n,s[1]=o;for(var c=2;c<i;c++)s[c]=r[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},72961:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>y,frontMatter:()=>o,metadata:()=>c,toc:()=>u});r(96540);var a=r(15680);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}const o={title:"Kafka Message Extraction Script",slug:"/metadata-service/schema-registry-servlet/scripts",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/metadata-service/schema-registry-servlet/scripts/README.md"},l="Kafka Message Extraction Script",c={unversionedId:"metadata-service/schema-registry-servlet/scripts/README",id:"metadata-service/schema-registry-servlet/scripts/README",title:"Kafka Message Extraction Script",description:"This script extracts the first message from multiple Kafka topics to create binary test fixtures for integration testing.",source:"@site/genDocs/metadata-service/schema-registry-servlet/scripts/README.md",sourceDirName:"metadata-service/schema-registry-servlet/scripts",slug:"/metadata-service/schema-registry-servlet/scripts",permalink:"/docs/metadata-service/schema-registry-servlet/scripts",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/metadata-service/schema-registry-servlet/scripts/README.md",tags:[],version:"current",frontMatter:{title:"Kafka Message Extraction Script",slug:"/metadata-service/schema-registry-servlet/scripts",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/metadata-service/schema-registry-servlet/scripts/README.md"}},p={},u=[{value:"Usage",id:"usage",level:2},{value:"What It Does",id:"what-it-does",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Output",id:"output",level:2}],g={toc:u},m="wrapper";function y(e){var{components:t}=e,r=s(e,["components"]);return(0,a.yg)(m,i(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},a=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),a.forEach((function(t){n(e,t,r[t])}))}return e}({},g,r),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"kafka-message-extraction-script"},"Kafka Message Extraction Script"),(0,a.yg)("p",null,"This script extracts the first message from multiple Kafka topics to create binary test fixtures for integration testing."),(0,a.yg)("h2",{id:"usage"},"Usage"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"cd metadata-service/schema-registry-servlet/scripts\nchmod +x extract_kafka_messages.sh\n./extract_kafka_messages.sh\n")),(0,a.yg)("h2",{id:"what-it-does"},"What It Does"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Extracts messages")," from these topics:"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"DataHubUpgradeHistory_v1")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"FailedMetadataChangeProposal_v1")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"MetadataChangeLog_Timeseries_v1")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"MetadataChangeLog_Versioned_v1")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"MetadataChangeProposal_v1")))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Creates binary fixtures")," in ",(0,a.yg)("inlineCode",{parentName:"p"},"../src/test/resources/v1/"),":"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"{TopicName}_test_fixture.bin")," for each topic with messages"))),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Shows message details"),":"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"File size and hex dump of first 32 bytes"),(0,a.yg)("li",{parentName:"ul"},"Deserialized content preview")))),(0,a.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"kcat")," installed (",(0,a.yg)("inlineCode",{parentName:"li"},"brew install kcat")," on macOS)"),(0,a.yg)("li",{parentName:"ul"},"Local Kafka running on ",(0,a.yg)("inlineCode",{parentName:"li"},"localhost:9092")),(0,a.yg)("li",{parentName:"ul"},"Schema registry accessible at ",(0,a.yg)("inlineCode",{parentName:"li"},"http://localhost:8080/schema-registry/api"))),(0,a.yg)("h2",{id:"output"},"Output"),(0,a.yg)("p",null,"The script will create binary fixture files that can be used in your integration tests to verify raw message handling capabilities."))}y.isMDXComponent=!0}}]);