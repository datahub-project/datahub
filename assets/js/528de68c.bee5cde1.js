"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[48456],{15680:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>g});var r=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(t),m=o,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return t?r.createElement(g,i(i({ref:n},l),{},{components:t})):r.createElement(g,i({ref:n},l))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},64723:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>g,frontMatter:()=>s,metadata:()=>u,toc:()=>d});t(96540);var r=t(15680);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const s={sidebar_position:43,title:"DataHubIngestionSource",slug:"/generated/metamodel/entities/datahubingestionsource",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataHubIngestionSource.md"},c="DataHubIngestionSource",u={unversionedId:"docs/generated/metamodel/entities/dataHubIngestionSource",id:"version-1.1.0/docs/generated/metamodel/entities/dataHubIngestionSource",title:"DataHubIngestionSource",description:"Aspects",source:"@site/versioned_docs/version-1.1.0/docs/generated/metamodel/entities/dataHubIngestionSource.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/datahubingestionsource",permalink:"/docs/1.1.0/generated/metamodel/entities/datahubingestionsource",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataHubIngestionSource.md",tags:[],version:"1.1.0",sidebarPosition:43,frontMatter:{sidebar_position:43,title:"DataHubIngestionSource",slug:"/generated/metamodel/entities/datahubingestionsource",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataHubIngestionSource.md"},sidebar:"overviewSidebar",previous:{title:"DataHubPolicy",permalink:"/docs/1.1.0/generated/metamodel/entities/datahubpolicy"},next:{title:"DataHubSecret",permalink:"/docs/1.1.0/generated/metamodel/entities/datahubsecret"}},l={},d=[{value:"Aspects",id:"aspects",level:2},{value:"dataHubIngestionSourceInfo",id:"datahubingestionsourceinfo",level:3},{value:"Relationships",id:"relationships",level:2},{value:"Global Metadata Model",id:"global-metadata-model",level:2}],p={toc:d},m="wrapper";function g(e){var{components:n}=e,t=i(e,["components"]);return(0,r.yg)(m,a(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){o(e,n,t[n])}))}return e}({},p,t),{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"datahubingestionsource"},"DataHubIngestionSource"),(0,r.yg)("h2",{id:"aspects"},"Aspects"),(0,r.yg)("h3",{id:"datahubingestionsourceinfo"},"dataHubIngestionSourceInfo"),(0,r.yg)("p",null,"Info about a DataHub ingestion source"),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Schema"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "dataHubIngestionSourceInfo"\n  },\n  "name": "DataHubIngestionSourceInfo",\n  "namespace": "com.linkedin.ingestion",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "TEXT_PARTIAL"\n      },\n      "type": "string",\n      "name": "name",\n      "doc": "The display name of the ingestion source"\n    },\n    {\n      "Searchable": {\n        "fieldType": "KEYWORD",\n        "queryByDefault": false\n      },\n      "type": "string",\n      "name": "type",\n      "doc": "The type of the source itself, e.g. mysql, bigquery, bigquery-usage. Should match the recipe."\n    },\n    {\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "platform",\n      "default": null,\n      "doc": "Data Platform URN associated with the source"\n    },\n    {\n      "type": [\n        "null",\n        {\n          "type": "record",\n          "name": "DataHubIngestionSourceSchedule",\n          "namespace": "com.linkedin.ingestion",\n          "fields": [\n            {\n              "type": "string",\n              "name": "interval",\n              "doc": "A cron-formatted execution interval, as a cron string, e.g. * * * * *"\n            },\n            {\n              "type": "string",\n              "name": "timezone",\n              "doc": "Timezone in which the cron interval applies, e.g. America/Los Angeles"\n            }\n          ],\n          "doc": "The schedule associated with an ingestion source."\n        }\n      ],\n      "name": "schedule",\n      "default": null,\n      "doc": "The schedule on which the ingestion source is executed"\n    },\n    {\n      "type": {\n        "type": "record",\n        "name": "DataHubIngestionSourceConfig",\n        "namespace": "com.linkedin.ingestion",\n        "fields": [\n          {\n            "type": "string",\n            "name": "recipe",\n            "doc": "The JSON recipe to use for ingestion"\n          },\n          {\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "version",\n            "default": null,\n            "doc": "The PyPI version of the datahub CLI to use when executing a recipe"\n          },\n          {\n            "Searchable": {\n              "fieldName": "sourceExecutorId",\n              "fieldType": "KEYWORD",\n              "queryByDefault": false\n            },\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "executorId",\n            "default": null,\n            "doc": "The id of the executor to use to execute the ingestion run"\n          },\n          {\n            "type": [\n              "null",\n              "boolean"\n            ],\n            "name": "debugMode",\n            "default": null,\n            "doc": "Whether or not to run this ingestion source in debug mode"\n          },\n          {\n            "type": [\n              "null",\n              {\n                "type": "map",\n                "values": "string"\n              }\n            ],\n            "name": "extraArgs",\n            "default": null,\n            "doc": "Extra arguments for the ingestion run."\n          }\n        ]\n      },\n      "name": "config",\n      "doc": "Parameters associated with the Ingestion Source"\n    },\n    {\n      "type": [\n        "null",\n        {\n          "type": "record",\n          "name": "DataHubIngestionSourceSource",\n          "namespace": "com.linkedin.ingestion",\n          "fields": [\n            {\n              "Searchable": {\n                "fieldName": "sourceType",\n                "fieldType": "KEYWORD",\n                "queryByDefault": false\n              },\n              "type": {\n                "type": "enum",\n                "symbolDocs": {\n                  "SYSTEM": "A system internal source, e.g. for running search indexing operations, feature computation, etc."\n                },\n                "name": "DataHubIngestionSourceSourceType",\n                "namespace": "com.linkedin.ingestion",\n                "symbols": [\n                  "SYSTEM"\n                ]\n              },\n              "name": "type",\n              "doc": "The source type of the ingestion source"\n            }\n          ]\n        }\n      ],\n      "name": "source",\n      "default": null,\n      "doc": "The source or origin of the Ingestion Source\\n\\nCurrently CLI and UI do not provide an explicit source."\n    }\n  ],\n  "doc": "Info about a DataHub ingestion source"\n}\n'))),(0,r.yg)("h2",{id:"relationships"},"Relationships"),(0,r.yg)("h2",{id:"global-metadata-model"},(0,r.yg)("a",{parentName:"h2",href:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,r.yg)("p",null,(0,r.yg)("img",{parentName:"p",src:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}g.isMDXComponent=!0}}]);