"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[56108],{15680:(e,a,t)=>{t.d(a,{xA:()=>p,yg:()=>u});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),g=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},p=function(e){var a=g(e.components);return n.createElement(s.Provider,{value:a},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=g(t),c=r,u=d["".concat(s,".").concat(c)]||d[c]||m[c]||i;return t?n.createElement(u,l(l({ref:a},p),{},{components:t})):n.createElement(u,l({ref:a},p))}));function u(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=c;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var g=2;g<i;g++)l[g]=t[g];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},41603:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>g,toc:()=>d});t(96540);var n=t(15680);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){return a=null!=a?a:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):function(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})),e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const o={title:"Load Indices: High-Performance Bulk Index Loading",slug:"/how/load-indices",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/how/load-indices.md"},s="Load Indices: High-Performance Bulk Index Loading",g={unversionedId:"docs/how/load-indices",id:"docs/how/load-indices",title:"Load Indices: High-Performance Bulk Index Loading",description:"LoadIndices is a high-performance upgrade task designed for bulk loading metadata aspects directly from the database into Elasticsearch/OpenSearch indices. Unlike RestoreIndices which focuses on correctness and consistency, LoadIndices is optimized for speed and throughput during initial deployments or large-scale data migrations.",source:"@site/genDocs/docs/how/load-indices.md",sourceDirName:"docs/how",slug:"/how/load-indices",permalink:"/docs/how/load-indices",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/how/load-indices.md",tags:[],version:"current",frontMatter:{title:"Load Indices: High-Performance Bulk Index Loading",slug:"/how/load-indices",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/how/load-indices.md"},sidebar:"overviewSidebar",previous:{title:"Search and Graph Reindexing",permalink:"/docs/how/restore-indices"},next:{title:"Configuring Database Retention",permalink:"/docs/advanced/db-retention"}},p={},d=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Performance Trade-offs &amp; Implications",id:"performance-trade-offs--implications",level:2},{value:"\ud83d\udea8 Key Trade-offs Made",id:"-key-trade-offs-made",level:3},{value:"<strong>1. BYPASS Kafka/MCL Event Pipeline</strong>",id:"1-bypass-kafkamcl-event-pipeline",level:4},{value:"<strong>2. BROKEN DataHub Event Architecture</strong>",id:"2-broken-datahub-event-architecture",level:4},{value:"<strong>3. READ_UNCOMMITTED Isolation</strong>",id:"3-read_uncommitted-isolation",level:4},{value:"<strong>4. Refresh Interval Manipulation</strong>",id:"4-refresh-interval-manipulation",level:4},{value:"<strong>5. No Write Concurrency Controls</strong>",id:"5-no-write-concurrency-controls",level:4},{value:"\u26a0\ufe0f When NOT to Use LoadIndices",id:"\ufe0f-when-not-to-use-loadindices",level:3},{value:"\u2705 When LoadIndices is Appropriate",id:"-when-loadindices-is-appropriate",level:3},{value:"\ud83d\udd12 Safety Requirements",id:"-safety-requirements",level:3},{value:"\ud83d\udcca Consistency Guarantees",id:"-consistency-guarantees",level:3},{value:"<strong>2. Restore Normal Operations</strong>",id:"2-restore-normal-operations",level:4},{value:"<strong>3. Emergency Rollback Plan</strong>",id:"3-emergency-rollback-plan",level:4},{value:"How LoadIndices Works",id:"how-loadindices-works",level:2},{value:"\ud83d\udd27 Independent Operation Mode",id:"-independent-operation-mode",level:3},{value:"Architecture Flow",id:"architecture-flow",level:3},{value:"Key Differences from RestoreIndices",id:"key-differences-from-restoreindices",level:3},{value:"Deployment &amp; Execution",id:"deployment--execution",level:2},{value:"\ud83d\ude80 Standalone Deployment Advantage",id:"-standalone-deployment-advantage",level:3},{value:"\ud83d\udd27 Execution Methods",id:"-execution-methods",level:3},{value:"LoadIndices Configuration Options",id:"loadindices-configuration-options",level:2},{value:"\ud83d\udd04 Performance &amp; Throttling",id:"-performance--throttling",level:3},{value:"\ud83d\udcc5 Time Filtering",id:"-time-filtering",level:3},{value:"\ud83d\udd0d Content Filtering",id:"-content-filtering",level:3},{value:"\u2699\ufe0f System Configuration",id:"\ufe0f-system-configuration",level:3},{value:"Running LoadIndices",id:"running-loadindices",level:2},{value:"\ud83d\udc33 Docker Compose",id:"-docker-compose",level:3},{value:"\ud83c\udfaf Gradle Task (Development)",id:"-gradle-task-development",level:3},{value:"\ud83d\udc33 Docker Environment Variables",id:"-docker-environment-variables",level:3},{value:"\ud83d\udd04 Resume Functionality",id:"-resume-functionality",level:3},{value:"<strong>Resume from Last Processed URN</strong>",id:"resume-from-last-processed-urn",level:4},{value:"<strong>Resume Best Practices</strong>",id:"resume-best-practices",level:4},{value:"<strong>Example Resume Workflow</strong>",id:"example-resume-workflow",level:4},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"\ud83d\ude80 Elasticsearch/OpenSearch Configuration",id:"-elasticsearchopensearch-configuration",level:3},{value:"Bulk Processing Tuning",id:"bulk-processing-tuning",level:4},{value:"Connection Pool Optimization",id:"connection-pool-optimization",level:4},{value:"Comparison with RestoreIndices",id:"comparison-with-restoreindices",level:2},{value:"\ud83c\udfaf Purpose &amp; Design Philosophy",id:"-purpose--design-philosophy",level:3},{value:"\ud83d\udcca Technical Comparison",id:"-technical-comparison",level:3},{value:"\ud83d\ude80 When to Use Each Tool",id:"-when-to-use-each-tool",level:3},{value:"\u2705 <strong>Use RestoreIndices For:</strong>",id:"-use-restoreindices-for",level:4},{value:"\u2705 <strong>Use LoadIndices For:</strong>",id:"-use-loadindices-for",level:4}],m={toc:d},c="wrapper";function u(e){var{components:a}=e,t=l(e,["components"]);return(0,n.yg)(c,i(function(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{},n=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),n.forEach((function(a){r(e,a,t[a])}))}return e}({},m,t),{components:a,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"load-indices-high-performance-bulk-index-loading"},"Load Indices: High-Performance Bulk Index Loading"),(0,n.yg)("p",null,"LoadIndices is a high-performance upgrade task designed for bulk loading metadata aspects directly from the database into Elasticsearch/OpenSearch indices. Unlike RestoreIndices which focuses on correctness and consistency, LoadIndices is optimized for speed and throughput during initial deployments or large-scale data migrations."),(0,n.yg)("h2",{id:"overview"},"Overview"),(0,n.yg)("p",null,"LoadIndices bypasses the standard event-driven processing pipeline to directly stream data from the ",(0,n.yg)("inlineCode",{parentName:"p"},"metadata_aspect_v2")," table into search indices using optimized bulk operations. This approach provides significant performance improvements for large installations while making specific architectural trade-offs that prioritize speed over consistency."),(0,n.yg)("p",null,"\ud83d\udea8 ",(0,n.yg)("strong",{parentName:"p"},"CRITICAL WARNING"),": LoadIndices is designed for specific use cases only and should ",(0,n.yg)("strong",{parentName:"p"},"NEVER")," be used in production environments with active concurrent writes, MCL-dependent systems, or real-time consistency requirements. See ",(0,n.yg)("a",{parentName:"p",href:"#performance-trade-offs--implications"},"Performance Trade-offs & Implications")," for complete details."),(0,n.yg)("h3",{id:"key-features"},"Key Features"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"\ud83d\ude80 High Performance"),": Direct streaming from database with optimized bulk operations"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"\u26a1 Fast Bulk Loading"),": Optimized for speed over consistency during initial loads"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"\ud83d\udd27 Refresh Management"),": Automatically disables refresh intervals during loading for optimal performance"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"\ud83d\udcca Comprehensive Monitoring"),": Real-time progress reporting and performance metrics"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"\u2699\ufe0f Configurable Isolation"),": Utilizes READ_UNCOMMITTED transactions for faster scanning")),(0,n.yg)("hr",null),(0,n.yg)("h2",{id:"performance-trade-offs--implications"},"Performance Trade-offs & Implications"),(0,n.yg)("p",null,"\u26a0\ufe0f ",(0,n.yg)("strong",{parentName:"p"},"Critical Understanding"),": LoadIndices prioritizes ",(0,n.yg)("strong",{parentName:"p"},"performance over consistency")," by making several architectural trade-offs. Understanding these implications is crucial before using LoadIndices in production environments."),(0,n.yg)("h3",{id:"-key-trade-offs-made"},"\ud83d\udea8 Key Trade-offs Made"),(0,n.yg)("h4",{id:"1-bypass-kafkamcl-event-pipeline"},(0,n.yg)("strong",{parentName:"h4"},"1. BYPASS Kafka/MCL Event Pipeline")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"What"),": LoadIndices completely bypasses Kafka MCL (Metadata Change Log) topics that normally propagate all metadata changes"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Architecture"),": ",(0,n.yg)("inlineCode",{parentName:"li"},"Database \u2192 LoadIndices \u2192 Elasticsearch")," ",(0,n.yg)("strong",{parentName:"li"},"vs")," normal flow of ",(0,n.yg)("inlineCode",{parentName:"li"},"Database \u2192 Kafka MCL \u2192 Multiple Consumers \u2192 Elasticsearch/Graph/etc")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Impact"),": ",(0,n.yg)("strong",{parentName:"li"},"No MCL events published")," - downstream systems lose visibility into metadata changes"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Critical Implication"),":",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"MCL-Dependent Analytics"),": Won't have audit trail of metadata changes"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Integrations"),": External systems won't be notified of changes"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Custom MCL Consumers"),": Any custom consumers will miss these events entirely"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"\u2705 Graph Service"),": WILL be updated (UpdateIndicesService handles graph indices) ",(0,n.yg)("strong",{parentName:"li"},"\u26a0\ufe0f Only when Elasticsearch is used for graph storage"))))),(0,n.yg)("h4",{id:"2-broken-datahub-event-architecture"},(0,n.yg)("strong",{parentName:"h4"},"2. BROKEN DataHub Event Architecture")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"What"),': Violates DataHub\'s core design principle that "all metadata changes flow through Kafka MCL"'),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Normal Flow"),": ",(0,n.yg)("inlineCode",{parentName:"li"},"Metadata Change \u2192 MCL Event \u2192 Kafka \u2192 Multiple Consumers \u2192 Various Stores")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"LoadIndices Flow"),": ",(0,n.yg)("inlineCode",{parentName:"li"},"Metadata Change \u2192 LoadIndices \u2192 Direct ES Write")," (",(0,n.yg)("strong",{parentName:"li"},"Skips Kafka entirely"),")")),(0,n.yg)("h4",{id:"3-read_uncommitted-isolation"},(0,n.yg)("strong",{parentName:"h4"},"3. READ_UNCOMMITTED Isolation")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"What"),": Uses ",(0,n.yg)("inlineCode",{parentName:"li"},"TxIsolation.READ_UNCOMMITTED")," for faster database scanning"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Impact"),": May read ",(0,n.yg)("strong",{parentName:"li"},"uncommitted changes")," or ",(0,n.yg)("strong",{parentName:"li"},"dirty reads")," from concurrent transactions"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Implication"),": Data consistency not guaranteed during active writes to database")),(0,n.yg)("h4",{id:"4-refresh-interval-manipulation"},(0,n.yg)("strong",{parentName:"h4"},"4. Refresh Interval Manipulation")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"What"),": Automatically disables refresh intervals during bulk operations"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Impact"),": ",(0,n.yg)("strong",{parentName:"li"},"Recent updates may not be immediately searchable")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Implication"),": Users won't see real-time updates in search until refresh intervals are restored")),(0,n.yg)("h4",{id:"5-no-write-concurrency-controls"},(0,n.yg)("strong",{parentName:"h4"},"5. No Write Concurrency Controls")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"What"),": No coordination with concurrent Elasticsearch writes from live ingestion"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Impact"),": ",(0,n.yg)("strong",{parentName:"li"},"Potential conflicts")," with active ingestion pipelines"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Implication"),": Concurrent writes may cause data inconsistency or operation failures")),(0,n.yg)("h3",{id:"\ufe0f-when-not-to-use-loadindices"},"\u26a0\ufe0f When NOT to Use LoadIndices"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"\u274c DO NOT use LoadIndices if you have:")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Active ingestion pipelines")," writing to Elasticsearch simultaneously"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"MCL-dependent systems")," that need event notifications"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Neo4j-based graph storage")," (graph updates will be missing)"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Real-time search requirements")," during the loading process"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Production traffic")," that requires immediate search consistency")),(0,n.yg)("h3",{id:"-when-loadindices-is-appropriate"},"\u2705 When LoadIndices is Appropriate"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"\u2705 Safe to use LoadIndices when:")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Fresh deployment")," with empty Elasticsearch cluster"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Offline migration")," with no concurrent users"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Standalone indexing")," without DataHub services running"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Read-only replica environments")," with no active writes"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Development/testing")," environments"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Disaster recovery")," scenarios where faster restoration is prioritized"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Independent cluster setup")," where you need to populate indices before services start"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Elasticsearch-based graph storage")," (graph gets updated automatically)")),(0,n.yg)("h3",{id:"-safety-requirements"},"\ud83d\udd12 Safety Requirements"),(0,n.yg)("p",null,"Before using LoadIndices in any environment:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Verify Minimal Infrastructure"),":"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Database"),": MySQL/PostgreSQL with ",(0,n.yg)("inlineCode",{parentName:"li"},"metadata_aspect_v2")," table accessible (via Ebean ORM)"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Elasticsearch"),": Running cluster accessible via HTTP/HTTPS"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"DataHub Services"),": \u2705 ",(0,n.yg)("strong",{parentName:"li"},"NOT required")," - LoadIndices can run independently"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"\u26a0\ufe0f Check Graph Storage"),": Verify if using Elasticsearch-based graph storage"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"\u26a0\ufe0f Check Database Type"),": Confirm NOT using Cassandra (not supported)"))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Stop All Ingestion")," (if DataHub is running):"),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"# Disable all Kafka consumers\nkubectl scale deployment --replicas=0 datahub-mae-consumer\nkubectl scale deployment --replicas=0 datahub-mce-consumer\nkubectl scale deployment --replicas=0 datahub-gms\n"))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Check Database Configuration"),":"),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},'# Check if using Cassandra (LoadIndices NOT supported)\ngrep -i cassandra /path/to/datahub/docker/docker-compose.yml\n\n# Verify MySQL/PostgreSQL database is configured\ngrep -E "mysql\\|postgres" /path/to/datahub/docker/docker-compose.yml\n\n# \u26a0\ufe0f If Cassandra detected, LoadIndices is NOT available\n# Must use RestoreIndices instead\n'))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Check Graph Storage Configuration"),":"),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},'# Check if using Neo4j (graph updates will be MISSING)\ngrep -r "neo4j" /path/to/datahub/docker/docker-compose.yml\n\n# Check DataHub configuration for graph service selection\ngrep -i "graph.*elasticsearch\\|neo4j" /path/to/datahub/conf/application.yml\n\n# \u26a0\ufe0f If Neo4j is detected, LoadIndices will NOT update graph\n'))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Verify No Concurrent Writes"),":"),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},'# Check for active Elasticsearch indexing\ncurl -s "localhost:9200/_nodes/stats" | grep "index_current"\n# Should show "index_current": 0\n'))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Index Clean State"),":"),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},'# Ensure clean indexing state\ncurl -s "localhost:9200/_nodes/stats" | grep -E "refresh.*active"\n'))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Coordinate with Operations"),":"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Maintenance window")," scheduling"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"User notification")," of search unavailability"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Monitoring")," of downstream system dependencies")))),(0,n.yg)("h3",{id:"-consistency-guarantees"},"\ud83d\udcca Consistency Guarantees"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Level"),(0,n.yg)("th",{parentName:"tr",align:null},"LoadIndices"),(0,n.yg)("th",{parentName:"tr",align:null},"RestoreIndices"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"URN-level Ordering")),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705 Guaranteed"),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705 Guaranteed")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Real-time Searchability")),(0,n.yg)("td",{parentName:"tr",align:null},"\u274c Delayed"),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705 Immediate")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Graph Service Updates (ES-based)")),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705 Updated"),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705 Updated")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Graph Service Updates (Neo4j-based)")),(0,n.yg)("td",{parentName:"tr",align:null},"\u274c Missing"),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705 Updated")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"MCL Event Propagation")),(0,n.yg)("td",{parentName:"tr",align:null},"\u274c Bypassed"),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705 Full propagation")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Concurrent Write Safety")),(0,n.yg)("td",{parentName:"tr",align:null},"\u274c Not safe"),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705 Safe")))),(0,n.yg)("h4",{id:"2-restore-normal-operations"},(0,n.yg)("strong",{parentName:"h4"},"2. Restore Normal Operations")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Re-enable ingestion")," pipelines gradually"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Monitor Elasticsearch")," for conflicts"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Validate downstream systems")," are synchronized")),(0,n.yg)("h4",{id:"3-emergency-rollback-plan"},(0,n.yg)("strong",{parentName:"h4"},"3. Emergency Rollback Plan")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"# If issues arise, prepare rollback:\n# 1. Stop LoadIndices immediately\n# 2. Restore from backup indices\n# 3. Re-run with RestoreIndices for correctness\n")),(0,n.yg)("hr",null),(0,n.yg)("h2",{id:"how-loadindices-works"},"How LoadIndices Works"),(0,n.yg)("p",null,"LoadIndices operates as an upgrade task that can run ",(0,n.yg)("strong",{parentName:"p"},"independently")," without requiring DataHub services to be running. It consists of two main steps:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"BuildIndicesStep"),": Creates and configures Elasticsearch indices (creates indices if they don't exist)"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"LoadIndicesStep"),": Streams aspects from database and bulk loads them into indices")),(0,n.yg)("h3",{id:"-independent-operation-mode"},"\ud83d\udd27 Independent Operation Mode"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Key Advantage"),": LoadIndices only requires:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"\u2705 ",(0,n.yg)("strong",{parentName:"li"},"MySQL/PostgreSQL")," source database (via Ebean ORM)"),(0,n.yg)("li",{parentName:"ul"},"\u2705 ",(0,n.yg)("strong",{parentName:"li"},"Elasticsearch/OpenSearch")," destination cluster"),(0,n.yg)("li",{parentName:"ul"},"\u274c ",(0,n.yg)("strong",{parentName:"li"},"No DataHub services")," (maui, frontend, etc.) required"),(0,n.yg)("li",{parentName:"ul"},"\u274c ",(0,n.yg)("strong",{parentName:"li"},"Cassandra"),": \u26a0\ufe0f ",(0,n.yg)("strong",{parentName:"li"},"NOT supported")," (Ebean doesn't support Cassandra)")),(0,n.yg)("p",null,"This enables ",(0,n.yg)("strong",{parentName:"p"},"offline bulk operations")," during maintenance windows or initial deployments where DataHub infrastructure is being set up incrementally."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Index Creation"),": The BuildIndicesStep automatically creates all required Elasticsearch indices based on ",(0,n.yg)("inlineCode",{parentName:"p"},"IndexConvention")," patterns, so empty Elasticsearch clusters are fully supported."),(0,n.yg)("h3",{id:"architecture-flow"},"Architecture Flow"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-mermaid"},"graph TD\n    A[LoadIndices Upgrade] --\x3e B[BuildIndicesStep]\n    B --\x3e C[Create/Configure Indices]\n    C --\x3e D[LoadIndicesStep]\n    D --\x3e E[Disable Refresh Intervals]\n    E --\x3e F[Stream Aspects from DB]\n    F --\x3e G[Batch Processing]\n    G --\x3e H[Convert to MCL Events]\n    H --\x3e I[Bulk Write to ES]\n    I --\x3e J[Restore Refresh Intervals]\n")),(0,n.yg)("h3",{id:"key-differences-from-restoreindices"},"Key Differences from RestoreIndices"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Aspect"),(0,n.yg)("th",{parentName:"tr",align:null},"RestoreIndices"),(0,n.yg)("th",{parentName:"tr",align:null},"LoadIndices"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Purpose")),(0,n.yg)("td",{parentName:"tr",align:null},"Correctness & consistency"),(0,n.yg)("td",{parentName:"tr",align:null},"Speed & throughput")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Processing")),(0,n.yg)("td",{parentName:"tr",align:null},"Event-driven via MCL events"),(0,n.yg)("td",{parentName:"tr",align:null},"Direct bulk operations")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Isolation")),(0,n.yg)("td",{parentName:"tr",align:null},"READ_COMMITTED"),(0,n.yg)("td",{parentName:"tr",align:null},"READ_UNCOMMITTED")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Refresh Management")),(0,n.yg)("td",{parentName:"tr",align:null},"Static configuration"),(0,n.yg)("td",{parentName:"tr",align:null},"Dynamic disable/restore")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Performance Focus")),(0,n.yg)("td",{parentName:"tr",align:null},"Accurate replay"),(0,n.yg)("td",{parentName:"tr",align:null},"Maximal speed")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Use Case")),(0,n.yg)("td",{parentName:"tr",align:null},"Recovery from inconsistencies"),(0,n.yg)("td",{parentName:"tr",align:null},"Initial loads & migrations")))),(0,n.yg)("hr",null),(0,n.yg)("h2",{id:"deployment--execution"},"Deployment & Execution"),(0,n.yg)("h3",{id:"-standalone-deployment-advantage"},"\ud83d\ude80 Standalone Deployment Advantage"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Key Benefit"),": LoadIndices can run with ",(0,n.yg)("strong",{parentName:"p"},"minimal infrastructure")," without requiring DataHub services to be running:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"# Minimal requirements\n\u2705 MySQL/PostgreSQL database (with metadata_aspect_v2 table)\n\u2705 Elasticsearch/OpenSearch cluster\n\u274c DataHub GMS/Maui services - NOT needed\n\u274c Kafka cluster - NOT needed\n\u274c Frontend services - NOT needed\n")),(0,n.yg)("h3",{id:"-execution-methods"},"\ud83d\udd27 Execution Methods"),(0,n.yg)("p",null,"LoadIndices can be executed via:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Gradle Task")," (Recommended)")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"# From datahub-upgrade directory\n./gradlew runLoadIndices\n\n# With custom thread count\n./gradlew runLoadIndices -PesThreadCount=6\n")),(0,n.yg)("ol",{start:2},(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"IDE Execution"),": Run ",(0,n.yg)("inlineCode",{parentName:"p"},"UpgradeTask.main()")," with LoadIndices arguments")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Standalone JAR"),": Build and run datahub-upgrade JAR independently"))),(0,n.yg)("hr",null),(0,n.yg)("h2",{id:"loadindices-configuration-options"},"LoadIndices Configuration Options"),(0,n.yg)("h3",{id:"-performance--throttling"},"\ud83d\udd04 Performance & Throttling"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Argument"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"),(0,n.yg)("th",{parentName:"tr",align:null},"Default"),(0,n.yg)("th",{parentName:"tr",align:null},"Example"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"batchSize")),(0,n.yg)("td",{parentName:"tr",align:null},"Number of aspects per batch for processing"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"10000")),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"-a batchSize=5000"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"limit")),(0,n.yg)("td",{parentName:"tr",align:null},"Maximum number of aspects to process"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"Integer.MAX_VALUE")," (no limit)"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"-a limit=50000"))))),(0,n.yg)("h3",{id:"-time-filtering"},"\ud83d\udcc5 Time Filtering"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Argument"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"),(0,n.yg)("th",{parentName:"tr",align:null},"Example"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"gePitEpochMs")),(0,n.yg)("td",{parentName:"tr",align:null},"Only process aspects created ",(0,n.yg)("strong",{parentName:"td"},"after")," this timestamp (milliseconds)"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"-a gePitEpochMs=1609459200000"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"lePitEpochMs")),(0,n.yg)("td",{parentName:"tr",align:null},"Only process aspects created ",(0,n.yg)("strong",{parentName:"td"},"before")," this timestamp (milliseconds)"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"-a lePitEpochMs=1640995200000"))))),(0,n.yg)("h3",{id:"-content-filtering"},"\ud83d\udd0d Content Filtering"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Argument"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"),(0,n.yg)("th",{parentName:"tr",align:null},"Example"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"urnLike")),(0,n.yg)("td",{parentName:"tr",align:null},"SQL LIKE pattern to filter URNs"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"-a urnLike=urn:li:dataset:%"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"aspectNames")),(0,n.yg)("td",{parentName:"tr",align:null},"Comma-separated list of aspect names to process"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"-a aspectNames=ownership,schemaMetadata"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"lastUrn")),(0,n.yg)("td",{parentName:"tr",align:null},"Resume processing from this URN (inclusive)"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"-a lastUrn=urn:li:dataset:my-dataset"))))),(0,n.yg)("h3",{id:"\ufe0f-system-configuration"},"\u2699\ufe0f System Configuration"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Environment Variable"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"),(0,n.yg)("th",{parentName:"tr",align:null},"Default"),(0,n.yg)("th",{parentName:"tr",align:null},"Example"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"ELASTICSEARCH_THREAD_COUNT")),(0,n.yg)("td",{parentName:"tr",align:null},"Number of I/O threads for BulkProcessor"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"2")," (app config), ",(0,n.yg)("inlineCode",{parentName:"td"},"4")," (Gradle task)"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"ELASTICSEARCH_THREAD_COUNT=4"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"ES_BULK_ASYNC")),(0,n.yg)("td",{parentName:"tr",align:null},"Enable asynchronous bulk operations"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"true")),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"ES_BULK_ASYNC=true"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"ES_BULK_REQUESTS_LIMIT")),(0,n.yg)("td",{parentName:"tr",align:null},"Maximum bulk requests per buffer"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"10000")),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"ES_BULK_REQUESTS_LIMIT=15000"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"ES_BULK_FLUSH_PERIOD")),(0,n.yg)("td",{parentName:"tr",align:null},"Bulk flush interval in seconds"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"300")," (5 minutes)"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"ES_BULK_FLUSH_PERIOD=300"))))),(0,n.yg)("hr",null),(0,n.yg)("h2",{id:"running-loadindices"},"Running LoadIndices"),(0,n.yg)("h3",{id:"-docker-compose"},"\ud83d\udc33 Docker Compose"),(0,n.yg)("p",null,"If you're using Docker Compose with the DataHub source repository:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"# Basic LoadIndices execution\n./docker/datahub-upgrade/datahub-upgrade.sh -u LoadIndices\n\n# LoadIndices with performance tuning\n./docker/datahub-upgrade/datahub-upgrade.sh -u LoadIndices \\\n  -a batchSize=15000 \\\n  -a limit=100000\n")),(0,n.yg)("h3",{id:"-gradle-task-development"},"\ud83c\udfaf Gradle Task (Development)"),(0,n.yg)("p",null,"For development and testing environments:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"# Run LoadIndices with default settings\n./gradlew :datahub-upgrade:runLoadIndices\n\n# Run with custom thread count and batch size\n./gradlew :datahub-upgrade:runLoadIndices \\\n  -PesThreadCount=4 \\\n  -PbatchSize=15000 \\\n  -Plimit=50000\n")),(0,n.yg)("p",null,"The Gradle task supports these parameters:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"esThreadCount"),": Set ",(0,n.yg)("inlineCode",{parentName:"li"},"ELASTICSEARCH_THREAD_COUNT")," (default: ",(0,n.yg)("inlineCode",{parentName:"li"},"4"),")"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"batchSize"),": Override batch size (default: ",(0,n.yg)("inlineCode",{parentName:"li"},"10000"),")"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"limit"),": Set processing limit"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"urnLike"),": Filter by URN pattern"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"aspectNames"),": Filter by aspect names"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"lePitEpochMs"),": Process records created before this timestamp"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"gePitEpochMs"),": Process records created after this timestamp"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"lastUrn"),": Resume processing from this URN (inclusive)")),(0,n.yg)("h3",{id:"-docker-environment-variables"},"\ud83d\udc33 Docker Environment Variables"),(0,n.yg)("p",null,"Configure LoadIndices through Docker environment:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"# Target specific entity types\ndocker run --rm datahub-upgrade \\\n  -u LoadIndices \\\n  -a urnLike=urn:li:dataset:% \\\n  -a batchSize=20000\n\n# Process specific aspects only\ndocker run --rm datahub-upgrade \\\n  -u LoadIndices \\\n  -a aspectNames=ownership,status,schemaMetadata \\\n  -a batchSize=15000\n\n# Time-based filtering\ndocker run --rm datahub-upgrade \\\n  -u LoadIndices \\\n  -a gePitEpochMs=1640995200000 \\\n  -a limit=50000\n\n# Resume from a specific URN\ndocker run --rm datahub-upgrade \\\n  -u LoadIndices \\\n  -a lastUrn=urn:li:dataset:my-dataset \\\n  -a batchSize=10000\n")),(0,n.yg)("h3",{id:"-resume-functionality"},"\ud83d\udd04 Resume Functionality"),(0,n.yg)("p",null,"LoadIndices supports resuming from a specific URN when processing is interrupted:"),(0,n.yg)("h4",{id:"resume-from-last-processed-urn"},(0,n.yg)("strong",{parentName:"h4"},"Resume from Last Processed URN")),(0,n.yg)("p",null,"When LoadIndices runs, it logs the last URN processed in each batch:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},"Batch completed - Last URN processed: urn:li:dataset:my-dataset\nProcessed 10000 aspects - 150.2 aspects/sec - Last URN: urn:li:dataset:my-dataset\n")),(0,n.yg)("p",null,"To resume from where you left off:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"# Resume from the last URN that was successfully processed\n./gradlew :datahub-upgrade:runLoadIndices \\\n  -a lastUrn=urn:li:dataset:my-dataset \\\n  -a batchSize=10000\n")),(0,n.yg)("h4",{id:"resume-best-practices"},(0,n.yg)("strong",{parentName:"h4"},"Resume Best Practices")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Use the exact URN"),": Copy the URN exactly as logged (including any URL encoding)"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Inclusive processing"),": The ",(0,n.yg)("inlineCode",{parentName:"li"},"lastUrn")," parameter processes from the specified URN onwards (inclusive)"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Monitor progress"),': Watch the logs for the "Last URN processed" messages to track progress'),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Batch boundaries"),": Resume works at the URN level, not batch level - some aspects may be reprocessed")),(0,n.yg)("h4",{id:"example-resume-workflow"},(0,n.yg)("strong",{parentName:"h4"},"Example Resume Workflow")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},'# 1. Start initial processing\n./gradlew :datahub-upgrade:runLoadIndices -a batchSize=5000\n\n# 2. If interrupted, check logs for last URN:\n# "Batch completed - Last URN processed: urn:li:dataset:my-dataset"\n\n# 3. Resume from that URN\n./gradlew :datahub-upgrade:runLoadIndices \\\n  -a lastUrn=urn:li:dataset:my-dataset \\\n  -a batchSize=5000\n')),(0,n.yg)("hr",null),(0,n.yg)("h2",{id:"performance-optimization"},"Performance Optimization"),(0,n.yg)("h3",{id:"-elasticsearchopensearch-configuration"},"\ud83d\ude80 Elasticsearch/OpenSearch Configuration"),(0,n.yg)("h4",{id:"bulk-processing-tuning"},"Bulk Processing Tuning"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"# Optimize bulk settings for LoadIndices\nexport ES_BULK_REQUESTS_LIMIT=15000\nexport ES_BULK_FLUSH_PERIOD=10\nexport ES_BULK_ASYNC=true\nexport ELASTICSEARCH_THREAD_COUNT=4\n")),(0,n.yg)("h4",{id:"connection-pool-optimization"},"Connection Pool Optimization"),(0,n.yg)("p",null,"LoadIndices automatically configures connection pooling based on thread count:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},'# datahub-upgrade/build.gradle configuration\nenvironment "ELASTICSEARCH_THREAD_COUNT", "4" # Auto-adjusts maxConnectionsPerRoute\n')),(0,n.yg)("h2",{id:"comparison-with-restoreindices"},"Comparison with RestoreIndices"),(0,n.yg)("p",null,"Understanding when to use LoadIndices vs RestoreIndices is crucial for optimal performance and data consistency."),(0,n.yg)("h3",{id:"-purpose--design-philosophy"},"\ud83c\udfaf Purpose & Design Philosophy"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Aspect"),(0,n.yg)("th",{parentName:"tr",align:null},"RestoreIndices"),(0,n.yg)("th",{parentName:"tr",align:null},"LoadIndices"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Primary Purpose")),(0,n.yg)("td",{parentName:"tr",align:null},"Data consistency & correctness"),(0,n.yg)("td",{parentName:"tr",align:null},"Speed & throughput")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Design Philosophy")),(0,n.yg)("td",{parentName:"tr",align:null},"Event-driven precision"),(0,n.yg)("td",{parentName:"tr",align:null},"Performance optimization")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Consistency Model")),(0,n.yg)("td",{parentName:"tr",align:null},"Full consistency guarantee"),(0,n.yg)("td",{parentName:"tr",align:null},"Speed-optimized trade-offs")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Use Case")),(0,n.yg)("td",{parentName:"tr",align:null},"Production recovery"),(0,n.yg)("td",{parentName:"tr",align:null},"Bulk migrations & initial loads")))),(0,n.yg)("h3",{id:"-technical-comparison"},"\ud83d\udcca Technical Comparison"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Feature"),(0,n.yg)("th",{parentName:"tr",align:null},"RestoreIndices"),(0,n.yg)("th",{parentName:"tr",align:null},"LoadIndices"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Database Isolation")),(0,n.yg)("td",{parentName:"tr",align:null},"READ_COMMITTED"),(0,n.yg)("td",{parentName:"tr",align:null},"READ_UNCOMMITTED")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"MCL Events")),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705 Full MCL pipeline"),(0,n.yg)("td",{parentName:"tr",align:null},"\u274c Bypasses MCL entirely")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Graph Updates (Elasticsearch)")),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705 Updated"),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705 Updated")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Graph Updates (Neo4j)")),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705 Updated"),(0,n.yg)("td",{parentName:"tr",align:null},"\u274c Missing")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Database Support")),(0,n.yg)("td",{parentName:"tr",align:null},"MySQL, PostgreSQL, Cassandra"),(0,n.yg)("td",{parentName:"tr",align:null},"MySQL, PostgreSQL only")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Performance")),(0,n.yg)("td",{parentName:"tr",align:null},"Slower, safer"),(0,n.yg)("td",{parentName:"tr",align:null},"Faster, optimized")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Real-time Consistency")),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705 Immediate"),(0,n.yg)("td",{parentName:"tr",align:null},"\u274c Delayed until refresh")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("strong",{parentName:"td"},"Concurrency Safety")),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705 Safe"),(0,n.yg)("td",{parentName:"tr",align:null},"\u274c Not safe")))),(0,n.yg)("h3",{id:"-when-to-use-each-tool"},"\ud83d\ude80 When to Use Each Tool"),(0,n.yg)("h4",{id:"-use-restoreindices-for"},"\u2705 ",(0,n.yg)("strong",{parentName:"h4"},"Use RestoreIndices For:")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Production recovery")," from inconsistencies"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Neo4j-based graph storage")," deployments"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Cassandra-based")," metadata storage"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Active ingestion")," pipelines running"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"MCL-dependent systems")," requiring event notifications"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Precise event replay")," scenarios")),(0,n.yg)("h4",{id:"-use-loadindices-for"},"\u2705 ",(0,n.yg)("strong",{parentName:"h4"},"Use LoadIndices For:")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Fresh deployments")," with empty clusters"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Bulk migrations")," during maintenance windows"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"MySQL/PostgreSQL + Elasticsearch")," configurations"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Offline scenarios")," with no concurrent writes"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Development/testing")," environments"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Performance-critical")," initial data loads")))}u.isMDXComponent=!0}}]);