"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[62329],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>h});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},80707:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>p});n(96540);var a=n(15680);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const s={sidebar_position:56,title:"DataHubOpenAPISchema",slug:"/generated/metamodel/entities/datahubopenapischema",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataHubOpenAPISchema.md"},l="DataHubOpenAPISchema",c={unversionedId:"docs/generated/metamodel/entities/dataHubOpenAPISchema",id:"version-1.1.0/docs/generated/metamodel/entities/dataHubOpenAPISchema",title:"DataHubOpenAPISchema",description:"Contains aspects which are used in OpenAPI requests/responses which are not otherwise present in the data model.",source:"@site/versioned_docs/version-1.1.0/docs/generated/metamodel/entities/dataHubOpenAPISchema.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/datahubopenapischema",permalink:"/docs/1.1.0/generated/metamodel/entities/datahubopenapischema",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataHubOpenAPISchema.md",tags:[],version:"1.1.0",sidebarPosition:56,frontMatter:{sidebar_position:56,title:"DataHubOpenAPISchema",slug:"/generated/metamodel/entities/datahubopenapischema",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataHubOpenAPISchema.md"},sidebar:"overviewSidebar",previous:{title:"DataHubConnection",permalink:"/docs/1.1.0/generated/metamodel/entities/datahubconnection"},next:{title:"Concepts",permalink:"/docs/1.1.0/what-is-datahub/datahub-concepts"}},d={},p=[{value:"Aspects",id:"aspects",level:2},{value:"systemMetadata",id:"systemmetadata",level:3},{value:"Relationships",id:"relationships",level:2},{value:"Global Metadata Model",id:"global-metadata-model",level:2}],u={toc:p},m="wrapper";function h(e){var{components:t}=e,n=i(e,["components"]);return(0,a.yg)(m,o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"datahubopenapischema"},"DataHubOpenAPISchema"),(0,a.yg)("p",null,"Contains aspects which are used in OpenAPI requests/responses which are not otherwise present in the data model."),(0,a.yg)("h2",{id:"aspects"},"Aspects"),(0,a.yg)("h3",{id:"systemmetadata"},"systemMetadata"),(0,a.yg)("p",null,"Metadata associated with each metadata change that is processed by the system"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Schema"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "systemMetadata"\n  },\n  "name": "SystemMetadata",\n  "namespace": "com.linkedin.mxe",\n  "fields": [\n    {\n      "type": [\n        "long",\n        "null"\n      ],\n      "name": "lastObserved",\n      "default": 0,\n      "doc": "The timestamp the metadata was observed at"\n    },\n    {\n      "type": [\n        "string",\n        "null"\n      ],\n      "name": "runId",\n      "default": "no-run-id-provided",\n      "doc": "The original run id that produced the metadata. Populated in case of batch-ingestion."\n    },\n    {\n      "type": [\n        "string",\n        "null"\n      ],\n      "name": "lastRunId",\n      "default": "no-run-id-provided",\n      "doc": "The last run id that produced the metadata. Populated in case of batch-ingestion."\n    },\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "pipelineName",\n      "default": null,\n      "doc": "The ingestion pipeline id that produced the metadata. Populated in case of batch ingestion."\n    },\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "registryName",\n      "default": null,\n      "doc": "The model registry name that was used to process this event"\n    },\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "registryVersion",\n      "default": null,\n      "doc": "The model registry version that was used to process this event"\n    },\n    {\n      "type": [\n        "null",\n        {\n          "type": "map",\n          "values": "string"\n        }\n      ],\n      "name": "properties",\n      "default": null,\n      "doc": "Additional properties"\n    },\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "version",\n      "default": null,\n      "doc": "Aspect version\\n   Initial implementation will use the aspect version\'s number, however stored as\\n   a string in the case where a different aspect versioning scheme is later adopted."\n    }\n  ],\n  "doc": "Metadata associated with each metadata change that is processed by the system"\n}\n'))),(0,a.yg)("h2",{id:"relationships"},"Relationships"),(0,a.yg)("h2",{id:"global-metadata-model"},(0,a.yg)("a",{parentName:"h2",href:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,a.yg)("p",null,(0,a.yg)("img",{parentName:"p",src:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}h.isMDXComponent=!0}}]);