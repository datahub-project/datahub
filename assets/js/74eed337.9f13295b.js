"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[79265],{15680:(e,t,o)=>{o.d(t,{xA:()=>u,yg:()=>g});var r=o(96540);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function l(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?l(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function m(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)o=l[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)o=l[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var d=r.createContext({}),i=function(e){var t=r.useContext(d),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},u=function(e){var t=i(e.components);return r.createElement(d.Provider,{value:t},e.children)},p="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,l=e.originalType,d=e.parentName,u=m(e,["components","mdxType","originalType","parentName"]),p=i(o),c=n,g=p["".concat(d,".").concat(c)]||p[c]||s[c]||l;return o?r.createElement(g,a(a({ref:t},u),{},{components:o})):r.createElement(g,a({ref:t},u))}));function g(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=o.length,a=new Array(l);a[0]=c;var m={};for(var d in t)hasOwnProperty.call(t,d)&&(m[d]=t[d]);m.originalType=e,m[p]="string"==typeof e?e:n,a[1]=m;for(var i=2;i<l;i++)a[i]=o[i];return r.createElement.apply(null,a)}return r.createElement.apply(null,o)}c.displayName="MDXCreateElement"},84489:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>u,contentTitle:()=>d,default:()=>g,frontMatter:()=>m,metadata:()=>i,toc:()=>p});o(96540);var r=o(15680);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function l(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}(Object(t)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))})),e}function a(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)o=l[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)o=l[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}const m={title:"MLModel & MLModelGroup",slug:"/api/tutorials/mlmodel-mlmodelgroup",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/mlmodel-mlmodelgroup.md"},d="MLModel & MLModelGroup",i={unversionedId:"docs/api/tutorials/mlmodel-mlmodelgroup",id:"docs/api/tutorials/mlmodel-mlmodelgroup",title:"MLModel & MLModelGroup",description:"Why Would You Use MLModel and MLModelGroup?",source:"@site/genDocs/docs/api/tutorials/mlmodel-mlmodelgroup.md",sourceDirName:"docs/api/tutorials",slug:"/api/tutorials/mlmodel-mlmodelgroup",permalink:"/docs/api/tutorials/mlmodel-mlmodelgroup",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/mlmodel-mlmodelgroup.md",tags:[],version:"current",frontMatter:{title:"MLModel & MLModelGroup",slug:"/api/tutorials/mlmodel-mlmodelgroup",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/mlmodel-mlmodelgroup.md"},sidebar:"overviewSidebar",previous:{title:"DataFlow & DataJob",permalink:"/docs/api/tutorials/dataflow-datajob"},next:{title:"Applications (Experimental - Beta Feature)",permalink:"/docs/api/tutorials/applications"}},u={},p=[{value:"Why Would You Use MLModel and MLModelGroup?",id:"why-would-you-use-mlmodel-and-mlmodelgroup",level:2},{value:"Goal Of This Guide",id:"goal-of-this-guide",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Create MLModelGroup",id:"create-mlmodelgroup",level:2},{value:"Create MLModel",id:"create-mlmodel",level:2},{value:"Read MLModelGroup",id:"read-mlmodelgroup",level:2},{value:"Expected Output",id:"expected-output",level:4},{value:"Read MLModel",id:"read-mlmodel",level:2},{value:"Expected Output",id:"expected-output-1",level:4}],s={toc:p},c="wrapper";function g(e){var{components:t}=e,o=a(e,["components"]);return(0,r.yg)(c,l(function(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{},r=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(o).filter((function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable})))),r.forEach((function(t){n(e,t,o[t])}))}return e}({},s,o),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"mlmodel--mlmodelgroup"},"MLModel & MLModelGroup"),(0,r.yg)("h2",{id:"why-would-you-use-mlmodel-and-mlmodelgroup"},"Why Would You Use MLModel and MLModelGroup?"),(0,r.yg)("p",null,"MLModel and MLModelGroup entities are used to represent machine learning models and their associated groups within a metadata ecosystem. They allow users to define, manage, and monitor machine learning models, including their versions, configurations, and performance metrics."),(0,r.yg)("h3",{id:"goal-of-this-guide"},"Goal Of This Guide"),(0,r.yg)("p",null,"This guide will show you how to"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Create an MLModel or MLModelGroup."),(0,r.yg)("li",{parentName:"ul"},"Associate an MLModel with an MLModelGroup."),(0,r.yg)("li",{parentName:"ul"},"Read MLModel and MLModelGroup entities.")),(0,r.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.yg)("p",null,"For this tutorial, you need to deploy DataHub Quickstart and ingest sample data.\nFor detailed steps, please refer to ",(0,r.yg)("a",{parentName:"p",href:"/docs/quickstart"},"Datahub Quickstart Guide"),"."),(0,r.yg)("h2",{id:"create-mlmodelgroup"},"Create MLModelGroup"),(0,r.yg)("p",null,"You can create an MLModelGroup by providing the necessary attributes such as name, platform, and other metadata."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/mlmodel_group_create.py\nfrom datahub.sdk import DataHubClient\nfrom datahub.sdk.mlmodelgroup import MLModelGroup\n\nclient = DataHubClient.from_env()\n\nmlmodel_group = MLModelGroup(\n    id="my-recommendations-model-group",\n    name="My Recommendations Model Group",\n    platform="mlflow",\n    description="Grouping of ml model related to home page recommendations",\n    custom_properties={\n        "framework": "pytorch",\n    },\n)\n\nclient.entities.upsert(mlmodel_group)\nprint(f"Created ML model group: {mlmodel_group.urn}")\n\n')),(0,r.yg)("h2",{id:"create-mlmodel"},"Create MLModel"),(0,r.yg)("p",null,"You can create an MLModel by providing the necessary attributes such as name, platform, and other metadata."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/mlmodel_create_full.py\nimport datahub.metadata.schema_classes as models\nfrom datahub.metadata.urns import MlFeatureUrn, MlModelGroupUrn\nfrom datahub.sdk import DataHubClient\nfrom datahub.sdk.mlmodel import MLModel\n\nclient = DataHubClient.from_env()\n\nmlmodel = MLModel(\n    id="my-recommendations-model",\n    name="My Recommendations Model",\n    platform="mlflow",\n    model_group=MlModelGroupUrn(\n        platform="mlflow", name="my-recommendations-model-group"\n    ),\n    custom_properties={\n        "framework": "pytorch",\n    },\n    extra_aspects=[\n        models.MLModelPropertiesClass(\n            mlFeatures=[\n                str(\n                    MlFeatureUrn(\n                        feature_namespace="users_feature_table", name="user_signup_date"\n                    )\n                ),\n                str(\n                    MlFeatureUrn(\n                        feature_namespace="users_feature_table",\n                        name="user_last_active_date",\n                    )\n                ),\n            ]\n        )\n    ],\n    training_metrics={\n        "accuracy": "1.0",\n        "precision": "0.95",\n        "recall": "0.90",\n        "f1_score": "0.92",\n    },\n    hyper_params={\n        "learning_rate": "0.01",\n        "num_epochs": "100",\n        "batch_size": "32",\n    },\n)\n\nclient.entities.update(mlmodel)\n\n')),(0,r.yg)("p",null,"Note that you can associate an MLModel with an MLModelGroup by providing the group URN when creating the MLModel."),(0,r.yg)("p",null,"You can also set MLModelGroup later by updating the MLModel entity as shown below."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/mlgroup_add_to_mlmodel.py\nfrom datahub.metadata.urns import MlModelGroupUrn\nfrom datahub.sdk import DataHubClient\nfrom datahub.sdk.mlmodel import MLModel\n\nclient = DataHubClient.from_env()\n\nmodel = MLModel(\n    id="my-recommendations-model",\n    platform="mlflow",\n)\n\nmodel.set_model_group(\n    MlModelGroupUrn(\n        platform="mlflow",\n        name="my-recommendations-model-group",\n    )\n)\n\nclient.entities.upsert(model)\n\n')),(0,r.yg)("h2",{id:"read-mlmodelgroup"},"Read MLModelGroup"),(0,r.yg)("p",null,"You can read an MLModelGroup by providing the group URN."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/mlmodel_group_read.py\nfrom datahub.metadata.urns import MlModelGroupUrn\nfrom datahub.sdk import DataHubClient\n\nclient = DataHubClient.from_env()\n\n# Or get this from the UI (share -> copy urn) and use MlModelGroupUrn.from_string(...)\nmlmodel_group_urn = MlModelGroupUrn(\n    platform="mlflow", name="my-recommendations-model-group"\n)\n\nmlmodel_group_entity = client.entities.get(mlmodel_group_urn)\nprint("Model Group Name: ", mlmodel_group_entity.name)\nprint("Model Group Description: ", mlmodel_group_entity.description)\nprint("Model Group Custom Properties: ", mlmodel_group_entity.custom_properties)\n\n')),(0,r.yg)("h4",{id:"expected-output"},"Expected Output"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},">> Model Group Name:  My Recommendations Model Group\n>> Model Group Description:  A group for recommendations models\n>> Model Group Custom Properties:  {'owner': 'John Doe', 'team': 'recommendations', 'domain': 'marketing'}\n")),(0,r.yg)("h2",{id:"read-mlmodel"},"Read MLModel"),(0,r.yg)("p",null,"You can read an MLModel by providing the model URN."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/mlmodel_read.py\nfrom datahub.metadata.urns import MlModelUrn\nfrom datahub.sdk import DataHubClient\n\nclient = DataHubClient.from_env()\n\n# Or get this from the UI (share -> copy urn) and use MlModelUrn.from_string(...)\nmlmodel_urn = MlModelUrn(platform="mlflow", name="my-recommendations-model")\n\nmlmodel_entity = client.entities.get(mlmodel_urn)\nprint("Model Name: ", mlmodel_entity.name)\nprint("Model Description: ", mlmodel_entity.description)\nprint("Model Group: ", mlmodel_entity.model_group)\nprint("Model Hyper Parameters: ", mlmodel_entity.hyper_params)\n\n')),(0,r.yg)("h4",{id:"expected-output-1"},"Expected Output"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},">> Model Name:  My Recommendations Model\n>> Model Description:  A model for recommending products to users\n>> Model Group:  urn:li:mlModelGroup:(urn:li:dataPlatform:mlflow,my-recommendations-model,PROD)\n>> Model Hyper Parameters:  [MLHyperParamClass({'name': 'learning_rate', 'description': None, 'value': '0.01', 'createdAt': None}), MLHyperParamClass({'name': 'num_epochs', 'description': None, 'value': '100', 'createdAt': None}), MLHyperParamClass({'name': 'batch_size', 'description': None, 'value': '32', 'createdAt': None})]\n")))}g.isMDXComponent=!0}}]);