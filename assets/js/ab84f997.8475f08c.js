"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[14473],{4521:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>m,default:()=>v,frontMatter:()=>p,metadata:()=>d,toc:()=>g});t(96540);var i=t(15680),s=t(53720),r=t(5400);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function l(e,n){if(null==e)return{};var t,i,s=function(e,n){if(null==e)return{};var t,i,s={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}const p={sidebar_position:25,title:"VersionSet",slug:"/generated/metamodel/entities/versionset",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/versionSet.md"},m="VersionSet",d={unversionedId:"docs/generated/metamodel/entities/versionSet",id:"docs/generated/metamodel/entities/versionSet",title:"VersionSet",description:"The VersionSet entity is a core metadata model entity in DataHub that groups together related versions of other entities. Version Sets are primarily used to manage versioned entities like ML models, datasets, and other assets that evolve over time with distinct versions. They provide a structured way to organize, track, and navigate between different versions of the same logical asset.",source:"@site/genDocs/docs/generated/metamodel/entities/versionSet.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/versionset",permalink:"/docs/generated/metamodel/entities/versionset",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/versionSet.md",tags:[],version:"current",sidebarPosition:25,frontMatter:{sidebar_position:25,title:"VersionSet",slug:"/generated/metamodel/entities/versionset",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/versionSet.md"},sidebar:"overviewSidebar",previous:{title:"SchemaField",permalink:"/docs/generated/metamodel/entities/schemafield"},next:{title:"Incident",permalink:"/docs/generated/metamodel/entities/incident"}},u={},g=[{value:"Identity",id:"identity",level:2},{value:"Important Capabilities",id:"important-capabilities",level:2},{value:"Version Set Properties",id:"version-set-properties",level:3},{value:"Latest Version Tracking",id:"latest-version-tracking",level:4},{value:"Versioning Scheme",id:"versioning-scheme",level:4},{value:"Custom Properties",id:"custom-properties",level:4},{value:"Linking Entities to Version Sets",id:"linking-entities-to-version-sets",level:3},{value:"Creating a New Version Set",id:"creating-a-new-version-set",level:3},{value:"Managing Multiple Versions",id:"managing-multiple-versions",level:3},{value:"Querying Version Sets and Versioned Entities",id:"querying-version-sets-and-versioned-entities",level:3},{value:"Querying via REST API",id:"querying-via-rest-api",level:4},{value:"Querying via GraphQL",id:"querying-via-graphql",level:4},{value:"Integration Points",id:"integration-points",level:2},{value:"Relationships with Other Entities",id:"relationships-with-other-entities",level:3},{value:"Supported Versioned Entities",id:"supported-versioned-entities",level:3},{value:"Feature Flags",id:"feature-flags",level:3},{value:"Ingestion Connector Usage",id:"ingestion-connector-usage",level:3},{value:"Notable Exceptions",id:"notable-exceptions",level:2},{value:"Single Entity Type Constraint",id:"single-entity-type-constraint",level:3},{value:"Versioning Scheme Immutability",id:"versioning-scheme-immutability",level:3},{value:"Latest Version Maintenance",id:"latest-version-maintenance",level:3},{value:"Authorization",id:"authorization",level:3},{value:"Version Label Uniqueness",id:"version-label-uniqueness",level:3},{value:"Deletion Behavior",id:"deletion-behavior",level:3},{value:"Search and Discovery",id:"search-and-discovery",level:3},{value:"Technical Reference Guide",id:"technical-reference-guide",level:2},{value:"Reading the Field Tables",id:"reading-the-field-tables",level:3},{value:"Aspects",id:"aspects",level:3},{value:"versionSetProperties",id:"versionsetproperties",level:4},{value:"Relationships",id:"relationships",level:3},{value:"Incoming",id:"incoming",level:4},{value:"Global Metadata Model",id:"global-metadata-model",level:3}],c={toc:g},h="wrapper";function v(e){var{components:n}=e,t=l(e,["components"]);return(0,i.yg)(h,o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},i=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),i.forEach((function(n){a(e,n,t[n])}))}return e}({},c,t),{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"versionset"},"VersionSet"),(0,i.yg)("p",null,"The VersionSet entity is a core metadata model entity in DataHub that groups together related versions of other entities. Version Sets are primarily used to manage versioned entities like ML models, datasets, and other assets that evolve over time with distinct versions. They provide a structured way to organize, track, and navigate between different versions of the same logical asset."),(0,i.yg)("h2",{id:"identity"},"Identity"),(0,i.yg)("p",null,"Version Sets are identified by two pieces of information:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"ID"),": A unique identifier for the version set, typically generated from the platform and asset name using a GUID. This ensures uniqueness across all version sets in DataHub."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Entity Type"),": The type of entities that are grouped in this version set (e.g., ",(0,i.yg)("inlineCode",{parentName:"li"},"mlModel"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"dataset"),"). All entities within a single version set must be of the same type, ensuring type safety and consistency.")),(0,i.yg)("p",null,"An example of a version set identifier is ",(0,i.yg)("inlineCode",{parentName:"p"},"urn:li:versionSet:(abc123def456,mlModel)"),"."),(0,i.yg)("p",null,"The URN structure follows the pattern: ",(0,i.yg)("inlineCode",{parentName:"p"},"urn:li:versionSet:(<id>,<entityType>)")," where:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"<id>")," is a unique identifier string, often a GUID generated from the platform and asset name"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"<entityType>")," is the entity type being versioned (e.g., ",(0,i.yg)("inlineCode",{parentName:"li"},"mlModel"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"dataset"),")")),(0,i.yg)("h2",{id:"important-capabilities"},"Important Capabilities"),(0,i.yg)("h3",{id:"version-set-properties"},"Version Set Properties"),(0,i.yg)("p",null,"Version Sets maintain metadata about the collection of versioned entities through the ",(0,i.yg)("inlineCode",{parentName:"p"},"versionSetProperties")," aspect. This aspect contains:"),(0,i.yg)("h4",{id:"latest-version-tracking"},"Latest Version Tracking"),(0,i.yg)("p",null,"The version set automatically tracks which entity is currently the latest version. This is stored in the ",(0,i.yg)("inlineCode",{parentName:"p"},"latest")," field and provides a quick reference to the most recent version without needing to query all versions."),(0,i.yg)("h4",{id:"versioning-scheme"},"Versioning Scheme"),(0,i.yg)("p",null,"Version Sets support different versioning schemes to accommodate various versioning strategies:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"LEXICOGRAPHIC_STRING"),': Versions are sorted lexicographically as strings. This is suitable for semantic versioning (e.g., "1.0.0", "1.1.0", "2.0.0") or date-based versions.'),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"ALPHANUMERIC_GENERATED_BY_DATAHUB"),": DataHub generates version identifiers automatically using an 8-character alphabetical string. This is useful when the source system doesn't provide its own versioning.")),(0,i.yg)("p",null,"The versioning scheme is static once set and determines how versions are ordered within the set."),(0,i.yg)("h4",{id:"custom-properties"},"Custom Properties"),(0,i.yg)("p",null,"Like other DataHub entities, Version Sets support custom properties for storing additional metadata specific to your use case."),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Python SDK: Create a version set with properties"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/version_set_add_properties.py\n# metadata-ingestion/examples/library/version_set_add_properties.py\n"""\nCreate a version set with custom properties and metadata.\n\nThis example demonstrates how to create a version set with rich metadata\nincluding custom properties to track additional information.\n"""\n\nfrom datahub.emitter.mce_builder import datahub_guid\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import (\n    VersioningSchemeClass,\n    VersionSetPropertiesClass,\n)\n\nserver = "http://localhost:8080"\nemitter = DatahubRestEmitter(gms_server=server)\n\n# Generate a unique ID for the version set\nguid_dict = {"platform": "tensorflow", "name": "image-classifier"}\nversion_set_id = datahub_guid(guid_dict)\n\n# Create the version set URN for an ML model\nversion_set_urn = f"urn:li:versionSet:({version_set_id},mlModel)"\n\n# Define the latest version (this should be an existing ML model)\nlatest_model_urn = (\n    "urn:li:mlModel:(urn:li:dataPlatform:tensorflow,image-classifier-v3,PROD)"\n)\n\n# Create version set properties with custom metadata\nversion_set_properties = VersionSetPropertiesClass(\n    latest=latest_model_urn,\n    versioningScheme=VersioningSchemeClass.LEXICOGRAPHIC_STRING,\n    customProperties={\n        "model_type": "image_classification",\n        "framework": "tensorflow",\n        "architecture": "resnet50",\n        "dataset": "imagenet",\n        "owner_team": "ml-platform",\n        "cost_center": "ML-001",\n    },\n)\n\n# Emit the version set with properties\nversion_set_mcp = MetadataChangeProposalWrapper(\n    entityUrn=version_set_urn,\n    aspect=version_set_properties,\n)\nemitter.emit(version_set_mcp)\n\nprint(f"Created version set: {version_set_urn}")\nprint(f"Latest version: {latest_model_urn}")\nprint("Custom properties:")\nfor key, value in version_set_properties.customProperties.items():\n    print(f"  {key}: {value}")\n\n'))),(0,i.yg)("h3",{id:"linking-entities-to-version-sets"},"Linking Entities to Version Sets"),(0,i.yg)("p",null,"Entities are linked to Version Sets through the ",(0,i.yg)("inlineCode",{parentName:"p"},"versionProperties")," aspect on the versioned entity. This aspect contains:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"versionSet"),": URN of the Version Set this entity belongs to"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"version"),": A version tag label that should be unique within the version set"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"sortId"),": An identifier used for sorting versions according to the versioning scheme"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"aliases"),': Alternative version identifiers (e.g., "latest", "stable", "v1")'),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"comment"),": Optional documentation about what this version represents"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"isLatest"),": Boolean flag indicating if this is the latest version (automatically maintained)"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"timestamps"),": Creation timestamps both from the source system and in DataHub")),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Python SDK: Link an entity to a version set"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/version_set_link_entity.py\n# metadata-ingestion/examples/library/version_set_link_entity.py\n"""\nLink an existing entity to an existing version set.\n\nThis example shows how to add a new version of an entity to an existing\nversion set, with proper version tracking and metadata.\n"""\n\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import (\n    AuditStampClass,\n    MetadataAttributionClass,\n    VersioningSchemeClass,\n    VersionPropertiesClass,\n    VersionSetPropertiesClass,\n    VersionTagClass,\n)\n\nserver = "http://localhost:8080"\nemitter = DatahubRestEmitter(gms_server=server)\n\n# Define the version set and the new model version to link\nversion_set_urn = "urn:li:versionSet:(abc123def456,mlModel)"\nnew_model_urn = "urn:li:mlModel:(urn:li:dataPlatform:sagemaker,my-model-v2,PROD)"\n\n# Update the version set to mark this as the latest\nversion_set_properties = VersionSetPropertiesClass(\n    latest=new_model_urn,\n    versioningScheme=VersioningSchemeClass.LEXICOGRAPHIC_STRING,\n)\n\nversion_set_mcp = MetadataChangeProposalWrapper(\n    entityUrn=version_set_urn,\n    aspect=version_set_properties,\n)\nemitter.emit(version_set_mcp)\n\n# Create version properties for the new model\nversion_properties = VersionPropertiesClass(\n    versionSet=version_set_urn,\n    version=VersionTagClass(\n        versionTag="2.0.0",\n        metadataAttribution=MetadataAttributionClass(\n            time=1675209600000,\n            actor="urn:li:corpuser:ml-engineer",\n        ),\n    ),\n    sortId="2.0.0",\n    versioningScheme=VersioningSchemeClass.LEXICOGRAPHIC_STRING,\n    comment="Major update with improved accuracy",\n    aliases=[\n        VersionTagClass(versionTag="v2"),\n        VersionTagClass(versionTag="latest"),\n    ],\n    sourceCreatedTimestamp=AuditStampClass(\n        time=1675209600000,\n        actor="urn:li:corpuser:ml-engineer",\n    ),\n    metadataCreatedTimestamp=AuditStampClass(\n        time=1675209600000,\n        actor="urn:li:corpuser:datahub",\n    ),\n)\n\n# Emit the version properties for the new model\nmodel_version_mcp = MetadataChangeProposalWrapper(\n    entityUrn=new_model_urn,\n    aspect=version_properties,\n)\nemitter.emit(model_version_mcp)\n\nprint(f"Linked {new_model_urn} to version set {version_set_urn}")\nprint("Version: 2.0.0")\n\n'))),(0,i.yg)("h3",{id:"creating-a-new-version-set"},"Creating a New Version Set"),(0,i.yg)("p",null,"When creating a new version set, you typically link the first versioned entity to it. The version set can be created implicitly by linking an entity to a new version set URN."),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Python SDK: Create a version set by linking the first entity"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/version_set_create.py\n# metadata-ingestion/examples/library/version_set_create.py\n"""\nCreate a new version set by linking the first versioned entity.\n\nThis example demonstrates creating a version set for an ML model,\nestablishing the first version in the set.\n"""\n\nimport os\n\nfrom datahub.emitter.mce_builder import datahub_guid\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import (\n    AuditStampClass,\n    MetadataAttributionClass,\n    VersioningSchemeClass,\n    VersionPropertiesClass,\n    VersionSetPropertiesClass,\n    VersionTagClass,\n)\n\nserver = os.getenv("DATAHUB_GMS_URL", "http://localhost:8080")\ntoken = os.getenv("DATAHUB_GMS_TOKEN")\nemitter = DatahubRestEmitter(gms_server=server, token=token)\n\n# Define the ML model URN that we want to version\nmodel_urn = "urn:li:mlModel:(urn:li:dataPlatform:sagemaker,my-model-v1,PROD)"\n\n# Generate a unique ID for the version set based on the model name\nguid_dict = {"platform": "sagemaker", "name": "my-model"}\nversion_set_id = datahub_guid(guid_dict)\n\n# Create the version set URN\nversion_set_urn = f"urn:li:versionSet:({version_set_id},mlModel)"\n\n# Create version set properties aspect\nversion_set_properties = VersionSetPropertiesClass(\n    latest=model_urn,\n    versioningScheme=VersioningSchemeClass.LEXICOGRAPHIC_STRING,\n    customProperties={\n        "model_family": "recommendation",\n        "framework": "tensorflow",\n    },\n)\n\n# Emit the version set properties\nversion_set_mcp = MetadataChangeProposalWrapper(\n    entityUrn=version_set_urn,\n    aspect=version_set_properties,\n)\nemitter.emit(version_set_mcp)\n\n# Create version properties for the ML model\nversion_properties = VersionPropertiesClass(\n    versionSet=version_set_urn,\n    version=VersionTagClass(\n        versionTag="1.0.0",\n        metadataAttribution=MetadataAttributionClass(\n            time=1672531200000,\n            actor="urn:li:corpuser:datahub",\n        ),\n    ),\n    sortId="1.0.0",\n    versioningScheme=VersioningSchemeClass.LEXICOGRAPHIC_STRING,\n    comment="Initial production release",\n    aliases=[\n        VersionTagClass(versionTag="v1"),\n        VersionTagClass(versionTag="stable"),\n    ],\n    metadataCreatedTimestamp=AuditStampClass(\n        time=1672531200000,\n        actor="urn:li:corpuser:datahub",\n    ),\n)\n\n# Emit the version properties for the model\nmodel_version_mcp = MetadataChangeProposalWrapper(\n    entityUrn=model_urn,\n    aspect=version_properties,\n)\nemitter.emit(model_version_mcp)\n\nprint(f"Created version set: {version_set_urn}")\nprint(f"Linked first version: {model_urn} with version 1.0.0")\n\n'))),(0,i.yg)("h3",{id:"managing-multiple-versions"},"Managing Multiple Versions"),(0,i.yg)("p",null,"As you create new versions of an asset, you link each one to the same version set with a different version label. The version set automatically updates the ",(0,i.yg)("inlineCode",{parentName:"p"},"latest")," pointer to the most recent version based on the versioning scheme."),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Python SDK: Link multiple versions to a version set"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/version_set_link_multiple_versions.py\n# metadata-ingestion/examples/library/version_set_link_multiple_versions.py\n"""\nLink multiple versions of an entity to a version set.\n\nThis example demonstrates creating a complete version history for an ML model,\nshowing how to manage multiple versions with semantic versioning.\n"""\n\nfrom typing import TypedDict\n\nfrom datahub.emitter.mce_builder import datahub_guid\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import (\n    AuditStampClass,\n    MetadataAttributionClass,\n    VersioningSchemeClass,\n    VersionPropertiesClass,\n    VersionSetPropertiesClass,\n    VersionTagClass,\n)\n\nserver = "http://localhost:8080"\nemitter = DatahubRestEmitter(gms_server=server)\n\n\nclass VersionInfo(TypedDict):\n    urn: str\n    version: str\n    sortId: str\n    comment: str\n    timestamp: int\n    aliases: list[str]\n    actor: str\n\n\n# Generate version set URN\nguid_dict = {"platform": "pytorch", "name": "sentiment-analyzer"}\nversion_set_id = datahub_guid(guid_dict)\nversion_set_urn = f"urn:li:versionSet:({version_set_id},mlModel)"\n\n# Define the model versions we want to link\nversions: list[VersionInfo] = [\n    {\n        "urn": "urn:li:mlModel:(urn:li:dataPlatform:pytorch,sentiment-analyzer-v1,PROD)",\n        "version": "1.0.0",\n        "sortId": "1.0.0",\n        "comment": "Initial release with basic sentiment analysis",\n        "timestamp": 1672531200000,\n        "aliases": ["v1"],\n        "actor": "urn:li:corpuser:data-scientist",\n    },\n    {\n        "urn": "urn:li:mlModel:(urn:li:dataPlatform:pytorch,sentiment-analyzer-v1.1,PROD)",\n        "version": "1.1.0",\n        "sortId": "1.1.0",\n        "comment": "Minor improvements to accuracy",\n        "timestamp": 1675209600000,\n        "aliases": ["v1.1"],\n        "actor": "urn:li:corpuser:data-scientist",\n    },\n    {\n        "urn": "urn:li:mlModel:(urn:li:dataPlatform:pytorch,sentiment-analyzer-v2,PROD)",\n        "version": "2.0.0",\n        "sortId": "2.0.0",\n        "comment": "Major update with multi-language support",\n        "timestamp": 1677628800000,\n        "aliases": ["v2", "latest", "production"],\n        "actor": "urn:li:corpuser:ml-engineer",\n    },\n]\n\n# Link each version to the version set\nfor i, version_info in enumerate(versions):\n    is_latest = i == len(versions) - 1\n\n    # Create version properties for each model\n    version_properties = VersionPropertiesClass(\n        versionSet=version_set_urn,\n        version=VersionTagClass(\n            versionTag=version_info["version"],\n            metadataAttribution=MetadataAttributionClass(\n                time=version_info["timestamp"],\n                actor=version_info["actor"],\n            ),\n        ),\n        sortId=version_info["sortId"],\n        versioningScheme=VersioningSchemeClass.LEXICOGRAPHIC_STRING,\n        comment=version_info["comment"],\n        aliases=[\n            VersionTagClass(versionTag=alias) for alias in version_info["aliases"]\n        ],\n        sourceCreatedTimestamp=AuditStampClass(\n            time=version_info["timestamp"],\n            actor=version_info["actor"],\n        ),\n        metadataCreatedTimestamp=AuditStampClass(\n            time=version_info["timestamp"],\n            actor="urn:li:corpuser:datahub",\n        ),\n    )\n\n    # Emit version properties\n    model_version_mcp = MetadataChangeProposalWrapper(\n        entityUrn=version_info["urn"],\n        aspect=version_properties,\n    )\n    emitter.emit(model_version_mcp)\n\n    print(f"Linked version {version_info[\'version\']}: {version_info[\'urn\']}")\n\n# Update version set to point to the latest version\nversion_set_properties = VersionSetPropertiesClass(\n    latest=versions[-1]["urn"],\n    versioningScheme=VersioningSchemeClass.LEXICOGRAPHIC_STRING,\n    customProperties={\n        "model_type": "sentiment_analysis",\n        "language_support": "multi-language",\n        "framework": "pytorch",\n    },\n)\n\nversion_set_mcp = MetadataChangeProposalWrapper(\n    entityUrn=version_set_urn,\n    aspect=version_set_properties,\n)\nemitter.emit(version_set_mcp)\n\nprint(f"\\nVersion set created: {version_set_urn}")\nprint(f"Total versions: {len(versions)}")\nprint(f"Latest version: {versions[-1][\'version\']}")\n\n'))),(0,i.yg)("h3",{id:"querying-version-sets-and-versioned-entities"},"Querying Version Sets and Versioned Entities"),(0,i.yg)("p",null,"You can query version sets to retrieve information about all versions or find specific versions."),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Python SDK: Query a version set and its versions"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/version_set_query.py\n# metadata-ingestion/examples/library/version_set_query.py\n"""\nQuery a version set to retrieve information about versions.\n\nThis example demonstrates how to fetch version set metadata and query\nall versions using both REST API and GraphQL approaches.\n"""\n\nfrom urllib.parse import quote\n\nimport requests\n\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\nfrom datahub.metadata.schema_classes import (\n    VersionPropertiesClass,\n    VersionSetPropertiesClass,\n)\n\n# Initialize DataHub Graph client\nconfig = DatahubClientConfig(server="http://localhost:8080")\ngraph = DataHubGraph(config)\n\n# Define the version set URN to query\nversion_set_urn = "urn:li:versionSet:(abc123def456,mlModel)"\n\n# Method 1: Query using the Python SDK\nprint("=== Querying Version Set via Python SDK ===\\n")\n\n# Get the version set properties\nversion_set_props = graph.get_aspect(\n    entity_urn=version_set_urn,\n    aspect_type=VersionSetPropertiesClass,\n)\n\nif version_set_props:\n    print(f"Version Set: {version_set_urn}")\n    print(f"Latest Version: {version_set_props.latest}")\n    print(f"Versioning Scheme: {version_set_props.versioningScheme}")\n\n    if version_set_props.customProperties:\n        print("\\nCustom Properties:")\n        for key, value in version_set_props.customProperties.items():\n            print(f"  {key}: {value}")\n\n    # Get version properties for the latest version\n    print("\\n=== Latest Version Details ===\\n")\n    latest_version_props = graph.get_aspect(\n        entity_urn=version_set_props.latest,\n        aspect_type=VersionPropertiesClass,\n    )\n\n    if latest_version_props:\n        print(f"Version: {latest_version_props.version.versionTag}")\n        print(f"Sort ID: {latest_version_props.sortId}")\n        if latest_version_props.comment:\n            print(f"Comment: {latest_version_props.comment}")\n        if latest_version_props.aliases:\n            aliases = [\n                alias.versionTag\n                for alias in latest_version_props.aliases\n                if alias.versionTag is not None\n            ]\n            print(f"Aliases: {\', \'.join(aliases)}")\nelse:\n    print(f"Version set {version_set_urn} not found")\n\n# Method 2: Query all versions using GraphQL\nprint("\\n=== Querying All Versions via GraphQL ===\\n")\n\ngraphql_query = """\nquery ($urn: String!) {\n  versionSet(urn: $urn) {\n    urn\n    latestVersion {\n      urn\n      ... on MLModel {\n        properties {\n          name\n          description\n        }\n      }\n    }\n    versionsSearch(input: {\n      query: "*"\n      start: 0\n      count: 100\n    }) {\n      total\n      searchResults {\n        entity {\n          urn\n          ... on MLModel {\n            versionProperties {\n              version {\n                versionTag\n              }\n              sortId\n              comment\n              isLatest\n              aliases {\n                versionTag\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"""\n\nvariables = {"urn": version_set_urn}\n\nresponse = graph.execute_graphql(graphql_query, variables)\n\nif "versionSet" in response and response["versionSet"]:\n    version_set_data = response["versionSet"]\n    versions = version_set_data.get("versionsSearch", {}).get("searchResults", [])\n\n    print(f"Found {len(versions)} version(s)\\n")\n\n    for result in versions:\n        entity = result.get("entity", {})\n        version_props = entity.get("versionProperties", {})\n\n        version_tag = version_props.get("version", {}).get("versionTag", "Unknown")\n        is_latest = version_props.get("isLatest", False)\n        comment = version_props.get("comment", "No comment")\n        aliases = [\n            alias.get("versionTag")\n            for alias in version_props.get("aliases", [])\n            if alias.get("versionTag")\n        ]\n\n        print(f"Version: {version_tag}")\n        print(f"  URN: {entity.get(\'urn\')}")\n        print(f"  Latest: {is_latest}")\n        print(f"  Comment: {comment}")\n        if aliases:\n            print(f"  Aliases: {\', \'.join(aliases)}")\n        print()\nelse:\n    print("No version set data found")\n\n# Method 3: Query using REST API directly\nprint("\\n=== Querying via REST API ===\\n")\n\nrest_url = f"http://localhost:8080/entities/{quote(version_set_urn, safe=\'\')}"\n\ntry:\n    rest_response = requests.get(rest_url)\n    rest_response.raise_for_status()\n\n    entity_data = rest_response.json()\n    aspects = entity_data.get("aspects", {})\n\n    if "versionSetProperties" in aspects:\n        props = aspects["versionSetProperties"]["value"]\n        print(f"Latest (from REST): {props.get(\'latest\')}")\n        print(f"Versioning Scheme (from REST): {props.get(\'versioningScheme\')}")\n    else:\n        print("No versionSetProperties found in REST response")\n\nexcept requests.exceptions.RequestException as e:\n    print(f"REST API error: {e}")\n\n'))),(0,i.yg)("h4",{id:"querying-via-rest-api"},"Querying via REST API"),(0,i.yg)("p",null,"The standard DataHub REST APIs can be used to retrieve version set entities and their properties."),(0,i.yg)("details",null,(0,i.yg)("summary",null,"Fetch version set entity via REST API"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"# Fetch a version set by URN\ncurl 'http://localhost:8080/entities/urn%3Ali%3AversionSet%3A(abc123def456,mlModel)'\n\n# Get all entities in a version set using relationships\ncurl 'http://localhost:8080/relationships?direction=INCOMING&urn=urn%3Ali%3AversionSet%3A(abc123def456,mlModel)&types=VersionOf'\n"))),(0,i.yg)("h4",{id:"querying-via-graphql"},"Querying via GraphQL"),(0,i.yg)("p",null,"DataHub's GraphQL API provides rich querying capabilities for version sets:"),(0,i.yg)("details",null,(0,i.yg)("summary",null,"GraphQL: Query version set with all versions"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-graphql"},'query {\n  versionSet(urn: "urn:li:versionSet:(abc123def456,mlModel)") {\n    urn\n    latestVersion {\n      urn\n      ... on MLModel {\n        properties {\n          name\n          description\n        }\n      }\n    }\n    versionsSearch(input: { query: "*", start: 0, count: 10 }) {\n      total\n      searchResults {\n        entity {\n          urn\n          ... on MLModel {\n            versionProperties {\n              version {\n                versionTag\n              }\n              comment\n              isLatest\n              created {\n                time\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n'))),(0,i.yg)("h2",{id:"integration-points"},"Integration Points"),(0,i.yg)("h3",{id:"relationships-with-other-entities"},"Relationships with Other Entities"),(0,i.yg)("p",null,"Version Sets have a specific relationship pattern with other entities:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"VersionOf"),": Versioned entities (datasets, ML models, etc.) have a ",(0,i.yg)("inlineCode",{parentName:"li"},"VersionOf")," relationship to their Version Set"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Latest Version Reference"),": The Version Set maintains a direct reference to the latest versioned entity")),(0,i.yg)("h3",{id:"supported-versioned-entities"},"Supported Versioned Entities"),(0,i.yg)("p",null,"Currently, DataHub supports versioning for the following entity types:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"MLModel"),": Machine learning models are commonly versioned to track model evolution"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Dataset"),": Datasets can be versioned to track schema changes, data updates, or snapshots")),(0,i.yg)("p",null,"Future versions of DataHub may extend version set support to additional entity types."),(0,i.yg)("h3",{id:"feature-flags"},"Feature Flags"),(0,i.yg)("p",null,"Version Set functionality is controlled by the ",(0,i.yg)("inlineCode",{parentName:"p"},"entityVersioning")," feature flag. This must be enabled in your DataHub deployment to use version sets:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"# In your DataHub configuration\nfeatureFlags:\n  entityVersioning: true\n")),(0,i.yg)("h3",{id:"ingestion-connector-usage"},"Ingestion Connector Usage"),(0,i.yg)("p",null,"Several ingestion connectors automatically create and manage version sets:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"MLflow"),": Creates version sets for Registered Models, with each Model Version linked to the version set"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Vertex AI"),": Creates version sets for models with multiple versions"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Custom Connectors"),": You can create version sets programmatically in custom ingestion sources")),(0,i.yg)("h2",{id:"notable-exceptions"},"Notable Exceptions"),(0,i.yg)("h3",{id:"single-entity-type-constraint"},"Single Entity Type Constraint"),(0,i.yg)("p",null,"A Version Set can only contain entities of a single type. This is enforced through the ",(0,i.yg)("inlineCode",{parentName:"p"},"entityType")," field in the Version Set key. You cannot mix different entity types (e.g., datasets and ML models) in the same version set."),(0,i.yg)("h3",{id:"versioning-scheme-immutability"},"Versioning Scheme Immutability"),(0,i.yg)("p",null,"Once a versioning scheme is set for a Version Set, it should not be changed. The sorting and ordering of versions depend on the scheme, and changing it could break the version ordering."),(0,i.yg)("h3",{id:"latest-version-maintenance"},"Latest Version Maintenance"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"isLatest")," flag on versioned entities is automatically maintained by DataHub's versioning service. While it's technically possible to set this field manually through the API, you should rely on the automatic maintenance through the ",(0,i.yg)("inlineCode",{parentName:"p"},"linkAssetVersion")," GraphQL mutation or the Python SDK's versioning methods."),(0,i.yg)("h3",{id:"authorization"},"Authorization"),(0,i.yg)("p",null,"Linking or unlinking entities to/from version sets requires UPDATE permissions on both the version set and the versioned entity. Ensure proper authorization is configured for users who need to manage versions."),(0,i.yg)("h3",{id:"version-label-uniqueness"},"Version Label Uniqueness"),(0,i.yg)("p",null,"While version labels (the ",(0,i.yg)("inlineCode",{parentName:"p"},"version")," field) should be unique within a version set, this is not strictly enforced by the system. It's the responsibility of the client code to ensure uniqueness. Having duplicate version labels can cause confusion when querying or navigating versions."),(0,i.yg)("h3",{id:"deletion-behavior"},"Deletion Behavior"),(0,i.yg)("p",null,"When a versioned entity is deleted, it is not automatically unlinked from its version set. The relationship may become stale. Consider explicitly unlinking entities before deletion or implementing cleanup logic to handle orphaned version references."),(0,i.yg)("h3",{id:"search-and-discovery"},"Search and Discovery"),(0,i.yg)("p",null,"Version Sets themselves are searchable entities in DataHub. Versioned entities can be searched by their version labels, aliases, and version set membership. Use the ",(0,i.yg)("inlineCode",{parentName:"p"},"versionSortId")," field for ordering search results by version order."),(0,i.yg)("h2",{id:"technical-reference-guide"},"Technical Reference Guide"),(0,i.yg)("p",null,"The sections above provide an overview of how to use this entity. The following sections provide detailed technical information about how metadata is stored and represented in DataHub."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Aspects")," are the individual pieces of metadata that can be attached to an entity. Each aspect contains specific information (like ownership, tags, or properties) and is stored as a separate record, allowing for flexible and incremental metadata updates."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Relationships")," show how this entity connects to other entities in the metadata graph. These connections are derived from the fields within each aspect and form the foundation of DataHub's knowledge graph."),(0,i.yg)("h3",{id:"reading-the-field-tables"},"Reading the Field Tables"),(0,i.yg)("p",null,"Each aspect's field table includes an ",(0,i.yg)("strong",{parentName:"p"},"Annotations")," column that provides additional metadata about how fields are used:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"\u26a0\ufe0f Deprecated"),": This field is deprecated and may be removed in a future version. Check the description for the recommended alternative"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Searchable"),": This field is indexed and can be searched in DataHub's search interface"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Searchable (fieldname)"),": When the field name in parentheses is shown, it indicates the field is indexed under a different name in the search index. For example, ",(0,i.yg)("inlineCode",{parentName:"li"},"dashboardTool")," is indexed as ",(0,i.yg)("inlineCode",{parentName:"li"},"tool")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"\u2192 RelationshipName"),": This field creates a relationship to another entity. The arrow indicates this field contains a reference (URN) to another entity, and the name indicates the type of relationship (e.g., ",(0,i.yg)("inlineCode",{parentName:"li"},"\u2192 Contains"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"\u2192 OwnedBy"),")")),(0,i.yg)("p",null,"Fields with complex types (like ",(0,i.yg)("inlineCode",{parentName:"p"},"Edge"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"AuditStamp"),") link to their definitions in the ",(0,i.yg)("a",{parentName:"p",href:"#common-types"},"Common Types")," section below."),(0,i.yg)("h3",{id:"aspects"},"Aspects"),(0,i.yg)("h4",{id:"versionsetproperties"},"versionSetProperties"),(0,i.yg)("p",null,"None"),(0,i.yg)(s.A,{mdxType:"Tabs"},(0,i.yg)(r.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Field"),(0,i.yg)("th",{parentName:"tr",align:null},"Type"),(0,i.yg)("th",{parentName:"tr",align:null},"Required"),(0,i.yg)("th",{parentName:"tr",align:null},"Description"),(0,i.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"customProperties"),(0,i.yg)("td",{parentName:"tr",align:null},"map"),(0,i.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,i.yg)("td",{parentName:"tr",align:null},"Custom property bag."),(0,i.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"latest"),(0,i.yg)("td",{parentName:"tr",align:null},"string"),(0,i.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,i.yg)("td",{parentName:"tr",align:null},"The latest versioned entity linked to in this version set"),(0,i.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"versioningScheme"),(0,i.yg)("td",{parentName:"tr",align:null},"VersioningScheme"),(0,i.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,i.yg)("td",{parentName:"tr",align:null},"What versioning scheme is being utilized for the versioned entities sort criterion. Static once set"),(0,i.yg)("td",{parentName:"tr",align:null}))))),(0,i.yg)(r.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "versionSetProperties"\n  },\n  "name": "VersionSetProperties",\n  "namespace": "com.linkedin.versionset",\n  "fields": [\n    {\n      "Searchable": {\n        "/*": {\n          "fieldType": "TEXT",\n          "queryByDefault": true\n        }\n      },\n      "type": {\n        "type": "map",\n        "values": "string"\n      },\n      "name": "customProperties",\n      "default": {},\n      "doc": "Custom property bag."\n    },\n    {\n      "Searchable": {\n        "queryByDefault": "false"\n      },\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": "string",\n      "name": "latest",\n      "doc": "The latest versioned entity linked to in this version set"\n    },\n    {\n      "type": {\n        "type": "enum",\n        "symbolDocs": {\n          "ALPHANUMERIC_GENERATED_BY_DATAHUB": "String managed by DataHub. Currently, an 8 character alphabetical string.",\n          "LEXICOGRAPHIC_STRING": "String sorted lexicographically."\n        },\n        "name": "VersioningScheme",\n        "namespace": "com.linkedin.versionset",\n        "symbols": [\n          "LEXICOGRAPHIC_STRING",\n          "ALPHANUMERIC_GENERATED_BY_DATAHUB"\n        ]\n      },\n      "name": "versioningScheme",\n      "doc": "What versioning scheme is being utilized for the versioned entities sort criterion. Static once set"\n    }\n  ]\n}\n')))),(0,i.yg)("h3",{id:"relationships"},"Relationships"),(0,i.yg)("h4",{id:"incoming"},"Incoming"),(0,i.yg)("p",null,"These are the relationships stored in other entity's aspects"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"VersionOf"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Dataset via ",(0,i.yg)("inlineCode",{parentName:"li"},"versionProperties.versionSet")),(0,i.yg)("li",{parentName:"ul"},"MlModel via ",(0,i.yg)("inlineCode",{parentName:"li"},"versionProperties.versionSet"))))),(0,i.yg)("h3",{id:"global-metadata-model"},(0,i.yg)("a",{parentName:"h3",href:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,i.yg)("p",null,(0,i.yg)("img",{parentName:"p",src:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}v.isMDXComponent=!0}}]);