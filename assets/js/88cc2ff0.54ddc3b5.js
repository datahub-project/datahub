"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[94763],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>f});var r=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),u=o,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||a;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},71391:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>p,toc:()=>d});t(96540);var r=t(15680);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const s={sidebar_position:40,title:"Form",slug:"/generated/metamodel/entities/form",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/form.md"},l="Form",p={unversionedId:"docs/generated/metamodel/entities/form",id:"version-1.1.0/docs/generated/metamodel/entities/form",title:"Form",description:"Aspects",source:"@site/versioned_docs/version-1.1.0/docs/generated/metamodel/entities/form.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/form",permalink:"/docs/1.1.0/generated/metamodel/entities/form",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/form.md",tags:[],version:"1.1.0",sidebarPosition:40,frontMatter:{sidebar_position:40,title:"Form",slug:"/generated/metamodel/entities/form",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/form.md"},sidebar:"overviewSidebar",previous:{title:"StructuredProperty",permalink:"/docs/1.1.0/generated/metamodel/entities/structuredproperty"},next:{title:"PlatformResource",permalink:"/docs/1.1.0/generated/metamodel/entities/platformresource"}},c={},d=[{value:"Aspects",id:"aspects",level:2},{value:"formInfo",id:"forminfo",level:3},{value:"dynamicFormAssignment",id:"dynamicformassignment",level:3},{value:"ownership",id:"ownership",level:3},{value:"Relationships",id:"relationships",level:2},{value:"Outgoing",id:"outgoing",level:3},{value:"Global Metadata Model",id:"global-metadata-model",level:2}],m={toc:d},u="wrapper";function f(e){var{components:n}=e,t=i(e,["components"]);return(0,r.yg)(u,a(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){o(e,n,t[n])}))}return e}({},m,t),{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"form"},"Form"),(0,r.yg)("h2",{id:"aspects"},"Aspects"),(0,r.yg)("h3",{id:"forminfo"},"formInfo"),(0,r.yg)("p",null,"Information about a form to help with filling out metadata on entities."),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Schema"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "formInfo"\n  },\n  "name": "FormInfo",\n  "namespace": "com.linkedin.form",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "TEXT_PARTIAL"\n      },\n      "type": "string",\n      "name": "name",\n      "doc": "Display name of the form"\n    },\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "description",\n      "default": null,\n      "doc": "Description of the form"\n    },\n    {\n      "Searchable": {\n        "fieldType": "KEYWORD"\n      },\n      "type": {\n        "type": "enum",\n        "symbolDocs": {\n          "COMPLETION": "A form simply used for collecting metadata fields for an entity.",\n          "VERIFICATION": "This form is used for \\"verifying\\" that entities comply with a policy via presence of a specific set of metadata fields."\n        },\n        "name": "FormType",\n        "namespace": "com.linkedin.form",\n        "symbols": [\n          "COMPLETION",\n          "VERIFICATION"\n        ]\n      },\n      "name": "type",\n      "default": "COMPLETION",\n      "doc": "The type of this form"\n    },\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "FormPrompt",\n          "namespace": "com.linkedin.form",\n          "fields": [\n            {\n              "Searchable": {\n                "fieldName": "promptId",\n                "fieldType": "KEYWORD",\n                "queryByDefault": false\n              },\n              "type": "string",\n              "name": "id",\n              "doc": "The unique id for this prompt. This must be GLOBALLY unique."\n            },\n            {\n              "type": "string",\n              "name": "title",\n              "doc": "The title of this prompt"\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "description",\n              "default": null,\n              "doc": "The description of this prompt"\n            },\n            {\n              "type": {\n                "type": "enum",\n                "symbolDocs": {\n                  "FIELDS_STRUCTURED_PROPERTY": "This prompt is meant to apply a structured property to a schema fields entity",\n                  "STRUCTURED_PROPERTY": "This prompt is meant to apply a structured property to an entity"\n                },\n                "name": "FormPromptType",\n                "namespace": "com.linkedin.form",\n                "symbols": [\n                  "STRUCTURED_PROPERTY",\n                  "FIELDS_STRUCTURED_PROPERTY"\n                ]\n              },\n              "name": "type",\n              "doc": "The type of prompt"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "StructuredPropertyParams",\n                  "namespace": "com.linkedin.form",\n                  "fields": [\n                    {\n                      "Searchable": {\n                        "fieldName": "structuredPropertyPromptUrns",\n                        "fieldType": "URN"\n                      },\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "urn",\n                      "doc": "The structured property that is required on this entity"\n                    }\n                  ]\n                }\n              ],\n              "name": "structuredPropertyParams",\n              "default": null,\n              "doc": "An optional set of information specific to structured properties prompts.\\nThis should be filled out if the prompt is type STRUCTURED_PROPERTY or FIELDS_STRUCTURED_PROPERTY."\n            },\n            {\n              "type": "boolean",\n              "name": "required",\n              "default": false,\n              "doc": "Whether the prompt is required to be completed, in order for the form to be marked as complete."\n            }\n          ],\n          "doc": "A prompt to present to the user to encourage filling out metadata"\n        }\n      },\n      "name": "prompts",\n      "default": [],\n      "doc": "List of prompts to present to the user to encourage filling out metadata"\n    },\n    {\n      "type": {\n        "type": "record",\n        "name": "FormActorAssignment",\n        "namespace": "com.linkedin.form",\n        "fields": [\n          {\n            "Searchable": {\n              "fieldName": "isOwnershipForm",\n              "fieldType": "BOOLEAN"\n            },\n            "type": "boolean",\n            "name": "owners",\n            "default": true,\n            "doc": "Whether the form should be assigned to the owners of assets that it is applied to.\\nThis is the default."\n          },\n          {\n            "Searchable": {\n              "/*": {\n                "fieldName": "assignedGroups",\n                "fieldType": "URN"\n              }\n            },\n            "type": [\n              "null",\n              {\n                "type": "array",\n                "items": "string"\n              }\n            ],\n            "name": "groups",\n            "default": null,\n            "doc": "Optional: Specific set of groups that are targeted by this form assignment."\n          },\n          {\n            "Searchable": {\n              "/*": {\n                "fieldName": "assignedUsers",\n                "fieldType": "URN"\n              }\n            },\n            "type": [\n              "null",\n              {\n                "type": "array",\n                "items": "string"\n              }\n            ],\n            "name": "users",\n            "default": null,\n            "doc": "Optional: Specific set of users that are targeted by this form assignment."\n          }\n        ]\n      },\n      "name": "actors",\n      "default": {\n        "groups": null,\n        "owners": true,\n        "users": null\n      },\n      "doc": "Who the form is assigned to, e.g. who should see the form when visiting the entity page or governance center"\n    }\n  ],\n  "doc": "Information about a form to help with filling out metadata on entities."\n}\n'))),(0,r.yg)("h3",{id:"dynamicformassignment"},"dynamicFormAssignment"),(0,r.yg)("p",null,"Information about how a form is assigned to entities dynamically. Provide a filter to\nmatch a set of entities instead of explicitly applying a form to specific entities."),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Schema"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "dynamicFormAssignment"\n  },\n  "name": "DynamicFormAssignment",\n  "namespace": "com.linkedin.form",\n  "fields": [\n    {\n      "type": {\n        "type": "record",\n        "name": "Filter",\n        "namespace": "com.linkedin.metadata.query.filter",\n        "fields": [\n          {\n            "type": [\n              "null",\n              {\n                "type": "array",\n                "items": {\n                  "type": "record",\n                  "name": "ConjunctiveCriterion",\n                  "namespace": "com.linkedin.metadata.query.filter",\n                  "fields": [\n                    {\n                      "type": {\n                        "type": "array",\n                        "items": {\n                          "type": "record",\n                          "name": "Criterion",\n                          "namespace": "com.linkedin.metadata.query.filter",\n                          "fields": [\n                            {\n                              "type": "string",\n                              "name": "field",\n                              "doc": "The name of the field that the criterion refers to"\n                            },\n                            {\n                              "type": "string",\n                              "name": "value",\n                              "doc": "The value of the intended field"\n                            },\n                            {\n                              "type": {\n                                "type": "array",\n                                "items": "string"\n                              },\n                              "name": "values",\n                              "default": [],\n                              "doc": "Values. one of which the intended field should match\\nNote, if values is set, the above \\"value\\" field will be ignored"\n                            },\n                            {\n                              "type": {\n                                "type": "enum",\n                                "symbolDocs": {\n                                  "ANCESTORS_INCL": "Represent the relation: URN field matches any nested parent in addition to the given URN",\n                                  "CONTAIN": "Represent the relation: String field contains value, e.g. name contains Profile",\n                                  "DESCENDANTS_INCL": "Represent the relation: URN field any nested children in addition to the given URN",\n                                  "END_WITH": "Represent the relation: String field ends with value, e.g. name ends with Event",\n                                  "EQUAL": "Represent the relation: field = value, e.g. platform = hdfs",\n                                  "EXISTS": "Represents the relation: field exists and is non-empty, e.g. owners is not null and != [] (empty)",\n                                  "GREATER_THAN": "Represent the relation greater than, e.g. ownerCount > 5",\n                                  "GREATER_THAN_OR_EQUAL_TO": "Represent the relation greater than or equal to, e.g. ownerCount >= 5",\n                                  "IEQUAL": "Represent the relation: field = value and support case insensitive values, e.g. platform = hdfs",\n                                  "IN": "Represent the relation: String field is one of the array values to, e.g. name in [\\"Profile\\", \\"Event\\"]",\n                                  "IS_NULL": "Represent the relation: field is null, e.g. platform is null",\n                                  "LESS_THAN": "Represent the relation less than, e.g. ownerCount < 3",\n                                  "LESS_THAN_OR_EQUAL_TO": "Represent the relation less than or equal to, e.g. ownerCount <= 3",\n                                  "RELATED_INCL": "Represent the relation: URN field matches any nested child or parent in addition to the given URN",\n                                  "START_WITH": "Represent the relation: String field starts with value, e.g. name starts with PageView"\n                                },\n                                "name": "Condition",\n                                "namespace": "com.linkedin.metadata.query.filter",\n                                "symbols": [\n                                  "CONTAIN",\n                                  "END_WITH",\n                                  "EQUAL",\n                                  "IEQUAL",\n                                  "IS_NULL",\n                                  "EXISTS",\n                                  "GREATER_THAN",\n                                  "GREATER_THAN_OR_EQUAL_TO",\n                                  "IN",\n                                  "LESS_THAN",\n                                  "LESS_THAN_OR_EQUAL_TO",\n                                  "START_WITH",\n                                  "DESCENDANTS_INCL",\n                                  "ANCESTORS_INCL",\n                                  "RELATED_INCL"\n                                ],\n                                "doc": "The matching condition in a filter criterion"\n                              },\n                              "name": "condition",\n                              "default": "EQUAL",\n                              "doc": "The condition for the criterion, e.g. EQUAL, START_WITH"\n                            },\n                            {\n                              "type": "boolean",\n                              "name": "negated",\n                              "default": false,\n                              "doc": "Whether the condition should be negated"\n                            }\n                          ],\n                          "doc": "A criterion for matching a field with given value"\n                        }\n                      },\n                      "name": "and",\n                      "doc": "A list of and criteria the filter applies to the query"\n                    }\n                  ],\n                  "doc": "A list of criterion and\'d together."\n                }\n              }\n            ],\n            "name": "or",\n            "default": null,\n            "doc": "A list of disjunctive criterion for the filter. (or operation to combine filters)"\n          },\n          {\n            "type": [\n              "null",\n              {\n                "type": "array",\n                "items": "com.linkedin.metadata.query.filter.Criterion"\n              }\n            ],\n            "name": "criteria",\n            "default": null,\n            "doc": "Deprecated! A list of conjunctive criterion for the filter. If \\"or\\" field is provided, then this field is ignored."\n          }\n        ],\n        "doc": "The filter for finding a record or a collection of records"\n      },\n      "name": "filter",\n      "doc": "The filter applied when assigning this form to entities. Entities that match this filter\\nwill have this form applied to them. Right now this filter only supports filtering by\\nplatform, entity type, container, and domain through the UI."\n    }\n  ],\n  "doc": "Information about how a form is assigned to entities dynamically. Provide a filter to\\nmatch a set of entities instead of explicitly applying a form to specific entities."\n}\n'))),(0,r.yg)("h3",{id:"ownership"},"ownership"),(0,r.yg)("p",null,"Ownership information of an entity."),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Schema"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "ownership"\n  },\n  "name": "Ownership",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "Owner",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "Relationship": {\n                "entityTypes": [\n                  "corpuser",\n                  "corpGroup"\n                ],\n                "name": "OwnedBy"\n              },\n              "Searchable": {\n                "addToFilters": true,\n                "fieldName": "owners",\n                "fieldType": "URN",\n                "filterNameOverride": "Owned By",\n                "hasValuesFieldName": "hasOwners",\n                "queryByDefault": false\n              },\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "owner",\n              "doc": "Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name\\n(Caveat: only corpuser is currently supported in the frontend.)"\n            },\n            {\n              "deprecated": true,\n              "type": {\n                "type": "enum",\n                "symbolDocs": {\n                  "BUSINESS_OWNER": "A person or group who is responsible for logical, or business related, aspects of the asset.",\n                  "CONSUMER": "A person, group, or service that consumes the data\\nDeprecated! Use TECHNICAL_OWNER or BUSINESS_OWNER instead.",\n                  "CUSTOM": "Set when ownership type is unknown or a when new one is specified as an ownership type entity for which we have no\\nenum value for. This is used for backwards compatibility",\n                  "DATAOWNER": "A person or group that is owning the data\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "DATA_STEWARD": "A steward, expert, or delegate responsible for the asset.",\n                  "DELEGATE": "A person or a group that overseas the operation, e.g. a DBA or SRE.\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "DEVELOPER": "A person or group that is in charge of developing the code\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "NONE": "No specific type associated to the owner.",\n                  "PRODUCER": "A person, group, or service that produces/generates the data\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "STAKEHOLDER": "A person or a group that has direct business interest\\nDeprecated! Use TECHNICAL_OWNER, BUSINESS_OWNER, or STEWARD instead.",\n                  "TECHNICAL_OWNER": "person or group who is responsible for technical aspects of the asset."\n                },\n                "deprecatedSymbols": {\n                  "CONSUMER": true,\n                  "DATAOWNER": true,\n                  "DELEGATE": true,\n                  "DEVELOPER": true,\n                  "PRODUCER": true,\n                  "STAKEHOLDER": true\n                },\n                "name": "OwnershipType",\n                "namespace": "com.linkedin.common",\n                "symbols": [\n                  "CUSTOM",\n                  "TECHNICAL_OWNER",\n                  "BUSINESS_OWNER",\n                  "DATA_STEWARD",\n                  "NONE",\n                  "DEVELOPER",\n                  "DATAOWNER",\n                  "DELEGATE",\n                  "PRODUCER",\n                  "CONSUMER",\n                  "STAKEHOLDER"\n                ],\n                "doc": "Asset owner types"\n              },\n              "name": "type",\n              "doc": "The type of the ownership"\n            },\n            {\n              "Relationship": {\n                "entityTypes": [\n                  "ownershipType"\n                ],\n                "name": "ownershipType"\n              },\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "typeUrn",\n              "default": null,\n              "doc": "The type of the ownership\\nUrn of type O"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "OwnershipSource",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": {\n                        "type": "enum",\n                        "symbolDocs": {\n                          "AUDIT": "Auditing system or audit logs",\n                          "DATABASE": "Database, e.g. GRANTS table",\n                          "FILE_SYSTEM": "File system, e.g. file/directory owner",\n                          "ISSUE_TRACKING_SYSTEM": "Issue tracking system, e.g. Jira",\n                          "MANUAL": "Manually provided by a user",\n                          "OTHER": "Other sources",\n                          "SERVICE": "Other ownership-like service, e.g. Nuage, ACL service etc",\n                          "SOURCE_CONTROL": "SCM system, e.g. GIT, SVN"\n                        },\n                        "name": "OwnershipSourceType",\n                        "namespace": "com.linkedin.common",\n                        "symbols": [\n                          "AUDIT",\n                          "DATABASE",\n                          "FILE_SYSTEM",\n                          "ISSUE_TRACKING_SYSTEM",\n                          "MANUAL",\n                          "SERVICE",\n                          "SOURCE_CONTROL",\n                          "OTHER"\n                        ]\n                      },\n                      "name": "type",\n                      "doc": "The type of the source"\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "url",\n                      "default": null,\n                      "doc": "A reference URL for the source"\n                    }\n                  ],\n                  "doc": "Source/provider of the ownership information"\n                }\n              ],\n              "name": "source",\n              "default": null,\n              "doc": "Source information for the ownership"\n            }\n          ],\n          "doc": "Ownership information"\n        }\n      },\n      "name": "owners",\n      "doc": "List of owners of the entity."\n    },\n    {\n      "Searchable": {\n        "/*": {\n          "fieldType": "MAP_ARRAY",\n          "queryByDefault": false\n        }\n      },\n      "type": [\n        {\n          "type": "map",\n          "values": {\n            "type": "array",\n            "items": "string"\n          }\n        },\n        "null"\n      ],\n      "name": "ownerTypes",\n      "default": {},\n      "doc": "Ownership type to Owners map, populated via mutation hook."\n    },\n    {\n      "type": {\n        "type": "record",\n        "name": "AuditStamp",\n        "namespace": "com.linkedin.common",\n        "fields": [\n          {\n            "type": "long",\n            "name": "time",\n            "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": "string",\n            "name": "actor",\n            "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "impersonator",\n            "default": null,\n            "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n          },\n          {\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "message",\n            "default": null,\n            "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n          }\n        ],\n        "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n      },\n      "name": "lastModified",\n      "default": {\n        "actor": "urn:li:corpuser:unknown",\n        "impersonator": null,\n        "time": 0,\n        "message": null\n      },\n      "doc": "Audit stamp containing who last modified the record and when. A value of 0 in the time field indicates missing data."\n    }\n  ],\n  "doc": "Ownership information of an entity."\n}\n'))),(0,r.yg)("h2",{id:"relationships"},"Relationships"),(0,r.yg)("h3",{id:"outgoing"},"Outgoing"),(0,r.yg)("p",null,"These are the relationships stored in this entity's aspects"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"OwnedBy"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Corpuser via ",(0,r.yg)("inlineCode",{parentName:"li"},"ownership.owners.owner")),(0,r.yg)("li",{parentName:"ul"},"CorpGroup via ",(0,r.yg)("inlineCode",{parentName:"li"},"ownership.owners.owner")))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"ownershipType"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"OwnershipType via ",(0,r.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn"))))),(0,r.yg)("h2",{id:"global-metadata-model"},(0,r.yg)("a",{parentName:"h2",href:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,r.yg)("p",null,(0,r.yg)("img",{parentName:"p",src:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}f.isMDXComponent=!0}}]);