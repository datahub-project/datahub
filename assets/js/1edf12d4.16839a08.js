"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[75778],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>m});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),u=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(o.Provider,{value:n},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(t),d=r,m=c["".concat(o,".").concat(d)]||c[d]||g[d]||i;return t?a.createElement(m,l(l({ref:n},p),{},{components:t})):a.createElement(m,l({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=d;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var u=2;u<i;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5400:(e,n,t)=>{t.d(n,{A:()=>l});var a=t(96540),r=t(20053);const i={tabItem:"tabItem_Ymn6"};function l({children:e,hidden:n,className:t}){return a.createElement("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,t),hidden:n},e)}},26642:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>f,frontMatter:()=>o,metadata:()=>p,toc:()=>g});t(96540);var a=t(15680),r=t(5400);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const o={title:"GraphQL Best Practices",slug:"/api/graphql/graphql-best-practices",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/graphql/graphql-best-practices.md"},u="GraphQL Best Practices",p={unversionedId:"docs/api/graphql/graphql-best-practices",id:"docs/api/graphql/graphql-best-practices",title:"GraphQL Best Practices",description:"Introduction:",source:"@site/genDocs/docs/api/graphql/graphql-best-practices.md",sourceDirName:"docs/api/graphql",slug:"/api/graphql/graphql-best-practices",permalink:"/docs/api/graphql/graphql-best-practices",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/api/graphql/graphql-best-practices.md",tags:[],version:"current",frontMatter:{title:"GraphQL Best Practices",slug:"/api/graphql/graphql-best-practices",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/graphql/graphql-best-practices.md"},sidebar:"overviewSidebar",previous:{title:"Getting Started With GraphQL",permalink:"/docs/api/graphql/getting-started"},next:{title:"Access Token Management",permalink:"/docs/api/graphql/token-management"}},c={},g=[{value:"Introduction:",id:"introduction",level:2},{value:"General Best Practices",id:"general-best-practices",level:2},{value:"Query Optimizations",id:"query-optimizations",level:3},{value:"Client-side Caching",id:"client-side-caching",level:3},{value:"Reuse Pieces of Query Logic with Fragments",id:"reuse-pieces-of-query-logic-with-fragments",level:3},{value:"Search Query Best Practices",id:"search-query-best-practices",level:2},{value:"Deep Pagination: search<em> vs scroll</em> APIs",id:"deep-pagination-search-vs-scroll-apis",level:3},{value:"Examples",id:"examples",level:4},{value:"SearchFlags: Highlighting and Aggregation",id:"searchflags-highlighting-and-aggregation",level:3},{value:"Aggregation",id:"aggregation",level:3},{value:"Limit Search Entity Types",id:"limit-search-entity-types",level:3},{value:"Limit Results",id:"limit-results",level:3},{value:"Lineage Query Best Practices",id:"lineage-query-best-practices",level:2},{value:"Search Across Lineage",id:"search-across-lineage",level:3},{value:"Lineage Subquery",id:"lineage-subquery",level:3}],d=(m="Tab",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",e)});var m;const y={toc:g},h="wrapper";function f(e){var{components:n}=e,t=s(e,["components"]);return(0,a.yg)(h,l(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){i(e,n,t[n])}))}return e}({},y,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"graphql-best-practices"},"GraphQL Best Practices"),(0,a.yg)("h2",{id:"introduction"},"Introduction:"),(0,a.yg)("p",null,"DataHub\u2019s GraphQL API is designed to power the UI. The following guidelines are written with this use-case in mind."),(0,a.yg)("h2",{id:"general-best-practices"},"General Best Practices"),(0,a.yg)("h3",{id:"query-optimizations"},"Query Optimizations"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"One of GraphQL's biggest advantages over a traditional REST API is its support for ",(0,a.yg)("strong",{parentName:"p"},"declarative data fetching"),". Each component can (and should) query exactly the fields it requires to render, with no superfluous data sent over the network. If instead your root component executes a single, enormous query to obtain data for all of its children, it might query on behalf of components that ",(0,a.yg)("em",{parentName:"p"},"aren't even rendered")," given the current state. This can result in a delayed response, and it drastically reduces the likelihood that the query's result can be reused by a ",(0,a.yg)("strong",{parentName:"p"},"server-side response cache"),". [",(0,a.yg)("a",{parentName:"p",href:"https://www.apolloGraphQL.com/docs/react/data/operation-best-practices#query-only-the-data-you-need-where-you-need-it"},"ref"),"]")),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Minimize over-fetching by only requesting data needed to be displayed."),(0,a.yg)("li",{parentName:"ol"},"Limit result counts and use pagination (additionally see section below on ",(0,a.yg)("inlineCode",{parentName:"li"},"Deep Pagination"),")."),(0,a.yg)("li",{parentName:"ol"},"Avoid deeply nested queries and instead break out queries into separate requests for the nested objects.")),(0,a.yg)("h3",{id:"client-side-caching"},"Client-side Caching"),(0,a.yg)("p",null,"Clients, such as Apollo Client (javascript, python ",(0,a.yg)("inlineCode",{parentName:"p"},"apollo-client-python"),"), offer ",(0,a.yg)("a",{parentName:"p",href:"https://www.apolloGraphQL.com/docs/react/caching/overview"},"client-side caching")," to prevent requests to the service and are able to understand the content of the GraphQL query. This enables more advanced caching vs HTTP response caching."),(0,a.yg)("h3",{id:"reuse-pieces-of-query-logic-with-fragments"},"Reuse Pieces of Query Logic with Fragments"),(0,a.yg)("p",null,"One powerful feature of GraphQL that we recommend you use is ",(0,a.yg)("a",{parentName:"p",href:"https://hygraph.com/learn/GraphQL/fragments"},"fragments"),". Fragments allow you to define pieces of a query that you can reuse across any client-side query that you define. Basically, you can define a set of fields that you want to query, and reuse it in multiple places."),(0,a.yg)("p",null,"This technique makes maintaining your GraphQL queries much more doable. For example, if you want to request a new field for an entity type across many queries, you\u2019re able to update it in one place if you\u2019re leveraging fragments."),(0,a.yg)("h2",{id:"search-query-best-practices"},"Search Query Best Practices"),(0,a.yg)("h3",{id:"deep-pagination-search-vs-scroll-apis"},"Deep Pagination: search",(0,a.yg)("em",{parentName:"h3"}," vs scroll")," APIs"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"search*")," APIs such as ",(0,a.yg)("a",{parentName:"p",href:"/docs/GraphQL/queries/#searchacrossentities"},(0,a.yg)("inlineCode",{parentName:"a"},"searchAcrossEntities"))," are designed for minimal pagination (< ~50). They do not perform well for deep pagination requests. Use the equivalent ",(0,a.yg)("inlineCode",{parentName:"p"},"scroll*")," APIs such as ",(0,a.yg)("a",{parentName:"p",href:"/docs/GraphQL/queries/#scrollacrossentities"},(0,a.yg)("inlineCode",{parentName:"a"},"scrollAcrossEntities"))," when expecting the need to paginate deeply into the result set."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"It is impossible to use ",(0,a.yg)("inlineCode",{parentName:"p"},"search*")," for paginating beyond 10k results.")),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"In order to ",(0,a.yg)("inlineCode",{parentName:"p"},"scroll*")," through the entire result set it is required to use a stable sort order. This means using ",(0,a.yg)("inlineCode",{parentName:"p"},"_score")," as\nthe first sort order cannot be used. Use the ",(0,a.yg)("inlineCode",{parentName:"p"},"urn")," field as the sort order instead.")),(0,a.yg)("h4",{id:"examples"},"Examples"),(0,a.yg)("p",null,"In the following examples we demonstrate pagination for both ",(0,a.yg)("inlineCode",{parentName:"p"},"scroll*")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"search*")," requests. This particular request is searching for two entities, Datasets and Charts, that\ncontain ",(0,a.yg)("inlineCode",{parentName:"p"},"pet")," in the entities' name or title. The results will only include the URN for the entities."),(0,a.yg)(d,{mdxType:"Tab"},(0,a.yg)(r.A,{value:"Scroll",label:"Scroll",default:!0,mdxType:"TabItem"},"Page 1 Request:",(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'{\n  scrollAcrossEntities(\n    input: {\n      types: [DATASET, CHART]\n      count: 2\n      query: "*"\n      orFilters: [\n        { and: [{ field: "name", condition: CONTAIN, values: ["pet"] }] }\n        { and: [{ field: "title", condition: CONTAIN, values: ["pet"] }] }\n      ]\n      sortInput: { sortCriteria: [{ field: "urn", sortOrder: ASCENDING }] }\n    }\n  ) {\n    nextScrollId\n    searchResults {\n      entity {\n        ... on Dataset {\n          urn\n        }\n        ... on Chart {\n          urn\n        }\n      }\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Page 1 Result:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "scrollAcrossEntities": {\n      "nextScrollId": "eyJzb3J0IjpbMi4wNzk2ODc2LCJ1cm46bGk6ZGF0YXNldDoodXJuOmxpOmRhdGFQbGF0Zm9ybTpzbm93Zmxha2UsbG9uZ190YWlsX2NvbXBhbmlvbnMuYWRvcHRpb24ucGV0X3Byb2ZpbGVzLFBST0QpIl0sInBpdElkIjpudWxsLCJleHBpcmF0aW9uVGltZSI6MH0=",\n      "searchResults": [\n        {\n          "entity": {\n            "urn": "urn:li:dataset:(urn:li:dataPlatform:dbt,long_tail_companions.analytics.pet_details,PROD)"\n          }\n        },\n        {\n          "entity": {\n            "urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,long_tail_companions.adoption.pet_profiles,PROD)"\n          }\n        }\n      ]\n    }\n  },\n  "extensions": {}\n}\n')),(0,a.yg)("p",null,"Page 2 Request:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'{\n  scrollAcrossEntities(\n    input: {\n      scrollId: "eyJzb3J0IjpbMi4wNzk2ODc2LCJ1cm46bGk6ZGF0YXNldDoodXJuOmxpOmRhdGFQbGF0Zm9ybTpzbm93Zmxha2UsbG9uZ190YWlsX2NvbXBhbmlvbnMuYWRvcHRpb24ucGV0X3Byb2ZpbGVzLFBST0QpIl0sInBpdElkIjpudWxsLCJleHBpcmF0aW9uVGltZSI6MH0="\n      types: [DATASET, CHART]\n      count: 2\n      query: "*"\n      orFilters: [\n        { and: [{ field: "name", condition: CONTAIN, values: ["pet"] }] }\n        { and: [{ field: "title", condition: CONTAIN, values: ["pet"] }] }\n      ]\n      sortInput: { sortCriteria: [{ field: "urn", sortOrder: ASCENDING }] }\n    }\n  ) {\n    nextScrollId\n    searchResults {\n      entity {\n        ... on Dataset {\n          urn\n        }\n        ... on Chart {\n          urn\n        }\n      }\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Page 2 Result:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "scrollAcrossEntities": {\n      "nextScrollId": "eyJzb3J0IjpbMS43MTg3NSwidXJuOmxpOmRhdGFzZXQ6KHVybjpsaTpkYXRhUGxhdGZvcm06c25vd2ZsYWtlLGxvbmdfdGFpbF9jb21wYW5pb25zLmFkb3B0aW9uLnBldHMsUFJPRCkiXSwicGl0SWQiOm51bGwsImV4cGlyYXRpb25UaW1lIjowfQ==",\n      "searchResults": [\n        {\n          "entity": {\n            "urn": "urn:li:dataset:(urn:li:dataPlatform:dbt,long_tail_companions.analytics.pet_status_history,PROD)"\n          }\n        },\n        {\n          "entity": {\n            "urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,long_tail_companions.adoption.pets,PROD)"\n          }\n        }\n      ]\n    }\n  },\n  "extensions": {}\n}\n'))),(0,a.yg)(r.A,{value:"Search",label:"Search",mdxType:"TabItem"},"Page 1 Request:",(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'{\n  searchAcrossEntities(\n    input: {\n      types: [DATASET, CHART]\n      count: 2\n      start: 0\n      query: "*"\n      orFilters: [\n        { and: [{ field: "name", condition: CONTAIN, values: ["pet"] }] }\n        { and: [{ field: "title", condition: CONTAIN, values: ["pet"] }] }\n      ]\n    }\n  ) {\n    searchResults {\n      entity {\n        ... on Dataset {\n          urn\n        }\n        ... on Chart {\n          urn\n        }\n      }\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Page 1 Response:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "searchAcrossEntities": {\n      "searchResults": [\n        {\n          "entity": {\n            "urn": "urn:li:dataset:(urn:li:dataPlatform:dbt,long_tail_companions.analytics.pet_details,PROD)"\n          }\n        },\n        {\n          "entity": {\n            "urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,long_tail_companions.adoption.pet_profiles,PROD)"\n          }\n        }\n      ]\n    }\n  },\n  "extensions": {}\n}\n')),(0,a.yg)("p",null,"Page 2 Request:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'{\n  searchAcrossEntities(\n    input: {\n      types: [DATASET, CHART]\n      count: 2\n      start: 2\n      query: "*"\n      orFilters: [\n        { and: [{ field: "name", condition: CONTAIN, values: ["pet"] }] }\n        { and: [{ field: "title", condition: CONTAIN, values: ["pet"] }] }\n      ]\n    }\n  ) {\n    searchResults {\n      entity {\n        ... on Dataset {\n          urn\n        }\n        ... on Chart {\n          urn\n        }\n      }\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Page 2 Response:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "searchAcrossEntities": {\n      "searchResults": [\n        {\n          "entity": {\n            "urn": "urn:li:dataset:(urn:li:dataPlatform:dbt,long_tail_companions.analytics.pet_status_history,PROD)"\n          }\n        },\n        {\n          "entity": {\n            "urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,long_tail_companions.adoption.pets,PROD)"\n          }\n        }\n      ]\n    }\n  },\n  "extensions": {}\n}\n')))),(0,a.yg)("h3",{id:"searchflags-highlighting-and-aggregation"},"SearchFlags: Highlighting and Aggregation"),(0,a.yg)("p",null,"When performing queries which accept ",(0,a.yg)("a",{parentName:"p",href:"/docs/GraphQL/inputObjects#searchflags"},(0,a.yg)("inlineCode",{parentName:"a"},"searchFlags"))," and highlighting and aggregation is not needed, be sure to disable these flags."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"skipHighlighting: true"),(0,a.yg)("li",{parentName:"ul"},"skipAggregates: true")),(0,a.yg)("p",null,"As a fallback, if only certain fields require highlighting use ",(0,a.yg)("inlineCode",{parentName:"p"},"customHighlightingFields")," to limit highlighting to the specific fields."),(0,a.yg)(d,{mdxType:"Tab"},(0,a.yg)(r.A,{value:"Skip",label:"Skip Example",default:!0,mdxType:"TabItem"},(0,a.yg)("p",null,"Example for skipping highlighting and aggregates, typically used for scrolling search requests."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'{\n  scrollAcrossEntities(\n    input: {\n      types: [DATASET]\n      count: 2\n      query: "pet"\n      searchFlags: { skipAggregates: true, skipHighlighting: true }\n      sortInput: { sortCriteria: [{ field: "urn", sortOrder: ASCENDING }] }\n    }\n  ) {\n    searchResults {\n      entity {\n        ... on Dataset {\n          urn\n        }\n      }\n      matchedFields {\n        name\n        value\n      }\n    }\n    facets {\n      displayName\n      aggregations {\n        value\n        count\n      }\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Response:"),(0,a.yg)("p",null,"Note that a few ",(0,a.yg)("inlineCode",{parentName:"p"},"matchedFields")," are still returned by default ","[",(0,a.yg)("inlineCode",{parentName:"p"},"urn"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"customProperties"),"]"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "scrollAcrossEntities": {\n      "searchResults": [\n        {\n          "entity": {\n            "urn": "urn:li:dataset:(urn:li:dataPlatform:dbt,long_tail_companions.analytics.pet_details,PROD)"\n          },\n          "matchedFields": [\n            {\n              "name": "urn",\n              "value": ""\n            },\n            {\n              "name": "customProperties",\n              "value": ""\n            }\n          ]\n        },\n        {\n          "entity": {\n            "urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,long_tail_companions.analytics.pet_details,PROD)"\n          },\n          "matchedFields": [\n            {\n              "name": "urn",\n              "value": ""\n            },\n            {\n              "name": "customProperties",\n              "value": ""\n            }\n          ]\n        }\n      ],\n      "facets": []\n    }\n  },\n  "extensions": {}\n}\n'))),(0,a.yg)(r.A,{value:"Custom",label:"Custom Highlighting",mdxType:"TabItem"},(0,a.yg)("p",null,"Custom highlighting can be used for searchAcrossEntities when only a limited number of fields are useful for highlighting. In this example we specifically request highlighting for ",(0,a.yg)("inlineCode",{parentName:"p"},"description"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'{\n  searchAcrossEntities(\n    input: {\n      types: [DATASET]\n      count: 2\n      query: "pet"\n      searchFlags: { customHighlightingFields: ["description"] }\n    }\n  ) {\n    searchResults {\n      entity {\n        ... on Dataset {\n          urn\n        }\n      }\n      matchedFields {\n        name\n        value\n      }\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Response:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "searchAcrossEntities": {\n      "searchResults": [\n        {\n          "entity": {\n            "urn": "urn:li:dataset:(urn:li:dataPlatform:dbt,long_tail_companions.analytics.pet_details,PROD)"\n          },\n          "matchedFields": [\n            {\n              "name": "urn",\n              "value": ""\n            },\n            {\n              "name": "customProperties",\n              "value": ""\n            },\n            {\n              "name": "description",\n              "value": "Table with all pet-related details"\n            }\n          ]\n        },\n        {\n          "entity": {\n            "urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,long_tail_companions.analytics.pet_details,PROD)"\n          },\n          "matchedFields": [\n            {\n              "name": "urn",\n              "value": ""\n            },\n            {\n              "name": "customProperties",\n              "value": ""\n            }\n          ]\n        }\n      ]\n    }\n  },\n  "extensions": {}\n}\n')))),(0,a.yg)("h3",{id:"aggregation"},"Aggregation"),(0,a.yg)("p",null,"When aggregation is required with ",(0,a.yg)("inlineCode",{parentName:"p"},"searchAcrossEntities"),", it is possible to set the ",(0,a.yg)("inlineCode",{parentName:"p"},"count")," to 0 to avoid fetching the top search hits, only returning the aggregations. Alternatively ",(0,a.yg)("a",{parentName:"p",href:"/docs/GraphQL/queries#aggregateacrossentities"},"aggregateAcrossEntities")," provides counts and can provide faster results from server-side caching."),(0,a.yg)("p",null,"Request:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'{\n  searchAcrossEntities(\n    input: {\n      types: [DATASET]\n      count: 0\n      query: "pet"\n      searchFlags: { skipHighlighting: true }\n    }\n  ) {\n    searchResults {\n      entity {\n        ... on Dataset {\n          urn\n        }\n      }\n      matchedFields {\n        name\n        value\n      }\n    }\n    facets {\n      displayName\n      aggregations {\n        value\n        count\n      }\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Response:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "searchAcrossEntities": {\n      "searchResults": [],\n      "facets": [\n        {\n          "displayName": "Container",\n          "aggregations": [\n            {\n              "value": "urn:li:container:b41c14bc5cb3ccfbb0433c8cbdef2992",\n              "count": 4\n            },\n            {\n              "value": "urn:li:container:701919de0ec93cb338fe9bac0b35403c",\n              "count": 3\n            }\n          ]\n        },\n        {\n          "displayName": "Sub Type",\n          "aggregations": [\n            {\n              "value": "table",\n              "count": 9\n            },\n            {\n              "value": "view",\n              "count": 6\n            },\n            {\n              "value": "explore",\n              "count": 5\n            },\n            {\n              "value": "source",\n              "count": 4\n            },\n            {\n              "value": "incremental",\n              "count": 1\n            }\n          ]\n        },\n        {\n          "displayName": "Type",\n          "aggregations": [\n            {\n              "value": "DATASET",\n              "count": 24\n            }\n          ]\n        },\n        {\n          "displayName": "Environment",\n          "aggregations": [\n            {\n              "value": "PROD",\n              "count": 24\n            }\n          ]\n        },\n        {\n          "displayName": "Glossary Term",\n          "aggregations": [\n            {\n              "value": "urn:li:glossaryTerm:Adoption.DaysInStatus",\n              "count": 1\n            },\n            {\n              "value": "urn:li:glossaryTerm:Ecommerce.HighRisk",\n              "count": 1\n            },\n            {\n              "value": "urn:li:glossaryTerm:Classification.Confidential",\n              "count": 1\n            }\n          ]\n        },\n        {\n          "displayName": "Domain",\n          "aggregations": [\n            {\n              "value": "urn:li:domain:094dc54b-0ebc-40a6-a4cf-e1b75e8b8089",\n              "count": 6\n            },\n            {\n              "value": "urn:li:domain:7d64d0fa-66c3-445c-83db-3a324723daf8",\n              "count": 2\n            }\n          ]\n        },\n        {\n          "displayName": "Owned By",\n          "aggregations": [\n            {\n              "value": "urn:li:corpGroup:Adoption",\n              "count": 5\n            },\n            {\n              "value": "urn:li:corpuser:shannon@longtail.com",\n              "count": 4\n            },\n            {\n              "value": "urn:li:corpuser:admin",\n              "count": 2\n            },\n            {\n              "value": "urn:li:corpGroup:Analytics Engineering",\n              "count": 2\n            },\n            {\n              "value": "urn:li:corpuser:avigdor@longtail.com",\n              "count": 1\n            },\n            {\n              "value": "urn:li:corpuser:prentiss@longtail.com",\n              "count": 1\n            },\n            {\n              "value": "urn:li:corpuser:tasha@longtail.com",\n              "count": 1\n            },\n            {\n              "value": "urn:li:corpuser:ricca@longtail.com",\n              "count": 1\n            },\n            {\n              "value": "urn:li:corpuser:emilee@longtail.com",\n              "count": 1\n            }\n          ]\n        },\n        {\n          "displayName": "Platform",\n          "aggregations": [\n            {\n              "value": "urn:li:dataPlatform:looker",\n              "count": 8\n            },\n            {\n              "value": "urn:li:dataPlatform:dbt",\n              "count": 7\n            },\n            {\n              "value": "urn:li:dataPlatform:snowflake",\n              "count": 7\n            },\n            {\n              "value": "urn:li:dataPlatform:s3",\n              "count": 1\n            },\n            {\n              "value": "urn:li:dataPlatform:mongodb",\n              "count": 1\n            }\n          ]\n        },\n        {\n          "displayName": "Tag",\n          "aggregations": [\n            {\n              "value": "urn:li:tag:prod_model",\n              "count": 3\n            },\n            {\n              "value": "urn:li:tag:pii",\n              "count": 2\n            },\n            {\n              "value": "urn:li:tag:business critical",\n              "count": 2\n            },\n            {\n              "value": "urn:li:tag:business_critical",\n              "count": 2\n            },\n            {\n              "value": "urn:li:tag:Tier1",\n              "count": 1\n            },\n            {\n              "value": "urn:li:tag:prod",\n              "count": 1\n            }\n          ]\n        },\n        {\n          "displayName": "Type",\n          "aggregations": [\n            {\n              "value": "DATASET",\n              "count": 24\n            }\n          ]\n        }\n      ]\n    }\n  },\n  "extensions": {}\n}\n')),(0,a.yg)("h3",{id:"limit-search-entity-types"},"Limit Search Entity Types"),(0,a.yg)("p",null,"When querying for specific entities, enumerate only the entity types required using ",(0,a.yg)("inlineCode",{parentName:"p"},"types")," , for example ","[",(0,a.yg)("inlineCode",{parentName:"p"},"DATASET")," , ",(0,a.yg)("inlineCode",{parentName:"p"},"CHART"),"]"),(0,a.yg)("h3",{id:"limit-results"},"Limit Results"),(0,a.yg)("p",null,"Limit search results based on the amount of information being requested. For example, a minimal number of attributes can fetch 1,000 - 2,000 results in a single page, however as the number of attributes increases (especially nested objects) the ",(0,a.yg)("inlineCode",{parentName:"p"},"count")," should be lowered, 20-25 for very complex requests."),(0,a.yg)("h2",{id:"lineage-query-best-practices"},"Lineage Query Best Practices"),(0,a.yg)("p",null,"There are two primary ways to query lineage:"),(0,a.yg)("h3",{id:"search-across-lineage"},"Search Across Lineage"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"searchAcrossLineage")," / ",(0,a.yg)("inlineCode",{parentName:"p"},"scrollAcrossLineage")," root query:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Recommended for all lineage queries"),(0,a.yg)("li",{parentName:"ul"},"Only the shortest path is guaranteed to show up in ",(0,a.yg)("inlineCode",{parentName:"li"},"paths")),(0,a.yg)("li",{parentName:"ul"},"Supports querying indirect lineage (depth > 1)",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Depending on the fanout of the lineage, 3+ hops may not return data, use 1-hop queries for the fastest response times."),(0,a.yg)("li",{parentName:"ul"},"Specify using a filter with name ",(0,a.yg)("inlineCode",{parentName:"li"},'"degree"')," and values ",(0,a.yg)("inlineCode",{parentName:"li"},'"1"')," , ",(0,a.yg)("inlineCode",{parentName:"li"},'"2"'),", and / or ",(0,a.yg)("inlineCode",{parentName:"li"},'"3+"'))))),(0,a.yg)("p",null,"The following examples are demonstrated using sample data for ",(0,a.yg)("inlineCode",{parentName:"p"},"urn:li:dataset:(urn:li:dataPlatform:hive,SampleHiveDataset,PROD)"),"."),(0,a.yg)("p",{align:"center"},(0,a.yg)("img",{width:"90%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/api/graphql/graphql-best-practices/sample_lineage.png"})),(0,a.yg)(d,{mdxType:"Tab"},(0,a.yg)(r.A,{value:"Upstream1",label:"1-Hop Upstream",mdxType:"TabItem"},(0,a.yg)("p",null,"The following example queries show UPSTREAM lineage with progressively higher degrees, first with degree ",(0,a.yg)("inlineCode",{parentName:"p"},'["1"]')," and then ",(0,a.yg)("inlineCode",{parentName:"p"},'["1","2"]'),"."),(0,a.yg)("p",null,"1-Hop Upstreams:"),(0,a.yg)("p",null,"Request:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'{\n  searchAcrossLineage(\n    input: {\n      urn: "urn:li:dataset:(urn:li:dataPlatform:hive,SampleHiveDataset,PROD)"\n      query: "*"\n      count: 10\n      start: 0\n      direction: UPSTREAM\n      orFilters: [\n        { and: [{ field: "degree", condition: EQUAL, values: ["1"] }] }\n      ]\n      searchFlags: { skipAggregates: true, skipHighlighting: true }\n    }\n  ) {\n    start\n    count\n    total\n    searchResults {\n      entity {\n        urn\n        type\n        ... on Dataset {\n          name\n        }\n      }\n      paths {\n        path {\n          ... on Dataset {\n            urn\n          }\n        }\n      }\n      degree\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Response:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "searchAcrossLineage": {\n      "start": 0,\n      "count": 10,\n      "total": 1,\n      "searchResults": [\n        {\n          "entity": {\n            "urn": "urn:li:dataset:(urn:li:dataPlatform:hdfs,SampleHdfsDataset,PROD)",\n            "type": "DATASET",\n            "name": "SampleHdfsDataset"\n          },\n          "paths": [\n            {\n              "path": [\n                {\n                  "urn": "urn:li:dataset:(urn:li:dataPlatform:hive,SampleHiveDataset,PROD)"\n                },\n                {\n                  "urn": "urn:li:dataset:(urn:li:dataPlatform:hdfs,SampleHdfsDataset,PROD)"\n                }\n              ]\n            }\n          ],\n          "degree": 1\n        }\n      ]\n    }\n  },\n  "extensions": {}\n}\n'))),(0,a.yg)(r.A,{value:"Upstream2",label:"2-Hop Upstream",mdxType:"TabItem"},"1-Hop & 2-Hop Upstreams:",(0,a.yg)("p",null,"Request:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'{\n  searchAcrossLineage(\n    input: {\n      urn: "urn:li:dataset:(urn:li:dataPlatform:hive,SampleHiveDataset,PROD)"\n      query: "*"\n      count: 10\n      start: 0\n      direction: UPSTREAM\n      orFilters: [\n        { and: [{ field: "degree", condition: EQUAL, values: ["1", "2"] }] }\n      ]\n      searchFlags: { skipAggregates: true, skipHighlighting: true }\n    }\n  ) {\n    start\n    count\n    total\n    searchResults {\n      entity {\n        urn\n        type\n        ... on Dataset {\n          name\n        }\n      }\n      paths {\n        path {\n          ... on Dataset {\n            urn\n          }\n        }\n      }\n      degree\n    }\n  }\n}\n')),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "searchAcrossLineage": {\n      "start": 0,\n      "count": 10,\n      "total": 2,\n      "searchResults": [\n        {\n          "entity": {\n            "urn": "urn:li:dataset:(urn:li:dataPlatform:hdfs,SampleHdfsDataset,PROD)",\n            "type": "DATASET",\n            "name": "SampleHdfsDataset"\n          },\n          "paths": [\n            {\n              "path": [\n                {\n                  "urn": "urn:li:dataset:(urn:li:dataPlatform:hive,SampleHiveDataset,PROD)"\n                },\n                {\n                  "urn": "urn:li:dataset:(urn:li:dataPlatform:hdfs,SampleHdfsDataset,PROD)"\n                }\n              ]\n            }\n          ],\n          "degree": 1\n        },\n        {\n          "entity": {\n            "urn": "urn:li:dataset:(urn:li:dataPlatform:kafka,SampleKafkaDataset,PROD)",\n            "type": "DATASET",\n            "name": "SampleKafkaDataset"\n          },\n          "paths": [\n            {\n              "path": [\n                {\n                  "urn": "urn:li:dataset:(urn:li:dataPlatform:hive,SampleHiveDataset,PROD)"\n                },\n                {\n                  "urn": "urn:li:dataset:(urn:li:dataPlatform:hdfs,SampleHdfsDataset,PROD)"\n                },\n                {\n                  "urn": "urn:li:dataset:(urn:li:dataPlatform:kafka,SampleKafkaDataset,PROD)"\n                }\n              ]\n            }\n          ],\n          "degree": 2\n        }\n      ]\n    }\n  },\n  "extensions": {}\n}\n')))),(0,a.yg)("h3",{id:"lineage-subquery"},"Lineage Subquery"),(0,a.yg)("p",null,"The previous query requires a root or starting node in the lineage graph. The following request offers a way to request lineage for multiple nodes at once with a few limitations."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"lineage")," query on ",(0,a.yg)("inlineCode",{parentName:"p"},"EntityWithRelationship")," entities:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"A more direct reflection of the graph index"),(0,a.yg)("li",{parentName:"ul"},"1-hop lineage only"),(0,a.yg)("li",{parentName:"ul"},"Multiple URNs"),(0,a.yg)("li",{parentName:"ul"},"Should not be requested too many times in a single request. 20 is a tested limit")),(0,a.yg)("p",null,"The following examples are based on the sample lineage graph shown here:"),(0,a.yg)("p",{align:"center"},(0,a.yg)("img",{width:"90%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/api/graphql/graphql-best-practices/sample_bulk_lineage.png"})),(0,a.yg)("p",null,"Example Request:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'query getBulkEntityLineageV2(\n  $urns: [String!]! = [\n    "urn:li:dataJob:(urn:li:dataFlow:(airflow,dag_abc,PROD),task_123)"\n    "urn:li:dataJob:(urn:li:dataFlow:(airflow,dag_abc,PROD),task_456)"\n  ]\n) {\n  entities(urns: $urns) {\n    urn\n    type\n    ... on DataJob {\n      jobId\n      dataFlow {\n        flowId\n      }\n      properties {\n        name\n      }\n      upstream: lineage(input: { direction: UPSTREAM, start: 0, count: 10 }) {\n        total\n        relationships {\n          type\n          entity {\n            urn\n            type\n          }\n        }\n      }\n      downstream: lineage(\n        input: { direction: DOWNSTREAM, start: 0, count: 10 }\n      ) {\n        total\n        relationships {\n          type\n          entity {\n            urn\n            type\n          }\n        }\n      }\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Example Response:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "entities": [\n      {\n        "urn": "urn:li:dataJob:(urn:li:dataFlow:(airflow,dag_abc,PROD),task_123)",\n        "type": "DATA_JOB",\n        "jobId": "task_123",\n        "dataFlow": {\n          "flowId": "dag_abc"\n        },\n        "properties": {\n          "name": "User Creations"\n        },\n        "upstream": {\n          "total": 1,\n          "relationships": [\n            {\n              "type": "Consumes",\n              "entity": {\n                "urn": "urn:li:dataset:(urn:li:dataPlatform:hive,logging_events,PROD)",\n                "type": "DATASET"\n              }\n            }\n          ]\n        },\n        "downstream": {\n          "total": 2,\n          "relationships": [\n            {\n              "type": "DownstreamOf",\n              "entity": {\n                "urn": "urn:li:dataJob:(urn:li:dataFlow:(airflow,dag_abc,PROD),task_456)",\n                "type": "DATA_JOB"\n              }\n            },\n            {\n              "type": "Produces",\n              "entity": {\n                "urn": "urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_created,PROD)",\n                "type": "DATASET"\n              }\n            }\n          ]\n        }\n      },\n      {\n        "urn": "urn:li:dataJob:(urn:li:dataFlow:(airflow,dag_abc,PROD),task_456)",\n        "type": "DATA_JOB",\n        "jobId": "task_456",\n        "dataFlow": {\n          "flowId": "dag_abc"\n        },\n        "properties": {\n          "name": "User Deletions"\n        },\n        "upstream": {\n          "total": 2,\n          "relationships": [\n            {\n              "type": "DownstreamOf",\n              "entity": {\n                "urn": "urn:li:dataJob:(urn:li:dataFlow:(airflow,dag_abc,PROD),task_123)",\n                "type": "DATA_JOB"\n              }\n            },\n            {\n              "type": "Consumes",\n              "entity": {\n                "urn": "urn:li:dataset:(urn:li:dataPlatform:hive,logging_events,PROD)",\n                "type": "DATASET"\n              }\n            }\n          ]\n        },\n        "downstream": {\n          "total": 1,\n          "relationships": [\n            {\n              "type": "Produces",\n              "entity": {\n                "urn": "urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_deleted,PROD)",\n                "type": "DATASET"\n              }\n            }\n          ]\n        }\n      }\n    ]\n  },\n  "extensions": {}\n}\n')))}f.isMDXComponent=!0}}]);