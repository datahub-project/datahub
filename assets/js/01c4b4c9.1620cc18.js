"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[77449],{18378:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>g,default:()=>f,frontMatter:()=>d,metadata:()=>m,toc:()=>c});a(96540);var t=a(15680),l=a(53720),s=a(5400);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))})),e}function r(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}const d={sidebar_position:44,title:"MongoDB",slug:"/generated/ingestion/sources/mongodb",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/mongodb.md"},g="MongoDB",m={unversionedId:"docs/generated/ingestion/sources/mongodb",id:"docs/generated/ingestion/sources/mongodb",title:"MongoDB",description:"Certified",source:"@site/genDocs/docs/generated/ingestion/sources/mongodb.md",sourceDirName:"docs/generated/ingestion/sources",slug:"/generated/ingestion/sources/mongodb",permalink:"/docs/generated/ingestion/sources/mongodb",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/mongodb.md",tags:[],version:"current",sidebarPosition:44,frontMatter:{sidebar_position:44,title:"MongoDB",slug:"/generated/ingestion/sources/mongodb",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/mongodb.md"},sidebar:"overviewSidebar",previous:{title:"Mode",permalink:"/docs/generated/ingestion/sources/mode"},next:{title:"MySQL",permalink:"/docs/generated/ingestion/sources/mysql"}},p={},c=[{value:"Important Capabilities",id:"important-capabilities",level:3},{value:"CLI based Ingestion",id:"cli-based-ingestion",level:3},{value:"Starter Recipe",id:"starter-recipe",level:3},{value:"Config Details",id:"config-details",level:3},{value:"Code Coordinates",id:"code-coordinates",level:3}],y={toc:c},u="wrapper";function f(e){var{components:n}=e,a=r(e,["components"]);return(0,t.yg)(u,o(function(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{},t=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),t.forEach((function(n){i(e,n,a[n])}))}return e}({},y,a),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"mongodb"},"MongoDB"),(0,t.yg)("p",null,(0,t.yg)("img",{parentName:"p",src:"https://img.shields.io/badge/support%20status-certified-brightgreen",alt:"Certified"})),(0,t.yg)("h3",{id:"important-capabilities"},"Important Capabilities"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Capability"),(0,t.yg)("th",{parentName:"tr",align:null},"Status"),(0,t.yg)("th",{parentName:"tr",align:null},"Notes"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"Asset Containers"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2705"),(0,t.yg)("td",{parentName:"tr",align:null},"Enabled by default. Supported for types - Database.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"/docs/metadata-ingestion/docs/dev_guides/stateful#stale-entity-removal"},"Detect Deleted Entities")),(0,t.yg)("td",{parentName:"tr",align:null},"\u2705"),(0,t.yg)("td",{parentName:"tr",align:null},"Enabled by default via stateful ingestion.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"/docs/platform-instances"},"Platform Instance")),(0,t.yg)("td",{parentName:"tr",align:null},"\u2705"),(0,t.yg)("td",{parentName:"tr",align:null},"Enabled by default.")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"Schema Metadata"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2705"),(0,t.yg)("td",{parentName:"tr",align:null},"Enabled by default.")))),(0,t.yg)("p",null,"This plugin extracts the following:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Databases and associated metadata"),(0,t.yg)("li",{parentName:"ul"},"Collections in each database and schemas for each collection (via schema inference)")),(0,t.yg)("p",null,"By default, schema inference samples 1,000 documents from each collection. Setting ",(0,t.yg)("inlineCode",{parentName:"p"},"schemaSamplingSize: null")," will scan the entire collection.\nMoreover, setting ",(0,t.yg)("inlineCode",{parentName:"p"},"useRandomSampling: False")," will sample the first documents found without random selection, which may be faster for large collections."),(0,t.yg)("p",null,"Note that ",(0,t.yg)("inlineCode",{parentName:"p"},"schemaSamplingSize")," has no effect if ",(0,t.yg)("inlineCode",{parentName:"p"},"enableSchemaInference: False")," is set."),(0,t.yg)("p",null,"Really large schemas will be further truncated to a maximum of 300 schema fields. This is configurable using the ",(0,t.yg)("inlineCode",{parentName:"p"},"maxSchemaSize")," parameter."),(0,t.yg)("h3",{id:"cli-based-ingestion"},"CLI based Ingestion"),(0,t.yg)("h3",{id:"starter-recipe"},"Starter Recipe"),(0,t.yg)("p",null,"Check out the following recipe to get started with ingestion! See ",(0,t.yg)("a",{parentName:"p",href:"#config-details"},"below")," for full configuration options."),(0,t.yg)("p",null,"For general pointers on writing and running a recipe, see our ",(0,t.yg)("a",{parentName:"p",href:"/docs/metadata-ingestion#recipes"},"main recipe guide"),"."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'source:\n  type: "mongodb"\n  config:\n    # Coordinates\n    connect_uri: "mongodb://localhost"\n\n    # Credentials\n    username: admin\n    password: password\n    authMechanism: "DEFAULT"\n\n    # Options\n    enableSchemaInference: True\n    useRandomSampling: True\n    maxSchemaSize: 300\n\nsink:\n  # sink configs\n')),(0,t.yg)("h3",{id:"config-details"},"Config Details"),(0,t.yg)(l.A,{mdxType:"Tabs"},(0,t.yg)(s.A,{value:"options",label:"Options",default:!0,mdxType:"TabItem"},(0,t.yg)("p",null,"Note that a ",(0,t.yg)("inlineCode",{parentName:"p"},".")," is used to denote nested fields in the YAML recipe."),(0,t.yg)("div",{className:"config-table"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:"left"},"Field"),(0,t.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-main"},"authMechanism"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"One of string, null"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"MongoDB authentication mechanism. ",(0,t.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,t.yg)("span",{className:"default-value"},"None")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-main"},"connect_uri"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"string"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"MongoDB connection URI. ",(0,t.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,t.yg)("span",{className:"default-value"},"mongodb://localhost")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-main"},"enableSchemaInference"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"boolean"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"Whether to infer schemas.  ",(0,t.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,t.yg)("span",{className:"default-value"},"True")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-main"},"hostingEnvironment"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"One of Enum, null"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"Hosting environment of MongoDB, default is SELF_HOSTED, currently support ",(0,t.yg)("inlineCode",{parentName:"td"},"SELF_HOSTED"),", ",(0,t.yg)("inlineCode",{parentName:"td"},"ATLAS"),", ",(0,t.yg)("inlineCode",{parentName:"td"},"AWS_DOCUMENTDB")," ",(0,t.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,t.yg)("span",{className:"default-value"},"SELF","_","HOSTED")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-main"},"maxDocumentSize"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"One of integer, null"))),(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"default-line "},"Default: ",(0,t.yg)("span",{className:"default-value"},"16793600")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-main"},"maxSchemaSize"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"One of integer, null"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"Maximum number of fields to include in the schema. ",(0,t.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,t.yg)("span",{className:"default-value"},"300")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-main"},"options"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"object"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"Additional options to pass to ",(0,t.yg)("inlineCode",{parentName:"td"},"pymongo.MongoClient()"),". ",(0,t.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,t.yg)("span",{className:"default-value"},"{","}")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-main"},"password"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"One of string, null"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"MongoDB password. ",(0,t.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,t.yg)("span",{className:"default-value"},"None")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-main"},"platform_instance"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"One of string, null"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See ",(0,t.yg)("a",{parentName:"td",href:"https://docs.datahub.com/docs/platform-instances/"},"https://docs.datahub.com/docs/platform-instances/")," for more details. ",(0,t.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,t.yg)("span",{className:"default-value"},"None")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-main"},"schemaSamplingSize"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"One of integer, null"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"Number of documents to use when inferring schema size. If set to ",(0,t.yg)("inlineCode",{parentName:"td"},"null"),", all documents will be scanned. ",(0,t.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,t.yg)("span",{className:"default-value"},"1000")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-main"},"useRandomSampling"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"boolean"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"If documents for schema inference should be randomly selected. If ",(0,t.yg)("inlineCode",{parentName:"td"},"False"),", documents will be selected from start. ",(0,t.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,t.yg)("span",{className:"default-value"},"True")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-main"},"username"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"One of string, null"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"MongoDB username. ",(0,t.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,t.yg)("span",{className:"default-value"},"None")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-main"},"env"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"string"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"The environment that all assets produced by this connector belong to ",(0,t.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,t.yg)("span",{className:"default-value"},"PROD")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-main"},"collection_pattern"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"AllowDenyPattern"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"A class to store allow deny regexes")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-prefix"},"collection_pattern."),(0,t.yg)("span",{className:"path-main"},"ignoreCase"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"One of boolean, null"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"Whether to ignore case sensitivity during pattern matching. ",(0,t.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,t.yg)("span",{className:"default-value"},"True")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-main"},"database_pattern"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"AllowDenyPattern"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"A class to store allow deny regexes")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-prefix"},"database_pattern."),(0,t.yg)("span",{className:"path-main"},"ignoreCase"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"One of boolean, null"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"Whether to ignore case sensitivity during pattern matching. ",(0,t.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,t.yg)("span",{className:"default-value"},"True")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-main"},"stateful_ingestion"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"One of StatefulStaleMetadataRemovalConfig, null"))),(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"default-line "},"Default: ",(0,t.yg)("span",{className:"default-value"},"None")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-prefix"},"stateful_ingestion."),(0,t.yg)("span",{className:"path-main"},"enabled"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"boolean"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"Whether or not to enable stateful ingest. Default: True if a pipeline_name is set and either a datahub-rest sink or ",(0,t.yg)("inlineCode",{parentName:"td"},"datahub_api")," is specified, otherwise False ",(0,t.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,t.yg)("span",{className:"default-value"},"False")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-prefix"},"stateful_ingestion."),(0,t.yg)("span",{className:"path-main"},"fail_safe_threshold"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"number"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"Prevents large amount of soft deletes & the state from committing from accidental changes to the source configuration if the relative change percent in entities compared to the previous state is above the 'fail_safe_threshold'. ",(0,t.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,t.yg)("span",{className:"default-value"},"75.0")))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:"left"},(0,t.yg)("div",{className:"path-line"},(0,t.yg)("span",{className:"path-prefix"},"stateful_ingestion."),(0,t.yg)("span",{className:"path-main"},"remove_stale_metadata"))," ",(0,t.yg)("div",{className:"type-name-line"},(0,t.yg)("span",{className:"type-name"},"boolean"))),(0,t.yg)("td",{parentName:"tr",align:"left"},"Soft-deletes the entities present in the last successful run but missing in the current run with stateful_ingestion enabled. ",(0,t.yg)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,t.yg)("span",{className:"default-value"},"True")))))))),(0,t.yg)(s.A,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,t.yg)("p",null,"The ",(0,t.yg)("a",{parentName:"p",href:"https://json-schema.org/"},"JSONSchema")," for this configuration is inlined below."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "$defs": {\n    "AllowDenyPattern": {\n      "additionalProperties": false,\n      "description": "A class to store allow deny regexes",\n      "properties": {\n        "allow": {\n          "default": [\n            ".*"\n          ],\n          "description": "List of regex patterns to include in ingestion",\n          "items": {\n            "type": "string"\n          },\n          "title": "Allow",\n          "type": "array"\n        },\n        "deny": {\n          "default": [],\n          "description": "List of regex patterns to exclude from ingestion.",\n          "items": {\n            "type": "string"\n          },\n          "title": "Deny",\n          "type": "array"\n        },\n        "ignoreCase": {\n          "anyOf": [\n            {\n              "type": "boolean"\n            },\n            {\n              "type": "null"\n            }\n          ],\n          "default": true,\n          "description": "Whether to ignore case sensitivity during pattern matching.",\n          "title": "Ignorecase"\n        }\n      },\n      "title": "AllowDenyPattern",\n      "type": "object"\n    },\n    "HostingEnvironment": {\n      "enum": [\n        "SELF_HOSTED",\n        "ATLAS",\n        "AWS_DOCUMENTDB"\n      ],\n      "title": "HostingEnvironment",\n      "type": "string"\n    },\n    "StatefulStaleMetadataRemovalConfig": {\n      "additionalProperties": false,\n      "description": "Base specialized config for Stateful Ingestion with stale metadata removal capability.",\n      "properties": {\n        "enabled": {\n          "default": false,\n          "description": "Whether or not to enable stateful ingest. Default: True if a pipeline_name is set and either a datahub-rest sink or `datahub_api` is specified, otherwise False",\n          "title": "Enabled",\n          "type": "boolean"\n        },\n        "remove_stale_metadata": {\n          "default": true,\n          "description": "Soft-deletes the entities present in the last successful run but missing in the current run with stateful_ingestion enabled.",\n          "title": "Remove Stale Metadata",\n          "type": "boolean"\n        },\n        "fail_safe_threshold": {\n          "default": 75.0,\n          "description": "Prevents large amount of soft deletes & the state from committing from accidental changes to the source configuration if the relative change percent in entities compared to the previous state is above the \'fail_safe_threshold\'.",\n          "maximum": 100.0,\n          "minimum": 0.0,\n          "title": "Fail Safe Threshold",\n          "type": "number"\n        }\n      },\n      "title": "StatefulStaleMetadataRemovalConfig",\n      "type": "object"\n    }\n  },\n  "additionalProperties": false,\n  "properties": {\n    "stateful_ingestion": {\n      "anyOf": [\n        {\n          "$ref": "#/$defs/StatefulStaleMetadataRemovalConfig"\n        },\n        {\n          "type": "null"\n        }\n      ],\n      "default": null\n    },\n    "env": {\n      "default": "PROD",\n      "description": "The environment that all assets produced by this connector belong to",\n      "title": "Env",\n      "type": "string"\n    },\n    "platform_instance": {\n      "anyOf": [\n        {\n          "type": "string"\n        },\n        {\n          "type": "null"\n        }\n      ],\n      "default": null,\n      "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://docs.datahub.com/docs/platform-instances/ for more details.",\n      "title": "Platform Instance"\n    },\n    "connect_uri": {\n      "default": "mongodb://localhost",\n      "description": "MongoDB connection URI.",\n      "title": "Connect Uri",\n      "type": "string"\n    },\n    "username": {\n      "anyOf": [\n        {\n          "type": "string"\n        },\n        {\n          "type": "null"\n        }\n      ],\n      "default": null,\n      "description": "MongoDB username.",\n      "title": "Username"\n    },\n    "password": {\n      "anyOf": [\n        {\n          "type": "string"\n        },\n        {\n          "type": "null"\n        }\n      ],\n      "default": null,\n      "description": "MongoDB password.",\n      "title": "Password"\n    },\n    "authMechanism": {\n      "anyOf": [\n        {\n          "type": "string"\n        },\n        {\n          "type": "null"\n        }\n      ],\n      "default": null,\n      "description": "MongoDB authentication mechanism.",\n      "title": "Authmechanism"\n    },\n    "options": {\n      "additionalProperties": true,\n      "default": {},\n      "description": "Additional options to pass to `pymongo.MongoClient()`.",\n      "title": "Options",\n      "type": "object"\n    },\n    "enableSchemaInference": {\n      "default": true,\n      "description": "Whether to infer schemas. ",\n      "title": "Enableschemainference",\n      "type": "boolean"\n    },\n    "schemaSamplingSize": {\n      "anyOf": [\n        {\n          "exclusiveMinimum": 0,\n          "type": "integer"\n        },\n        {\n          "type": "null"\n        }\n      ],\n      "default": 1000,\n      "description": "Number of documents to use when inferring schema size. If set to `null`, all documents will be scanned.",\n      "title": "Schemasamplingsize"\n    },\n    "useRandomSampling": {\n      "default": true,\n      "description": "If documents for schema inference should be randomly selected. If `False`, documents will be selected from start.",\n      "title": "Userandomsampling",\n      "type": "boolean"\n    },\n    "maxSchemaSize": {\n      "anyOf": [\n        {\n          "exclusiveMinimum": 0,\n          "type": "integer"\n        },\n        {\n          "type": "null"\n        }\n      ],\n      "default": 300,\n      "description": "Maximum number of fields to include in the schema.",\n      "title": "Maxschemasize"\n    },\n    "maxDocumentSize": {\n      "anyOf": [\n        {\n          "exclusiveMinimum": 0,\n          "type": "integer"\n        },\n        {\n          "type": "null"\n        }\n      ],\n      "default": 16793600,\n      "description": "",\n      "title": "Maxdocumentsize"\n    },\n    "hostingEnvironment": {\n      "anyOf": [\n        {\n          "$ref": "#/$defs/HostingEnvironment"\n        },\n        {\n          "type": "null"\n        }\n      ],\n      "default": "SELF_HOSTED",\n      "description": "Hosting environment of MongoDB, default is SELF_HOSTED, currently support `SELF_HOSTED`, `ATLAS`, `AWS_DOCUMENTDB`"\n    },\n    "database_pattern": {\n      "$ref": "#/$defs/AllowDenyPattern",\n      "default": {\n        "allow": [\n          ".*"\n        ],\n        "deny": [],\n        "ignoreCase": true\n      },\n      "description": "regex patterns for databases to filter in ingestion."\n    },\n    "collection_pattern": {\n      "$ref": "#/$defs/AllowDenyPattern",\n      "default": {\n        "allow": [\n          ".*"\n        ],\n        "deny": [],\n        "ignoreCase": true\n      },\n      "description": "regex patterns for collections to filter in ingestion."\n    }\n  },\n  "title": "MongoDBConfig",\n  "type": "object"\n}\n')))),(0,t.yg)("h3",{id:"code-coordinates"},"Code Coordinates"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Class Name: ",(0,t.yg)("inlineCode",{parentName:"li"},"datahub.ingestion.source.mongodb.MongoDBSource")),(0,t.yg)("li",{parentName:"ul"},"Browse on ",(0,t.yg)("a",{parentName:"li",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/source/mongodb.py"},"GitHub"))),(0,t.yg)("h2",null,"Questions"),(0,t.yg)("p",null,"If you've got any questions on configuring ingestion for MongoDB, feel free to ping us on ",(0,t.yg)("a",{parentName:"p",href:"https://datahub.com/slack"},"our Slack"),"."))}f.isMDXComponent=!0}}]);