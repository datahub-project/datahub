"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[85460],{46741:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>m,default:()=>h,frontMatter:()=>p,metadata:()=>c,toc:()=>g});t(96540);var a=t(15680),r=t(53720),i=t(5400);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const p={sidebar_position:51,title:"Data Platform Instance",slug:"/generated/metamodel/entities/dataplatforminstance",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataPlatformInstance.md"},m="Data Platform Instance",c={unversionedId:"docs/generated/metamodel/entities/dataPlatformInstance",id:"docs/generated/metamodel/entities/dataPlatformInstance",title:"Data Platform Instance",description:'A Data Platform Instance represents a specific deployment or instance of a data platform. While a dataPlatform represents a technology type (e.g., MySQL, Snowflake, BigQuery), a dataPlatformInstance represents a particular running instance of that platform (e.g., "production-mysql-cluster", "dev-snowflake-account", "analytics-bigquery-project").',source:"@site/genDocs/docs/generated/metamodel/entities/dataPlatformInstance.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/dataplatforminstance",permalink:"/docs/generated/metamodel/entities/dataplatforminstance",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataPlatformInstance.md",tags:[],version:"current",sidebarPosition:51,frontMatter:{sidebar_position:51,title:"Data Platform Instance",slug:"/generated/metamodel/entities/dataplatforminstance",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataPlatformInstance.md"},sidebar:"overviewSidebar",previous:{title:"DataHubRetention",permalink:"/docs/generated/metamodel/entities/datahubretention"},next:{title:"Telemetry",permalink:"/docs/generated/metamodel/entities/telemetry"}},d={},g=[{value:"Identity",id:"identity",level:2},{value:"Examples",id:"examples",level:3},{value:"Important Capabilities",id:"important-capabilities",level:2},{value:"Platform Instance Properties",id:"platform-instance-properties",level:3},{value:"Iceberg Warehouse Configuration",id:"iceberg-warehouse-configuration",level:3},{value:"Ownership and Tags",id:"ownership-and-tags",level:3},{value:"Status and Deprecation",id:"status-and-deprecation",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"Creating a Platform Instance",id:"creating-a-platform-instance",level:3},{value:"Attaching Platform Instance to Datasets",id:"attaching-platform-instance-to-datasets",level:3},{value:"Querying Platform Instances",id:"querying-platform-instances",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"Relationship to Other Entities",id:"relationship-to-other-entities",level:3},{value:"Ingestion Framework Integration",id:"ingestion-framework-integration",level:3},{value:"Usage in Dataset Naming",id:"usage-in-dataset-naming",level:3},{value:"Iceberg Catalog Integration",id:"iceberg-catalog-integration",level:3},{value:"Notable Exceptions",id:"notable-exceptions",level:2},{value:"Internal vs. External Use",id:"internal-vs-external-use",level:3},{value:"Platform Instance vs. Environment",id:"platform-instance-vs-environment",level:3},{value:"Automatic Instance Creation",id:"automatic-instance-creation",level:3},{value:"Limited GraphQL Search",id:"limited-graphql-search",level:3},{value:"Immutable Key Components",id:"immutable-key-components",level:3},{value:"Technical Reference Guide",id:"technical-reference-guide",level:2},{value:"Reading the Field Tables",id:"reading-the-field-tables",level:3},{value:"Aspects",id:"aspects",level:3},{value:"dataPlatformInstanceProperties",id:"dataplatforminstanceproperties",level:4},{value:"ownership",id:"ownership",level:4},{value:"globalTags",id:"globaltags",level:4},{value:"institutionalMemory",id:"institutionalmemory",level:4},{value:"deprecation",id:"deprecation",level:4},{value:"status",id:"status",level:4},{value:"icebergWarehouseInfo",id:"icebergwarehouseinfo",level:4},{value:"Common Types",id:"common-types",level:3},{value:"AuditStamp",id:"auditstamp",level:4},{value:"Relationships",id:"relationships",level:3},{value:"Outgoing",id:"outgoing",level:4},{value:"Incoming",id:"incoming",level:4},{value:"Global Metadata Model",id:"global-metadata-model",level:3}],u={toc:g},y="wrapper";function h(e){var{components:n}=e,t=s(e,["components"]);return(0,a.yg)(y,o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){l(e,n,t[n])}))}return e}({},u,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"data-platform-instance"},"Data Platform Instance"),(0,a.yg)("p",null,"A Data Platform Instance represents a specific deployment or instance of a data platform. While a ",(0,a.yg)("a",{parentName:"p",href:"/docs/generated/metamodel/entities/dataplatform"},"dataPlatform"),' represents a technology type (e.g., MySQL, Snowflake, BigQuery), a dataPlatformInstance represents a particular running instance of that platform (e.g., "production-mysql-cluster", "dev-snowflake-account", "analytics-bigquery-project").'),(0,a.yg)("p",null,"This entity is crucial for organizations that run multiple instances of the same platform technology across different environments, regions, or organizational units. It enables DataHub to distinguish between assets from different platform instances and provides a way to organize and manage platform-level metadata and credentials."),(0,a.yg)("h2",{id:"identity"},"Identity"),(0,a.yg)("p",null,"Data Platform Instances are identified by two components:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Platform"),": The URN of the data platform technology (e.g., ",(0,a.yg)("inlineCode",{parentName:"li"},"urn:li:dataPlatform:snowflake"),")"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Instance"),': A unique string identifier for this specific instance (e.g., "prod-us-west-2", "dev-cluster-01")')),(0,a.yg)("p",null,"The complete URN follows the pattern:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"urn:li:dataPlatformInstance:(urn:li:dataPlatform:<platform>,<instance_id>)\n")),(0,a.yg)("h3",{id:"examples"},"Examples"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"urn:li:dataPlatformInstance:(urn:li:dataPlatform:mysql,production-mysql-01)"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"A production MySQL database cluster"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"urn:li:dataPlatformInstance:(urn:li:dataPlatform:snowflake,acme-prod-account)"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"A production Snowflake account"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"urn:li:dataPlatformInstance:(urn:li:dataPlatform:bigquery,analytics-project)"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"A BigQuery project used for analytics"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"urn:li:dataPlatformInstance:(urn:li:dataPlatform:iceberg,data-lake-warehouse)"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"An Iceberg warehouse instance")))),(0,a.yg)("h2",{id:"important-capabilities"},"Important Capabilities"),(0,a.yg)("h3",{id:"platform-instance-properties"},"Platform Instance Properties"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"dataPlatformInstanceProperties")," aspect contains descriptive metadata about the platform instance:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"name"),": A display-friendly name for the instance (searchable, supports autocomplete)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"description"),": Documentation explaining the purpose, usage, or characteristics of this instance"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"customProperties"),": Key-value pairs for additional custom metadata"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"externalUrl"),": A link to external documentation or management console for this instance")),(0,a.yg)("p",null,"This aspect helps users understand what each platform instance represents and how it should be used."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Create a platform instance with properties"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/platform_instance_create.py\n# metadata-ingestion/examples/library/platform_instance_create.py\nimport os\n\nimport datahub.emitter.mce_builder as builder\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import DataPlatformInstancePropertiesClass\n\n# Create the platform instance URN\nplatform_instance_urn = builder.make_dataplatform_instance_urn(\n    platform="mysql", instance="production-mysql-cluster"\n)\n\n# Define properties for the platform instance\nplatform_properties = DataPlatformInstancePropertiesClass(\n    name="Production MySQL Cluster",\n    description="Primary MySQL database cluster serving production workloads in US West region",\n    customProperties={\n        "region": "us-west-2",\n        "environment": "production",\n        "cluster_size": "3-node",\n        "version": "8.0.35",\n    },\n    externalUrl="https://cloud.mysql.com/console/clusters/prod-cluster",\n)\n\n# Create metadata change proposal\nplatform_instance_mcp = MetadataChangeProposalWrapper(\n    entityUrn=platform_instance_urn,\n    aspect=platform_properties,\n)\n\n# Emit metadata to DataHub\ngms_server = os.getenv("DATAHUB_GMS_URL", "http://localhost:8080")\ntoken = os.getenv("DATAHUB_GMS_TOKEN")\nemitter = DatahubRestEmitter(gms_server=gms_server, token=token)\nemitter.emit_mcp(platform_instance_mcp)\n\nprint(f"Created platform instance: {platform_instance_urn}")\n\n'))),(0,a.yg)("h3",{id:"iceberg-warehouse-configuration"},"Iceberg Warehouse Configuration"),(0,a.yg)("p",null,"DataHub can serve as an Iceberg catalog, managing Iceberg tables through platform instances. The ",(0,a.yg)("inlineCode",{parentName:"p"},"icebergWarehouseInfo")," aspect stores the configuration needed to manage an Iceberg warehouse:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"dataRoot"),": S3 path to the root location for table storage"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"clientId"),": URN reference to the AWS access key ID secret"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"clientSecret"),": URN reference to the AWS secret access key secret"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"region"),": AWS region where the warehouse is located"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"role"),": IAM role ARN used for credential vending"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"tempCredentialExpirationSeconds"),": Expiration time for temporary credentials"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"env"),": Environment/fabric type (PROD, DEV, QA, etc.)")),(0,a.yg)("p",null,"This enables DataHub to manage Iceberg tables as a REST catalog, handling metadata operations and credential vending for data access."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"datahub iceberg")," CLI provides commands to create, update, list, and delete Iceberg warehouses. See the ",(0,a.yg)("a",{parentName:"p",href:"https://datahubproject.io/docs/generated/ingestion/sources/iceberg"},"Iceberg integration documentation")," for details."),(0,a.yg)("h3",{id:"ownership-and-tags"},"Ownership and Tags"),(0,a.yg)("p",null,"Like other DataHub entities, platform instances support:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"ownership"),": Track who owns or manages this platform instance"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"globalTags"),': Apply tags for categorization (e.g., "production", "pci-compliant", "deprecated")'),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"institutionalMemory"),": Add links to runbooks, documentation, or related resources")),(0,a.yg)("p",null,"These aspects enable governance and discoverability of platform instances."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Add metadata to a platform instance"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/platform_instance_add_metadata.py\n# metadata-ingestion/examples/library/platform_instance_add_metadata.py\nimport time\n\nimport datahub.emitter.mce_builder as builder\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import (\n    AuditStampClass,\n    GlobalTagsClass,\n    InstitutionalMemoryClass,\n    InstitutionalMemoryMetadataClass,\n    OwnerClass,\n    OwnershipClass,\n    OwnershipTypeClass,\n    TagAssociationClass,\n)\n\n# Create the platform instance URN\nplatform_instance_urn = builder.make_dataplatform_instance_urn(\n    platform="snowflake", instance="acme-prod-account"\n)\n\n# Add ownership\nowners = [\n    OwnerClass(\n        owner=builder.make_user_urn("data-platform-team"),\n        type=OwnershipTypeClass.TECHNICAL_OWNER,\n    ),\n    OwnerClass(\n        owner=builder.make_user_urn("john.doe"),\n        type=OwnershipTypeClass.DATAOWNER,\n    ),\n]\n\nownership_mcp = MetadataChangeProposalWrapper(\n    entityUrn=platform_instance_urn,\n    aspect=OwnershipClass(owners=owners),\n)\n\n# Add tags\ntags = GlobalTagsClass(\n    tags=[\n        TagAssociationClass(tag=builder.make_tag_urn("production")),\n        TagAssociationClass(tag=builder.make_tag_urn("pci-compliant")),\n        TagAssociationClass(tag=builder.make_tag_urn("tier-1")),\n    ]\n)\n\ntags_mcp = MetadataChangeProposalWrapper(\n    entityUrn=platform_instance_urn,\n    aspect=tags,\n)\n\n# Add institutional memory (links)\nlinks = InstitutionalMemoryClass(\n    elements=[\n        InstitutionalMemoryMetadataClass(\n            url="https://wiki.company.com/snowflake-prod-runbook",\n            description="Production Snowflake Runbook",\n            createStamp=AuditStampClass(\n                time=int(time.time() * 1000), actor=builder.make_user_urn("datahub")\n            ),\n        ),\n        InstitutionalMemoryMetadataClass(\n            url="https://wiki.company.com/snowflake-access-guide",\n            description="How to request access to production Snowflake",\n            createStamp=AuditStampClass(\n                time=int(time.time() * 1000), actor=builder.make_user_urn("datahub")\n            ),\n        ),\n    ]\n)\n\nlinks_mcp = MetadataChangeProposalWrapper(\n    entityUrn=platform_instance_urn,\n    aspect=links,\n)\n\n# Emit all metadata changes\nemitter = DatahubRestEmitter("http://localhost:8080")\nemitter.emit_mcp(ownership_mcp)\nemitter.emit_mcp(tags_mcp)\nemitter.emit_mcp(links_mcp)\n\nprint(f"Added ownership, tags, and links to: {platform_instance_urn}")\n\n'))),(0,a.yg)("h3",{id:"status-and-deprecation"},"Status and Deprecation"),(0,a.yg)("p",null,"Platform instances can be marked with status information:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"status"),": Indicates if the instance is active or has been removed"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"deprecation"),": Mark instances as deprecated when they are being phased out, with optional decommission date and migration notes")),(0,a.yg)("p",null,"This helps communicate lifecycle information about platform instances to users."),(0,a.yg)("h2",{id:"code-examples"},"Code Examples"),(0,a.yg)("h3",{id:"creating-a-platform-instance"},"Creating a Platform Instance"),(0,a.yg)("p",null,"The most common way to create platform instances is through the ingestion framework, which automatically creates them when the ",(0,a.yg)("inlineCode",{parentName:"p"},"platform_instance")," configuration is specified in source configs. However, you can also create them programmatically:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Create a data platform instance"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/platform_instance_create.py\n# metadata-ingestion/examples/library/platform_instance_create.py\nimport os\n\nimport datahub.emitter.mce_builder as builder\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import DataPlatformInstancePropertiesClass\n\n# Create the platform instance URN\nplatform_instance_urn = builder.make_dataplatform_instance_urn(\n    platform="mysql", instance="production-mysql-cluster"\n)\n\n# Define properties for the platform instance\nplatform_properties = DataPlatformInstancePropertiesClass(\n    name="Production MySQL Cluster",\n    description="Primary MySQL database cluster serving production workloads in US West region",\n    customProperties={\n        "region": "us-west-2",\n        "environment": "production",\n        "cluster_size": "3-node",\n        "version": "8.0.35",\n    },\n    externalUrl="https://cloud.mysql.com/console/clusters/prod-cluster",\n)\n\n# Create metadata change proposal\nplatform_instance_mcp = MetadataChangeProposalWrapper(\n    entityUrn=platform_instance_urn,\n    aspect=platform_properties,\n)\n\n# Emit metadata to DataHub\ngms_server = os.getenv("DATAHUB_GMS_URL", "http://localhost:8080")\ntoken = os.getenv("DATAHUB_GMS_TOKEN")\nemitter = DatahubRestEmitter(gms_server=gms_server, token=token)\nemitter.emit_mcp(platform_instance_mcp)\n\nprint(f"Created platform instance: {platform_instance_urn}")\n\n'))),(0,a.yg)("h3",{id:"attaching-platform-instance-to-datasets"},"Attaching Platform Instance to Datasets"),(0,a.yg)("p",null,"When ingesting metadata, the ",(0,a.yg)("inlineCode",{parentName:"p"},"dataPlatformInstance")," aspect links datasets to their platform instance. This is typically done by ingestion connectors but can also be done manually:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Attach platform instance to a dataset"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/dataset_attach_platform_instance.py\nfrom datahub.sdk import DataHubClient, DatasetUrn\n\nclient = DataHubClient.from_env()\n\ndataset = client.entities.get(\n    DatasetUrn(\n        platform="mysql",\n        name="production-mysql-cluster.ecommerce.customers",\n        env="PROD",\n    )\n)\n\ndataset._set_platform_instance(platform="mysql", instance="production-mysql-cluster")\n\nclient.entities.update(dataset)\n\nprint("Attached platform instance \'production-mysql-cluster\'")\nprint(f"to dataset {dataset.urn}")\n\n'))),(0,a.yg)("h3",{id:"querying-platform-instances"},"Querying Platform Instances"),(0,a.yg)("p",null,"You can retrieve platform instance information using the REST API or GraphQL:"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Python SDK: Query platform instance via REST API"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/platform_instance_query.py\n# metadata-ingestion/examples/library/platform_instance_query.py\nimport json\nimport os\n\nimport datahub.emitter.mce_builder as builder\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\n\n# Create a DataHub graph client\ngms_server = os.getenv("DATAHUB_GMS_URL", "http://localhost:8080")\ntoken = os.getenv("DATAHUB_GMS_TOKEN")\nconfig = DatahubClientConfig(server=gms_server, token=token)\ngraph = DataHubGraph(config)\n\n# Create the platform instance URN\nplatform_instance_urn = builder.make_dataplatform_instance_urn(\n    platform="mysql", instance="production-mysql-cluster"\n)\n\n# Check if the platform instance exists\nif graph.exists(platform_instance_urn):\n    print(f"Platform instance exists: {platform_instance_urn}\\n")\n\n    # Get the full entity with all aspects\n    entity = graph.get_entity_semityped(platform_instance_urn)\n\n    # Access the key aspect to get platform and instance ID\n    if "dataPlatformInstanceKey" in entity:\n        key_aspect = entity["dataPlatformInstanceKey"]\n        print(f"Platform: {key_aspect.platform}")\n        print(f"Instance ID: {key_aspect.instance}\\n")\n\n    # Access properties\n    if "dataPlatformInstanceProperties" in entity:\n        props = entity["dataPlatformInstanceProperties"]\n        print(f"Name: {props.name}")\n        print(f"Description: {props.description}")\n        if props.customProperties:\n            print("Custom Properties:")\n            for key, value in props.customProperties.items():\n                print(f"  {key}: {value}")\n        if props.externalUrl:\n            print(f"External URL: {props.externalUrl}")\n        print()\n\n    # Access ownership\n    if "ownership" in entity:\n        ownership = entity["ownership"]\n        print("Owners:")\n        for owner in ownership.owners:\n            print(f"  - {owner.owner} ({owner.type})")\n        print()\n\n    # Access tags\n    if "globalTags" in entity:\n        global_tags = entity["globalTags"]\n        print("Tags:")\n        for tag_association in global_tags.tags:\n            print(f"  - {tag_association.tag}")\n        print()\n\n    # Access institutional memory (links)\n    if "institutionalMemory" in entity:\n        institutional_memory = entity["institutionalMemory"]\n        print("Links:")\n        for element in institutional_memory.elements:\n            print(f"  - {element.description}: {element.url}")\n        print()\n\n    # Get raw aspects using REST API for complete data\n    raw_entity = graph.get_entity_raw(\n        entity_urn=platform_instance_urn,\n        aspects=[\n            "dataPlatformInstanceKey",\n            "dataPlatformInstanceProperties",\n            "ownership",\n            "globalTags",\n            "institutionalMemory",\n            "deprecation",\n            "status",\n        ],\n    )\n\n    print("Raw entity data:")\n    print(json.dumps(raw_entity, indent=2))\n\nelse:\n    print(f"Platform instance does not exist: {platform_instance_urn}")\n\n'))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"REST API: Fetch platform instance entity"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"curl 'http://localhost:8080/entities/urn%3Ali%3AdataPlatformInstance%3A(urn%3Ali%3AdataPlatform%3Amysql%2Cproduction-cluster)'\n"))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"GraphQL: Search for Iceberg warehouses"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'query {\n  search(\n    input: {\n      type: DATA_PLATFORM_INSTANCE\n      query: "dataPlatform:iceberg"\n      start: 0\n      count: 10\n    }\n  ) {\n    searchResults {\n      entity {\n        ... on DataPlatformInstance {\n          urn\n          platform {\n            name\n          }\n          instanceId\n          properties {\n            name\n            description\n          }\n        }\n      }\n    }\n  }\n}\n'))),(0,a.yg)("h2",{id:"integration-points"},"Integration Points"),(0,a.yg)("h3",{id:"relationship-to-other-entities"},"Relationship to Other Entities"),(0,a.yg)("p",null,"Platform instances are referenced by many entities through the ",(0,a.yg)("inlineCode",{parentName:"p"},"dataPlatformInstance")," aspect:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Datasets"),": Associate datasets with their platform instance, enabling filtering and organization by instance"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Charts"),": BI tool charts can be linked to the specific instance they query"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Dashboards"),": Dashboards are associated with platform instances"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Data Jobs"),": ETL/pipeline jobs reference the platform instance they run on"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Data Flows"),": Pipeline definitions can be associated with platform instances"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"ML Models"),": Models can track which platform instance they were trained on"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Containers"),": Database schemas, folders, and other containers reference their instance"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Assertions"),": Data quality assertions can be scoped to specific instances")),(0,a.yg)("p",null,"This creates a powerful organizational dimension across all data assets."),(0,a.yg)("h3",{id:"ingestion-framework-integration"},"Ingestion Framework Integration"),(0,a.yg)("p",null,"Most DataHub ingestion sources support a ",(0,a.yg)("inlineCode",{parentName:"p"},"platform_instance")," configuration parameter. When specified, the connector automatically attaches the platform instance to all ingested entities:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},'source:\n  type: mysql\n  config:\n    host_port: "mysql.prod.company.com:3306"\n    platform_instance: "production-mysql-cluster"\n    # ... other config\n')),(0,a.yg)("p",null,"The platform instance is then used to:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Distinguish assets from different instances of the same platform"),(0,a.yg)("li",{parentName:"ul"},"Enable instance-level filtering in the UI"),(0,a.yg)("li",{parentName:"ul"},"Support multi-tenant or multi-region deployments"),(0,a.yg)("li",{parentName:"ul"},"Organize metadata by deployment environment")),(0,a.yg)("h3",{id:"usage-in-dataset-naming"},"Usage in Dataset Naming"),(0,a.yg)("p",null,"For platforms that support multiple instances, the platform instance is often incorporated into dataset names to ensure uniqueness. For example:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Without instance: ",(0,a.yg)("inlineCode",{parentName:"li"},"urn:li:dataset:(urn:li:dataPlatform:mysql,db.schema.table,PROD)")),(0,a.yg)("li",{parentName:"ul"},"With instance: ",(0,a.yg)("inlineCode",{parentName:"li"},"urn:li:dataset:(urn:li:dataPlatform:mysql,prod-cluster.db.schema.table,PROD)"))),(0,a.yg)("p",null,"This ensures that tables with the same name across different instances have distinct URNs."),(0,a.yg)("h3",{id:"iceberg-catalog-integration"},"Iceberg Catalog Integration"),(0,a.yg)("p",null,"When DataHub serves as an Iceberg REST catalog, platform instances represent Iceberg warehouses. Each warehouse configuration includes:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Storage credentials for S3 access"),(0,a.yg)("li",{parentName:"ul"},"IAM role configuration for credential vending"),(0,a.yg)("li",{parentName:"ul"},"Warehouse root location in object storage"),(0,a.yg)("li",{parentName:"ul"},"Environment designation")),(0,a.yg)("p",null,"DataHub manages the lifecycle of Iceberg tables within these warehouses, handling:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Table creation and metadata storage"),(0,a.yg)("li",{parentName:"ul"},"Temporary credential generation for read/write access"),(0,a.yg)("li",{parentName:"ul"},"Table discovery and lineage tracking"),(0,a.yg)("li",{parentName:"ul"},"Schema evolution")),(0,a.yg)("p",null,"See the ",(0,a.yg)("inlineCode",{parentName:"p"},"datahub iceberg")," CLI commands for managing Iceberg warehouses as platform instances."),(0,a.yg)("h2",{id:"notable-exceptions"},"Notable Exceptions"),(0,a.yg)("h3",{id:"internal-vs-external-use"},"Internal vs. External Use"),(0,a.yg)("p",null,'Data Platform Instances are categorized as "internal" entities in DataHub\'s entity registry, meaning they are primarily used for organization and metadata management rather than being primary discovery targets. Users typically interact with datasets, dashboards, and other assets rather than directly browsing platform instances.'),(0,a.yg)("p",null,"However, platform instances are searchable and can be viewed in the DataHub UI when investigating asset organization or platform-level configurations."),(0,a.yg)("h3",{id:"platform-instance-vs-environment"},"Platform Instance vs. Environment"),(0,a.yg)("p",null,"Platform instances are distinct from the environment/fabric concept used in entity URNs (PROD, DEV, QA, etc.). While environment is a required part of many entity identifiers, platform instance is optional and provides a finer-grained organizational dimension."),(0,a.yg)("p",null,'A single platform instance typically corresponds to one environment, but you can have multiple instances within the same environment (e.g., "prod-us-west", "prod-us-east", "prod-eu-central" all in PROD environment).'),(0,a.yg)("h3",{id:"automatic-instance-creation"},"Automatic Instance Creation"),(0,a.yg)("p",null,"Platform instances are typically created implicitly during ingestion rather than being explicitly defined beforehand. When an ingestion source references a platform instance that doesn't exist, DataHub will automatically create a basic platform instance entity. You can then enrich it with additional metadata like properties, ownership, and tags."),(0,a.yg)("h3",{id:"limited-graphql-search"},"Limited GraphQL Search"),(0,a.yg)("p",null,"Unlike primary entities like datasets and dashboards, platform instances have limited search functionality in GraphQL. The ",(0,a.yg)("inlineCode",{parentName:"p"},"search")," query with ",(0,a.yg)("inlineCode",{parentName:"p"},"type: DATA_PLATFORM_INSTANCE")," is supported, but some advanced search features may not be fully implemented. REST API access provides full functionality."),(0,a.yg)("h3",{id:"immutable-key-components"},"Immutable Key Components"),(0,a.yg)("p",null,"Once created, a platform instance's key components (platform URN and instance ID) cannot be changed. If you need to rename an instance, you must create a new platform instance entity and migrate references from the old one."),(0,a.yg)("h2",{id:"technical-reference-guide"},"Technical Reference Guide"),(0,a.yg)("p",null,"The sections above provide an overview of how to use this entity. The following sections provide detailed technical information about how metadata is stored and represented in DataHub."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Aspects")," are the individual pieces of metadata that can be attached to an entity. Each aspect contains specific information (like ownership, tags, or properties) and is stored as a separate record, allowing for flexible and incremental metadata updates."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Relationships")," show how this entity connects to other entities in the metadata graph. These connections are derived from the fields within each aspect and form the foundation of DataHub's knowledge graph."),(0,a.yg)("h3",{id:"reading-the-field-tables"},"Reading the Field Tables"),(0,a.yg)("p",null,"Each aspect's field table includes an ",(0,a.yg)("strong",{parentName:"p"},"Annotations")," column that provides additional metadata about how fields are used:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"\u26a0\ufe0f Deprecated"),": This field is deprecated and may be removed in a future version. Check the description for the recommended alternative"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Searchable"),": This field is indexed and can be searched in DataHub's search interface"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Searchable (fieldname)"),": When the field name in parentheses is shown, it indicates the field is indexed under a different name in the search index. For example, ",(0,a.yg)("inlineCode",{parentName:"li"},"dashboardTool")," is indexed as ",(0,a.yg)("inlineCode",{parentName:"li"},"tool")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"\u2192 RelationshipName"),": This field creates a relationship to another entity. The arrow indicates this field contains a reference (URN) to another entity, and the name indicates the type of relationship (e.g., ",(0,a.yg)("inlineCode",{parentName:"li"},"\u2192 Contains"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"\u2192 OwnedBy"),")")),(0,a.yg)("p",null,"Fields with complex types (like ",(0,a.yg)("inlineCode",{parentName:"p"},"Edge"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"AuditStamp"),") link to their definitions in the ",(0,a.yg)("a",{parentName:"p",href:"#common-types"},"Common Types")," section below."),(0,a.yg)("h3",{id:"aspects"},"Aspects"),(0,a.yg)("h4",{id:"dataplatforminstanceproperties"},"dataPlatformInstanceProperties"),(0,a.yg)("p",null,"Properties associated with a Data Platform Instance"),(0,a.yg)(r.A,{mdxType:"Tabs"},(0,a.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Field"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Required"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"customProperties"),(0,a.yg)("td",{parentName:"tr",align:null},"map"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Custom property bag."),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"externalUrl"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null},"URL where the reference exist"),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"name"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null},"Display name of the Data Platform Instance"),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"description"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null},"Documentation of the Data Platform Instance"),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,a.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "dataPlatformInstanceProperties"\n  },\n  "name": "DataPlatformInstanceProperties",\n  "namespace": "com.linkedin.dataplatforminstance",\n  "fields": [\n    {\n      "Searchable": {\n        "/*": {\n          "fieldType": "TEXT",\n          "queryByDefault": true\n        }\n      },\n      "type": {\n        "type": "map",\n        "values": "string"\n      },\n      "name": "customProperties",\n      "default": {},\n      "doc": "Custom property bag."\n    },\n    {\n      "Searchable": {\n        "fieldType": "KEYWORD"\n      },\n      "java": {\n        "class": "com.linkedin.common.url.Url",\n        "coercerClass": "com.linkedin.common.url.UrlCoercer"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "externalUrl",\n      "default": null,\n      "doc": "URL where the reference exist"\n    },\n    {\n      "Searchable": {\n        "boostScore": 10.0,\n        "enableAutocomplete": true,\n        "fieldNameAliases": [\n          "_entityName"\n        ],\n        "fieldType": "WORD_GRAM"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "name",\n      "default": null,\n      "doc": "Display name of the Data Platform Instance"\n    },\n    {\n      "Searchable": {\n        "fieldType": "TEXT",\n        "hasValuesFieldName": "hasDescription"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "description",\n      "default": null,\n      "doc": "Documentation of the Data Platform Instance"\n    }\n  ],\n  "doc": "Properties associated with a Data Platform Instance"\n}\n')))),(0,a.yg)("h4",{id:"ownership"},"ownership"),(0,a.yg)("p",null,"Ownership information of an entity."),(0,a.yg)(r.A,{mdxType:"Tabs"},(0,a.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Field"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Required"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"owners"),(0,a.yg)("td",{parentName:"tr",align:null},"Owner[]"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"List of owners of the entity."),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"ownerTypes"),(0,a.yg)("td",{parentName:"tr",align:null},"map"),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null},"Ownership type to Owners map, populated via mutation hook."),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"lastModified"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"#auditstamp"},"AuditStamp")),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Audit stamp containing who last modified the record and when. A value of 0 in the time field indi..."),(0,a.yg)("td",{parentName:"tr",align:null}))))),(0,a.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "ownership"\n  },\n  "name": "Ownership",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "Owner",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "Relationship": {\n                "entityTypes": [\n                  "corpuser",\n                  "corpGroup"\n                ],\n                "name": "OwnedBy"\n              },\n              "Searchable": {\n                "addToFilters": true,\n                "fieldName": "owners",\n                "fieldType": "URN",\n                "filterNameOverride": "Owned By",\n                "hasValuesFieldName": "hasOwners",\n                "queryByDefault": false\n              },\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "owner",\n              "doc": "Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name\\n(Caveat: only corpuser is currently supported in the frontend.)"\n            },\n            {\n              "deprecated": true,\n              "type": {\n                "type": "enum",\n                "symbolDocs": {\n                  "BUSINESS_OWNER": "A person or group who is responsible for logical, or business related, aspects of the asset.",\n                  "CONSUMER": "A person, group, or service that consumes the data\\nDeprecated! Use TECHNICAL_OWNER or BUSINESS_OWNER instead.",\n                  "CUSTOM": "Set when ownership type is unknown or a when new one is specified as an ownership type entity for which we have no\\nenum value for. This is used for backwards compatibility",\n                  "DATAOWNER": "A person or group that is owning the data\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "DATA_STEWARD": "A steward, expert, or delegate responsible for the asset.",\n                  "DELEGATE": "A person or a group that overseas the operation, e.g. a DBA or SRE.\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "DEVELOPER": "A person or group that is in charge of developing the code\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "NONE": "No specific type associated to the owner.",\n                  "PRODUCER": "A person, group, or service that produces/generates the data\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "STAKEHOLDER": "A person or a group that has direct business interest\\nDeprecated! Use TECHNICAL_OWNER, BUSINESS_OWNER, or STEWARD instead.",\n                  "TECHNICAL_OWNER": "person or group who is responsible for technical aspects of the asset."\n                },\n                "deprecatedSymbols": {\n                  "CONSUMER": true,\n                  "DATAOWNER": true,\n                  "DELEGATE": true,\n                  "DEVELOPER": true,\n                  "PRODUCER": true,\n                  "STAKEHOLDER": true\n                },\n                "name": "OwnershipType",\n                "namespace": "com.linkedin.common",\n                "symbols": [\n                  "CUSTOM",\n                  "TECHNICAL_OWNER",\n                  "BUSINESS_OWNER",\n                  "DATA_STEWARD",\n                  "NONE",\n                  "DEVELOPER",\n                  "DATAOWNER",\n                  "DELEGATE",\n                  "PRODUCER",\n                  "CONSUMER",\n                  "STAKEHOLDER"\n                ],\n                "doc": "Asset owner types"\n              },\n              "name": "type",\n              "doc": "The type of the ownership"\n            },\n            {\n              "Relationship": {\n                "entityTypes": [\n                  "ownershipType"\n                ],\n                "name": "ownershipType"\n              },\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "typeUrn",\n              "default": null,\n              "doc": "The type of the ownership\\nUrn of type O"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "OwnershipSource",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": {\n                        "type": "enum",\n                        "symbolDocs": {\n                          "AUDIT": "Auditing system or audit logs",\n                          "DATABASE": "Database, e.g. GRANTS table",\n                          "FILE_SYSTEM": "File system, e.g. file/directory owner",\n                          "ISSUE_TRACKING_SYSTEM": "Issue tracking system, e.g. Jira",\n                          "MANUAL": "Manually provided by a user",\n                          "OTHER": "Other sources",\n                          "SERVICE": "Other ownership-like service, e.g. Nuage, ACL service etc",\n                          "SOURCE_CONTROL": "SCM system, e.g. GIT, SVN"\n                        },\n                        "name": "OwnershipSourceType",\n                        "namespace": "com.linkedin.common",\n                        "symbols": [\n                          "AUDIT",\n                          "DATABASE",\n                          "FILE_SYSTEM",\n                          "ISSUE_TRACKING_SYSTEM",\n                          "MANUAL",\n                          "SERVICE",\n                          "SOURCE_CONTROL",\n                          "OTHER"\n                        ]\n                      },\n                      "name": "type",\n                      "doc": "The type of the source"\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "url",\n                      "default": null,\n                      "doc": "A reference URL for the source"\n                    }\n                  ],\n                  "doc": "Source/provider of the ownership information"\n                }\n              ],\n              "name": "source",\n              "default": null,\n              "doc": "Source information for the ownership"\n            },\n            {\n              "Searchable": {\n                "/actor": {\n                  "fieldName": "ownerAttributionActors",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/source": {\n                  "fieldName": "ownerAttributionSources",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/time": {\n                  "fieldName": "ownerAttributionDates",\n                  "fieldType": "DATETIME",\n                  "queryByDefault": false\n                }\n              },\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "MetadataAttribution",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When this metadata was updated."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) responsible for applying the assocated metadata. This can\\neither be a user (in case of UI edits) or the datahub system for automation."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "source",\n                      "default": null,\n                      "doc": "The DataHub source responsible for applying the associated metadata. This will only be filled out\\nwhen a DataHub source is responsible. This includes the specific metadata test urn, the automation urn."\n                    },\n                    {\n                      "type": {\n                        "type": "map",\n                        "values": "string"\n                      },\n                      "name": "sourceDetail",\n                      "default": {},\n                      "doc": "The details associated with why this metadata was applied. For example, this could include\\nthe actual regex rule, sql statement, ingestion pipeline ID, etc."\n                    }\n                  ],\n                  "doc": "Information about who, why, and how this metadata was applied"\n                }\n              ],\n              "name": "attribution",\n              "default": null,\n              "doc": "Information about who, why, and how this metadata was applied"\n            }\n          ],\n          "doc": "Ownership information"\n        }\n      },\n      "name": "owners",\n      "doc": "List of owners of the entity."\n    },\n    {\n      "Searchable": {\n        "/*": {\n          "fieldType": "MAP_ARRAY",\n          "queryByDefault": false\n        }\n      },\n      "type": [\n        {\n          "type": "map",\n          "values": {\n            "type": "array",\n            "items": "string"\n          }\n        },\n        "null"\n      ],\n      "name": "ownerTypes",\n      "default": {},\n      "doc": "Ownership type to Owners map, populated via mutation hook."\n    },\n    {\n      "type": {\n        "type": "record",\n        "name": "AuditStamp",\n        "namespace": "com.linkedin.common",\n        "fields": [\n          {\n            "type": "long",\n            "name": "time",\n            "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": "string",\n            "name": "actor",\n            "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "impersonator",\n            "default": null,\n            "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n          },\n          {\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "message",\n            "default": null,\n            "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n          }\n        ],\n        "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n      },\n      "name": "lastModified",\n      "default": {\n        "actor": "urn:li:corpuser:unknown",\n        "impersonator": null,\n        "time": 0,\n        "message": null\n      },\n      "doc": "Audit stamp containing who last modified the record and when. A value of 0 in the time field indicates missing data."\n    }\n  ],\n  "doc": "Ownership information of an entity."\n}\n')))),(0,a.yg)("h4",{id:"globaltags"},"globalTags"),(0,a.yg)("p",null,"Tag aspect used for applying tags to an entity"),(0,a.yg)(r.A,{mdxType:"Tabs"},(0,a.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Field"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Required"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"tags"),(0,a.yg)("td",{parentName:"tr",align:null},"TagAssociation[]"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Tags associated with a given entity"),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 TaggedWith"))))),(0,a.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "globalTags"\n  },\n  "name": "GlobalTags",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Relationship": {\n        "/*/tag": {\n          "entityTypes": [\n            "tag"\n          ],\n          "name": "TaggedWith"\n        }\n      },\n      "Searchable": {\n        "/*/tag": {\n          "addToFilters": true,\n          "boostScore": 0.5,\n          "fieldName": "tags",\n          "fieldType": "URN",\n          "filterNameOverride": "Tag",\n          "hasValuesFieldName": "hasTags",\n          "queryByDefault": true\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "TagAssociation",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.TagUrn"\n              },\n              "type": "string",\n              "name": "tag",\n              "doc": "Urn of the applied tag"\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "context",\n              "default": null,\n              "doc": "Additional context about the association"\n            },\n            {\n              "Searchable": {\n                "/actor": {\n                  "fieldName": "tagAttributionActors",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/source": {\n                  "fieldName": "tagAttributionSources",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/time": {\n                  "fieldName": "tagAttributionDates",\n                  "fieldType": "DATETIME",\n                  "queryByDefault": false\n                }\n              },\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "MetadataAttribution",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When this metadata was updated."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) responsible for applying the assocated metadata. This can\\neither be a user (in case of UI edits) or the datahub system for automation."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "source",\n                      "default": null,\n                      "doc": "The DataHub source responsible for applying the associated metadata. This will only be filled out\\nwhen a DataHub source is responsible. This includes the specific metadata test urn, the automation urn."\n                    },\n                    {\n                      "type": {\n                        "type": "map",\n                        "values": "string"\n                      },\n                      "name": "sourceDetail",\n                      "default": {},\n                      "doc": "The details associated with why this metadata was applied. For example, this could include\\nthe actual regex rule, sql statement, ingestion pipeline ID, etc."\n                    }\n                  ],\n                  "doc": "Information about who, why, and how this metadata was applied"\n                }\n              ],\n              "name": "attribution",\n              "default": null,\n              "doc": "Information about who, why, and how this metadata was applied"\n            }\n          ],\n          "doc": "Properties of an applied tag. For now, just an Urn. In the future we can extend this with other properties, e.g.\\npropagation parameters."\n        }\n      },\n      "name": "tags",\n      "doc": "Tags associated with a given entity"\n    }\n  ],\n  "doc": "Tag aspect used for applying tags to an entity"\n}\n')))),(0,a.yg)("h4",{id:"institutionalmemory"},"institutionalMemory"),(0,a.yg)("p",null,"Institutional memory of an entity. This is a way to link to relevant documentation and provide description of the documentation. Institutional or tribal knowledge is very important for users to leverage the entity."),(0,a.yg)(r.A,{mdxType:"Tabs"},(0,a.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Field"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Required"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"elements"),(0,a.yg)("td",{parentName:"tr",align:null},"InstitutionalMemoryMetadata[]"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"List of records that represent institutional memory of an entity. Each record consists of a link,..."),(0,a.yg)("td",{parentName:"tr",align:null}))))),(0,a.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "institutionalMemory"\n  },\n  "name": "InstitutionalMemory",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "InstitutionalMemoryMetadata",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.url.Url",\n                "coercerClass": "com.linkedin.common.url.UrlCoercer"\n              },\n              "type": "string",\n              "name": "url",\n              "doc": "Link to an engineering design document or a wiki page."\n            },\n            {\n              "type": "string",\n              "name": "description",\n              "doc": "Description of the link."\n            },\n            {\n              "type": {\n                "type": "record",\n                "name": "AuditStamp",\n                "namespace": "com.linkedin.common",\n                "fields": [\n                  {\n                    "type": "long",\n                    "name": "time",\n                    "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n                  },\n                  {\n                    "java": {\n                      "class": "com.linkedin.common.urn.Urn"\n                    },\n                    "type": "string",\n                    "name": "actor",\n                    "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n                  },\n                  {\n                    "java": {\n                      "class": "com.linkedin.common.urn.Urn"\n                    },\n                    "type": [\n                      "null",\n                      "string"\n                    ],\n                    "name": "impersonator",\n                    "default": null,\n                    "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n                  },\n                  {\n                    "type": [\n                      "null",\n                      "string"\n                    ],\n                    "name": "message",\n                    "default": null,\n                    "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n                  }\n                ],\n                "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n              },\n              "name": "createStamp",\n              "doc": "Audit stamp associated with creation of this record"\n            },\n            {\n              "type": [\n                "null",\n                "com.linkedin.common.AuditStamp"\n              ],\n              "name": "updateStamp",\n              "default": null,\n              "doc": "Audit stamp associated with updation of this record"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "InstitutionalMemoryMetadataSettings",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "boolean",\n                      "name": "showInAssetPreview",\n                      "default": false,\n                      "doc": "Show record in asset preview like on entity header and search previews"\n                    }\n                  ],\n                  "doc": "Settings related to a record of InstitutionalMemoryMetadata"\n                }\n              ],\n              "name": "settings",\n              "default": null,\n              "doc": "Settings for this record"\n            }\n          ],\n          "doc": "Metadata corresponding to a record of institutional memory."\n        }\n      },\n      "name": "elements",\n      "doc": "List of records that represent institutional memory of an entity. Each record consists of a link, description, creator and timestamps associated with that record."\n    }\n  ],\n  "doc": "Institutional memory of an entity. This is a way to link to relevant documentation and provide description of the documentation. Institutional or tribal knowledge is very important for users to leverage the entity."\n}\n')))),(0,a.yg)("h4",{id:"deprecation"},"deprecation"),(0,a.yg)("p",null,"Deprecation status of an entity"),(0,a.yg)(r.A,{mdxType:"Tabs"},(0,a.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Field"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Required"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"deprecated"),(0,a.yg)("td",{parentName:"tr",align:null},"boolean"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Whether the entity is deprecated."),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"decommissionTime"),(0,a.yg)("td",{parentName:"tr",align:null},"long"),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null},"The time user plan to decommission this entity."),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"note"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Additional information about the entity deprecation plan, such as the wiki, doc, RB."),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"actor"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"The user URN which will be credited for modifying this deprecation content."),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"replacement"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null}))))),(0,a.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "deprecation"\n  },\n  "name": "Deprecation",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "addToFilters": true,\n        "fieldType": "BOOLEAN",\n        "filterNameOverride": "Deprecated",\n        "weightsPerFieldValue": {\n          "true": 0.5\n        }\n      },\n      "type": "boolean",\n      "name": "deprecated",\n      "doc": "Whether the entity is deprecated."\n    },\n    {\n      "type": [\n        "null",\n        "long"\n      ],\n      "name": "decommissionTime",\n      "default": null,\n      "doc": "The time user plan to decommission this entity."\n    },\n    {\n      "type": "string",\n      "name": "note",\n      "doc": "Additional information about the entity deprecation plan, such as the wiki, doc, RB."\n    },\n    {\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": "string",\n      "name": "actor",\n      "doc": "The user URN which will be credited for modifying this deprecation content."\n    },\n    {\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "replacement",\n      "default": null\n    }\n  ],\n  "doc": "Deprecation status of an entity"\n}\n')))),(0,a.yg)("h4",{id:"status"},"status"),(0,a.yg)("p",null,"The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\nThis aspect is used to represent soft deletes conventionally."),(0,a.yg)(r.A,{mdxType:"Tabs"},(0,a.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Field"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Required"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"removed"),(0,a.yg)("td",{parentName:"tr",align:null},"boolean"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Whether the entity has been removed (soft-deleted)."),(0,a.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,a.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "status"\n  },\n  "name": "Status",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "BOOLEAN"\n      },\n      "type": "boolean",\n      "name": "removed",\n      "default": false,\n      "doc": "Whether the entity has been removed (soft-deleted)."\n    }\n  ],\n  "doc": "The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\\nThis aspect is used to represent soft deletes conventionally."\n}\n')))),(0,a.yg)("h4",{id:"icebergwarehouseinfo"},"icebergWarehouseInfo"),(0,a.yg)("p",null,"An Iceberg warehouse location and credentails whose read/writes are governed by datahub catalog."),(0,a.yg)(r.A,{mdxType:"Tabs"},(0,a.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Field"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Required"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"dataRoot"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"Path of the root for the backing store of the tables in the warehouse."),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"clientId"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"clientId to be used to authenticate with storage hosting this warehouse"),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"clientSecret"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"client secret to authenticate with storage hosting this warehouse"),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"region"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null},"region where the warehouse is located."),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"role"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"tempCredentialExpirationSeconds"),(0,a.yg)("td",{parentName:"tr",align:null},"int"),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null})),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"env"),(0,a.yg)("td",{parentName:"tr",align:null},"FabricType"),(0,a.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,a.yg)("td",{parentName:"tr",align:null}),(0,a.yg)("td",{parentName:"tr",align:null}))))),(0,a.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "icebergWarehouseInfo"\n  },\n  "name": "IcebergWarehouseInfo",\n  "namespace": "com.linkedin.dataplatforminstance",\n  "fields": [\n    {\n      "type": "string",\n      "name": "dataRoot",\n      "doc": "Path of the root for the backing store of the tables in the warehouse."\n    },\n    {\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": "string",\n      "name": "clientId",\n      "doc": "clientId to be used to authenticate with storage hosting this warehouse"\n    },\n    {\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": "string",\n      "name": "clientSecret",\n      "doc": "client secret to authenticate with storage hosting this warehouse"\n    },\n    {\n      "type": "string",\n      "name": "region",\n      "doc": "region where the warehouse is located."\n    },\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "role",\n      "default": null\n    },\n    {\n      "type": [\n        "null",\n        "int"\n      ],\n      "name": "tempCredentialExpirationSeconds",\n      "default": null\n    },\n    {\n      "type": {\n        "type": "enum",\n        "symbolDocs": {\n          "CORP": "Designates corporation fabrics",\n          "DEV": "Designates development fabrics",\n          "EI": "Designates early-integration fabrics",\n          "NON_PROD": "Designates non-production fabrics",\n          "PRD": "Alternative Prod spelling",\n          "PRE": "Designates pre-production fabrics",\n          "PROD": "Designates production fabrics",\n          "QA": "Designates quality assurance fabrics",\n          "RVW": "Designates review fabrics",\n          "SANDBOX": "Designates sandbox fabrics",\n          "SBX": "Alternative spelling for sandbox",\n          "SIT": "System Integration Testing",\n          "STG": "Designates staging fabrics",\n          "TEST": "Designates testing fabrics",\n          "TST": "Alternative Test spelling",\n          "UAT": "Designates user acceptance testing fabrics"\n        },\n        "name": "FabricType",\n        "namespace": "com.linkedin.common",\n        "symbols": [\n          "DEV",\n          "TEST",\n          "QA",\n          "UAT",\n          "EI",\n          "PRE",\n          "STG",\n          "NON_PROD",\n          "PROD",\n          "CORP",\n          "RVW",\n          "PRD",\n          "TST",\n          "SIT",\n          "SBX",\n          "SANDBOX"\n        ],\n        "doc": "Fabric group type"\n      },\n      "name": "env"\n    }\n  ],\n  "doc": "An Iceberg warehouse location and credentails whose read/writes are governed by datahub catalog."\n}\n')))),(0,a.yg)("h3",{id:"common-types"},"Common Types"),(0,a.yg)("p",null,"These types are used across multiple aspects in this entity."),(0,a.yg)("h4",{id:"auditstamp"},"AuditStamp"),(0,a.yg)("p",null,"Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Fields:")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"time")," (long): When did the resource/association/sub-resource move into the specific lifecyc..."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"actor")," (string): The entity (e.g. a member URN) which will be credited for moving the resource..."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"impersonator")," (string?): The entity (e.g. a service URN) which performs the change on behalf of the Ac..."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"message")," (string?): Additional context around how DataHub was informed of the particular change. ...")),(0,a.yg)("h3",{id:"relationships"},"Relationships"),(0,a.yg)("h4",{id:"outgoing"},"Outgoing"),(0,a.yg)("p",null,"These are the relationships stored in this entity's aspects"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"OwnedBy"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Corpuser via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.owner")),(0,a.yg)("li",{parentName:"ul"},"CorpGroup via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.owner")))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"ownershipType"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"OwnershipType via ",(0,a.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"TaggedWith"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Tag via ",(0,a.yg)("inlineCode",{parentName:"li"},"globalTags.tags"))))),(0,a.yg)("h4",{id:"incoming"},"Incoming"),(0,a.yg)("p",null,"These are the relationships stored in other entity's aspects"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"PartOfSlackWorkspace"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Corpuser via ",(0,a.yg)("inlineCode",{parentName:"li"},"slackUserInfo.slackInstance"))))),(0,a.yg)("h3",{id:"global-metadata-model"},(0,a.yg)("a",{parentName:"h3",href:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,a.yg)("p",null,(0,a.yg)("img",{parentName:"p",src:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}h.isMDXComponent=!0}}]);