"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[96104],{68171:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>m,metadata:()=>p,toc:()=>y});a(96540);var t=a(15680),r=a(53720),i=a(5400);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))})),e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const m={sidebar_position:14,title:"GlossaryTerm",slug:"/generated/metamodel/entities/glossaryterm",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/glossaryTerm.md"},d="GlossaryTerm",p={unversionedId:"docs/generated/metamodel/entities/glossaryTerm",id:"docs/generated/metamodel/entities/glossaryTerm",title:"GlossaryTerm",description:"A GlossaryTerm represents a standardized business definition or vocabulary term that can be associated with data assets across your organization. GlossaryTerms are the fundamental building blocks of DataHub's Business Glossary feature, enabling teams to establish and maintain a shared vocabulary for describing data concepts.",source:"@site/genDocs/docs/generated/metamodel/entities/glossaryTerm.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/glossaryterm",permalink:"/docs/generated/metamodel/entities/glossaryterm",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/glossaryTerm.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14,title:"GlossaryTerm",slug:"/generated/metamodel/entities/glossaryterm",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/glossaryTerm.md"},sidebar:"overviewSidebar",previous:{title:"Tag",permalink:"/docs/generated/metamodel/entities/tag"},next:{title:"GlossaryNode",permalink:"/docs/generated/metamodel/entities/glossarynode"}},c={},y=[{value:"Identity",id:"identity",level:2},{value:"URN Structure",id:"urn-structure",level:3},{value:"Examples",id:"examples",level:3},{value:"Best Practices for Term Names",id:"best-practices-for-term-names",level:3},{value:"Important Capabilities",id:"important-capabilities",level:2},{value:"Core Business Definition (glossaryTermInfo)",id:"core-business-definition-glossaryterminfo",level:3},{value:"Term Relationships (glossaryRelatedTerms)",id:"term-relationships-glossaryrelatedterms",level:3},{value:"1. IsA Relationships (Inheritance)",id:"1-isa-relationships-inheritance",level:4},{value:"2. HasA Relationships (Containment)",id:"2-hasa-relationships-containment",level:4},{value:"3. Values Relationships",id:"3-values-relationships",level:4},{value:"4. RelatedTo Relationships",id:"4-relatedto-relationships",level:4},{value:"Hierarchical Organization",id:"hierarchical-organization",level:3},{value:"Applying Terms to Data Assets",id:"applying-terms-to-data-assets",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"Creating a GlossaryTerm",id:"creating-a-glossaryterm",level:3},{value:"Managing Term Relationships",id:"managing-term-relationships",level:3},{value:"Applying Terms to Assets",id:"applying-terms-to-assets",level:3},{value:"Querying GlossaryTerms",id:"querying-glossaryterms",level:3},{value:"Bulk Operations",id:"bulk-operations",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"Relationship with GlossaryNode",id:"relationship-with-glossarynode",level:3},{value:"Application to Data Assets",id:"application-to-data-assets",level:3},{value:"GraphQL API",id:"graphql-api",level:3},{value:"Integration with Search and Discovery",id:"integration-with-search-and-discovery",level:3},{value:"Governance and Access Control",id:"governance-and-access-control",level:3},{value:"Notable Exceptions",id:"notable-exceptions",level:2},{value:"Term Name vs Display Name",id:"term-name-vs-display-name",level:3},{value:"External Term Sources",id:"external-term-sources",level:3},{value:"Term Relationships vs Hierarchy",id:"term-relationships-vs-hierarchy",level:3},{value:"Schema Metadata on GlossaryTerm",id:"schema-metadata-on-glossaryterm",level:3},{value:"Deprecation Behavior",id:"deprecation-behavior",level:3},{value:"Technical Reference Guide",id:"technical-reference-guide",level:2},{value:"Reading the Field Tables",id:"reading-the-field-tables",level:3},{value:"Aspects",id:"aspects",level:3},{value:"glossaryTermKey",id:"glossarytermkey",level:4},{value:"glossaryTermInfo",id:"glossaryterminfo",level:4},{value:"ownership",id:"ownership",level:4},{value:"status",id:"status",level:4},{value:"browsePaths",id:"browsepaths",level:4},{value:"glossaryRelatedTerms",id:"glossaryrelatedterms",level:4},{value:"institutionalMemory",id:"institutionalmemory",level:4},{value:"schemaMetadata",id:"schemametadata",level:4},{value:"deprecation",id:"deprecation",level:4},{value:"domains",id:"domains",level:4},{value:"applications",id:"applications",level:4},{value:"structuredProperties",id:"structuredproperties",level:4},{value:"forms",id:"forms",level:4},{value:"testResults",id:"testresults",level:4},{value:"subTypes",id:"subtypes",level:4},{value:"assetSettings",id:"assetsettings",level:4},{value:"Common Types",id:"common-types",level:3},{value:"AuditStamp",id:"auditstamp",level:4},{value:"FormAssociation",id:"formassociation",level:4},{value:"TestResult",id:"testresult",level:4},{value:"Relationships",id:"relationships",level:3},{value:"Self",id:"self",level:4},{value:"Outgoing",id:"outgoing",level:4},{value:"Incoming",id:"incoming",level:4},{value:"Global Metadata Model",id:"global-metadata-model",level:3}],u={toc:y},g="wrapper";function h(e){var{components:n}=e,a=o(e,["components"]);return(0,t.yg)(g,s(function(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{},t=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),t.forEach((function(n){l(e,n,a[n])}))}return e}({},u,a),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"glossaryterm"},"GlossaryTerm"),(0,t.yg)("p",null,"A GlossaryTerm represents a standardized business definition or vocabulary term that can be associated with data assets across your organization. GlossaryTerms are the fundamental building blocks of DataHub's Business Glossary feature, enabling teams to establish and maintain a shared vocabulary for describing data concepts."),(0,t.yg)("p",null,"In practice, GlossaryTerms allow you to:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Define business terminology with clear, authoritative definitions"),(0,t.yg)("li",{parentName:"ul"},"Create relationships between related business concepts (inheritance, containment, etc.)"),(0,t.yg)("li",{parentName:"ul"},"Tag data assets (datasets, dashboards, charts, etc.) with standardized business terms"),(0,t.yg)("li",{parentName:"ul"},"Establish governance and ownership over business vocabulary"),(0,t.yg)("li",{parentName:"ul"},"Link to external resources and documentation")),(0,t.yg)("p",null,'For example, a GlossaryTerm might define "Customer Lifetime Value (CLV)" with a precise business definition, relate it to other terms like "Revenue" and "Customer", and be applied to specific dataset columns that store CLV calculations.'),(0,t.yg)("h2",{id:"identity"},"Identity"),(0,t.yg)("p",null,"GlossaryTerms are uniquely identified by a single field: their ",(0,t.yg)("strong",{parentName:"p"},"name"),". This name serves as the persistent identifier for the term throughout its lifecycle."),(0,t.yg)("h3",{id:"urn-structure"},"URN Structure"),(0,t.yg)("p",null,"The URN (Uniform Resource Name) for a GlossaryTerm follows this pattern:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"urn:li:glossaryTerm:<term_name>\n")),(0,t.yg)("p",null,"Where:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"<term_name>"),': A unique string identifier for the term. This can be human-readable (e.g., "CustomerLifetimeValue") or a generated ID (e.g., "clv-001" or a UUID).')),(0,t.yg)("h3",{id:"examples"},"Examples"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"# Simple term name\nurn:li:glossaryTerm:Revenue\n\n# Hierarchical naming convention (common pattern)\nurn:li:glossaryTerm:Finance.Revenue\nurn:li:glossaryTerm:Classification.PII\nurn:li:glossaryTerm:Classification.Confidential\n\n# UUID-based identifier\nurn:li:glossaryTerm:41516e31-0acb-fd90-76ff-fc2c98d2d1a3\n\n# Descriptive identifier\nurn:li:glossaryTerm:CustomerLifetimeValue\n")),(0,t.yg)("h3",{id:"best-practices-for-term-names"},"Best Practices for Term Names"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Use hierarchical notation"),": Prefix terms with their category (e.g., ",(0,t.yg)("inlineCode",{parentName:"li"},"Classification.PII"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"Finance.Revenue"),") to indicate structure even though the name is flat."),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Be consistent"),": Choose a naming convention (camelCase, dot notation, etc.) and apply it uniformly."),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Keep it permanent"),": The term name is the identifier and should not change. Use the ",(0,t.yg)("inlineCode",{parentName:"li"},"name")," field in ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryTermInfo")," for the display name."),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Consider organization"),": While the URN is flat, you can use glossaryNodes (term groups) to create hierarchical organization in the UI.")),(0,t.yg)("h2",{id:"important-capabilities"},"Important Capabilities"),(0,t.yg)("h3",{id:"core-business-definition-glossaryterminfo"},"Core Business Definition (glossaryTermInfo)"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"glossaryTermInfo")," aspect contains the essential business information about a term:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"definition")," (required): The authoritative business definition of the term. This should be clear, concise, and provide sufficient context for anyone to understand the term's meaning."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"name"),': The display name shown in the UI. This can be more human-friendly than the URN identifier (e.g., "Customer Lifetime Value" vs. "CustomerLifetimeValue").'),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"parentNode"),": A reference to a GlossaryNode (term group) that acts as a folder for organizing terms hierarchically."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"termSource"),': Indicates whether the term is "INTERNAL" (defined within your organization) or "EXTERNAL" (from an external standard like FIBO).'),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"sourceRef"),': A reference identifier for external term sources (e.g., "FIBO" for Financial Industry Business Ontology).'),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"sourceUrl"),": A URL pointing to the external definition of the term."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"customProperties"),": Key-value pairs for additional metadata specific to your organization.")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'{\n  "name": "Customer Lifetime Value",\n  "definition": "The total revenue a business can expect from a single customer account throughout the business relationship.",\n  "termSource": "INTERNAL",\n  "parentNode": "urn:li:glossaryNode:Finance"\n}\n')),(0,t.yg)("h3",{id:"term-relationships-glossaryrelatedterms"},"Term Relationships (glossaryRelatedTerms)"),(0,t.yg)("p",null,"GlossaryTerms support several relationship types that help model the semantic connections between business concepts:"),(0,t.yg)("h4",{id:"1-isa-relationships-inheritance"},"1. IsA Relationships (Inheritance)"),(0,t.yg)("p",null,'Indicates that one term is a specialized type of another term. This creates an "Is-A" hierarchy where more specific terms inherit the characteristics of broader terms.'),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Use case"),": ",(0,t.yg)("inlineCode",{parentName:"p"},"Email")," IsA ",(0,t.yg)("inlineCode",{parentName:"p"},"PersonalInformation"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"SocialSecurityNumber")," IsA ",(0,t.yg)("inlineCode",{parentName:"p"},"PersonalInformation")),(0,t.yg)("h4",{id:"2-hasa-relationships-containment"},"2. HasA Relationships (Containment)"),(0,t.yg)("p",null,'Indicates that one term contains or is composed of another term. This creates a "Has-A" relationship where a complex concept consists of simpler parts.'),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Use case"),": ",(0,t.yg)("inlineCode",{parentName:"p"},"Address")," HasA ",(0,t.yg)("inlineCode",{parentName:"p"},"ZipCode"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"Address")," HasA ",(0,t.yg)("inlineCode",{parentName:"p"},"Street"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"Address")," HasA ",(0,t.yg)("inlineCode",{parentName:"p"},"City")),(0,t.yg)("h4",{id:"3-values-relationships"},"3. Values Relationships"),(0,t.yg)("p",null,"Defines the allowed values for an enumerated term. Useful for controlled vocabularies where a term has a fixed set of valid values."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Use case"),": ",(0,t.yg)("inlineCode",{parentName:"p"},"ColorEnum")," HasValues ",(0,t.yg)("inlineCode",{parentName:"p"},"Red"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"Green"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"Blue")),(0,t.yg)("h4",{id:"4-relatedto-relationships"},"4. RelatedTo Relationships"),(0,t.yg)("p",null,"General-purpose relationship for terms that are semantically related but don't fit the other categories."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Use case"),": ",(0,t.yg)("inlineCode",{parentName:"p"},"Revenue")," RelatedTo ",(0,t.yg)("inlineCode",{parentName:"p"},"Profit"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"Customer")," RelatedTo ",(0,t.yg)("inlineCode",{parentName:"p"},"Account")),(0,t.yg)("h3",{id:"hierarchical-organization"},"Hierarchical Organization"),(0,t.yg)("p",null,"GlossaryTerms can be organized hierarchically through ",(0,t.yg)("strong",{parentName:"p"},"GlossaryNodes")," (term groups). The ",(0,t.yg)("inlineCode",{parentName:"p"},"parentNode")," field in ",(0,t.yg)("inlineCode",{parentName:"p"},"glossaryTermInfo")," establishes this relationship:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"GlossaryNode: Classification\n  \u251c\u2500\u2500 GlossaryTerm: Sensitive\n  \u251c\u2500\u2500 GlossaryTerm: Confidential\n  \u2514\u2500\u2500 GlossaryTerm: HighlyConfidential\n\nGlossaryNode: PersonalInformation\n  \u251c\u2500\u2500 GlossaryTerm: Email\n  \u251c\u2500\u2500 GlossaryTerm: Address\n  \u2514\u2500\u2500 GlossaryTerm: PhoneNumber\n")),(0,t.yg)("p",null,"This hierarchy is visible in the DataHub UI and helps users navigate large glossaries."),(0,t.yg)("h3",{id:"applying-terms-to-data-assets"},"Applying Terms to Data Assets"),(0,t.yg)("p",null,"GlossaryTerms become valuable when applied to actual data assets. Terms can be attached to:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Datasets (tables, views, files)"),(0,t.yg)("li",{parentName:"ul"},"Dataset fields (columns)"),(0,t.yg)("li",{parentName:"ul"},"Dashboards"),(0,t.yg)("li",{parentName:"ul"},"Charts"),(0,t.yg)("li",{parentName:"ul"},"Data Jobs"),(0,t.yg)("li",{parentName:"ul"},"Containers"),(0,t.yg)("li",{parentName:"ul"},"And many other entity types")),(0,t.yg)("p",null,"When a term is applied to a data asset, it creates a ",(0,t.yg)("strong",{parentName:"p"},"TermedWith")," relationship, which enables:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Discovery: Find all assets tagged with a specific business concept"),(0,t.yg)("li",{parentName:"ul"},"Governance: Track which assets contain sensitive data types"),(0,t.yg)("li",{parentName:"ul"},"Documentation: Provide business context for technical assets"),(0,t.yg)("li",{parentName:"ul"},"Compliance: Identify datasets subject to regulatory requirements")),(0,t.yg)("h2",{id:"code-examples"},"Code Examples"),(0,t.yg)("h3",{id:"creating-a-glossaryterm"},"Creating a GlossaryTerm"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Create a basic GlossaryTerm"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/glossary_term_create.py\nimport os\n\nfrom datahub.emitter.mce_builder import make_term_urn\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import GlossaryTermInfoClass\n\n# Get DataHub connection details from environment\ngms_server = os.getenv("DATAHUB_GMS_URL", "http://localhost:8080")\ntoken = os.getenv("DATAHUB_GMS_TOKEN")\n\n# Create a term URN - the unique identifier for the glossary term\nterm_urn = make_term_urn("CustomerLifetimeValue")\n\n# Define the term\'s core information\nterm_info = GlossaryTermInfoClass(\n    name="Customer Lifetime Value",\n    definition="The total revenue a business can expect from a single customer account throughout the business relationship. This metric helps prioritize customer retention efforts and marketing spend.",\n    termSource="INTERNAL",\n)\n\n# Create a metadata change proposal\nevent = MetadataChangeProposalWrapper(\n    entityUrn=term_urn,\n    aspect=term_info,\n)\n\n# Emit the metadata\nrest_emitter = DatahubRestEmitter(gms_server=gms_server, token=token)\nrest_emitter.emit(event)\nprint(f"Created glossary term: {term_urn}")\n\n'))),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Create a GlossaryTerm with full metadata"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/glossary_term_create_with_metadata.py\nimport os\n\nfrom datahub.emitter.mce_builder import make_term_urn\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import (\n    AuditStampClass,\n    GlossaryTermInfoClass,\n    InstitutionalMemoryClass,\n    InstitutionalMemoryMetadataClass,\n    OwnerClass,\n    OwnershipClass,\n    OwnershipSourceClass,\n    OwnershipSourceTypeClass,\n    OwnershipTypeClass,\n)\nfrom datahub.metadata.urns import GlossaryNodeUrn\n\n# Create the term URN\nterm_urn = make_term_urn("Classification.PII")\n\n# Create GlossaryTermInfo with full metadata\nterm_info = GlossaryTermInfoClass(\n    name="Personally Identifiable Information",\n    definition="Information that can be used to identify, contact, or locate a single person, or to identify an individual in context. Examples include name, email address, phone number, and social security number.",\n    termSource="INTERNAL",\n    # Link to a parent term group (glossary node)\n    parentNode=str(GlossaryNodeUrn("Classification")),\n    # Custom properties for additional metadata\n    customProperties={\n        "sensitivity_level": "HIGH",\n        "data_retention_period": "7_years",\n        "regulatory_framework": "GDPR,CCPA",\n    },\n)\n\n# Add ownership information\nownership = OwnershipClass(\n    owners=[\n        OwnerClass(\n            owner="urn:li:corpuser:datahub",\n            type=OwnershipTypeClass.DATAOWNER,\n            source=OwnershipSourceClass(type=OwnershipSourceTypeClass.MANUAL),\n        ),\n        OwnerClass(\n            owner="urn:li:corpGroup:privacy-team",\n            type=OwnershipTypeClass.DATAOWNER,\n            source=OwnershipSourceClass(type=OwnershipSourceTypeClass.MANUAL),\n        ),\n    ]\n)\n\n# Add links to related documentation\ninstitutional_memory = InstitutionalMemoryClass(\n    elements=[\n        InstitutionalMemoryMetadataClass(\n            url="https://wiki.company.com/privacy/pii-guidelines",\n            description="Internal PII Handling Guidelines",\n            createStamp=AuditStampClass(time=0, actor="urn:li:corpuser:datahub"),\n        ),\n        InstitutionalMemoryMetadataClass(\n            url="https://gdpr.eu/",\n            description="GDPR Official Documentation",\n            createStamp=AuditStampClass(time=0, actor="urn:li:corpuser:datahub"),\n        ),\n    ]\n)\n\n# Emit all aspects for the glossary term\n# Get DataHub connection details from environment\ngms_server = os.getenv("DATAHUB_GMS_URL", "http://localhost:8080")\ntoken = os.getenv("DATAHUB_GMS_TOKEN")\n\nrest_emitter = DatahubRestEmitter(gms_server=gms_server, token=token)\n\n# Emit term info\nrest_emitter.emit(MetadataChangeProposalWrapper(entityUrn=term_urn, aspect=term_info))\n\n# Emit ownership\nrest_emitter.emit(MetadataChangeProposalWrapper(entityUrn=term_urn, aspect=ownership))\n\n# Emit institutional memory (documentation links)\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(entityUrn=term_urn, aspect=institutional_memory)\n)\n\nprint(f"Created glossary term with full metadata: {term_urn}")\n\n'))),(0,t.yg)("h3",{id:"managing-term-relationships"},"Managing Term Relationships"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Add relationships between GlossaryTerms"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/glossary_term_add_relationships.py\nfrom datahub.emitter.mce_builder import make_term_urn\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.schema_classes import GlossaryRelatedTermsClass\nfrom datahub.metadata.urns import GlossaryTermUrn\n\n# First, ensure the related terms exist (you would have created these previously)\n# For this example, assume we have:\n# - Classification.PII (a broad category)\n# - Classification.Sensitive (another category)\n# - PersonalInformation.Email (a specific term)\n# - PersonalInformation.Address (another specific term)\n\n# Create relationships for the Email term\nemail_term_urn = make_term_urn("PersonalInformation.Email")\n\n# Define relationships\nemail_relationships = GlossaryRelatedTermsClass(\n    # IsA relationship: Email is a type of PII\n    # This creates an inheritance hierarchy\n    isRelatedTerms=[\n        str(GlossaryTermUrn("Classification.PII")),\n        str(GlossaryTermUrn("Classification.Sensitive")),\n    ],\n    # RelatedTo: General semantic relationship\n    relatedTerms=[\n        str(GlossaryTermUrn("PersonalInformation.PhoneNumber")),\n        str(GlossaryTermUrn("PersonalInformation.Contact")),\n    ],\n)\n\n# Create relationships for the Address term\naddress_term_urn = make_term_urn("PersonalInformation.Address")\n\naddress_relationships = GlossaryRelatedTermsClass(\n    # IsA: Address is also a type of PII\n    isRelatedTerms=[str(GlossaryTermUrn("Classification.PII"))],\n    # HasA: Address contains these components\n    hasRelatedTerms=[\n        str(GlossaryTermUrn("PersonalInformation.ZipCode")),\n        str(GlossaryTermUrn("PersonalInformation.Street")),\n        str(GlossaryTermUrn("PersonalInformation.City")),\n        str(GlossaryTermUrn("PersonalInformation.Country")),\n    ],\n)\n\n# Create an enumeration term with fixed values\ncolor_enum_urn = make_term_urn("ColorEnum")\n\ncolor_enum_relationships = GlossaryRelatedTermsClass(\n    # Values: Define the allowed values for this enumeration\n    values=[\n        str(GlossaryTermUrn("Colors.Red")),\n        str(GlossaryTermUrn("Colors.Green")),\n        str(GlossaryTermUrn("Colors.Blue")),\n        str(GlossaryTermUrn("Colors.Yellow")),\n    ]\n)\n\n# Emit the relationships\nrest_emitter = DatahubRestEmitter(gms_server="http://localhost:8080")\n\n# Emit Email term relationships\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(entityUrn=email_term_urn, aspect=email_relationships)\n)\nprint(f"Added relationships to: {email_term_urn}")\n\n# Emit Address term relationships\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=address_term_urn, aspect=address_relationships\n    )\n)\nprint(f"Added relationships to: {address_term_urn}")\n\n# Emit Color enumeration relationships\nrest_emitter.emit(\n    MetadataChangeProposalWrapper(\n        entityUrn=color_enum_urn, aspect=color_enum_relationships\n    )\n)\nprint(f"Added value relationships to: {color_enum_urn}")\n\nprint("\\nRelationship types explained:")\nprint("- isRelatedTerms (IsA): Inheritance relationship - term is a type of another")\nprint("- hasRelatedTerms (HasA): Containment relationship - term contains other terms")\nprint("- values: Enumeration values - defines allowed values for the term")\nprint("- relatedTerms: General semantic relationship between terms")\n\n'))),(0,t.yg)("h3",{id:"applying-terms-to-assets"},"Applying Terms to Assets"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Add a GlossaryTerm to a dataset"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/dataset_add_term.py\nfrom typing import List, Optional, Union\n\nfrom datahub.sdk import DataHubClient, DatasetUrn, GlossaryTermUrn\n\n\ndef add_terms_to_dataset(\n    client: DataHubClient,\n    dataset_urn: DatasetUrn,\n    term_urns: List[Union[GlossaryTermUrn, str]],\n) -> None:\n    """\n    Add glossary terms to a dataset.\n\n    Args:\n        client: DataHub client to use\n        dataset_urn: URN of the dataset to update\n        term_urns: List of term URNs or term names to add\n    """\n    dataset = client.entities.get(dataset_urn)\n\n    for term in term_urns:\n        if isinstance(term, str):\n            resolved_term_urn = client.resolve.term(name=term)\n            dataset.add_term(resolved_term_urn)\n        else:\n            dataset.add_term(term)\n\n    client.entities.update(dataset)\n\n\ndef main(client: Optional[DataHubClient] = None) -> None:\n    """\n    Main function to add terms to dataset example.\n\n    Args:\n        client: Optional DataHub client (for testing). If not provided, creates one from env.\n    """\n    client = client or DataHubClient.from_env()\n\n    dataset_urn = DatasetUrn(platform="hive", name="realestate_db.sales", env="PROD")\n\n    # Add terms using both URN and name resolution\n    add_terms_to_dataset(\n        client=client,\n        dataset_urn=dataset_urn,\n        term_urns=[\n            GlossaryTermUrn("Classification.HighlyConfidential"),\n            "PII",  # Will be resolved by name\n        ],\n    )\n\n\nif __name__ == "__main__":\n    main()\n\n'))),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Add a GlossaryTerm to a dataset column"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/dataset_add_column_term.py\nfrom datahub.sdk import DataHubClient, DatasetUrn, GlossaryTermUrn\n\nclient = DataHubClient.from_env()\n\ndataset = client.entities.get(\n    DatasetUrn(platform="hive", name="realestate_db.sales", env="PROD")\n)\n\ndataset["address.zipcode"].add_term(GlossaryTermUrn("Classification.Location"))\n\nclient.entities.update(dataset)\n\n'))),(0,t.yg)("h3",{id:"querying-glossaryterms"},"Querying GlossaryTerms"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"REST API: Get a GlossaryTerm by URN"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},"# Fetch a GlossaryTerm entity\ncurl -X GET 'http://localhost:8080/entities/urn%3Ali%3AglossaryTerm%3ACustomerLifetimeValue' \\\n  -H 'Authorization: Bearer <token>'\n\n# Response includes all aspects:\n# - glossaryTermKey (identity)\n# - glossaryTermInfo (definition, name, etc.)\n# - glossaryRelatedTerms (relationships)\n# - ownership (who owns this term)\n# - institutionalMemory (links to documentation)\n# - etc.\n"))),(0,t.yg)("details",null,(0,t.yg)("summary",null,"REST API: Search for assets tagged with a term"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},'# Find all datasets tagged with a specific term\ncurl -X POST \'http://localhost:8080/entities?action=search\' \\\n  -H \'Content-Type: application/json\' \\\n  -H \'Authorization: Bearer <token>\' \\\n  -d \'{\n    "entity": "dataset",\n    "input": "*",\n    "filter": {\n      "or": [\n        {\n          "and": [\n            {\n              "field": "glossaryTerms",\n              "value": "urn:li:glossaryTerm:Classification.PII",\n              "condition": "EQUAL"\n            }\n          ]\n        }\n      ]\n    },\n    "start": 0,\n    "count": 10\n  }\'\n'))),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Query terms applied to a dataset"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/dataset_query_terms.py\nfrom datahub.sdk import DataHubClient, DatasetUrn\n\nclient = DataHubClient.from_env()\n\ndataset = client.entities.get(\n    DatasetUrn(platform="hive", name="realestate_db.sales", env="PROD")\n)\n\nprint(dataset.terms)\n\n'))),(0,t.yg)("h3",{id:"bulk-operations"},"Bulk Operations"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"YAML Ingestion: Create multiple terms from a Business Glossary file"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-yaml"},'# business_glossary.yml\nversion: "1"\nsource: MyOrganization\nowners:\n  users:\n    - datahub\nnodes:\n  - name: Classification\n    description: Data classification categories\n    terms:\n      - name: PII\n        description: Personally Identifiable Information\n      - name: Confidential\n        description: Confidential business data\n      - name: Public\n        description: Publicly available data\n\n  - name: Finance\n    description: Financial domain terms\n    terms:\n      - name: Revenue\n        description: Total income from business operations\n      - name: Profit\n        description: Financial gain after expenses\n        related_terms:\n          - Finance.Revenue\n# Ingest using the DataHub CLI:\n# datahub ingest -c business_glossary.yml\n')),(0,t.yg)("p",null,"See the ",(0,t.yg)("a",{parentName:"p",href:"/docs/generated/ingestion/sources/business-glossary"},"Business Glossary Source")," documentation for the full YAML format specification.")),(0,t.yg)("h2",{id:"integration-points"},"Integration Points"),(0,t.yg)("h3",{id:"relationship-with-glossarynode"},"Relationship with GlossaryNode"),(0,t.yg)("p",null,"GlossaryNodes (term groups) provide hierarchical organization for GlossaryTerms. Think of GlossaryNodes as folders and GlossaryTerms as files within those folders."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"A GlossaryTerm can have at most one parent GlossaryNode (specified via ",(0,t.yg)("inlineCode",{parentName:"li"},"parentNode")," in ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryTermInfo"),")"),(0,t.yg)("li",{parentName:"ul"},"GlossaryNodes can contain both GlossaryTerms and other GlossaryNodes (creating nested hierarchies)"),(0,t.yg)("li",{parentName:"ul"},"Terms at the root level (no parent) appear at the top of the glossary")),(0,t.yg)("h3",{id:"application-to-data-assets"},"Application to Data Assets"),(0,t.yg)("p",null,"GlossaryTerms can be applied to most entity types in DataHub through the ",(0,t.yg)("inlineCode",{parentName:"p"},"glossaryTerms")," aspect:"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Supported entities:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"dataset, schemaField (dataset columns)"),(0,t.yg)("li",{parentName:"ul"},"dashboard, chart"),(0,t.yg)("li",{parentName:"ul"},"dataJob, dataFlow"),(0,t.yg)("li",{parentName:"ul"},"mlModel, mlFeature, mlFeatureTable, mlPrimaryKey"),(0,t.yg)("li",{parentName:"ul"},"notebook"),(0,t.yg)("li",{parentName:"ul"},"container"),(0,t.yg)("li",{parentName:"ul"},"dataProduct, application"),(0,t.yg)("li",{parentName:"ul"},"erModelRelationship, businessAttribute")),(0,t.yg)("p",null,"When you apply a term to an entity, DataHub creates:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},"A ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryTerms")," aspect on the target entity containing the term association"),(0,t.yg)("li",{parentName:"ol"},"A ",(0,t.yg)("strong",{parentName:"li"},"TermedWith")," relationship edge in the graph"),(0,t.yg)("li",{parentName:"ol"},"A searchable index entry allowing you to find all assets with that term")),(0,t.yg)("h3",{id:"graphql-api"},"GraphQL API"),(0,t.yg)("p",null,"The GraphQL API provides rich querying and mutation capabilities for GlossaryTerms:"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Queries:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Fetch term details with related entities"),(0,t.yg)("li",{parentName:"ul"},"Browse terms hierarchically"),(0,t.yg)("li",{parentName:"ul"},"Search terms by name or definition"),(0,t.yg)("li",{parentName:"ul"},"Get all entities tagged with a term")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Mutations:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"createGlossaryTerm"),": Create a new term"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"addTerms"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"addTerm"),": Apply terms to entities"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"removeTerm"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"batchRemoveTerms"),": Remove terms from entities"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"updateParentNode"),": Move a term to a different parent group")),(0,t.yg)("p",null,"See the ",(0,t.yg)("a",{parentName:"p",href:"/docs/api/graphql/overview"},"GraphQL API documentation")," for detailed examples."),(0,t.yg)("h3",{id:"integration-with-search-and-discovery"},"Integration with Search and Discovery"),(0,t.yg)("p",null,"GlossaryTerms enhance discoverability in multiple ways:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Faceted Search"),": Users can filter search results by glossary terms"),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Term Propagation"),": When a term is applied at the dataset level, it can be inherited by downstream assets"),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Related Entities"),": The term's page shows all assets tagged with that term"),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("strong",{parentName:"li"},"Autocomplete"),": Terms are suggested as users type in search or when tagging assets")),(0,t.yg)("h3",{id:"governance-and-access-control"},"Governance and Access Control"),(0,t.yg)("p",null,"GlossaryTerms support fine-grained access control through DataHub's policy system:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Manage Direct Glossary Children"),": Permission to create/edit/delete terms directly under a specific term group"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Manage All Glossary Children"),": Permission to manage any term within a term group's entire subtree"),(0,t.yg)("li",{parentName:"ul"},"Standard entity policies (view, edit, delete) apply to individual terms")),(0,t.yg)("p",null,"See the ",(0,t.yg)("a",{parentName:"p",href:"/docs/glossary/business-glossary"},"Business Glossary documentation")," for details on privileges."),(0,t.yg)("h2",{id:"notable-exceptions"},"Notable Exceptions"),(0,t.yg)("h3",{id:"term-name-vs-display-name"},"Term Name vs Display Name"),(0,t.yg)("p",null,"The URN identifier (",(0,t.yg)("inlineCode",{parentName:"p"},"name")," in ",(0,t.yg)("inlineCode",{parentName:"p"},"glossaryTermKey"),") is separate from the display name (",(0,t.yg)("inlineCode",{parentName:"p"},"name")," in ",(0,t.yg)("inlineCode",{parentName:"p"},"glossaryTermInfo"),"). Best practice:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"URN name"),': Use a stable, unchanging identifier (e.g., "clv-001", "Classification.PII")'),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Display name"),': Use a human-friendly label that can be updated (e.g., "Customer Lifetime Value", "Personally Identifiable Information")')),(0,t.yg)("h3",{id:"external-term-sources"},"External Term Sources"),(0,t.yg)("p",null,"When using terms from external standards (FIBO, ISO, industry glossaries):"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Set ",(0,t.yg)("inlineCode",{parentName:"li"},"termSource"),' to "EXTERNAL"'),(0,t.yg)("li",{parentName:"ul"},"Populate ",(0,t.yg)("inlineCode",{parentName:"li"},"sourceRef"),' with the standard name (e.g., "FIBO")'),(0,t.yg)("li",{parentName:"ul"},"Include ",(0,t.yg)("inlineCode",{parentName:"li"},"sourceUrl")," linking to the authoritative definition"),(0,t.yg)("li",{parentName:"ul"},"Consider using the external standard's identifier as your URN name for consistency")),(0,t.yg)("h3",{id:"term-relationships-vs-hierarchy"},"Term Relationships vs Hierarchy"),(0,t.yg)("p",null,"Don't confuse:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Parent-child hierarchy")," (via ",(0,t.yg)("inlineCode",{parentName:"li"},"parentNode")," \u2192 GlossaryNode): Organizational structure for browsing"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Semantic relationships")," (via ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryRelatedTerms"),"): Meaning connections between concepts")),(0,t.yg)("p",null,"A term can have a ",(0,t.yg)("inlineCode",{parentName:"p"},"parentNode"),' for organization (e.g., term "Email" under node "PersonalInformation") AND semantic relationships (e.g., "Email" IsA "PII", "Email" RelatedTo "Contact").'),(0,t.yg)("h3",{id:"schema-metadata-on-glossaryterm"},"Schema Metadata on GlossaryTerm"),(0,t.yg)("p",null,"GlossaryTerms support the ",(0,t.yg)("inlineCode",{parentName:"p"},"schemaMetadata")," aspect, which is rarely used but can be helpful for defining structured attributes on terms themselves. This is an advanced feature for when terms need to carry typed properties beyond simple custom properties."),(0,t.yg)("h3",{id:"deprecation-behavior"},"Deprecation Behavior"),(0,t.yg)("p",null,"When a GlossaryTerm is deprecated (via the ",(0,t.yg)("inlineCode",{parentName:"p"},"deprecation")," aspect):"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"The term remains in the system and its relationships are preserved"),(0,t.yg)("li",{parentName:"ul"},"Assets tagged with the term retain those associations"),(0,t.yg)("li",{parentName:"ul"},"The UI displays a deprecation warning"),(0,t.yg)("li",{parentName:"ul"},"The term may be hidden from autocomplete and suggestions"),(0,t.yg)("li",{parentName:"ul"},"Consider creating a new term and migrating assets rather than reusing deprecated term names")),(0,t.yg)("h2",{id:"technical-reference-guide"},"Technical Reference Guide"),(0,t.yg)("p",null,"The sections above provide an overview of how to use this entity. The following sections provide detailed technical information about how metadata is stored and represented in DataHub."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Aspects")," are the individual pieces of metadata that can be attached to an entity. Each aspect contains specific information (like ownership, tags, or properties) and is stored as a separate record, allowing for flexible and incremental metadata updates."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Relationships")," show how this entity connects to other entities in the metadata graph. These connections are derived from the fields within each aspect and form the foundation of DataHub's knowledge graph."),(0,t.yg)("h3",{id:"reading-the-field-tables"},"Reading the Field Tables"),(0,t.yg)("p",null,"Each aspect's field table includes an ",(0,t.yg)("strong",{parentName:"p"},"Annotations")," column that provides additional metadata about how fields are used:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"\u26a0\ufe0f Deprecated"),": This field is deprecated and may be removed in a future version. Check the description for the recommended alternative"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Searchable"),": This field is indexed and can be searched in DataHub's search interface"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Searchable (fieldname)"),": When the field name in parentheses is shown, it indicates the field is indexed under a different name in the search index. For example, ",(0,t.yg)("inlineCode",{parentName:"li"},"dashboardTool")," is indexed as ",(0,t.yg)("inlineCode",{parentName:"li"},"tool")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"\u2192 RelationshipName"),": This field creates a relationship to another entity. The arrow indicates this field contains a reference (URN) to another entity, and the name indicates the type of relationship (e.g., ",(0,t.yg)("inlineCode",{parentName:"li"},"\u2192 Contains"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"\u2192 OwnedBy"),")")),(0,t.yg)("p",null,"Fields with complex types (like ",(0,t.yg)("inlineCode",{parentName:"p"},"Edge"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"AuditStamp"),") link to their definitions in the ",(0,t.yg)("a",{parentName:"p",href:"#common-types"},"Common Types")," section below."),(0,t.yg)("h3",{id:"aspects"},"Aspects"),(0,t.yg)("h4",{id:"glossarytermkey"},"glossaryTermKey"),(0,t.yg)("p",null,"Key for a GlossaryTerm"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"name"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"The term name, which serves as a unique id"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable (id)"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "glossaryTermKey"\n  },\n  "name": "GlossaryTermKey",\n  "namespace": "com.linkedin.metadata.key",\n  "fields": [\n    {\n      "Searchable": {\n        "enableAutocomplete": true,\n        "fieldName": "id",\n        "fieldType": "WORD_GRAM"\n      },\n      "type": "string",\n      "name": "name",\n      "doc": "The term name, which serves as a unique id"\n    }\n  ],\n  "doc": "Key for a GlossaryTerm"\n}\n')))),(0,t.yg)("h4",{id:"glossaryterminfo"},"glossaryTermInfo"),(0,t.yg)("p",null,"Properties associated with a GlossaryTerm"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"customProperties"),(0,t.yg)("td",{parentName:"tr",align:null},"map"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Custom property bag."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"id"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Optional id for the term"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"name"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Display name of the term"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"definition"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Definition of business term."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"parentNode"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Parent node of the glossary term"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 IsPartOf")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"termSource"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Source of the Business Term (INTERNAL or EXTERNAL) with default value as INTERNAL"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"sourceRef"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"External Reference to the business-term"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"sourceUrl"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"The abstracted URL such as ",(0,t.yg)("a",{parentName:"td",href:"https://spec.edmcouncil.org/fibo/ontology/FBC/FinancialInstruments/Fin"},"https://spec.edmcouncil.org/fibo/ontology/FBC/FinancialInstruments/Fin"),"..."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"rawSchema"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Schema definition of the glossary term"),(0,t.yg)("td",{parentName:"tr",align:null},"\u26a0\ufe0f Deprecated"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "glossaryTermInfo"\n  },\n  "name": "GlossaryTermInfo",\n  "namespace": "com.linkedin.glossary",\n  "fields": [\n    {\n      "Searchable": {\n        "/*": {\n          "fieldType": "TEXT",\n          "queryByDefault": true\n        }\n      },\n      "type": {\n        "type": "map",\n        "values": "string"\n      },\n      "name": "customProperties",\n      "default": {},\n      "doc": "Custom property bag."\n    },\n    {\n      "Searchable": {\n        "fieldType": "TEXT_PARTIAL"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "id",\n      "default": null,\n      "doc": "Optional id for the term"\n    },\n    {\n      "Searchable": {\n        "boostScore": 10.0,\n        "enableAutocomplete": true,\n        "fieldNameAliases": [\n          "_entityName"\n        ],\n        "fieldType": "WORD_GRAM"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "name",\n      "default": null,\n      "doc": "Display name of the term"\n    },\n    {\n      "Searchable": {},\n      "type": "string",\n      "name": "definition",\n      "doc": "Definition of business term."\n    },\n    {\n      "Relationship": {\n        "entityTypes": [\n          "glossaryNode"\n        ],\n        "name": "IsPartOf"\n      },\n      "Searchable": {\n        "fieldName": "parentNode",\n        "fieldType": "URN",\n        "hasValuesFieldName": "hasParentNode"\n      },\n      "java": {\n        "class": "com.linkedin.common.urn.GlossaryNodeUrn"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "parentNode",\n      "default": null,\n      "doc": "Parent node of the glossary term"\n    },\n    {\n      "Searchable": {\n        "fieldType": "KEYWORD"\n      },\n      "type": "string",\n      "name": "termSource",\n      "doc": "Source of the Business Term (INTERNAL or EXTERNAL) with default value as INTERNAL"\n    },\n    {\n      "Searchable": {\n        "fieldType": "KEYWORD"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "sourceRef",\n      "default": null,\n      "doc": "External Reference to the business-term"\n    },\n    {\n      "java": {\n        "class": "com.linkedin.common.url.Url",\n        "coercerClass": "com.linkedin.common.url.UrlCoercer"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "sourceUrl",\n      "default": null,\n      "doc": "The abstracted URL such as https://spec.edmcouncil.org/fibo/ontology/FBC/FinancialInstruments/FinancialInstruments/CashInstrument."\n    },\n    {\n      "deprecated": true,\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "rawSchema",\n      "default": null,\n      "doc": "Schema definition of the glossary term"\n    }\n  ],\n  "doc": "Properties associated with a GlossaryTerm"\n}\n')))),(0,t.yg)("h4",{id:"ownership"},"ownership"),(0,t.yg)("p",null,"Ownership information of an entity."),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"owners"),(0,t.yg)("td",{parentName:"tr",align:null},"Owner[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"List of owners of the entity."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"ownerTypes"),(0,t.yg)("td",{parentName:"tr",align:null},"map"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Ownership type to Owners map, populated via mutation hook."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"lastModified"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#auditstamp"},"AuditStamp")),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Audit stamp containing who last modified the record and when. A value of 0 in the time field indi..."),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "ownership"\n  },\n  "name": "Ownership",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "Owner",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "Relationship": {\n                "entityTypes": [\n                  "corpuser",\n                  "corpGroup"\n                ],\n                "name": "OwnedBy"\n              },\n              "Searchable": {\n                "addToFilters": true,\n                "fieldName": "owners",\n                "fieldType": "URN",\n                "filterNameOverride": "Owned By",\n                "hasValuesFieldName": "hasOwners",\n                "queryByDefault": false\n              },\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "owner",\n              "doc": "Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name\\n(Caveat: only corpuser is currently supported in the frontend.)"\n            },\n            {\n              "deprecated": true,\n              "type": {\n                "type": "enum",\n                "symbolDocs": {\n                  "BUSINESS_OWNER": "A person or group who is responsible for logical, or business related, aspects of the asset.",\n                  "CONSUMER": "A person, group, or service that consumes the data\\nDeprecated! Use TECHNICAL_OWNER or BUSINESS_OWNER instead.",\n                  "CUSTOM": "Set when ownership type is unknown or a when new one is specified as an ownership type entity for which we have no\\nenum value for. This is used for backwards compatibility",\n                  "DATAOWNER": "A person or group that is owning the data\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "DATA_STEWARD": "A steward, expert, or delegate responsible for the asset.",\n                  "DELEGATE": "A person or a group that overseas the operation, e.g. a DBA or SRE.\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "DEVELOPER": "A person or group that is in charge of developing the code\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "NONE": "No specific type associated to the owner.",\n                  "PRODUCER": "A person, group, or service that produces/generates the data\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "STAKEHOLDER": "A person or a group that has direct business interest\\nDeprecated! Use TECHNICAL_OWNER, BUSINESS_OWNER, or STEWARD instead.",\n                  "TECHNICAL_OWNER": "person or group who is responsible for technical aspects of the asset."\n                },\n                "deprecatedSymbols": {\n                  "CONSUMER": true,\n                  "DATAOWNER": true,\n                  "DELEGATE": true,\n                  "DEVELOPER": true,\n                  "PRODUCER": true,\n                  "STAKEHOLDER": true\n                },\n                "name": "OwnershipType",\n                "namespace": "com.linkedin.common",\n                "symbols": [\n                  "CUSTOM",\n                  "TECHNICAL_OWNER",\n                  "BUSINESS_OWNER",\n                  "DATA_STEWARD",\n                  "NONE",\n                  "DEVELOPER",\n                  "DATAOWNER",\n                  "DELEGATE",\n                  "PRODUCER",\n                  "CONSUMER",\n                  "STAKEHOLDER"\n                ],\n                "doc": "Asset owner types"\n              },\n              "name": "type",\n              "doc": "The type of the ownership"\n            },\n            {\n              "Relationship": {\n                "entityTypes": [\n                  "ownershipType"\n                ],\n                "name": "ownershipType"\n              },\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "typeUrn",\n              "default": null,\n              "doc": "The type of the ownership\\nUrn of type O"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "OwnershipSource",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": {\n                        "type": "enum",\n                        "symbolDocs": {\n                          "AUDIT": "Auditing system or audit logs",\n                          "DATABASE": "Database, e.g. GRANTS table",\n                          "FILE_SYSTEM": "File system, e.g. file/directory owner",\n                          "ISSUE_TRACKING_SYSTEM": "Issue tracking system, e.g. Jira",\n                          "MANUAL": "Manually provided by a user",\n                          "OTHER": "Other sources",\n                          "SERVICE": "Other ownership-like service, e.g. Nuage, ACL service etc",\n                          "SOURCE_CONTROL": "SCM system, e.g. GIT, SVN"\n                        },\n                        "name": "OwnershipSourceType",\n                        "namespace": "com.linkedin.common",\n                        "symbols": [\n                          "AUDIT",\n                          "DATABASE",\n                          "FILE_SYSTEM",\n                          "ISSUE_TRACKING_SYSTEM",\n                          "MANUAL",\n                          "SERVICE",\n                          "SOURCE_CONTROL",\n                          "OTHER"\n                        ]\n                      },\n                      "name": "type",\n                      "doc": "The type of the source"\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "url",\n                      "default": null,\n                      "doc": "A reference URL for the source"\n                    }\n                  ],\n                  "doc": "Source/provider of the ownership information"\n                }\n              ],\n              "name": "source",\n              "default": null,\n              "doc": "Source information for the ownership"\n            },\n            {\n              "Searchable": {\n                "/actor": {\n                  "fieldName": "ownerAttributionActors",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/source": {\n                  "fieldName": "ownerAttributionSources",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/time": {\n                  "fieldName": "ownerAttributionDates",\n                  "fieldType": "DATETIME",\n                  "queryByDefault": false\n                }\n              },\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "MetadataAttribution",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When this metadata was updated."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) responsible for applying the assocated metadata. This can\\neither be a user (in case of UI edits) or the datahub system for automation."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "source",\n                      "default": null,\n                      "doc": "The DataHub source responsible for applying the associated metadata. This will only be filled out\\nwhen a DataHub source is responsible. This includes the specific metadata test urn, the automation urn."\n                    },\n                    {\n                      "type": {\n                        "type": "map",\n                        "values": "string"\n                      },\n                      "name": "sourceDetail",\n                      "default": {},\n                      "doc": "The details associated with why this metadata was applied. For example, this could include\\nthe actual regex rule, sql statement, ingestion pipeline ID, etc."\n                    }\n                  ],\n                  "doc": "Information about who, why, and how this metadata was applied"\n                }\n              ],\n              "name": "attribution",\n              "default": null,\n              "doc": "Information about who, why, and how this metadata was applied"\n            }\n          ],\n          "doc": "Ownership information"\n        }\n      },\n      "name": "owners",\n      "doc": "List of owners of the entity."\n    },\n    {\n      "Searchable": {\n        "/*": {\n          "fieldType": "MAP_ARRAY",\n          "queryByDefault": false\n        }\n      },\n      "type": [\n        {\n          "type": "map",\n          "values": {\n            "type": "array",\n            "items": "string"\n          }\n        },\n        "null"\n      ],\n      "name": "ownerTypes",\n      "default": {},\n      "doc": "Ownership type to Owners map, populated via mutation hook."\n    },\n    {\n      "type": {\n        "type": "record",\n        "name": "AuditStamp",\n        "namespace": "com.linkedin.common",\n        "fields": [\n          {\n            "type": "long",\n            "name": "time",\n            "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": "string",\n            "name": "actor",\n            "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "impersonator",\n            "default": null,\n            "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n          },\n          {\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "message",\n            "default": null,\n            "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n          }\n        ],\n        "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n      },\n      "name": "lastModified",\n      "default": {\n        "actor": "urn:li:corpuser:unknown",\n        "impersonator": null,\n        "time": 0,\n        "message": null\n      },\n      "doc": "Audit stamp containing who last modified the record and when. A value of 0 in the time field indicates missing data."\n    }\n  ],\n  "doc": "Ownership information of an entity."\n}\n')))),(0,t.yg)("h4",{id:"status"},"status"),(0,t.yg)("p",null,"The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\nThis aspect is used to represent soft deletes conventionally."),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"removed"),(0,t.yg)("td",{parentName:"tr",align:null},"boolean"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Whether the entity has been removed (soft-deleted)."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "status"\n  },\n  "name": "Status",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "BOOLEAN"\n      },\n      "type": "boolean",\n      "name": "removed",\n      "default": false,\n      "doc": "Whether the entity has been removed (soft-deleted)."\n    }\n  ],\n  "doc": "The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\\nThis aspect is used to represent soft deletes conventionally."\n}\n')))),(0,t.yg)("h4",{id:"browsepaths"},"browsePaths"),(0,t.yg)("p",null,"Shared aspect containing Browse Paths to be indexed for an entity."),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"paths"),(0,t.yg)("td",{parentName:"tr",align:null},"string[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"A list of valid browse paths for the entity.  Browse paths are expected to be forward slash-separ..."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "browsePaths"\n  },\n  "name": "BrowsePaths",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "/*": {\n          "fieldName": "browsePaths",\n          "fieldType": "BROWSE_PATH"\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": "string"\n      },\n      "name": "paths",\n      "doc": "A list of valid browse paths for the entity.\\n\\nBrowse paths are expected to be forward slash-separated strings. For example: \'prod/snowflake/datasetName\'"\n    }\n  ],\n  "doc": "Shared aspect containing Browse Paths to be indexed for an entity."\n}\n')))),(0,t.yg)("h4",{id:"glossaryrelatedterms"},"glossaryRelatedTerms"),(0,t.yg)("p",null,"Has A / Is A lineage information about a glossary Term reporting the lineage"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"isRelatedTerms"),(0,t.yg)("td",{parentName:"tr",align:null},"string[]"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"The relationship Is A with glossary term"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 IsA")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"hasRelatedTerms"),(0,t.yg)("td",{parentName:"tr",align:null},"string[]"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"The relationship Has A with glossary term"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 HasA")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"values"),(0,t.yg)("td",{parentName:"tr",align:null},"string[]"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"The relationship Has Value with glossary term. These are fixed value a term has. For example a Co..."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 HasValue")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"relatedTerms"),(0,t.yg)("td",{parentName:"tr",align:null},"string[]"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"The relationship isRelatedTo with glossary term"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 IsRelatedTo"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "glossaryRelatedTerms"\n  },\n  "name": "GlossaryRelatedTerms",\n  "namespace": "com.linkedin.glossary",\n  "fields": [\n    {\n      "Relationship": {\n        "/*": {\n          "entityTypes": [\n            "glossaryTerm"\n          ],\n          "name": "IsA"\n        }\n      },\n      "Searchable": {\n        "/*": {\n          "fieldName": "isRelatedTerms",\n          "fieldType": "URN",\n          "queryByDefault": false\n        }\n      },\n      "type": [\n        "null",\n        {\n          "type": "array",\n          "items": "string"\n        }\n      ],\n      "name": "isRelatedTerms",\n      "default": null,\n      "doc": "The relationship Is A with glossary term"\n    },\n    {\n      "Relationship": {\n        "/*": {\n          "entityTypes": [\n            "glossaryTerm"\n          ],\n          "name": "HasA"\n        }\n      },\n      "Searchable": {\n        "/*": {\n          "fieldName": "hasRelatedTerms",\n          "fieldType": "URN",\n          "queryByDefault": false\n        }\n      },\n      "type": [\n        "null",\n        {\n          "type": "array",\n          "items": "string"\n        }\n      ],\n      "name": "hasRelatedTerms",\n      "default": null,\n      "doc": "The relationship Has A with glossary term"\n    },\n    {\n      "Relationship": {\n        "/*": {\n          "entityTypes": [\n            "glossaryTerm"\n          ],\n          "name": "HasValue"\n        }\n      },\n      "Searchable": {\n        "/*": {\n          "fieldName": "values",\n          "fieldType": "URN"\n        }\n      },\n      "type": [\n        "null",\n        {\n          "type": "array",\n          "items": "string"\n        }\n      ],\n      "name": "values",\n      "default": null,\n      "doc": "The relationship Has Value with glossary term.\\nThese are fixed value a term has. For example a ColorEnum where RED, GREEN and YELLOW are fixed values."\n    },\n    {\n      "Relationship": {\n        "/*": {\n          "entityTypes": [\n            "glossaryTerm"\n          ],\n          "name": "IsRelatedTo"\n        }\n      },\n      "Searchable": {\n        "/*": {\n          "fieldName": "relatedTerms",\n          "fieldType": "URN"\n        }\n      },\n      "type": [\n        "null",\n        {\n          "type": "array",\n          "items": "string"\n        }\n      ],\n      "name": "relatedTerms",\n      "default": null,\n      "doc": "The relationship isRelatedTo with glossary term"\n    }\n  ],\n  "doc": "Has A / Is A lineage information about a glossary Term reporting the lineage"\n}\n')))),(0,t.yg)("h4",{id:"institutionalmemory"},"institutionalMemory"),(0,t.yg)("p",null,"Institutional memory of an entity. This is a way to link to relevant documentation and provide description of the documentation. Institutional or tribal knowledge is very important for users to leverage the entity."),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"elements"),(0,t.yg)("td",{parentName:"tr",align:null},"InstitutionalMemoryMetadata[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"List of records that represent institutional memory of an entity. Each record consists of a link,..."),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "institutionalMemory"\n  },\n  "name": "InstitutionalMemory",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "InstitutionalMemoryMetadata",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.url.Url",\n                "coercerClass": "com.linkedin.common.url.UrlCoercer"\n              },\n              "type": "string",\n              "name": "url",\n              "doc": "Link to an engineering design document or a wiki page."\n            },\n            {\n              "type": "string",\n              "name": "description",\n              "doc": "Description of the link."\n            },\n            {\n              "type": {\n                "type": "record",\n                "name": "AuditStamp",\n                "namespace": "com.linkedin.common",\n                "fields": [\n                  {\n                    "type": "long",\n                    "name": "time",\n                    "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n                  },\n                  {\n                    "java": {\n                      "class": "com.linkedin.common.urn.Urn"\n                    },\n                    "type": "string",\n                    "name": "actor",\n                    "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n                  },\n                  {\n                    "java": {\n                      "class": "com.linkedin.common.urn.Urn"\n                    },\n                    "type": [\n                      "null",\n                      "string"\n                    ],\n                    "name": "impersonator",\n                    "default": null,\n                    "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n                  },\n                  {\n                    "type": [\n                      "null",\n                      "string"\n                    ],\n                    "name": "message",\n                    "default": null,\n                    "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n                  }\n                ],\n                "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n              },\n              "name": "createStamp",\n              "doc": "Audit stamp associated with creation of this record"\n            },\n            {\n              "type": [\n                "null",\n                "com.linkedin.common.AuditStamp"\n              ],\n              "name": "updateStamp",\n              "default": null,\n              "doc": "Audit stamp associated with updation of this record"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "InstitutionalMemoryMetadataSettings",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "boolean",\n                      "name": "showInAssetPreview",\n                      "default": false,\n                      "doc": "Show record in asset preview like on entity header and search previews"\n                    }\n                  ],\n                  "doc": "Settings related to a record of InstitutionalMemoryMetadata"\n                }\n              ],\n              "name": "settings",\n              "default": null,\n              "doc": "Settings for this record"\n            }\n          ],\n          "doc": "Metadata corresponding to a record of institutional memory."\n        }\n      },\n      "name": "elements",\n      "doc": "List of records that represent institutional memory of an entity. Each record consists of a link, description, creator and timestamps associated with that record."\n    }\n  ],\n  "doc": "Institutional memory of an entity. This is a way to link to relevant documentation and provide description of the documentation. Institutional or tribal knowledge is very important for users to leverage the entity."\n}\n')))),(0,t.yg)("h4",{id:"schemametadata"},"schemaMetadata"),(0,t.yg)("p",null,"SchemaMetadata to describe metadata related to store schema"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"schemaName"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Schema name e.g. PageViewEvent, identity.Profile, ams.account_management_tracking"),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"platform"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Standardized platform urn where schema is defined. The data platform Urn (urn:li:platform:{platfo..."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"version"),(0,t.yg)("td",{parentName:"tr",align:null},"long"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Every change to SchemaMetadata in the resource results in a new version. Version is server assign..."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"created"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#auditstamp"},"AuditStamp")),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"An AuditStamp corresponding to the creation of this resource/association/sub-resource. A value of..."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"lastModified"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#auditstamp"},"AuditStamp")),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"An AuditStamp corresponding to the last modification of this resource/association/sub-resource. I..."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"deleted"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#auditstamp"},"AuditStamp")),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"An AuditStamp corresponding to the deletion of this resource/association/sub-resource. Logically,..."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"dataset"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Dataset this schema metadata is associated with."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"cluster"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"The cluster this schema metadata resides from"),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"hash"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"the SHA1 hash of the schema content"),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"platformSchema"),(0,t.yg)("td",{parentName:"tr",align:null},"union"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"The native schema in the dataset's platform."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"fields"),(0,t.yg)("td",{parentName:"tr",align:null},"SchemaField[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Client provided a list of fields from document schema."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"primaryKeys"),(0,t.yg)("td",{parentName:"tr",align:null},"string[]"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Client provided list of fields that define primary keys to access record. Field order defines hie..."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"foreignKeysSpecs"),(0,t.yg)("td",{parentName:"tr",align:null},"map"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Map captures all the references schema makes to external datasets. Map key is ForeignKeySpecName ..."),(0,t.yg)("td",{parentName:"tr",align:null},"\u26a0\ufe0f Deprecated")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"foreignKeys"),(0,t.yg)("td",{parentName:"tr",align:null},"ForeignKeyConstraint[]"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"List of foreign key constraints for the schema"),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "schemaMetadata"\n  },\n  "name": "SchemaMetadata",\n  "namespace": "com.linkedin.schema",\n  "fields": [\n    {\n      "validate": {\n        "strlen": {\n          "max": 500,\n          "min": 1\n        }\n      },\n      "type": "string",\n      "name": "schemaName",\n      "doc": "Schema name e.g. PageViewEvent, identity.Profile, ams.account_management_tracking"\n    },\n    {\n      "java": {\n        "class": "com.linkedin.common.urn.DataPlatformUrn"\n      },\n      "type": "string",\n      "name": "platform",\n      "doc": "Standardized platform urn where schema is defined. The data platform Urn (urn:li:platform:{platform_name})"\n    },\n    {\n      "type": "long",\n      "name": "version",\n      "doc": "Every change to SchemaMetadata in the resource results in a new version. Version is server assigned. This version is differ from platform native schema version."\n    },\n    {\n      "type": {\n        "type": "record",\n        "name": "AuditStamp",\n        "namespace": "com.linkedin.common",\n        "fields": [\n          {\n            "type": "long",\n            "name": "time",\n            "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": "string",\n            "name": "actor",\n            "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "impersonator",\n            "default": null,\n            "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n          },\n          {\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "message",\n            "default": null,\n            "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n          }\n        ],\n        "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n      },\n      "name": "created",\n      "default": {\n        "actor": "urn:li:corpuser:unknown",\n        "impersonator": null,\n        "time": 0,\n        "message": null\n      },\n      "doc": "An AuditStamp corresponding to the creation of this resource/association/sub-resource. A value of 0 for time indicates missing data."\n    },\n    {\n      "type": "com.linkedin.common.AuditStamp",\n      "name": "lastModified",\n      "default": {\n        "actor": "urn:li:corpuser:unknown",\n        "impersonator": null,\n        "time": 0,\n        "message": null\n      },\n      "doc": "An AuditStamp corresponding to the last modification of this resource/association/sub-resource. If no modification has happened since creation, lastModified should be the same as created. A value of 0 for time indicates missing data."\n    },\n    {\n      "type": [\n        "null",\n        "com.linkedin.common.AuditStamp"\n      ],\n      "name": "deleted",\n      "default": null,\n      "doc": "An AuditStamp corresponding to the deletion of this resource/association/sub-resource. Logically, deleted MUST have a later timestamp than creation. It may or may not have the same time as lastModified depending upon the resource/association/sub-resource semantics."\n    },\n    {\n      "java": {\n        "class": "com.linkedin.common.urn.DatasetUrn"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "dataset",\n      "default": null,\n      "doc": "Dataset this schema metadata is associated with."\n    },\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "cluster",\n      "default": null,\n      "doc": "The cluster this schema metadata resides from"\n    },\n    {\n      "type": "string",\n      "name": "hash",\n      "doc": "the SHA1 hash of the schema content"\n    },\n    {\n      "type": [\n        {\n          "type": "record",\n          "name": "EspressoSchema",\n          "namespace": "com.linkedin.schema",\n          "fields": [\n            {\n              "type": "string",\n              "name": "documentSchema",\n              "doc": "The native espresso document schema."\n            },\n            {\n              "type": "string",\n              "name": "tableSchema",\n              "doc": "The espresso table schema definition."\n            }\n          ],\n          "doc": "Schema text of an espresso table schema."\n        },\n        {\n          "type": "record",\n          "name": "OracleDDL",\n          "namespace": "com.linkedin.schema",\n          "fields": [\n            {\n              "type": "string",\n              "name": "tableSchema",\n              "doc": "The native schema in the dataset\'s platform. This is a human readable (json blob) table schema."\n            }\n          ],\n          "doc": "Schema holder for oracle data definition language that describes an oracle table."\n        },\n        {\n          "type": "record",\n          "name": "MySqlDDL",\n          "namespace": "com.linkedin.schema",\n          "fields": [\n            {\n              "type": "string",\n              "name": "tableSchema",\n              "doc": "The native schema in the dataset\'s platform. This is a human readable (json blob) table schema."\n            }\n          ],\n          "doc": "Schema holder for MySql data definition language that describes an MySql table."\n        },\n        {\n          "type": "record",\n          "name": "PrestoDDL",\n          "namespace": "com.linkedin.schema",\n          "fields": [\n            {\n              "type": "string",\n              "name": "rawSchema",\n              "doc": "The raw schema in the dataset\'s platform. This includes the DDL and the columns extracted from DDL."\n            }\n          ],\n          "doc": "Schema holder for presto data definition language that describes a presto view."\n        },\n        {\n          "type": "record",\n          "name": "KafkaSchema",\n          "namespace": "com.linkedin.schema",\n          "fields": [\n            {\n              "type": "string",\n              "name": "documentSchema",\n              "doc": "The native kafka document schema. This is a human readable avro document schema."\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "documentSchemaType",\n              "default": null,\n              "doc": "The native kafka document schema type. This can be AVRO/PROTOBUF/JSON."\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "keySchema",\n              "default": null,\n              "doc": "The native kafka key schema as retrieved from Schema Registry"\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "keySchemaType",\n              "default": null,\n              "doc": "The native kafka key schema type. This can be AVRO/PROTOBUF/JSON."\n            }\n          ],\n          "doc": "Schema holder for kafka schema."\n        },\n        {\n          "type": "record",\n          "name": "BinaryJsonSchema",\n          "namespace": "com.linkedin.schema",\n          "fields": [\n            {\n              "type": "string",\n              "name": "schema",\n              "doc": "The native schema text for binary JSON file format."\n            }\n          ],\n          "doc": "Schema text of binary JSON schema."\n        },\n        {\n          "type": "record",\n          "name": "OrcSchema",\n          "namespace": "com.linkedin.schema",\n          "fields": [\n            {\n              "type": "string",\n              "name": "schema",\n              "doc": "The native schema for ORC file format."\n            }\n          ],\n          "doc": "Schema text of an ORC schema."\n        },\n        {\n          "type": "record",\n          "name": "Schemaless",\n          "namespace": "com.linkedin.schema",\n          "fields": [],\n          "doc": "The dataset has no specific schema associated with it"\n        },\n        {\n          "type": "record",\n          "name": "KeyValueSchema",\n          "namespace": "com.linkedin.schema",\n          "fields": [\n            {\n              "type": "string",\n              "name": "keySchema",\n              "doc": "The raw schema for the key in the key-value store."\n            },\n            {\n              "type": "string",\n              "name": "valueSchema",\n              "doc": "The raw schema for the value in the key-value store."\n            }\n          ],\n          "doc": "Schema text of a key-value store schema."\n        },\n        {\n          "type": "record",\n          "name": "OtherSchema",\n          "namespace": "com.linkedin.schema",\n          "fields": [\n            {\n              "type": "string",\n              "name": "rawSchema",\n              "doc": "The native schema in the dataset\'s platform."\n            }\n          ],\n          "doc": "Schema holder for undefined schema types."\n        }\n      ],\n      "name": "platformSchema",\n      "doc": "The native schema in the dataset\'s platform."\n    },\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "SchemaField",\n          "namespace": "com.linkedin.schema",\n          "fields": [\n            {\n              "Searchable": {\n                "boostScore": 1.0,\n                "fieldName": "fieldPaths",\n                "fieldType": "TEXT",\n                "queryByDefault": "true"\n              },\n              "type": "string",\n              "name": "fieldPath",\n              "doc": "Flattened name of the field. Field is computed from jsonPath field."\n            },\n            {\n              "Deprecated": true,\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "jsonPath",\n              "default": null,\n              "doc": "Flattened name of a field in JSON Path notation."\n            },\n            {\n              "type": "boolean",\n              "name": "nullable",\n              "default": false,\n              "doc": "Indicates if this field is optional or nullable"\n            },\n            {\n              "Searchable": {\n                "boostScore": 0.1,\n                "fieldName": "fieldDescriptions",\n                "fieldType": "TEXT"\n              },\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "description",\n              "default": null,\n              "doc": "Description"\n            },\n            {\n              "Deprecated": true,\n              "Searchable": {\n                "boostScore": 0.2,\n                "fieldName": "fieldLabels",\n                "fieldType": "TEXT"\n              },\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "label",\n              "default": null,\n              "doc": "Label of the field. Provides a more human-readable name for the field than field path. Some sources will\\nprovide this metadata but not all sources have the concept of a label. If just one string is associated with\\na field in a source, that is most likely a description.\\n\\nNote that this field is deprecated and is not surfaced in the UI."\n            },\n            {\n              "type": [\n                "null",\n                "com.linkedin.common.AuditStamp"\n              ],\n              "name": "created",\n              "default": null,\n              "doc": "An AuditStamp corresponding to the creation of this schema field."\n            },\n            {\n              "type": [\n                "null",\n                "com.linkedin.common.AuditStamp"\n              ],\n              "name": "lastModified",\n              "default": null,\n              "doc": "An AuditStamp corresponding to the last modification of this schema field."\n            },\n            {\n              "type": {\n                "type": "record",\n                "name": "SchemaFieldDataType",\n                "namespace": "com.linkedin.schema",\n                "fields": [\n                  {\n                    "type": [\n                      {\n                        "type": "record",\n                        "name": "BooleanType",\n                        "namespace": "com.linkedin.schema",\n                        "fields": [],\n                        "doc": "Boolean field type."\n                      },\n                      {\n                        "type": "record",\n                        "name": "FixedType",\n                        "namespace": "com.linkedin.schema",\n                        "fields": [],\n                        "doc": "Fixed field type."\n                      },\n                      {\n                        "type": "record",\n                        "name": "StringType",\n                        "namespace": "com.linkedin.schema",\n                        "fields": [],\n                        "doc": "String field type."\n                      },\n                      {\n                        "type": "record",\n                        "name": "BytesType",\n                        "namespace": "com.linkedin.schema",\n                        "fields": [],\n                        "doc": "Bytes field type."\n                      },\n                      {\n                        "type": "record",\n                        "name": "NumberType",\n                        "namespace": "com.linkedin.schema",\n                        "fields": [],\n                        "doc": "Number data type: long, integer, short, etc.."\n                      },\n                      {\n                        "type": "record",\n                        "name": "DateType",\n                        "namespace": "com.linkedin.schema",\n                        "fields": [],\n                        "doc": "Date field type."\n                      },\n                      {\n                        "type": "record",\n                        "name": "TimeType",\n                        "namespace": "com.linkedin.schema",\n                        "fields": [],\n                        "doc": "Time field type. This should also be used for datetimes."\n                      },\n                      {\n                        "type": "record",\n                        "name": "EnumType",\n                        "namespace": "com.linkedin.schema",\n                        "fields": [],\n                        "doc": "Enum field type."\n                      },\n                      {\n                        "type": "record",\n                        "name": "NullType",\n                        "namespace": "com.linkedin.schema",\n                        "fields": [],\n                        "doc": "Null field type."\n                      },\n                      {\n                        "type": "record",\n                        "name": "MapType",\n                        "namespace": "com.linkedin.schema",\n                        "fields": [\n                          {\n                            "type": [\n                              "null",\n                              "string"\n                            ],\n                            "name": "keyType",\n                            "default": null,\n                            "doc": "Key type in a map"\n                          },\n                          {\n                            "type": [\n                              "null",\n                              "string"\n                            ],\n                            "name": "valueType",\n                            "default": null,\n                            "doc": "Type of the value in a map"\n                          }\n                        ],\n                        "doc": "Map field type."\n                      },\n                      {\n                        "type": "record",\n                        "name": "ArrayType",\n                        "namespace": "com.linkedin.schema",\n                        "fields": [\n                          {\n                            "type": [\n                              "null",\n                              {\n                                "type": "array",\n                                "items": "string"\n                              }\n                            ],\n                            "name": "nestedType",\n                            "default": null,\n                            "doc": "List of types this array holds."\n                          }\n                        ],\n                        "doc": "Array field type."\n                      },\n                      {\n                        "type": "record",\n                        "name": "UnionType",\n                        "namespace": "com.linkedin.schema",\n                        "fields": [\n                          {\n                            "type": [\n                              "null",\n                              {\n                                "type": "array",\n                                "items": "string"\n                              }\n                            ],\n                            "name": "nestedTypes",\n                            "default": null,\n                            "doc": "List of types in union type."\n                          }\n                        ],\n                        "doc": "Union field type."\n                      },\n                      {\n                        "type": "record",\n                        "name": "RecordType",\n                        "namespace": "com.linkedin.schema",\n                        "fields": [],\n                        "doc": "Record field type."\n                      }\n                    ],\n                    "name": "type",\n                    "doc": "Data platform specific types"\n                  }\n                ],\n                "doc": "Schema field data types"\n              },\n              "name": "type",\n              "doc": "Platform independent field type of the field."\n            },\n            {\n              "type": "string",\n              "name": "nativeDataType",\n              "doc": "The native type of the field in the dataset\'s platform as declared by platform schema."\n            },\n            {\n              "type": "boolean",\n              "name": "recursive",\n              "default": false,\n              "doc": "There are use cases when a field in type B references type A. A field in A references field of type B. In such cases, we will mark the first field as recursive."\n            },\n            {\n              "Relationship": {\n                "/tags/*/tag": {\n                  "entityTypes": [\n                    "tag"\n                  ],\n                  "name": "SchemaFieldTaggedWith"\n                }\n              },\n              "Searchable": {\n                "/tags/*/attribution/actor": {\n                  "fieldName": "fieldTagAttributionActors",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/tags/*/attribution/source": {\n                  "fieldName": "fieldTagAttributionSources",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/tags/*/attribution/time": {\n                  "fieldName": "fieldTagAttributionDates",\n                  "fieldType": "DATETIME",\n                  "queryByDefault": false\n                },\n                "/tags/*/tag": {\n                  "boostScore": 0.5,\n                  "fieldName": "fieldTags",\n                  "fieldType": "URN"\n                }\n              },\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "Aspect": {\n                    "name": "globalTags"\n                  },\n                  "name": "GlobalTags",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "Relationship": {\n                        "/*/tag": {\n                          "entityTypes": [\n                            "tag"\n                          ],\n                          "name": "TaggedWith"\n                        }\n                      },\n                      "Searchable": {\n                        "/*/tag": {\n                          "addToFilters": true,\n                          "boostScore": 0.5,\n                          "fieldName": "tags",\n                          "fieldType": "URN",\n                          "filterNameOverride": "Tag",\n                          "hasValuesFieldName": "hasTags",\n                          "queryByDefault": true\n                        }\n                      },\n                      "type": {\n                        "type": "array",\n                        "items": {\n                          "type": "record",\n                          "name": "TagAssociation",\n                          "namespace": "com.linkedin.common",\n                          "fields": [\n                            {\n                              "java": {\n                                "class": "com.linkedin.common.urn.TagUrn"\n                              },\n                              "type": "string",\n                              "name": "tag",\n                              "doc": "Urn of the applied tag"\n                            },\n                            {\n                              "type": [\n                                "null",\n                                "string"\n                              ],\n                              "name": "context",\n                              "default": null,\n                              "doc": "Additional context about the association"\n                            },\n                            {\n                              "Searchable": {\n                                "/actor": {\n                                  "fieldName": "tagAttributionActors",\n                                  "fieldType": "URN",\n                                  "queryByDefault": false\n                                },\n                                "/source": {\n                                  "fieldName": "tagAttributionSources",\n                                  "fieldType": "URN",\n                                  "queryByDefault": false\n                                },\n                                "/time": {\n                                  "fieldName": "tagAttributionDates",\n                                  "fieldType": "DATETIME",\n                                  "queryByDefault": false\n                                }\n                              },\n                              "type": [\n                                "null",\n                                {\n                                  "type": "record",\n                                  "name": "MetadataAttribution",\n                                  "namespace": "com.linkedin.common",\n                                  "fields": [\n                                    {\n                                      "type": "long",\n                                      "name": "time",\n                                      "doc": "When this metadata was updated."\n                                    },\n                                    {\n                                      "java": {\n                                        "class": "com.linkedin.common.urn.Urn"\n                                      },\n                                      "type": "string",\n                                      "name": "actor",\n                                      "doc": "The entity (e.g. a member URN) responsible for applying the assocated metadata. This can\\neither be a user (in case of UI edits) or the datahub system for automation."\n                                    },\n                                    {\n                                      "java": {\n                                        "class": "com.linkedin.common.urn.Urn"\n                                      },\n                                      "type": [\n                                        "null",\n                                        "string"\n                                      ],\n                                      "name": "source",\n                                      "default": null,\n                                      "doc": "The DataHub source responsible for applying the associated metadata. This will only be filled out\\nwhen a DataHub source is responsible. This includes the specific metadata test urn, the automation urn."\n                                    },\n                                    {\n                                      "type": {\n                                        "type": "map",\n                                        "values": "string"\n                                      },\n                                      "name": "sourceDetail",\n                                      "default": {},\n                                      "doc": "The details associated with why this metadata was applied. For example, this could include\\nthe actual regex rule, sql statement, ingestion pipeline ID, etc."\n                                    }\n                                  ],\n                                  "doc": "Information about who, why, and how this metadata was applied"\n                                }\n                              ],\n                              "name": "attribution",\n                              "default": null,\n                              "doc": "Information about who, why, and how this metadata was applied"\n                            }\n                          ],\n                          "doc": "Properties of an applied tag. For now, just an Urn. In the future we can extend this with other properties, e.g.\\npropagation parameters."\n                        }\n                      },\n                      "name": "tags",\n                      "doc": "Tags associated with a given entity"\n                    }\n                  ],\n                  "doc": "Tag aspect used for applying tags to an entity"\n                }\n              ],\n              "name": "globalTags",\n              "default": null,\n              "doc": "Tags associated with the field"\n            },\n            {\n              "Relationship": {\n                "/terms/*/urn": {\n                  "entityTypes": [\n                    "glossaryTerm"\n                  ],\n                  "name": "SchemaFieldWithGlossaryTerm"\n                }\n              },\n              "Searchable": {\n                "/terms/*/attribution/actor": {\n                  "fieldName": "fieldTermAttributionActors",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/terms/*/attribution/source": {\n                  "fieldName": "fieldTermAttributionSources",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/terms/*/attribution/time": {\n                  "fieldName": "fieldTermAttributionDates",\n                  "fieldType": "DATETIME",\n                  "queryByDefault": false\n                },\n                "/terms/*/urn": {\n                  "boostScore": 0.5,\n                  "fieldName": "fieldGlossaryTerms",\n                  "fieldType": "URN"\n                }\n              },\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "Aspect": {\n                    "name": "glossaryTerms"\n                  },\n                  "name": "GlossaryTerms",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": {\n                        "type": "array",\n                        "items": {\n                          "type": "record",\n                          "name": "GlossaryTermAssociation",\n                          "namespace": "com.linkedin.common",\n                          "fields": [\n                            {\n                              "Relationship": {\n                                "entityTypes": [\n                                  "glossaryTerm"\n                                ],\n                                "name": "TermedWith"\n                              },\n                              "Searchable": {\n                                "addToFilters": true,\n                                "fieldName": "glossaryTerms",\n                                "fieldType": "URN",\n                                "filterNameOverride": "Glossary Term",\n                                "hasValuesFieldName": "hasGlossaryTerms",\n                                "includeSystemModifiedAt": true,\n                                "systemModifiedAtFieldName": "termsModifiedAt"\n                              },\n                              "java": {\n                                "class": "com.linkedin.common.urn.GlossaryTermUrn"\n                              },\n                              "type": "string",\n                              "name": "urn",\n                              "doc": "Urn of the applied glossary term"\n                            },\n                            {\n                              "java": {\n                                "class": "com.linkedin.common.urn.Urn"\n                              },\n                              "type": [\n                                "null",\n                                "string"\n                              ],\n                              "name": "actor",\n                              "default": null,\n                              "doc": "The user URN which will be credited for adding associating this term to the entity"\n                            },\n                            {\n                              "type": [\n                                "null",\n                                "string"\n                              ],\n                              "name": "context",\n                              "default": null,\n                              "doc": "Additional context about the association"\n                            },\n                            {\n                              "Searchable": {\n                                "/actor": {\n                                  "fieldName": "termAttributionActors",\n                                  "fieldType": "URN",\n                                  "queryByDefault": false\n                                },\n                                "/source": {\n                                  "fieldName": "termAttributionSources",\n                                  "fieldType": "URN",\n                                  "queryByDefault": false\n                                },\n                                "/time": {\n                                  "fieldName": "termAttributionDates",\n                                  "fieldType": "DATETIME",\n                                  "queryByDefault": false\n                                }\n                              },\n                              "type": [\n                                "null",\n                                "com.linkedin.common.MetadataAttribution"\n                              ],\n                              "name": "attribution",\n                              "default": null,\n                              "doc": "Information about who, why, and how this metadata was applied"\n                            }\n                          ],\n                          "doc": "Properties of an applied glossary term."\n                        }\n                      },\n                      "name": "terms",\n                      "doc": "The related business terms"\n                    },\n                    {\n                      "type": "com.linkedin.common.AuditStamp",\n                      "name": "auditStamp",\n                      "doc": "Audit stamp containing who reported the related business term"\n                    }\n                  ],\n                  "doc": "Related business terms information"\n                }\n              ],\n              "name": "glossaryTerms",\n              "default": null,\n              "doc": "Glossary terms associated with the field"\n            },\n            {\n              "type": "boolean",\n              "name": "isPartOfKey",\n              "default": false,\n              "doc": "For schema fields that are part of complex keys, set this field to true\\nWe do this to easily distinguish between value and key fields"\n            },\n            {\n              "type": [\n                "null",\n                "boolean"\n              ],\n              "name": "isPartitioningKey",\n              "default": null,\n              "doc": "For Datasets which are partitioned, this determines the partitioning key.\\nNote that multiple columns can be part of a partitioning key, but currently we do not support\\nrendering the ordered partitioning key."\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "jsonProps",\n              "default": null,\n              "doc": "For schema fields that have other properties that are not modeled explicitly,\\nuse this field to serialize those properties into a JSON string"\n            }\n          ],\n          "doc": "SchemaField to describe metadata related to dataset schema."\n        }\n      },\n      "name": "fields",\n      "doc": "Client provided a list of fields from document schema."\n    },\n    {\n      "type": [\n        "null",\n        {\n          "type": "array",\n          "items": "string"\n        }\n      ],\n      "name": "primaryKeys",\n      "default": null,\n      "doc": "Client provided list of fields that define primary keys to access record. Field order defines hierarchical espresso keys. Empty lists indicates absence of primary key access patter. Value is a SchemaField@fieldPath."\n    },\n    {\n      "deprecated": "Use foreignKeys instead.",\n      "type": [\n        "null",\n        {\n          "type": "map",\n          "values": {\n            "type": "record",\n            "name": "ForeignKeySpec",\n            "namespace": "com.linkedin.schema",\n            "fields": [\n              {\n                "type": [\n                  {\n                    "type": "record",\n                    "name": "DatasetFieldForeignKey",\n                    "namespace": "com.linkedin.schema",\n                    "fields": [\n                      {\n                        "java": {\n                          "class": "com.linkedin.common.urn.DatasetUrn"\n                        },\n                        "type": "string",\n                        "name": "parentDataset",\n                        "doc": "dataset that stores the resource."\n                      },\n                      {\n                        "type": {\n                          "type": "array",\n                          "items": "string"\n                        },\n                        "name": "currentFieldPaths",\n                        "doc": "List of fields in hosting(current) SchemaMetadata that conform a foreign key. List can contain a single entry or multiple entries if several entries in hosting schema conform a foreign key in a single parent dataset."\n                      },\n                      {\n                        "type": "string",\n                        "name": "parentField",\n                        "doc": "SchemaField@fieldPath that uniquely identify field in parent dataset that this field references."\n                      }\n                    ],\n                    "doc": "For non-urn based foregin keys."\n                  },\n                  {\n                    "type": "record",\n                    "name": "UrnForeignKey",\n                    "namespace": "com.linkedin.schema",\n                    "fields": [\n                      {\n                        "type": "string",\n                        "name": "currentFieldPath",\n                        "doc": "Field in hosting(current) SchemaMetadata."\n                      }\n                    ],\n                    "doc": "If SchemaMetadata fields make any external references and references are of type com.linkedin.common.Urn or any children, this models can be used to mark it."\n                  }\n                ],\n                "name": "foreignKey",\n                "doc": "Foreign key definition in metadata schema."\n              }\n            ],\n            "doc": "Description of a foreign key in a schema."\n          }\n        }\n      ],\n      "name": "foreignKeysSpecs",\n      "default": null,\n      "doc": "Map captures all the references schema makes to external datasets. Map key is ForeignKeySpecName typeref."\n    },\n    {\n      "type": [\n        "null",\n        {\n          "type": "array",\n          "items": {\n            "type": "record",\n            "name": "ForeignKeyConstraint",\n            "namespace": "com.linkedin.schema",\n            "fields": [\n              {\n                "type": "string",\n                "name": "name",\n                "doc": "Name of the constraint, likely provided from the source"\n              },\n              {\n                "Relationship": {\n                  "/*": {\n                    "entityTypes": [\n                      "schemaField"\n                    ],\n                    "name": "ForeignKeyTo"\n                  }\n                },\n                "type": {\n                  "type": "array",\n                  "items": "string"\n                },\n                "name": "foreignFields",\n                "doc": "Fields the constraint maps to on the foreign dataset"\n              },\n              {\n                "type": {\n                  "type": "array",\n                  "items": "string"\n                },\n                "name": "sourceFields",\n                "doc": "Fields the constraint maps to on the source dataset"\n              },\n              {\n                "Relationship": {\n                  "entityTypes": [\n                    "dataset"\n                  ],\n                  "name": "ForeignKeyToDataset"\n                },\n                "java": {\n                  "class": "com.linkedin.common.urn.Urn"\n                },\n                "type": "string",\n                "name": "foreignDataset",\n                "doc": "Reference to the foreign dataset for ease of lookup"\n              }\n            ],\n            "doc": "Description of a foreign key constraint in a schema."\n          }\n        }\n      ],\n      "name": "foreignKeys",\n      "default": null,\n      "doc": "List of foreign key constraints for the schema"\n    }\n  ],\n  "doc": "SchemaMetadata to describe metadata related to store schema"\n}\n')))),(0,t.yg)("h4",{id:"deprecation"},"deprecation"),(0,t.yg)("p",null,"Deprecation status of an entity"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"deprecated"),(0,t.yg)("td",{parentName:"tr",align:null},"boolean"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Whether the entity is deprecated."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"decommissionTime"),(0,t.yg)("td",{parentName:"tr",align:null},"long"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"The time user plan to decommission this entity."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"note"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Additional information about the entity deprecation plan, such as the wiki, doc, RB."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"actor"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"The user URN which will be credited for modifying this deprecation content."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"replacement"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "deprecation"\n  },\n  "name": "Deprecation",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "addToFilters": true,\n        "fieldType": "BOOLEAN",\n        "filterNameOverride": "Deprecated",\n        "weightsPerFieldValue": {\n          "true": 0.5\n        }\n      },\n      "type": "boolean",\n      "name": "deprecated",\n      "doc": "Whether the entity is deprecated."\n    },\n    {\n      "type": [\n        "null",\n        "long"\n      ],\n      "name": "decommissionTime",\n      "default": null,\n      "doc": "The time user plan to decommission this entity."\n    },\n    {\n      "type": "string",\n      "name": "note",\n      "doc": "Additional information about the entity deprecation plan, such as the wiki, doc, RB."\n    },\n    {\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": "string",\n      "name": "actor",\n      "doc": "The user URN which will be credited for modifying this deprecation content."\n    },\n    {\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "replacement",\n      "default": null\n    }\n  ],\n  "doc": "Deprecation status of an entity"\n}\n')))),(0,t.yg)("h4",{id:"domains"},"domains"),(0,t.yg)("p",null,"Links from an Asset to its Domains"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"domains"),(0,t.yg)("td",{parentName:"tr",align:null},"string[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"The Domains attached to an Asset"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 AssociatedWith"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "domains"\n  },\n  "name": "Domains",\n  "namespace": "com.linkedin.domain",\n  "fields": [\n    {\n      "Relationship": {\n        "/*": {\n          "entityTypes": [\n            "domain"\n          ],\n          "name": "AssociatedWith"\n        }\n      },\n      "Searchable": {\n        "/*": {\n          "addToFilters": true,\n          "fieldName": "domains",\n          "fieldType": "URN",\n          "filterNameOverride": "Domain",\n          "hasValuesFieldName": "hasDomain"\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": "string"\n      },\n      "name": "domains",\n      "doc": "The Domains attached to an Asset"\n    }\n  ],\n  "doc": "Links from an Asset to its Domains"\n}\n')))),(0,t.yg)("h4",{id:"applications"},"applications"),(0,t.yg)("p",null,"Links from an Asset to its Applications"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"applications"),(0,t.yg)("td",{parentName:"tr",align:null},"string[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"The Applications attached to an Asset"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 AssociatedWith"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "applications"\n  },\n  "name": "Applications",\n  "namespace": "com.linkedin.application",\n  "fields": [\n    {\n      "Relationship": {\n        "/*": {\n          "entityTypes": [\n            "application"\n          ],\n          "name": "AssociatedWith"\n        }\n      },\n      "Searchable": {\n        "/*": {\n          "addToFilters": true,\n          "fieldName": "applications",\n          "fieldType": "URN",\n          "filterNameOverride": "Application",\n          "hasValuesFieldName": "hasApplication"\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": "string"\n      },\n      "name": "applications",\n      "doc": "The Applications attached to an Asset"\n    }\n  ],\n  "doc": "Links from an Asset to its Applications"\n}\n')))),(0,t.yg)("h4",{id:"structuredproperties"},"structuredProperties"),(0,t.yg)("p",null,"Properties about an entity governed by StructuredPropertyDefinition"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"properties"),(0,t.yg)("td",{parentName:"tr",align:null},"StructuredPropertyValueAssignment[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Custom property bag."),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "structuredProperties"\n  },\n  "name": "StructuredProperties",\n  "namespace": "com.linkedin.structured",\n  "fields": [\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "StructuredPropertyValueAssignment",\n          "namespace": "com.linkedin.structured",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "propertyUrn",\n              "doc": "The property that is being assigned a value."\n            },\n            {\n              "type": {\n                "type": "array",\n                "items": [\n                  "string",\n                  "double"\n                ]\n              },\n              "name": "values",\n              "doc": "The value assigned to the property."\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "AuditStamp",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "impersonator",\n                      "default": null,\n                      "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "message",\n                      "default": null,\n                      "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n                    }\n                  ],\n                  "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n                }\n              ],\n              "name": "created",\n              "default": null,\n              "doc": "Audit stamp containing who created this relationship edge and when"\n            },\n            {\n              "type": [\n                "null",\n                "com.linkedin.common.AuditStamp"\n              ],\n              "name": "lastModified",\n              "default": null,\n              "doc": "Audit stamp containing who last modified this relationship edge and when"\n            },\n            {\n              "Searchable": {\n                "/actor": {\n                  "fieldName": "structuredPropertyAttributionActors",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/source": {\n                  "fieldName": "structuredPropertyAttributionSources",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/time": {\n                  "fieldName": "structuredPropertyAttributionDates",\n                  "fieldType": "DATETIME",\n                  "queryByDefault": false\n                }\n              },\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "MetadataAttribution",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When this metadata was updated."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) responsible for applying the assocated metadata. This can\\neither be a user (in case of UI edits) or the datahub system for automation."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "source",\n                      "default": null,\n                      "doc": "The DataHub source responsible for applying the associated metadata. This will only be filled out\\nwhen a DataHub source is responsible. This includes the specific metadata test urn, the automation urn."\n                    },\n                    {\n                      "type": {\n                        "type": "map",\n                        "values": "string"\n                      },\n                      "name": "sourceDetail",\n                      "default": {},\n                      "doc": "The details associated with why this metadata was applied. For example, this could include\\nthe actual regex rule, sql statement, ingestion pipeline ID, etc."\n                    }\n                  ],\n                  "doc": "Information about who, why, and how this metadata was applied"\n                }\n              ],\n              "name": "attribution",\n              "default": null,\n              "doc": "Information about who, why, and how this metadata was applied"\n            }\n          ]\n        }\n      },\n      "name": "properties",\n      "doc": "Custom property bag."\n    }\n  ],\n  "doc": "Properties about an entity governed by StructuredPropertyDefinition"\n}\n')))),(0,t.yg)("h4",{id:"forms"},"forms"),(0,t.yg)("p",null,"Forms that are assigned to this entity to be filled out"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"incompleteForms"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#formassociation"},"FormAssociation"),"[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"All incomplete forms assigned to the entity."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"completedForms"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#formassociation"},"FormAssociation"),"[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"All complete forms assigned to the entity."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"verifications"),(0,t.yg)("td",{parentName:"tr",align:null},"FormVerificationAssociation[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Verifications that have been applied to the entity via completed forms."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "forms"\n  },\n  "name": "Forms",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "/*/completedPrompts/*/id": {\n          "fieldName": "incompleteFormsCompletedPromptIds",\n          "fieldType": "KEYWORD",\n          "queryByDefault": false\n        },\n        "/*/completedPrompts/*/lastModified/time": {\n          "fieldName": "incompleteFormsCompletedPromptResponseTimes",\n          "fieldType": "DATETIME",\n          "queryByDefault": false\n        },\n        "/*/incompletePrompts/*/id": {\n          "fieldName": "incompleteFormsIncompletePromptIds",\n          "fieldType": "KEYWORD",\n          "queryByDefault": false\n        },\n        "/*/urn": {\n          "fieldName": "incompleteForms",\n          "fieldType": "URN",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "FormAssociation",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "urn",\n              "doc": "Urn of the applied form"\n            },\n            {\n              "type": {\n                "type": "array",\n                "items": {\n                  "type": "record",\n                  "name": "FormPromptAssociation",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "string",\n                      "name": "id",\n                      "doc": "The id for the prompt. This must be GLOBALLY UNIQUE."\n                    },\n                    {\n                      "type": {\n                        "type": "record",\n                        "name": "AuditStamp",\n                        "namespace": "com.linkedin.common",\n                        "fields": [\n                          {\n                            "type": "long",\n                            "name": "time",\n                            "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n                          },\n                          {\n                            "java": {\n                              "class": "com.linkedin.common.urn.Urn"\n                            },\n                            "type": "string",\n                            "name": "actor",\n                            "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n                          },\n                          {\n                            "java": {\n                              "class": "com.linkedin.common.urn.Urn"\n                            },\n                            "type": [\n                              "null",\n                              "string"\n                            ],\n                            "name": "impersonator",\n                            "default": null,\n                            "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n                          },\n                          {\n                            "type": [\n                              "null",\n                              "string"\n                            ],\n                            "name": "message",\n                            "default": null,\n                            "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n                          }\n                        ],\n                        "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n                      },\n                      "name": "lastModified",\n                      "doc": "The last time this prompt was touched for the entity (set, unset)"\n                    },\n                    {\n                      "type": [\n                        "null",\n                        {\n                          "type": "record",\n                          "name": "FormPromptFieldAssociations",\n                          "namespace": "com.linkedin.common",\n                          "fields": [\n                            {\n                              "type": [\n                                "null",\n                                {\n                                  "type": "array",\n                                  "items": {\n                                    "type": "record",\n                                    "name": "FieldFormPromptAssociation",\n                                    "namespace": "com.linkedin.common",\n                                    "fields": [\n                                      {\n                                        "type": "string",\n                                        "name": "fieldPath",\n                                        "doc": "The field path on a schema field."\n                                      },\n                                      {\n                                        "type": "com.linkedin.common.AuditStamp",\n                                        "name": "lastModified",\n                                        "doc": "The last time this prompt was touched for the field on the entity (set, unset)"\n                                      }\n                                    ],\n                                    "doc": "Information about the status of a particular prompt for a specific schema field\\non an entity."\n                                  }\n                                }\n                              ],\n                              "name": "completedFieldPrompts",\n                              "default": null,\n                              "doc": "A list of field-level prompt associations that are not yet complete for this form."\n                            },\n                            {\n                              "type": [\n                                "null",\n                                {\n                                  "type": "array",\n                                  "items": "com.linkedin.common.FieldFormPromptAssociation"\n                                }\n                              ],\n                              "name": "incompleteFieldPrompts",\n                              "default": null,\n                              "doc": "A list of field-level prompt associations that are complete for this form."\n                            }\n                          ],\n                          "doc": "Information about the field-level prompt associations on a top-level prompt association."\n                        }\n                      ],\n                      "name": "fieldAssociations",\n                      "default": null,\n                      "doc": "Optional information about the field-level prompt associations."\n                    }\n                  ],\n                  "doc": "Information about the status of a particular prompt.\\nNote that this is where we can add additional information about individual responses:\\nactor, timestamp, and the response itself."\n                }\n              },\n              "name": "incompletePrompts",\n              "default": [],\n              "doc": "A list of prompts that are not yet complete for this form."\n            },\n            {\n              "type": {\n                "type": "array",\n                "items": "com.linkedin.common.FormPromptAssociation"\n              },\n              "name": "completedPrompts",\n              "default": [],\n              "doc": "A list of prompts that have been completed for this form."\n            }\n          ],\n          "doc": "Properties of an applied form."\n        }\n      },\n      "name": "incompleteForms",\n      "doc": "All incomplete forms assigned to the entity."\n    },\n    {\n      "Searchable": {\n        "/*/completedPrompts/*/id": {\n          "fieldName": "completedFormsCompletedPromptIds",\n          "fieldType": "KEYWORD",\n          "queryByDefault": false\n        },\n        "/*/completedPrompts/*/lastModified/time": {\n          "fieldName": "completedFormsCompletedPromptResponseTimes",\n          "fieldType": "DATETIME",\n          "queryByDefault": false\n        },\n        "/*/incompletePrompts/*/id": {\n          "fieldName": "completedFormsIncompletePromptIds",\n          "fieldType": "KEYWORD",\n          "queryByDefault": false\n        },\n        "/*/urn": {\n          "fieldName": "completedForms",\n          "fieldType": "URN",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": "com.linkedin.common.FormAssociation"\n      },\n      "name": "completedForms",\n      "doc": "All complete forms assigned to the entity."\n    },\n    {\n      "Searchable": {\n        "/*/form": {\n          "fieldName": "verifiedForms",\n          "fieldType": "URN",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "FormVerificationAssociation",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "form",\n              "doc": "The urn of the form that granted this verification."\n            },\n            {\n              "type": [\n                "null",\n                "com.linkedin.common.AuditStamp"\n              ],\n              "name": "lastModified",\n              "default": null,\n              "doc": "An audit stamp capturing who and when verification was applied for this form."\n            }\n          ],\n          "doc": "An association between a verification and an entity that has been granted\\nvia completion of one or more forms of type \'VERIFICATION\'."\n        }\n      },\n      "name": "verifications",\n      "default": [],\n      "doc": "Verifications that have been applied to the entity via completed forms."\n    }\n  ],\n  "doc": "Forms that are assigned to this entity to be filled out"\n}\n')))),(0,t.yg)("h4",{id:"testresults"},"testResults"),(0,t.yg)("p",null,"Information about a Test Result"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"failing"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#testresult"},"TestResult"),"[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Results that are failing"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 IsFailing")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"passing"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#testresult"},"TestResult"),"[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Results that are passing"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 IsPassing"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "testResults"\n  },\n  "name": "TestResults",\n  "namespace": "com.linkedin.test",\n  "fields": [\n    {\n      "Relationship": {\n        "/*/test": {\n          "entityTypes": [\n            "test"\n          ],\n          "name": "IsFailing"\n        }\n      },\n      "Searchable": {\n        "/*/test": {\n          "fieldName": "failingTests",\n          "fieldType": "URN",\n          "hasValuesFieldName": "hasFailingTests",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "TestResult",\n          "namespace": "com.linkedin.test",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "test",\n              "doc": "The urn of the test"\n            },\n            {\n              "type": {\n                "type": "enum",\n                "symbolDocs": {\n                  "FAILURE": " The Test Failed",\n                  "SUCCESS": " The Test Succeeded"\n                },\n                "name": "TestResultType",\n                "namespace": "com.linkedin.test",\n                "symbols": [\n                  "SUCCESS",\n                  "FAILURE"\n                ]\n              },\n              "name": "type",\n              "doc": "The type of the result"\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "testDefinitionMd5",\n              "default": null,\n              "doc": "The md5 of the test definition that was used to compute this result.\\nSee TestInfo.testDefinition.md5 for more information."\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "AuditStamp",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "impersonator",\n                      "default": null,\n                      "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "message",\n                      "default": null,\n                      "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n                    }\n                  ],\n                  "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n                }\n              ],\n              "name": "lastComputed",\n              "default": null,\n              "doc": "The audit stamp of when the result was computed, including the actor who computed it."\n            }\n          ],\n          "doc": "Information about a Test Result"\n        }\n      },\n      "name": "failing",\n      "doc": "Results that are failing"\n    },\n    {\n      "Relationship": {\n        "/*/test": {\n          "entityTypes": [\n            "test"\n          ],\n          "name": "IsPassing"\n        }\n      },\n      "Searchable": {\n        "/*/test": {\n          "fieldName": "passingTests",\n          "fieldType": "URN",\n          "hasValuesFieldName": "hasPassingTests",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": "com.linkedin.test.TestResult"\n      },\n      "name": "passing",\n      "doc": "Results that are passing"\n    }\n  ],\n  "doc": "Information about a Test Result"\n}\n')))),(0,t.yg)("h4",{id:"subtypes"},"subTypes"),(0,t.yg)("p",null,"Sub Types. Use this aspect to specialize a generic Entity\ne.g. Making a Dataset also be a View or also be a LookerExplore"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"typeNames"),(0,t.yg)("td",{parentName:"tr",align:null},"string[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"The names of the specific types."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "subTypes"\n  },\n  "name": "SubTypes",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "/*": {\n          "addToFilters": true,\n          "fieldType": "KEYWORD",\n          "filterNameOverride": "Sub Type",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": "string"\n      },\n      "name": "typeNames",\n      "doc": "The names of the specific types."\n    }\n  ],\n  "doc": "Sub Types. Use this aspect to specialize a generic Entity\\ne.g. Making a Dataset also be a View or also be a LookerExplore"\n}\n')))),(0,t.yg)("h4",{id:"assetsettings"},"assetSettings"),(0,t.yg)("p",null,"Settings associated with this asset"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"assetSummary"),(0,t.yg)("td",{parentName:"tr",align:null},"AssetSummarySettings"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Information related to the asset summary for this asset"),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "assetSettings"\n  },\n  "name": "AssetSettings",\n  "namespace": "com.linkedin.settings.asset",\n  "fields": [\n    {\n      "type": [\n        "null",\n        {\n          "type": "record",\n          "name": "AssetSummarySettings",\n          "namespace": "com.linkedin.settings.asset",\n          "fields": [\n            {\n              "Relationship": {\n                "/*/template": {\n                  "entityTypes": [\n                    "dataHubPageTemplate"\n                  ],\n                  "name": "HasSummaryTemplate"\n                }\n              },\n              "type": [\n                {\n                  "type": "array",\n                  "items": {\n                    "type": "record",\n                    "name": "AssetSummarySettingsTemplate",\n                    "namespace": "com.linkedin.settings.asset",\n                    "fields": [\n                      {\n                        "java": {\n                          "class": "com.linkedin.common.urn.Urn"\n                        },\n                        "type": "string",\n                        "name": "template",\n                        "doc": "The urn of the template"\n                      }\n                    ],\n                    "doc": "Object containing the template and any additional info for asset summary settings"\n                  }\n                },\n                "null"\n              ],\n              "name": "templates",\n              "default": [],\n              "doc": "The list of templates applied to this asset in order. Right now we only expect one."\n            }\n          ],\n          "doc": "Information related to the asset summary for this asset"\n        }\n      ],\n      "name": "assetSummary",\n      "default": null,\n      "doc": "Information related to the asset summary for this asset"\n    }\n  ],\n  "doc": "Settings associated with this asset"\n}\n')))),(0,t.yg)("h3",{id:"common-types"},"Common Types"),(0,t.yg)("p",null,"These types are used across multiple aspects in this entity."),(0,t.yg)("h4",{id:"auditstamp"},"AuditStamp"),(0,t.yg)("p",null,"Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Fields:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"time")," (long): When did the resource/association/sub-resource move into the specific lifecyc..."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"actor")," (string): The entity (e.g. a member URN) which will be credited for moving the resource..."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"impersonator")," (string?): The entity (e.g. a service URN) which performs the change on behalf of the Ac..."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"message")," (string?): Additional context around how DataHub was informed of the particular change. ...")),(0,t.yg)("h4",{id:"formassociation"},"FormAssociation"),(0,t.yg)("p",null,"Properties of an applied form."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Fields:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"urn")," (string): Urn of the applied form"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"incompletePrompts")," (FormPromptAssociation[]): A list of prompts that are not yet complete for this form."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"completedPrompts")," (FormPromptAssociation[]): A list of prompts that have been completed for this form.")),(0,t.yg)("h4",{id:"testresult"},"TestResult"),(0,t.yg)("p",null,"Information about a Test Result"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Fields:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"test")," (string): The urn of the test"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"type")," (TestResultType): The type of the result"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"testDefinitionMd5")," (string?): The md5 of the test definition that was used to compute this result. See Test..."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"lastComputed")," (AuditStamp?): The audit stamp of when the result was computed, including the actor who comp...")),(0,t.yg)("h3",{id:"relationships"},"Relationships"),(0,t.yg)("h4",{id:"self"},"Self"),(0,t.yg)("p",null,"These are the relationships to itself, stored in this entity's aspects"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"IsA (via ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryRelatedTerms.isRelatedTerms"),")"),(0,t.yg)("li",{parentName:"ul"},"HasA (via ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryRelatedTerms.hasRelatedTerms"),")"),(0,t.yg)("li",{parentName:"ul"},"HasValue (via ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryRelatedTerms.values"),")"),(0,t.yg)("li",{parentName:"ul"},"IsRelatedTo (via ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryRelatedTerms.relatedTerms"),")"),(0,t.yg)("li",{parentName:"ul"},"SchemaFieldWithGlossaryTerm (via ",(0,t.yg)("inlineCode",{parentName:"li"},"schemaMetadata.fields.glossaryTerms"),")"),(0,t.yg)("li",{parentName:"ul"},"TermedWith (via ",(0,t.yg)("inlineCode",{parentName:"li"},"schemaMetadata.fields.glossaryTerms.terms.urn"),")")),(0,t.yg)("h4",{id:"outgoing"},"Outgoing"),(0,t.yg)("p",null,"These are the relationships stored in this entity's aspects"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"IsPartOf"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"GlossaryNode via ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryTermInfo.parentNode")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"OwnedBy"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Corpuser via ",(0,t.yg)("inlineCode",{parentName:"li"},"ownership.owners.owner")),(0,t.yg)("li",{parentName:"ul"},"CorpGroup via ",(0,t.yg)("inlineCode",{parentName:"li"},"ownership.owners.owner")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"ownershipType"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"OwnershipType via ",(0,t.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"SchemaFieldTaggedWith"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Tag via ",(0,t.yg)("inlineCode",{parentName:"li"},"schemaMetadata.fields.globalTags")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"TaggedWith"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Tag via ",(0,t.yg)("inlineCode",{parentName:"li"},"schemaMetadata.fields.globalTags.tags")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"ForeignKeyTo"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"SchemaField via ",(0,t.yg)("inlineCode",{parentName:"li"},"schemaMetadata.foreignKeys.foreignFields")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"ForeignKeyToDataset"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Dataset via ",(0,t.yg)("inlineCode",{parentName:"li"},"schemaMetadata.foreignKeys.foreignDataset")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"AssociatedWith"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Domain via ",(0,t.yg)("inlineCode",{parentName:"li"},"domains.domains")),(0,t.yg)("li",{parentName:"ul"},"Application via ",(0,t.yg)("inlineCode",{parentName:"li"},"applications.applications")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"IsFailing"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Test via ",(0,t.yg)("inlineCode",{parentName:"li"},"testResults.failing")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"IsPassing"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Test via ",(0,t.yg)("inlineCode",{parentName:"li"},"testResults.passing")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"HasSummaryTemplate"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"DataHubPageTemplate via ",(0,t.yg)("inlineCode",{parentName:"li"},"assetSettings.assetSummary.templates"))))),(0,t.yg)("h4",{id:"incoming"},"Incoming"),(0,t.yg)("p",null,"These are the relationships stored in other entity's aspects"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"SchemaFieldWithGlossaryTerm"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Dataset via ",(0,t.yg)("inlineCode",{parentName:"li"},"schemaMetadata.fields.glossaryTerms")),(0,t.yg)("li",{parentName:"ul"},"Chart via ",(0,t.yg)("inlineCode",{parentName:"li"},"inputFields.fields.schemaField.glossaryTerms")),(0,t.yg)("li",{parentName:"ul"},"Dashboard via ",(0,t.yg)("inlineCode",{parentName:"li"},"inputFields.fields.schemaField.glossaryTerms")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"TermedWith"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Dataset via ",(0,t.yg)("inlineCode",{parentName:"li"},"schemaMetadata.fields.glossaryTerms.terms.urn")),(0,t.yg)("li",{parentName:"ul"},"Dataset via ",(0,t.yg)("inlineCode",{parentName:"li"},"editableSchemaMetadata.editableSchemaFieldInfo.glossaryTerms.terms.urn")),(0,t.yg)("li",{parentName:"ul"},"Dataset via ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryTerms.terms.urn")),(0,t.yg)("li",{parentName:"ul"},"DataJob via ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryTerms.terms.urn")),(0,t.yg)("li",{parentName:"ul"},"DataFlow via ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryTerms.terms.urn")),(0,t.yg)("li",{parentName:"ul"},"Chart via ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryTerms.terms.urn")),(0,t.yg)("li",{parentName:"ul"},"Chart via ",(0,t.yg)("inlineCode",{parentName:"li"},"inputFields.fields.schemaField.glossaryTerms.terms.urn")),(0,t.yg)("li",{parentName:"ul"},"Dashboard via ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryTerms.terms.urn")),(0,t.yg)("li",{parentName:"ul"},"Dashboard via ",(0,t.yg)("inlineCode",{parentName:"li"},"inputFields.fields.schemaField.glossaryTerms.terms.urn")),(0,t.yg)("li",{parentName:"ul"},"Notebook via ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryTerms.terms.urn")),(0,t.yg)("li",{parentName:"ul"},"Container via ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryTerms.terms.urn")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"EditableSchemaFieldWithGlossaryTerm"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Dataset via ",(0,t.yg)("inlineCode",{parentName:"li"},"editableSchemaMetadata.editableSchemaFieldInfo.glossaryTerms"))))),(0,t.yg)("h3",{id:"global-metadata-model"},(0,t.yg)("a",{parentName:"h3",href:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,t.yg)("p",null,(0,t.yg)("img",{parentName:"p",src:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}h.isMDXComponent=!0}}]);