"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[32175],{86689:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>y,contentTitle:()=>p,default:()=>h,frontMatter:()=>m,metadata:()=>d,toc:()=>u});a(96540);var t=a(15680),r=a(53720),i=a(5400);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))})),e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const m={sidebar_position:22,title:"MLPrimaryKey",slug:"/generated/metamodel/entities/mlprimarykey",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/mlPrimaryKey.md"},p="MLPrimaryKey",d={unversionedId:"docs/generated/metamodel/entities/mlPrimaryKey",id:"docs/generated/metamodel/entities/mlPrimaryKey",title:"MLPrimaryKey",description:"MLPrimaryKey represents a primary key entity within a machine learning feature store. Primary keys uniquely identify records in feature tables and are essential for joining features with entities in online and offline feature serving. In feature stores like Feast, Tecton, or AWS SageMaker Feature Store, primary keys define the identifier columns that link features to the entities they describe (e.g., userid, productid, transaction_id).",source:"@site/genDocs/docs/generated/metamodel/entities/mlPrimaryKey.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/mlprimarykey",permalink:"/docs/generated/metamodel/entities/mlprimarykey",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/mlPrimaryKey.md",tags:[],version:"current",sidebarPosition:22,frontMatter:{sidebar_position:22,title:"MLPrimaryKey",slug:"/generated/metamodel/entities/mlprimarykey",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/mlPrimaryKey.md"},sidebar:"overviewSidebar",previous:{title:"ML Feature",permalink:"/docs/generated/metamodel/entities/mlfeature"},next:{title:"Test",permalink:"/docs/generated/metamodel/entities/test"}},y={},u=[{value:"Identity",id:"identity",level:2},{value:"Important Capabilities",id:"important-capabilities",level:2},{value:"Primary Key Properties",id:"primary-key-properties",level:3},{value:"Editable Properties",id:"editable-properties",level:3},{value:"Data Lineage",id:"data-lineage",level:3},{value:"Tags and Glossary Terms",id:"tags-and-glossary-terms",level:3},{value:"Ownership",id:"ownership",level:3},{value:"Domains and Data Products",id:"domains-and-data-products",level:3},{value:"Structured Properties",id:"structured-properties",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"Creating an MLPrimaryKey",id:"creating-an-mlprimarykey",level:3},{value:"Reading MLPrimaryKey Information",id:"reading-mlprimarykey-information",level:3},{value:"Adding MLPrimaryKeys to Feature Tables",id:"adding-mlprimarykeys-to-feature-tables",level:3},{value:"Querying MLPrimaryKey via REST API",id:"querying-mlprimarykey-via-rest-api",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"Relationship with MLFeatureTable",id:"relationship-with-mlfeaturetable",level:3},{value:"Relationship with Datasets",id:"relationship-with-datasets",level:3},{value:"Relationship with MLFeatures",id:"relationship-with-mlfeatures",level:3},{value:"Search and Discovery",id:"search-and-discovery",level:3},{value:"Platform Instance Support",id:"platform-instance-support",level:3},{value:"Notable Exceptions",id:"notable-exceptions",level:2},{value:"Composite Primary Keys",id:"composite-primary-keys",level:3},{value:"Primary Key vs. Entity Key vs. Join Key",id:"primary-key-vs-entity-key-vs-join-key",level:3},{value:"Primary Keys as Features",id:"primary-keys-as-features",level:3},{value:"Namespace Consistency",id:"namespace-consistency",level:3},{value:"Data Type Evolution",id:"data-type-evolution",level:3},{value:"Primary Keys and Privacy",id:"primary-keys-and-privacy",level:3},{value:"Technical Reference Guide",id:"technical-reference-guide",level:2},{value:"Reading the Field Tables",id:"reading-the-field-tables",level:3},{value:"Aspects",id:"aspects",level:3},{value:"mlPrimaryKeyKey",id:"mlprimarykeykey",level:4},{value:"mlPrimaryKeyProperties",id:"mlprimarykeyproperties",level:4},{value:"ownership",id:"ownership-1",level:4},{value:"institutionalMemory",id:"institutionalmemory",level:4},{value:"status",id:"status",level:4},{value:"deprecation",id:"deprecation",level:4},{value:"globalTags",id:"globaltags",level:4},{value:"dataPlatformInstance",id:"dataplatforminstance",level:4},{value:"glossaryTerms",id:"glossaryterms",level:4},{value:"editableMlPrimaryKeyProperties",id:"editablemlprimarykeyproperties",level:4},{value:"domains",id:"domains",level:4},{value:"applications",id:"applications",level:4},{value:"structuredProperties",id:"structuredproperties",level:4},{value:"forms",id:"forms",level:4},{value:"testResults",id:"testresults",level:4},{value:"subTypes",id:"subtypes",level:4},{value:"Common Types",id:"common-types",level:3},{value:"AuditStamp",id:"auditstamp",level:4},{value:"FormAssociation",id:"formassociation",level:4},{value:"TestResult",id:"testresult",level:4},{value:"Relationships",id:"relationships",level:3},{value:"Outgoing",id:"outgoing",level:4},{value:"Incoming",id:"incoming",level:4},{value:"Global Metadata Model",id:"global-metadata-model",level:3}],c={toc:u},g="wrapper";function h(e){var{components:n}=e,a=o(e,["components"]);return(0,t.yg)(g,s(function(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{},t=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),t.forEach((function(n){l(e,n,a[n])}))}return e}({},c,a),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"mlprimarykey"},"MLPrimaryKey"),(0,t.yg)("p",null,"MLPrimaryKey represents a primary key entity within a machine learning feature store. Primary keys uniquely identify records in feature tables and are essential for joining features with entities in online and offline feature serving. In feature stores like Feast, Tecton, or AWS SageMaker Feature Store, primary keys define the identifier columns that link features to the entities they describe (e.g., ",(0,t.yg)("inlineCode",{parentName:"p"},"user_id"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"product_id"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"transaction_id"),")."),(0,t.yg)("h2",{id:"identity"},"Identity"),(0,t.yg)("p",null,"MLPrimaryKeys are identified by two pieces of information:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Feature Namespace"),": A logical grouping or namespace for the primary key, typically corresponding to a feature table or feature group. This allows for organizational hierarchy and prevents naming conflicts across different feature sets."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Primary Key Name"),": The specific name of the primary key within the namespace. This is the identifier that would be used in the feature store to reference this key.")),(0,t.yg)("p",null,"An example of an MLPrimaryKey identifier is ",(0,t.yg)("inlineCode",{parentName:"p"},"urn:li:mlPrimaryKey:(users_feature_table,user_id)"),"."),(0,t.yg)("p",null,"The URN structure follows this pattern:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre"},"urn:li:mlPrimaryKey:(<feature_namespace>,<primary_key_name>)\n")),(0,t.yg)("p",null,"Where:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"<feature_namespace>")," is the namespace, often matching the feature table name"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"<primary_key_name>")," is the unique name of the primary key")),(0,t.yg)("p",null,"For example:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"urn:li:mlPrimaryKey:(users_feature_table,user_id)")," - User ID in a user features table"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"urn:li:mlPrimaryKey:(product_features,product_id)")," - Product ID in a product features table"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"urn:li:mlPrimaryKey:(transactions,transaction_id)")," - Transaction ID in a transactions feature table")),(0,t.yg)("h2",{id:"important-capabilities"},"Important Capabilities"),(0,t.yg)("h3",{id:"primary-key-properties"},"Primary Key Properties"),(0,t.yg)("p",null,"The core metadata about an MLPrimaryKey is stored in the ",(0,t.yg)("inlineCode",{parentName:"p"},"mlPrimaryKeyProperties")," aspect. This includes:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Description"),": Documentation explaining what this primary key represents, what entities it identifies, and how it should be used in feature serving."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Data Type"),": The data type of the primary key (e.g., TEXT, NUMERIC, BOOLEAN, BYTE, etc.). This corresponds to the MLFeatureDataType enum and helps with validation and type checking during feature serving."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Version"),": A version tag that can track the evolution of the primary key definition over time. This is useful when primary key schemas change or when multiple versions need to coexist."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Sources"),": URN references to upstream dataset entities that this primary key is derived from. This creates lineage connections between your data warehouse tables and your ML feature store, establishing data provenance."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Custom Properties"),": Additional key-value pairs for platform-specific metadata that doesn't fit into standard fields.")),(0,t.yg)("p",null,"The following code snippet shows you how to create an MLPrimaryKey with properties:"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Create an MLPrimaryKey"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/mlprimarykey_create.py\nimport os\n\nimport datahub.emitter.mce_builder as builder\nimport datahub.metadata.schema_classes as models\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\n\n# Create an emitter to DataHub over REST\ngms_server = os.getenv("DATAHUB_GMS_URL", "http://localhost:8080")\ntoken = os.getenv("DATAHUB_GMS_TOKEN")\nemitter = DatahubRestEmitter(gms_server=gms_server, token=token)\n\ndataset_urn = builder.make_dataset_urn(\n    name="fct_users_created", platform="hive", env="PROD"\n)\nprimary_key_urn = builder.make_ml_primary_key_urn(\n    feature_table_name="users_feature_table",\n    primary_key_name="user_id",\n)\n\n#  Create feature\nmetadata_change_proposal = MetadataChangeProposalWrapper(\n    entityUrn=primary_key_urn,\n    aspect=models.MLPrimaryKeyPropertiesClass(\n        description="Represents the id of the user the other features relate to.",\n        # attaching a source to a ml primary key creates lineage between the feature\n        # and the upstream dataset. This is how lineage between your data warehouse\n        # and machine learning ecosystem is established.\n        sources=[dataset_urn],\n        dataType="TEXT",\n    ),\n)\n\n# Emit metadata!\nemitter.emit_mcp(metadata_change_proposal)\nprint(f"Created ML primary key: {primary_key_urn}")\n\n'))),(0,t.yg)("h3",{id:"editable-properties"},"Editable Properties"),(0,t.yg)("p",null,"Like other DataHub entities, MLPrimaryKeys separate ingested metadata from user-edited metadata. The ",(0,t.yg)("inlineCode",{parentName:"p"},"editableMlPrimaryKeyProperties")," aspect allows users to enhance the metadata through the DataHub UI without interfering with automated ingestion:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Description"),": A user-provided description that can supplement or override the description from the ingestion source.")),(0,t.yg)("p",null,"This separation ensures that:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"User edits are preserved across ingestion runs"),(0,t.yg)("li",{parentName:"ul"},"Source system metadata remains authoritative for its fields"),(0,t.yg)("li",{parentName:"ul"},"Documentation can be improved incrementally by data practitioners")),(0,t.yg)("h3",{id:"data-lineage"},"Data Lineage"),(0,t.yg)("p",null,"MLPrimaryKeys support lineage tracking through their ",(0,t.yg)("inlineCode",{parentName:"p"},"sources")," field. By linking primary keys to upstream datasets, you can:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Trace Data Origins"),": Understand which warehouse tables or data sources provide the key values"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Impact Analysis"),": Identify downstream ML models and feature tables affected by changes to source data"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Data Quality Monitoring"),": Track data quality issues from source systems through to feature stores"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Compliance and Auditing"),": Document the complete data flow from raw data to ML features")),(0,t.yg)("p",null,"The lineage relationships created are of type ",(0,t.yg)("inlineCode",{parentName:"p"},"DerivedFrom")," and explicitly marked as lineage relationships (",(0,t.yg)("inlineCode",{parentName:"p"},"isLineage: true"),"), ensuring they appear in DataHub's lineage visualization."),(0,t.yg)("h3",{id:"tags-and-glossary-terms"},"Tags and Glossary Terms"),(0,t.yg)("p",null,"MLPrimaryKeys can have Tags or Terms attached to them through the ",(0,t.yg)("inlineCode",{parentName:"p"},"globalTags")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"glossaryTerms")," aspects. This enables:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Classification"),": Tag primary keys with security classifications (e.g., ",(0,t.yg)("inlineCode",{parentName:"li"},"pii"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"sensitive"),")"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Organization"),": Group related primary keys with project or domain tags"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Business Context"),": Link primary keys to business glossary terms to provide business context")),(0,t.yg)("p",null,"Read ",(0,t.yg)("a",{parentName:"p",href:"https://medium.com/datahub-project/tags-and-terms-two-powerful-datahub-features-used-in-two-different-scenarios-b5b4791e892e"},"this blog")," to understand the difference between tags and terms."),(0,t.yg)("h3",{id:"ownership"},"Ownership"),(0,t.yg)("p",null,"Ownership is associated with an MLPrimaryKey using the ",(0,t.yg)("inlineCode",{parentName:"p"},"ownership")," aspect. Owners can be data scientists, ML engineers, or feature store administrators responsible for maintaining the primary key definition. Ownership helps with:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Accountability"),": Clear ownership for maintaining key definitions"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Access Control"),": Integration with DataHub policies for permission management"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Contact Information"),": Quick identification of who to ask about a primary key")),(0,t.yg)("h3",{id:"domains-and-data-products"},"Domains and Data Products"),(0,t.yg)("p",null,"MLPrimaryKeys support the ",(0,t.yg)("inlineCode",{parentName:"p"},"domains")," aspect, allowing them to be organized into logical business domains or data products. This helps with:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Organizational Structure"),": Group ML assets by team, department, or business unit"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Discovery"),": Filter and search for primary keys within specific domains"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Governance"),": Apply domain-specific policies and ownership models")),(0,t.yg)("h3",{id:"structured-properties"},"Structured Properties"),(0,t.yg)("p",null,"MLPrimaryKeys support the ",(0,t.yg)("inlineCode",{parentName:"p"},"structuredProperties")," aspect, allowing organizations to extend the metadata model with custom fields that are validated and searchable. This enables:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Custom Metadata"),": Add organization-specific fields beyond standard properties"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Validation"),": Enforce data quality on custom metadata"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Advanced Search"),": Filter and search on custom properties")),(0,t.yg)("h2",{id:"code-examples"},"Code Examples"),(0,t.yg)("h3",{id:"creating-an-mlprimarykey"},"Creating an MLPrimaryKey"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Create an MLPrimaryKey with lineage"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/mlprimarykey_create.py\nimport os\n\nimport datahub.emitter.mce_builder as builder\nimport datahub.metadata.schema_classes as models\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\n\n# Create an emitter to DataHub over REST\ngms_server = os.getenv("DATAHUB_GMS_URL", "http://localhost:8080")\ntoken = os.getenv("DATAHUB_GMS_TOKEN")\nemitter = DatahubRestEmitter(gms_server=gms_server, token=token)\n\ndataset_urn = builder.make_dataset_urn(\n    name="fct_users_created", platform="hive", env="PROD"\n)\nprimary_key_urn = builder.make_ml_primary_key_urn(\n    feature_table_name="users_feature_table",\n    primary_key_name="user_id",\n)\n\n#  Create feature\nmetadata_change_proposal = MetadataChangeProposalWrapper(\n    entityUrn=primary_key_urn,\n    aspect=models.MLPrimaryKeyPropertiesClass(\n        description="Represents the id of the user the other features relate to.",\n        # attaching a source to a ml primary key creates lineage between the feature\n        # and the upstream dataset. This is how lineage between your data warehouse\n        # and machine learning ecosystem is established.\n        sources=[dataset_urn],\n        dataType="TEXT",\n    ),\n)\n\n# Emit metadata!\nemitter.emit_mcp(metadata_change_proposal)\nprint(f"Created ML primary key: {primary_key_urn}")\n\n'))),(0,t.yg)("h3",{id:"reading-mlprimarykey-information"},"Reading MLPrimaryKey Information"),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Read MLPrimaryKey using the v2 SDK"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/mlprimarykey_read.py\nfrom datahub.sdk import DataHubClient, MLPrimaryKeyUrn\n\nclient = DataHubClient.from_env()\n\n# Or get this from the UI (share -> copy urn) and use MLPrimaryKeyUrn.from_string(...)\nmlprimarykey_urn = MLPrimaryKeyUrn("user_features", "user_id")\n\nmlprimarykey_entity = client.entities.get(mlprimarykey_urn)\nprint("MLPrimaryKey name:", mlprimarykey_entity.name)\nprint("MLPrimaryKey feature table:", mlprimarykey_entity.feature_table_urn)\nprint("MLPrimaryKey description:", mlprimarykey_entity.description)\n\n'))),(0,t.yg)("h3",{id:"adding-mlprimarykeys-to-feature-tables"},"Adding MLPrimaryKeys to Feature Tables"),(0,t.yg)("p",null,"MLPrimaryKeys are typically associated with feature tables to define how records should be uniquely identified. A feature table can have one or more primary keys (composite keys)."),(0,t.yg)("details",null,(0,t.yg)("summary",null,"Python SDK: Add primary keys to a feature table"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/mlprimarykey_add_to_mlfeature_table.py\nimport datahub.emitter.mce_builder as builder\nimport datahub.metadata.schema_classes as models\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\nfrom datahub.metadata.schema_classes import MLFeatureTablePropertiesClass\n\ngms_endpoint = "http://localhost:8080"\n# Create an emitter to DataHub over REST\nemitter = DatahubRestEmitter(gms_server=gms_endpoint, extra_headers={})\n\nfeature_table_urn = builder.make_ml_feature_table_urn(\n    feature_table_name="users_feature_table", platform="feast"\n)\nprimary_key_urns = [\n    builder.make_ml_primary_key_urn(\n        feature_table_name="users_feature_table",\n        primary_key_name="user_id",\n    ),\n]\n\n# This code concatenates the new primary keys with the existing primary keys in the feature table.\n# If you want to replace all existing primary keys with only the new ones, you can comment out this line.\ngraph = DataHubGraph(DatahubClientConfig(server=gms_endpoint))\nfeature_table_properties = graph.get_aspect(\n    entity_urn=feature_table_urn, aspect_type=MLFeatureTablePropertiesClass\n)\nif feature_table_properties:\n    current_primary_keys = feature_table_properties.mlPrimaryKeys\n    print("current_primary_keys:", current_primary_keys)\n    if current_primary_keys:\n        primary_key_urns += current_primary_keys\n\nfeature_table_properties = models.MLFeatureTablePropertiesClass(\n    mlPrimaryKeys=primary_key_urns\n)\n# MCP creation\nmetadata_change_proposal = MetadataChangeProposalWrapper(\n    entityUrn=feature_table_urn,\n    aspect=feature_table_properties,\n)\n\n# Emit metadata! This is a blocking call\nemitter.emit(metadata_change_proposal)\n\n'))),(0,t.yg)("h3",{id:"querying-mlprimarykey-via-rest-api"},"Querying MLPrimaryKey via REST API"),(0,t.yg)("p",null,"The standard REST APIs can be used to retrieve MLPrimaryKey metadata and relationships."),(0,t.yg)("details",null,(0,t.yg)("summary",null,"REST API: Fetch MLPrimaryKey entity information"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/mlprimarykey_query_rest.py\nimport json\nimport urllib.parse\n\nimport requests\n\n# Configuration\ngms_server = "http://localhost:8080"\nprimary_key_urn = "urn:li:mlPrimaryKey:(users_feature_table,user_id)"\n\n# Encode the URN for use in URL\nencoded_urn = urllib.parse.quote(primary_key_urn, safe="")\n\n# Fetch the MLPrimaryKey entity\nresponse = requests.get(f"{gms_server}/entities/{encoded_urn}")\n\nif response.status_code == 200:\n    entity_data = response.json()\n    print("MLPrimaryKey Entity:")\n    print(json.dumps(entity_data, indent=2))\n\n    # Extract specific aspects\n    if "aspects" in entity_data:\n        aspects = entity_data["aspects"]\n\n        # Get mlPrimaryKeyProperties\n        if "mlPrimaryKeyProperties" in aspects:\n            properties = aspects["mlPrimaryKeyProperties"]["value"]\n            print("\\nPrimary Key Properties:")\n            print(f"  Description: {properties.get(\'description\', \'N/A\')}")\n            print(f"  Data Type: {properties.get(\'dataType\', \'N/A\')}")\n            if "sources" in properties:\n                print(f"  Sources: {properties[\'sources\']}")\n\n        # Get ownership\n        if "ownership" in aspects:\n            ownership = aspects["ownership"]["value"]\n            print("\\nOwnership:")\n            for owner in ownership.get("owners", []):\n                print(f"  - {owner[\'owner\']} ({owner[\'type\']})")\n\n        # Get tags\n        if "globalTags" in aspects:\n            tags = aspects["globalTags"]["value"]\n            print("\\nTags:")\n            for tag in tags.get("tags", []):\n                print(f"  - {tag[\'tag\']}")\n\n        # Get glossary terms\n        if "glossaryTerms" in aspects:\n            terms = aspects["glossaryTerms"]["value"]\n            print("\\nGlossary Terms:")\n            for term in terms.get("terms", []):\n                print(f"  - {term[\'urn\']}")\nelse:\n    print(f"Failed to fetch entity. Status code: {response.status_code}")\n    print(f"Response: {response.text}")\n\n# Find feature tables that use this primary key\n# Query for entities with a KeyedBy relationship to this primary key\nrelationships_response = requests.get(\n    f"{gms_server}/relationships",\n    params={\n        "direction": "INCOMING",\n        "urn": primary_key_urn,\n        "types": "KeyedBy",\n    },\n)\n\nif relationships_response.status_code == 200:\n    relationships_data = relationships_response.json()\n    print("\\n\\nFeature Tables using this Primary Key:")\n    for relationship in relationships_data.get("relationships", []):\n        print(f"  - {relationship[\'entity\']}")\nelse:\n    print(\n        f"\\nFailed to fetch relationships. Status code: {relationships_response.status_code}"\n    )\n\n# Find upstream datasets that this primary key is derived from\nupstream_response = requests.get(\n    f"{gms_server}/relationships",\n    params={\n        "direction": "OUTGOING",\n        "urn": primary_key_urn,\n        "types": "DerivedFrom",\n    },\n)\n\nif upstream_response.status_code == 200:\n    upstream_data = upstream_response.json()\n    print("\\nUpstream Datasets (Sources):")\n    for relationship in upstream_data.get("relationships", []):\n        print(f"  - {relationship[\'entity\']}")\nelse:\n    print(\n        f"\\nFailed to fetch upstream lineage. Status code: {upstream_response.status_code}"\n    )\n\n'))),(0,t.yg)("h2",{id:"integration-points"},"Integration Points"),(0,t.yg)("h3",{id:"relationship-with-mlfeaturetable"},"Relationship with MLFeatureTable"),(0,t.yg)("p",null,"The most important relationship for MLPrimaryKeys is with MLFeatureTables. Feature tables reference primary keys through their ",(0,t.yg)("inlineCode",{parentName:"p"},"mlPrimaryKeyProperties")," aspect, creating a ",(0,t.yg)("inlineCode",{parentName:"p"},"KeyedBy")," relationship. This relationship indicates that:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"The feature table uses these primary key(s) to uniquely identify records"),(0,t.yg)("li",{parentName:"ul"},"When serving features, these keys are used for lookups and joins"),(0,t.yg)("li",{parentName:"ul"},"Multiple primary keys on a table form a composite key")),(0,t.yg)("p",null,"This bidirectional relationship enables:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Forward Navigation"),": From a feature table, see all its primary keys"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Reverse Navigation"),": From a primary key, see all feature tables that use it"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Reusability"),": The same primary key can be shared across multiple feature tables")),(0,t.yg)("h3",{id:"relationship-with-datasets"},"Relationship with Datasets"),(0,t.yg)("p",null,"MLPrimaryKeys can be linked to Dataset entities through the ",(0,t.yg)("inlineCode",{parentName:"p"},"sources")," field in ",(0,t.yg)("inlineCode",{parentName:"p"},"mlPrimaryKeyProperties"),". This creates ",(0,t.yg)("inlineCode",{parentName:"p"},"DerivedFrom")," lineage relationships to upstream data warehouse tables, establishing:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Data Provenance"),": Track where primary key values originate"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Impact Analysis"),": Understand how changes to source tables affect the feature store"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Cross-Platform Lineage"),": Connect data warehouse assets to ML platform assets")),(0,t.yg)("h3",{id:"relationship-with-mlfeatures"},"Relationship with MLFeatures"),(0,t.yg)("p",null,"While not a direct relationship, MLPrimaryKeys and MLFeatures both belong to the same feature namespace (typically a feature table). Primary keys identify the entity, while features provide the attributes of that entity. Together, they form the complete feature table schema."),(0,t.yg)("h3",{id:"search-and-discovery"},"Search and Discovery"),(0,t.yg)("p",null,"MLPrimaryKeys are fully indexed for search with the following capabilities:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Name Search"),": The primary key name is indexed with autocomplete support and high relevance boosting"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Namespace Search"),": The feature namespace is searchable with partial matching"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Description Search"),": Full-text search on descriptions (when present)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Relationship Search"),": Find primary keys by their associated feature tables or source datasets")),(0,t.yg)("h3",{id:"platform-instance-support"},"Platform Instance Support"),(0,t.yg)("p",null,"MLPrimaryKeys support the ",(0,t.yg)("inlineCode",{parentName:"p"},"dataPlatformInstance")," aspect, which is useful when:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Multiple feature store instances exist (e.g., dev, staging, prod)"),(0,t.yg)("li",{parentName:"ul"},"The same logical primary key exists in different environments"),(0,t.yg)("li",{parentName:"ul"},"Organizations need to track metadata separately per instance")),(0,t.yg)("h2",{id:"notable-exceptions"},"Notable Exceptions"),(0,t.yg)("h3",{id:"composite-primary-keys"},"Composite Primary Keys"),(0,t.yg)("p",null,"When a feature table requires multiple columns to uniquely identify a record, it uses composite primary keys. In DataHub:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Create separate MLPrimaryKey entities for each column in the composite key"),(0,t.yg)("li",{parentName:"ul"},"Link all of them to the feature table via the ",(0,t.yg)("inlineCode",{parentName:"li"},"mlPrimaryKeys")," array in ",(0,t.yg)("inlineCode",{parentName:"li"},"MLFeatureTableProperties")),(0,t.yg)("li",{parentName:"ul"},"The order in the array may be significant for some feature stores (e.g., for indexing optimization)")),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# For a feature table keyed by (user_id, date)\nprimary_keys = [\n    "urn:li:mlPrimaryKey:(daily_user_features,user_id)",\n    "urn:li:mlPrimaryKey:(daily_user_features,date)"\n]\n')),(0,t.yg)("h3",{id:"primary-key-vs-entity-key-vs-join-key"},"Primary Key vs. Entity Key vs. Join Key"),(0,t.yg)("p",null,"Different feature stores use different terminology:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Feast"),': Uses "entity" to refer to what DataHub calls a primary key'),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Tecton"),': Uses "entity keys" and "join keys"'),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"SageMaker Feature Store"),': Uses "record identifier"'),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Databricks Feature Store"),': Uses "primary keys"')),(0,t.yg)("p",null,"DataHub normalizes these concepts under the ",(0,t.yg)("inlineCode",{parentName:"p"},"mlPrimaryKey")," entity type. When ingesting from different platforms, connectors map these platform-specific terms to MLPrimaryKey."),(0,t.yg)("h3",{id:"primary-keys-as-features"},"Primary Keys as Features"),(0,t.yg)("p",null,"In some feature stores, primary keys can also serve as features themselves (e.g., using ",(0,t.yg)("inlineCode",{parentName:"p"},"user_id")," as both the key and a feature for training). In DataHub:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Create both an MLPrimaryKey entity for the identifier role"),(0,t.yg)("li",{parentName:"ul"},"Create an MLFeature entity for the feature role"),(0,t.yg)("li",{parentName:"ul"},"Both can reference the same source dataset column")),(0,t.yg)("p",null,"This dual representation accurately reflects the different roles the same data plays in the feature store."),(0,t.yg)("h3",{id:"namespace-consistency"},"Namespace Consistency"),(0,t.yg)("p",null,"The feature namespace in an MLPrimaryKey URN should typically match the feature table name where it's used. However, DataHub doesn't enforce this requirement, allowing for flexibility in cases where:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Primary keys are shared across multiple feature tables"),(0,t.yg)("li",{parentName:"ul"},"Organizations use different namespacing schemes"),(0,t.yg)("li",{parentName:"ul"},"Platform-specific naming conventions differ from logical groupings")),(0,t.yg)("h3",{id:"data-type-evolution"},"Data Type Evolution"),(0,t.yg)("p",null,"Primary key data types should remain stable to avoid breaking feature serving. However, if a type change is necessary:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Consider creating a new MLPrimaryKey with a versioned name"),(0,t.yg)("li",{parentName:"ul"},"Use the ",(0,t.yg)("inlineCode",{parentName:"li"},"version")," field to track the schema evolution"),(0,t.yg)("li",{parentName:"ul"},"Maintain both old and new primary keys during migration periods"),(0,t.yg)("li",{parentName:"ul"},"Update feature tables to reference the new primary key once migration is complete")),(0,t.yg)("h3",{id:"primary-keys-and-privacy"},"Primary Keys and Privacy"),(0,t.yg)("p",null,"Primary keys often contain or directly map to personally identifiable information (PII). Organizations should:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Apply appropriate tags (e.g., ",(0,t.yg)("inlineCode",{parentName:"li"},"pii"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"gdpr_sensitive"),") to MLPrimaryKey entities"),(0,t.yg)("li",{parentName:"ul"},"Document any hashing or encryption applied to key values"),(0,t.yg)("li",{parentName:"ul"},"Use DataHub policies to control who can view primary key metadata"),(0,t.yg)("li",{parentName:"ul"},"Link to upstream dataset entities that may have additional privacy metadata")),(0,t.yg)("h2",{id:"technical-reference-guide"},"Technical Reference Guide"),(0,t.yg)("p",null,"The sections above provide an overview of how to use this entity. The following sections provide detailed technical information about how metadata is stored and represented in DataHub."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Aspects")," are the individual pieces of metadata that can be attached to an entity. Each aspect contains specific information (like ownership, tags, or properties) and is stored as a separate record, allowing for flexible and incremental metadata updates."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Relationships")," show how this entity connects to other entities in the metadata graph. These connections are derived from the fields within each aspect and form the foundation of DataHub's knowledge graph."),(0,t.yg)("h3",{id:"reading-the-field-tables"},"Reading the Field Tables"),(0,t.yg)("p",null,"Each aspect's field table includes an ",(0,t.yg)("strong",{parentName:"p"},"Annotations")," column that provides additional metadata about how fields are used:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"\u26a0\ufe0f Deprecated"),": This field is deprecated and may be removed in a future version. Check the description for the recommended alternative"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Searchable"),": This field is indexed and can be searched in DataHub's search interface"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Searchable (fieldname)"),": When the field name in parentheses is shown, it indicates the field is indexed under a different name in the search index. For example, ",(0,t.yg)("inlineCode",{parentName:"li"},"dashboardTool")," is indexed as ",(0,t.yg)("inlineCode",{parentName:"li"},"tool")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"\u2192 RelationshipName"),": This field creates a relationship to another entity. The arrow indicates this field contains a reference (URN) to another entity, and the name indicates the type of relationship (e.g., ",(0,t.yg)("inlineCode",{parentName:"li"},"\u2192 Contains"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"\u2192 OwnedBy"),")")),(0,t.yg)("p",null,"Fields with complex types (like ",(0,t.yg)("inlineCode",{parentName:"p"},"Edge"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"AuditStamp"),") link to their definitions in the ",(0,t.yg)("a",{parentName:"p",href:"#common-types"},"Common Types")," section below."),(0,t.yg)("h3",{id:"aspects"},"Aspects"),(0,t.yg)("h4",{id:"mlprimarykeykey"},"mlPrimaryKeyKey"),(0,t.yg)("p",null,"Key for an MLPrimaryKey"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"featureNamespace"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Namespace for the primary key"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"name"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Name of the primary key"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "mlPrimaryKeyKey"\n  },\n  "name": "MLPrimaryKeyKey",\n  "namespace": "com.linkedin.metadata.key",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "TEXT_PARTIAL"\n      },\n      "type": "string",\n      "name": "featureNamespace",\n      "doc": "Namespace for the primary key"\n    },\n    {\n      "Searchable": {\n        "boostScore": 8.0,\n        "enableAutocomplete": true,\n        "fieldNameAliases": [\n          "_entityName"\n        ],\n        "fieldType": "WORD_GRAM"\n      },\n      "type": "string",\n      "name": "name",\n      "doc": "Name of the primary key"\n    }\n  ],\n  "doc": "Key for an MLPrimaryKey"\n}\n')))),(0,t.yg)("h4",{id:"mlprimarykeyproperties"},"mlPrimaryKeyProperties"),(0,t.yg)("p",null,"Properties associated with a MLPrimaryKey"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"customProperties"),(0,t.yg)("td",{parentName:"tr",align:null},"map"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Custom property bag."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"description"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Documentation of the MLPrimaryKey"),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"dataType"),(0,t.yg)("td",{parentName:"tr",align:null},"MLFeatureDataType"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Data Type of the MLPrimaryKey"),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"version"),(0,t.yg)("td",{parentName:"tr",align:null},"VersionTag"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Version of the MLPrimaryKey"),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"sources"),(0,t.yg)("td",{parentName:"tr",align:null},"string[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Source of the MLPrimaryKey"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2192 DerivedFrom"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "mlPrimaryKeyProperties"\n  },\n  "name": "MLPrimaryKeyProperties",\n  "namespace": "com.linkedin.ml.metadata",\n  "fields": [\n    {\n      "Searchable": {\n        "/*": {\n          "fieldType": "TEXT",\n          "queryByDefault": true\n        }\n      },\n      "type": {\n        "type": "map",\n        "values": "string"\n      },\n      "name": "customProperties",\n      "default": {},\n      "doc": "Custom property bag."\n    },\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "description",\n      "default": null,\n      "doc": "Documentation of the MLPrimaryKey"\n    },\n    {\n      "type": [\n        "null",\n        {\n          "type": "enum",\n          "symbolDocs": {\n            "AUDIO": "Audio Data",\n            "BINARY": "Binary data is discrete data that can be in only one of two categories - either yes or no, 1 or 0, off or on, etc",\n            "BYTE": "Bytes data are binary-encoded values that can represent complex objects.",\n            "CONTINUOUS": "Continuous data are made of uncountable values, often the result of a measurement such as height, weight, age etc.",\n            "COUNT": "Count data is discrete whole number data - no negative numbers here.\\nCount data often has many small values, such as zero and one.",\n            "IMAGE": "Image Data",\n            "INTERVAL": "Interval data has equal spaces between the numbers and does not represent a temporal pattern.\\nExamples include percentages, temperatures, and income.",\n            "MAP": "Mapping Data Type ex: dict, map",\n            "NOMINAL": "Nominal data is made of discrete values with no numerical relationship between the different categories - mean and median are meaningless.\\nAnimal species is one example. For example, pig is not higher than bird and lower than fish.",\n            "ORDINAL": "Ordinal data are discrete integers that can be ranked or sorted.\\nFor example, the distance between first and second may not be the same as the distance between second and third.",\n            "SEQUENCE": "Sequence Data Type ex: list, tuple, range",\n            "SET": "Set Data Type ex: set, frozenset",\n            "TEXT": "Text Data",\n            "TIME": "Time data is a cyclical, repeating continuous form of data.\\nThe relevant time features can be any period- daily, weekly, monthly, annual, etc.",\n            "UNKNOWN": "Unknown data are data that we don\'t know the type for.",\n            "USELESS": "Useless data is unique, discrete data with no potential relationship with the outcome variable.\\nA useless feature has high cardinality. An example would be bank account numbers that were generated randomly.",\n            "VIDEO": "Video Data"\n          },\n          "name": "MLFeatureDataType",\n          "namespace": "com.linkedin.common",\n          "symbols": [\n            "USELESS",\n            "NOMINAL",\n            "ORDINAL",\n            "BINARY",\n            "COUNT",\n            "TIME",\n            "INTERVAL",\n            "IMAGE",\n            "VIDEO",\n            "AUDIO",\n            "TEXT",\n            "MAP",\n            "SEQUENCE",\n            "SET",\n            "CONTINUOUS",\n            "BYTE",\n            "UNKNOWN"\n          ],\n          "doc": "MLFeature Data Type"\n        }\n      ],\n      "name": "dataType",\n      "default": null,\n      "doc": "Data Type of the MLPrimaryKey"\n    },\n    {\n      "type": [\n        "null",\n        {\n          "type": "record",\n          "name": "VersionTag",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "versionTag",\n              "default": null\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "MetadataAttribution",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When this metadata was updated."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) responsible for applying the assocated metadata. This can\\neither be a user (in case of UI edits) or the datahub system for automation."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "source",\n                      "default": null,\n                      "doc": "The DataHub source responsible for applying the associated metadata. This will only be filled out\\nwhen a DataHub source is responsible. This includes the specific metadata test urn, the automation urn."\n                    },\n                    {\n                      "type": {\n                        "type": "map",\n                        "values": "string"\n                      },\n                      "name": "sourceDetail",\n                      "default": {},\n                      "doc": "The details associated with why this metadata was applied. For example, this could include\\nthe actual regex rule, sql statement, ingestion pipeline ID, etc."\n                    }\n                  ],\n                  "doc": "Information about who, why, and how this metadata was applied"\n                }\n              ],\n              "name": "metadataAttribution",\n              "default": null\n            }\n          ],\n          "doc": "A resource-defined string representing the resource state for the purpose of concurrency control"\n        }\n      ],\n      "name": "version",\n      "default": null,\n      "doc": "Version of the MLPrimaryKey"\n    },\n    {\n      "Relationship": {\n        "/*": {\n          "entityTypes": [\n            "dataset"\n          ],\n          "isLineage": true,\n          "name": "DerivedFrom"\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": "string"\n      },\n      "name": "sources",\n      "doc": "Source of the MLPrimaryKey"\n    }\n  ],\n  "doc": "Properties associated with a MLPrimaryKey"\n}\n')))),(0,t.yg)("h4",{id:"ownership-1"},"ownership"),(0,t.yg)("p",null,"Ownership information of an entity."),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"owners"),(0,t.yg)("td",{parentName:"tr",align:null},"Owner[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"List of owners of the entity."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"ownerTypes"),(0,t.yg)("td",{parentName:"tr",align:null},"map"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Ownership type to Owners map, populated via mutation hook."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"lastModified"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#auditstamp"},"AuditStamp")),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Audit stamp containing who last modified the record and when. A value of 0 in the time field indi..."),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "ownership"\n  },\n  "name": "Ownership",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "Owner",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "Relationship": {\n                "entityTypes": [\n                  "corpuser",\n                  "corpGroup"\n                ],\n                "name": "OwnedBy"\n              },\n              "Searchable": {\n                "addToFilters": true,\n                "fieldName": "owners",\n                "fieldType": "URN",\n                "filterNameOverride": "Owned By",\n                "hasValuesFieldName": "hasOwners",\n                "queryByDefault": false\n              },\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "owner",\n              "doc": "Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name\\n(Caveat: only corpuser is currently supported in the frontend.)"\n            },\n            {\n              "deprecated": true,\n              "type": {\n                "type": "enum",\n                "symbolDocs": {\n                  "BUSINESS_OWNER": "A person or group who is responsible for logical, or business related, aspects of the asset.",\n                  "CONSUMER": "A person, group, or service that consumes the data\\nDeprecated! Use TECHNICAL_OWNER or BUSINESS_OWNER instead.",\n                  "CUSTOM": "Set when ownership type is unknown or a when new one is specified as an ownership type entity for which we have no\\nenum value for. This is used for backwards compatibility",\n                  "DATAOWNER": "A person or group that is owning the data\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "DATA_STEWARD": "A steward, expert, or delegate responsible for the asset.",\n                  "DELEGATE": "A person or a group that overseas the operation, e.g. a DBA or SRE.\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "DEVELOPER": "A person or group that is in charge of developing the code\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "NONE": "No specific type associated to the owner.",\n                  "PRODUCER": "A person, group, or service that produces/generates the data\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "STAKEHOLDER": "A person or a group that has direct business interest\\nDeprecated! Use TECHNICAL_OWNER, BUSINESS_OWNER, or STEWARD instead.",\n                  "TECHNICAL_OWNER": "person or group who is responsible for technical aspects of the asset."\n                },\n                "deprecatedSymbols": {\n                  "CONSUMER": true,\n                  "DATAOWNER": true,\n                  "DELEGATE": true,\n                  "DEVELOPER": true,\n                  "PRODUCER": true,\n                  "STAKEHOLDER": true\n                },\n                "name": "OwnershipType",\n                "namespace": "com.linkedin.common",\n                "symbols": [\n                  "CUSTOM",\n                  "TECHNICAL_OWNER",\n                  "BUSINESS_OWNER",\n                  "DATA_STEWARD",\n                  "NONE",\n                  "DEVELOPER",\n                  "DATAOWNER",\n                  "DELEGATE",\n                  "PRODUCER",\n                  "CONSUMER",\n                  "STAKEHOLDER"\n                ],\n                "doc": "Asset owner types"\n              },\n              "name": "type",\n              "doc": "The type of the ownership"\n            },\n            {\n              "Relationship": {\n                "entityTypes": [\n                  "ownershipType"\n                ],\n                "name": "ownershipType"\n              },\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "typeUrn",\n              "default": null,\n              "doc": "The type of the ownership\\nUrn of type O"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "OwnershipSource",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": {\n                        "type": "enum",\n                        "symbolDocs": {\n                          "AUDIT": "Auditing system or audit logs",\n                          "DATABASE": "Database, e.g. GRANTS table",\n                          "FILE_SYSTEM": "File system, e.g. file/directory owner",\n                          "ISSUE_TRACKING_SYSTEM": "Issue tracking system, e.g. Jira",\n                          "MANUAL": "Manually provided by a user",\n                          "OTHER": "Other sources",\n                          "SERVICE": "Other ownership-like service, e.g. Nuage, ACL service etc",\n                          "SOURCE_CONTROL": "SCM system, e.g. GIT, SVN"\n                        },\n                        "name": "OwnershipSourceType",\n                        "namespace": "com.linkedin.common",\n                        "symbols": [\n                          "AUDIT",\n                          "DATABASE",\n                          "FILE_SYSTEM",\n                          "ISSUE_TRACKING_SYSTEM",\n                          "MANUAL",\n                          "SERVICE",\n                          "SOURCE_CONTROL",\n                          "OTHER"\n                        ]\n                      },\n                      "name": "type",\n                      "doc": "The type of the source"\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "url",\n                      "default": null,\n                      "doc": "A reference URL for the source"\n                    }\n                  ],\n                  "doc": "Source/provider of the ownership information"\n                }\n              ],\n              "name": "source",\n              "default": null,\n              "doc": "Source information for the ownership"\n            },\n            {\n              "Searchable": {\n                "/actor": {\n                  "fieldName": "ownerAttributionActors",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/source": {\n                  "fieldName": "ownerAttributionSources",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/time": {\n                  "fieldName": "ownerAttributionDates",\n                  "fieldType": "DATETIME",\n                  "queryByDefault": false\n                }\n              },\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "MetadataAttribution",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When this metadata was updated."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) responsible for applying the assocated metadata. This can\\neither be a user (in case of UI edits) or the datahub system for automation."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "source",\n                      "default": null,\n                      "doc": "The DataHub source responsible for applying the associated metadata. This will only be filled out\\nwhen a DataHub source is responsible. This includes the specific metadata test urn, the automation urn."\n                    },\n                    {\n                      "type": {\n                        "type": "map",\n                        "values": "string"\n                      },\n                      "name": "sourceDetail",\n                      "default": {},\n                      "doc": "The details associated with why this metadata was applied. For example, this could include\\nthe actual regex rule, sql statement, ingestion pipeline ID, etc."\n                    }\n                  ],\n                  "doc": "Information about who, why, and how this metadata was applied"\n                }\n              ],\n              "name": "attribution",\n              "default": null,\n              "doc": "Information about who, why, and how this metadata was applied"\n            }\n          ],\n          "doc": "Ownership information"\n        }\n      },\n      "name": "owners",\n      "doc": "List of owners of the entity."\n    },\n    {\n      "Searchable": {\n        "/*": {\n          "fieldType": "MAP_ARRAY",\n          "queryByDefault": false\n        }\n      },\n      "type": [\n        {\n          "type": "map",\n          "values": {\n            "type": "array",\n            "items": "string"\n          }\n        },\n        "null"\n      ],\n      "name": "ownerTypes",\n      "default": {},\n      "doc": "Ownership type to Owners map, populated via mutation hook."\n    },\n    {\n      "type": {\n        "type": "record",\n        "name": "AuditStamp",\n        "namespace": "com.linkedin.common",\n        "fields": [\n          {\n            "type": "long",\n            "name": "time",\n            "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": "string",\n            "name": "actor",\n            "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "impersonator",\n            "default": null,\n            "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n          },\n          {\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "message",\n            "default": null,\n            "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n          }\n        ],\n        "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n      },\n      "name": "lastModified",\n      "default": {\n        "actor": "urn:li:corpuser:unknown",\n        "impersonator": null,\n        "time": 0,\n        "message": null\n      },\n      "doc": "Audit stamp containing who last modified the record and when. A value of 0 in the time field indicates missing data."\n    }\n  ],\n  "doc": "Ownership information of an entity."\n}\n')))),(0,t.yg)("h4",{id:"institutionalmemory"},"institutionalMemory"),(0,t.yg)("p",null,"Institutional memory of an entity. This is a way to link to relevant documentation and provide description of the documentation. Institutional or tribal knowledge is very important for users to leverage the entity."),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"elements"),(0,t.yg)("td",{parentName:"tr",align:null},"InstitutionalMemoryMetadata[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"List of records that represent institutional memory of an entity. Each record consists of a link,..."),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "institutionalMemory"\n  },\n  "name": "InstitutionalMemory",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "InstitutionalMemoryMetadata",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.url.Url",\n                "coercerClass": "com.linkedin.common.url.UrlCoercer"\n              },\n              "type": "string",\n              "name": "url",\n              "doc": "Link to an engineering design document or a wiki page."\n            },\n            {\n              "type": "string",\n              "name": "description",\n              "doc": "Description of the link."\n            },\n            {\n              "type": {\n                "type": "record",\n                "name": "AuditStamp",\n                "namespace": "com.linkedin.common",\n                "fields": [\n                  {\n                    "type": "long",\n                    "name": "time",\n                    "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n                  },\n                  {\n                    "java": {\n                      "class": "com.linkedin.common.urn.Urn"\n                    },\n                    "type": "string",\n                    "name": "actor",\n                    "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n                  },\n                  {\n                    "java": {\n                      "class": "com.linkedin.common.urn.Urn"\n                    },\n                    "type": [\n                      "null",\n                      "string"\n                    ],\n                    "name": "impersonator",\n                    "default": null,\n                    "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n                  },\n                  {\n                    "type": [\n                      "null",\n                      "string"\n                    ],\n                    "name": "message",\n                    "default": null,\n                    "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n                  }\n                ],\n                "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n              },\n              "name": "createStamp",\n              "doc": "Audit stamp associated with creation of this record"\n            },\n            {\n              "type": [\n                "null",\n                "com.linkedin.common.AuditStamp"\n              ],\n              "name": "updateStamp",\n              "default": null,\n              "doc": "Audit stamp associated with updation of this record"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "InstitutionalMemoryMetadataSettings",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "boolean",\n                      "name": "showInAssetPreview",\n                      "default": false,\n                      "doc": "Show record in asset preview like on entity header and search previews"\n                    }\n                  ],\n                  "doc": "Settings related to a record of InstitutionalMemoryMetadata"\n                }\n              ],\n              "name": "settings",\n              "default": null,\n              "doc": "Settings for this record"\n            }\n          ],\n          "doc": "Metadata corresponding to a record of institutional memory."\n        }\n      },\n      "name": "elements",\n      "doc": "List of records that represent institutional memory of an entity. Each record consists of a link, description, creator and timestamps associated with that record."\n    }\n  ],\n  "doc": "Institutional memory of an entity. This is a way to link to relevant documentation and provide description of the documentation. Institutional or tribal knowledge is very important for users to leverage the entity."\n}\n')))),(0,t.yg)("h4",{id:"status"},"status"),(0,t.yg)("p",null,"The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\nThis aspect is used to represent soft deletes conventionally."),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"removed"),(0,t.yg)("td",{parentName:"tr",align:null},"boolean"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Whether the entity has been removed (soft-deleted)."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "status"\n  },\n  "name": "Status",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "BOOLEAN"\n      },\n      "type": "boolean",\n      "name": "removed",\n      "default": false,\n      "doc": "Whether the entity has been removed (soft-deleted)."\n    }\n  ],\n  "doc": "The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\\nThis aspect is used to represent soft deletes conventionally."\n}\n')))),(0,t.yg)("h4",{id:"deprecation"},"deprecation"),(0,t.yg)("p",null,"Deprecation status of an entity"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"deprecated"),(0,t.yg)("td",{parentName:"tr",align:null},"boolean"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Whether the entity is deprecated."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"decommissionTime"),(0,t.yg)("td",{parentName:"tr",align:null},"long"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"The time user plan to decommission this entity."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"note"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Additional information about the entity deprecation plan, such as the wiki, doc, RB."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"actor"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"The user URN which will be credited for modifying this deprecation content."),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"replacement"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "deprecation"\n  },\n  "name": "Deprecation",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "addToFilters": true,\n        "fieldType": "BOOLEAN",\n        "filterNameOverride": "Deprecated",\n        "weightsPerFieldValue": {\n          "true": 0.5\n        }\n      },\n      "type": "boolean",\n      "name": "deprecated",\n      "doc": "Whether the entity is deprecated."\n    },\n    {\n      "type": [\n        "null",\n        "long"\n      ],\n      "name": "decommissionTime",\n      "default": null,\n      "doc": "The time user plan to decommission this entity."\n    },\n    {\n      "type": "string",\n      "name": "note",\n      "doc": "Additional information about the entity deprecation plan, such as the wiki, doc, RB."\n    },\n    {\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": "string",\n      "name": "actor",\n      "doc": "The user URN which will be credited for modifying this deprecation content."\n    },\n    {\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "replacement",\n      "default": null\n    }\n  ],\n  "doc": "Deprecation status of an entity"\n}\n')))),(0,t.yg)("h4",{id:"globaltags"},"globalTags"),(0,t.yg)("p",null,"Tag aspect used for applying tags to an entity"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"tags"),(0,t.yg)("td",{parentName:"tr",align:null},"TagAssociation[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Tags associated with a given entity"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 TaggedWith"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "globalTags"\n  },\n  "name": "GlobalTags",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Relationship": {\n        "/*/tag": {\n          "entityTypes": [\n            "tag"\n          ],\n          "name": "TaggedWith"\n        }\n      },\n      "Searchable": {\n        "/*/tag": {\n          "addToFilters": true,\n          "boostScore": 0.5,\n          "fieldName": "tags",\n          "fieldType": "URN",\n          "filterNameOverride": "Tag",\n          "hasValuesFieldName": "hasTags",\n          "queryByDefault": true\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "TagAssociation",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.TagUrn"\n              },\n              "type": "string",\n              "name": "tag",\n              "doc": "Urn of the applied tag"\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "context",\n              "default": null,\n              "doc": "Additional context about the association"\n            },\n            {\n              "Searchable": {\n                "/actor": {\n                  "fieldName": "tagAttributionActors",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/source": {\n                  "fieldName": "tagAttributionSources",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/time": {\n                  "fieldName": "tagAttributionDates",\n                  "fieldType": "DATETIME",\n                  "queryByDefault": false\n                }\n              },\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "MetadataAttribution",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When this metadata was updated."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) responsible for applying the assocated metadata. This can\\neither be a user (in case of UI edits) or the datahub system for automation."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "source",\n                      "default": null,\n                      "doc": "The DataHub source responsible for applying the associated metadata. This will only be filled out\\nwhen a DataHub source is responsible. This includes the specific metadata test urn, the automation urn."\n                    },\n                    {\n                      "type": {\n                        "type": "map",\n                        "values": "string"\n                      },\n                      "name": "sourceDetail",\n                      "default": {},\n                      "doc": "The details associated with why this metadata was applied. For example, this could include\\nthe actual regex rule, sql statement, ingestion pipeline ID, etc."\n                    }\n                  ],\n                  "doc": "Information about who, why, and how this metadata was applied"\n                }\n              ],\n              "name": "attribution",\n              "default": null,\n              "doc": "Information about who, why, and how this metadata was applied"\n            }\n          ],\n          "doc": "Properties of an applied tag. For now, just an Urn. In the future we can extend this with other properties, e.g.\\npropagation parameters."\n        }\n      },\n      "name": "tags",\n      "doc": "Tags associated with a given entity"\n    }\n  ],\n  "doc": "Tag aspect used for applying tags to an entity"\n}\n')))),(0,t.yg)("h4",{id:"dataplatforminstance"},"dataPlatformInstance"),(0,t.yg)("p",null,"The specific instance of the data platform that this entity belongs to"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"platform"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Data Platform"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"instance"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Instance of the data platform (e.g. db instance)"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable (platformInstance)"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "dataPlatformInstance"\n  },\n  "name": "DataPlatformInstance",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "addToFilters": true,\n        "fieldType": "URN",\n        "filterNameOverride": "Platform"\n      },\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": "string",\n      "name": "platform",\n      "doc": "Data Platform"\n    },\n    {\n      "Searchable": {\n        "addToFilters": true,\n        "fieldName": "platformInstance",\n        "fieldType": "URN",\n        "filterNameOverride": "Platform Instance"\n      },\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "instance",\n      "default": null,\n      "doc": "Instance of the data platform (e.g. db instance)"\n    }\n  ],\n  "doc": "The specific instance of the data platform that this entity belongs to"\n}\n')))),(0,t.yg)("h4",{id:"glossaryterms"},"glossaryTerms"),(0,t.yg)("p",null,"Related business terms information"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"terms"),(0,t.yg)("td",{parentName:"tr",align:null},"GlossaryTermAssociation[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"The related business terms"),(0,t.yg)("td",{parentName:"tr",align:null})),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"auditStamp"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#auditstamp"},"AuditStamp")),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Audit stamp containing who reported the related business term"),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "glossaryTerms"\n  },\n  "name": "GlossaryTerms",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "GlossaryTermAssociation",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "Relationship": {\n                "entityTypes": [\n                  "glossaryTerm"\n                ],\n                "name": "TermedWith"\n              },\n              "Searchable": {\n                "addToFilters": true,\n                "fieldName": "glossaryTerms",\n                "fieldType": "URN",\n                "filterNameOverride": "Glossary Term",\n                "hasValuesFieldName": "hasGlossaryTerms",\n                "includeSystemModifiedAt": true,\n                "systemModifiedAtFieldName": "termsModifiedAt"\n              },\n              "java": {\n                "class": "com.linkedin.common.urn.GlossaryTermUrn"\n              },\n              "type": "string",\n              "name": "urn",\n              "doc": "Urn of the applied glossary term"\n            },\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "actor",\n              "default": null,\n              "doc": "The user URN which will be credited for adding associating this term to the entity"\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "context",\n              "default": null,\n              "doc": "Additional context about the association"\n            },\n            {\n              "Searchable": {\n                "/actor": {\n                  "fieldName": "termAttributionActors",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/source": {\n                  "fieldName": "termAttributionSources",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/time": {\n                  "fieldName": "termAttributionDates",\n                  "fieldType": "DATETIME",\n                  "queryByDefault": false\n                }\n              },\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "MetadataAttribution",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When this metadata was updated."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) responsible for applying the assocated metadata. This can\\neither be a user (in case of UI edits) or the datahub system for automation."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "source",\n                      "default": null,\n                      "doc": "The DataHub source responsible for applying the associated metadata. This will only be filled out\\nwhen a DataHub source is responsible. This includes the specific metadata test urn, the automation urn."\n                    },\n                    {\n                      "type": {\n                        "type": "map",\n                        "values": "string"\n                      },\n                      "name": "sourceDetail",\n                      "default": {},\n                      "doc": "The details associated with why this metadata was applied. For example, this could include\\nthe actual regex rule, sql statement, ingestion pipeline ID, etc."\n                    }\n                  ],\n                  "doc": "Information about who, why, and how this metadata was applied"\n                }\n              ],\n              "name": "attribution",\n              "default": null,\n              "doc": "Information about who, why, and how this metadata was applied"\n            }\n          ],\n          "doc": "Properties of an applied glossary term."\n        }\n      },\n      "name": "terms",\n      "doc": "The related business terms"\n    },\n    {\n      "type": {\n        "type": "record",\n        "name": "AuditStamp",\n        "namespace": "com.linkedin.common",\n        "fields": [\n          {\n            "type": "long",\n            "name": "time",\n            "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": "string",\n            "name": "actor",\n            "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "impersonator",\n            "default": null,\n            "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n          },\n          {\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "message",\n            "default": null,\n            "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n          }\n        ],\n        "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n      },\n      "name": "auditStamp",\n      "doc": "Audit stamp containing who reported the related business term"\n    }\n  ],\n  "doc": "Related business terms information"\n}\n')))),(0,t.yg)("h4",{id:"editablemlprimarykeyproperties"},"editableMlPrimaryKeyProperties"),(0,t.yg)("p",null,"Properties associated with a MLPrimaryKey editable from the UI"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"description"),(0,t.yg)("td",{parentName:"tr",align:null},"string"),(0,t.yg)("td",{parentName:"tr",align:null}),(0,t.yg)("td",{parentName:"tr",align:null},"Documentation of the MLPrimaryKey"),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "editableMlPrimaryKeyProperties"\n  },\n  "name": "EditableMLPrimaryKeyProperties",\n  "namespace": "com.linkedin.ml.metadata",\n  "fields": [\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "description",\n      "default": null,\n      "doc": "Documentation of the MLPrimaryKey"\n    }\n  ],\n  "doc": "Properties associated with a MLPrimaryKey editable from the UI"\n}\n')))),(0,t.yg)("h4",{id:"domains"},"domains"),(0,t.yg)("p",null,"Links from an Asset to its Domains"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"domains"),(0,t.yg)("td",{parentName:"tr",align:null},"string[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"The Domains attached to an Asset"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 AssociatedWith"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "domains"\n  },\n  "name": "Domains",\n  "namespace": "com.linkedin.domain",\n  "fields": [\n    {\n      "Relationship": {\n        "/*": {\n          "entityTypes": [\n            "domain"\n          ],\n          "name": "AssociatedWith"\n        }\n      },\n      "Searchable": {\n        "/*": {\n          "addToFilters": true,\n          "fieldName": "domains",\n          "fieldType": "URN",\n          "filterNameOverride": "Domain",\n          "hasValuesFieldName": "hasDomain"\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": "string"\n      },\n      "name": "domains",\n      "doc": "The Domains attached to an Asset"\n    }\n  ],\n  "doc": "Links from an Asset to its Domains"\n}\n')))),(0,t.yg)("h4",{id:"applications"},"applications"),(0,t.yg)("p",null,"Links from an Asset to its Applications"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"applications"),(0,t.yg)("td",{parentName:"tr",align:null},"string[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"The Applications attached to an Asset"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 AssociatedWith"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "applications"\n  },\n  "name": "Applications",\n  "namespace": "com.linkedin.application",\n  "fields": [\n    {\n      "Relationship": {\n        "/*": {\n          "entityTypes": [\n            "application"\n          ],\n          "name": "AssociatedWith"\n        }\n      },\n      "Searchable": {\n        "/*": {\n          "addToFilters": true,\n          "fieldName": "applications",\n          "fieldType": "URN",\n          "filterNameOverride": "Application",\n          "hasValuesFieldName": "hasApplication"\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": "string"\n      },\n      "name": "applications",\n      "doc": "The Applications attached to an Asset"\n    }\n  ],\n  "doc": "Links from an Asset to its Applications"\n}\n')))),(0,t.yg)("h4",{id:"structuredproperties"},"structuredProperties"),(0,t.yg)("p",null,"Properties about an entity governed by StructuredPropertyDefinition"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"properties"),(0,t.yg)("td",{parentName:"tr",align:null},"StructuredPropertyValueAssignment[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Custom property bag."),(0,t.yg)("td",{parentName:"tr",align:null}))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "structuredProperties"\n  },\n  "name": "StructuredProperties",\n  "namespace": "com.linkedin.structured",\n  "fields": [\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "StructuredPropertyValueAssignment",\n          "namespace": "com.linkedin.structured",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "propertyUrn",\n              "doc": "The property that is being assigned a value."\n            },\n            {\n              "type": {\n                "type": "array",\n                "items": [\n                  "string",\n                  "double"\n                ]\n              },\n              "name": "values",\n              "doc": "The value assigned to the property."\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "AuditStamp",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "impersonator",\n                      "default": null,\n                      "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "message",\n                      "default": null,\n                      "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n                    }\n                  ],\n                  "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n                }\n              ],\n              "name": "created",\n              "default": null,\n              "doc": "Audit stamp containing who created this relationship edge and when"\n            },\n            {\n              "type": [\n                "null",\n                "com.linkedin.common.AuditStamp"\n              ],\n              "name": "lastModified",\n              "default": null,\n              "doc": "Audit stamp containing who last modified this relationship edge and when"\n            },\n            {\n              "Searchable": {\n                "/actor": {\n                  "fieldName": "structuredPropertyAttributionActors",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/source": {\n                  "fieldName": "structuredPropertyAttributionSources",\n                  "fieldType": "URN",\n                  "queryByDefault": false\n                },\n                "/time": {\n                  "fieldName": "structuredPropertyAttributionDates",\n                  "fieldType": "DATETIME",\n                  "queryByDefault": false\n                }\n              },\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "MetadataAttribution",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When this metadata was updated."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) responsible for applying the assocated metadata. This can\\neither be a user (in case of UI edits) or the datahub system for automation."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "source",\n                      "default": null,\n                      "doc": "The DataHub source responsible for applying the associated metadata. This will only be filled out\\nwhen a DataHub source is responsible. This includes the specific metadata test urn, the automation urn."\n                    },\n                    {\n                      "type": {\n                        "type": "map",\n                        "values": "string"\n                      },\n                      "name": "sourceDetail",\n                      "default": {},\n                      "doc": "The details associated with why this metadata was applied. For example, this could include\\nthe actual regex rule, sql statement, ingestion pipeline ID, etc."\n                    }\n                  ],\n                  "doc": "Information about who, why, and how this metadata was applied"\n                }\n              ],\n              "name": "attribution",\n              "default": null,\n              "doc": "Information about who, why, and how this metadata was applied"\n            }\n          ]\n        }\n      },\n      "name": "properties",\n      "doc": "Custom property bag."\n    }\n  ],\n  "doc": "Properties about an entity governed by StructuredPropertyDefinition"\n}\n')))),(0,t.yg)("h4",{id:"forms"},"forms"),(0,t.yg)("p",null,"Forms that are assigned to this entity to be filled out"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"incompleteForms"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#formassociation"},"FormAssociation"),"[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"All incomplete forms assigned to the entity."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"completedForms"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#formassociation"},"FormAssociation"),"[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"All complete forms assigned to the entity."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"verifications"),(0,t.yg)("td",{parentName:"tr",align:null},"FormVerificationAssociation[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Verifications that have been applied to the entity via completed forms."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "forms"\n  },\n  "name": "Forms",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "/*/completedPrompts/*/id": {\n          "fieldName": "incompleteFormsCompletedPromptIds",\n          "fieldType": "KEYWORD",\n          "queryByDefault": false\n        },\n        "/*/completedPrompts/*/lastModified/time": {\n          "fieldName": "incompleteFormsCompletedPromptResponseTimes",\n          "fieldType": "DATETIME",\n          "queryByDefault": false\n        },\n        "/*/incompletePrompts/*/id": {\n          "fieldName": "incompleteFormsIncompletePromptIds",\n          "fieldType": "KEYWORD",\n          "queryByDefault": false\n        },\n        "/*/urn": {\n          "fieldName": "incompleteForms",\n          "fieldType": "URN",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "FormAssociation",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "urn",\n              "doc": "Urn of the applied form"\n            },\n            {\n              "type": {\n                "type": "array",\n                "items": {\n                  "type": "record",\n                  "name": "FormPromptAssociation",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "string",\n                      "name": "id",\n                      "doc": "The id for the prompt. This must be GLOBALLY UNIQUE."\n                    },\n                    {\n                      "type": {\n                        "type": "record",\n                        "name": "AuditStamp",\n                        "namespace": "com.linkedin.common",\n                        "fields": [\n                          {\n                            "type": "long",\n                            "name": "time",\n                            "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n                          },\n                          {\n                            "java": {\n                              "class": "com.linkedin.common.urn.Urn"\n                            },\n                            "type": "string",\n                            "name": "actor",\n                            "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n                          },\n                          {\n                            "java": {\n                              "class": "com.linkedin.common.urn.Urn"\n                            },\n                            "type": [\n                              "null",\n                              "string"\n                            ],\n                            "name": "impersonator",\n                            "default": null,\n                            "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n                          },\n                          {\n                            "type": [\n                              "null",\n                              "string"\n                            ],\n                            "name": "message",\n                            "default": null,\n                            "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n                          }\n                        ],\n                        "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n                      },\n                      "name": "lastModified",\n                      "doc": "The last time this prompt was touched for the entity (set, unset)"\n                    },\n                    {\n                      "type": [\n                        "null",\n                        {\n                          "type": "record",\n                          "name": "FormPromptFieldAssociations",\n                          "namespace": "com.linkedin.common",\n                          "fields": [\n                            {\n                              "type": [\n                                "null",\n                                {\n                                  "type": "array",\n                                  "items": {\n                                    "type": "record",\n                                    "name": "FieldFormPromptAssociation",\n                                    "namespace": "com.linkedin.common",\n                                    "fields": [\n                                      {\n                                        "type": "string",\n                                        "name": "fieldPath",\n                                        "doc": "The field path on a schema field."\n                                      },\n                                      {\n                                        "type": "com.linkedin.common.AuditStamp",\n                                        "name": "lastModified",\n                                        "doc": "The last time this prompt was touched for the field on the entity (set, unset)"\n                                      }\n                                    ],\n                                    "doc": "Information about the status of a particular prompt for a specific schema field\\non an entity."\n                                  }\n                                }\n                              ],\n                              "name": "completedFieldPrompts",\n                              "default": null,\n                              "doc": "A list of field-level prompt associations that are not yet complete for this form."\n                            },\n                            {\n                              "type": [\n                                "null",\n                                {\n                                  "type": "array",\n                                  "items": "com.linkedin.common.FieldFormPromptAssociation"\n                                }\n                              ],\n                              "name": "incompleteFieldPrompts",\n                              "default": null,\n                              "doc": "A list of field-level prompt associations that are complete for this form."\n                            }\n                          ],\n                          "doc": "Information about the field-level prompt associations on a top-level prompt association."\n                        }\n                      ],\n                      "name": "fieldAssociations",\n                      "default": null,\n                      "doc": "Optional information about the field-level prompt associations."\n                    }\n                  ],\n                  "doc": "Information about the status of a particular prompt.\\nNote that this is where we can add additional information about individual responses:\\nactor, timestamp, and the response itself."\n                }\n              },\n              "name": "incompletePrompts",\n              "default": [],\n              "doc": "A list of prompts that are not yet complete for this form."\n            },\n            {\n              "type": {\n                "type": "array",\n                "items": "com.linkedin.common.FormPromptAssociation"\n              },\n              "name": "completedPrompts",\n              "default": [],\n              "doc": "A list of prompts that have been completed for this form."\n            }\n          ],\n          "doc": "Properties of an applied form."\n        }\n      },\n      "name": "incompleteForms",\n      "doc": "All incomplete forms assigned to the entity."\n    },\n    {\n      "Searchable": {\n        "/*/completedPrompts/*/id": {\n          "fieldName": "completedFormsCompletedPromptIds",\n          "fieldType": "KEYWORD",\n          "queryByDefault": false\n        },\n        "/*/completedPrompts/*/lastModified/time": {\n          "fieldName": "completedFormsCompletedPromptResponseTimes",\n          "fieldType": "DATETIME",\n          "queryByDefault": false\n        },\n        "/*/incompletePrompts/*/id": {\n          "fieldName": "completedFormsIncompletePromptIds",\n          "fieldType": "KEYWORD",\n          "queryByDefault": false\n        },\n        "/*/urn": {\n          "fieldName": "completedForms",\n          "fieldType": "URN",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": "com.linkedin.common.FormAssociation"\n      },\n      "name": "completedForms",\n      "doc": "All complete forms assigned to the entity."\n    },\n    {\n      "Searchable": {\n        "/*/form": {\n          "fieldName": "verifiedForms",\n          "fieldType": "URN",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "FormVerificationAssociation",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "form",\n              "doc": "The urn of the form that granted this verification."\n            },\n            {\n              "type": [\n                "null",\n                "com.linkedin.common.AuditStamp"\n              ],\n              "name": "lastModified",\n              "default": null,\n              "doc": "An audit stamp capturing who and when verification was applied for this form."\n            }\n          ],\n          "doc": "An association between a verification and an entity that has been granted\\nvia completion of one or more forms of type \'VERIFICATION\'."\n        }\n      },\n      "name": "verifications",\n      "default": [],\n      "doc": "Verifications that have been applied to the entity via completed forms."\n    }\n  ],\n  "doc": "Forms that are assigned to this entity to be filled out"\n}\n')))),(0,t.yg)("h4",{id:"testresults"},"testResults"),(0,t.yg)("p",null,"Information about a Test Result"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"failing"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#testresult"},"TestResult"),"[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Results that are failing"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 IsFailing")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"passing"),(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("a",{parentName:"td",href:"#testresult"},"TestResult"),"[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"Results that are passing"),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable, \u2192 IsPassing"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "testResults"\n  },\n  "name": "TestResults",\n  "namespace": "com.linkedin.test",\n  "fields": [\n    {\n      "Relationship": {\n        "/*/test": {\n          "entityTypes": [\n            "test"\n          ],\n          "name": "IsFailing"\n        }\n      },\n      "Searchable": {\n        "/*/test": {\n          "fieldName": "failingTests",\n          "fieldType": "URN",\n          "hasValuesFieldName": "hasFailingTests",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "TestResult",\n          "namespace": "com.linkedin.test",\n          "fields": [\n            {\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "test",\n              "doc": "The urn of the test"\n            },\n            {\n              "type": {\n                "type": "enum",\n                "symbolDocs": {\n                  "FAILURE": " The Test Failed",\n                  "SUCCESS": " The Test Succeeded"\n                },\n                "name": "TestResultType",\n                "namespace": "com.linkedin.test",\n                "symbols": [\n                  "SUCCESS",\n                  "FAILURE"\n                ]\n              },\n              "name": "type",\n              "doc": "The type of the result"\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "testDefinitionMd5",\n              "default": null,\n              "doc": "The md5 of the test definition that was used to compute this result.\\nSee TestInfo.testDefinition.md5 for more information."\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "AuditStamp",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": "long",\n                      "name": "time",\n                      "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": "string",\n                      "name": "actor",\n                      "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n                    },\n                    {\n                      "java": {\n                        "class": "com.linkedin.common.urn.Urn"\n                      },\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "impersonator",\n                      "default": null,\n                      "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "message",\n                      "default": null,\n                      "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n                    }\n                  ],\n                  "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n                }\n              ],\n              "name": "lastComputed",\n              "default": null,\n              "doc": "The audit stamp of when the result was computed, including the actor who computed it."\n            }\n          ],\n          "doc": "Information about a Test Result"\n        }\n      },\n      "name": "failing",\n      "doc": "Results that are failing"\n    },\n    {\n      "Relationship": {\n        "/*/test": {\n          "entityTypes": [\n            "test"\n          ],\n          "name": "IsPassing"\n        }\n      },\n      "Searchable": {\n        "/*/test": {\n          "fieldName": "passingTests",\n          "fieldType": "URN",\n          "hasValuesFieldName": "hasPassingTests",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": "com.linkedin.test.TestResult"\n      },\n      "name": "passing",\n      "doc": "Results that are passing"\n    }\n  ],\n  "doc": "Information about a Test Result"\n}\n')))),(0,t.yg)("h4",{id:"subtypes"},"subTypes"),(0,t.yg)("p",null,"Sub Types. Use this aspect to specialize a generic Entity\ne.g. Making a Dataset also be a View or also be a LookerExplore"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(i.A,{value:"fields",label:"Fields",default:!0,mdxType:"TabItem"},(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Field"),(0,t.yg)("th",{parentName:"tr",align:null},"Type"),(0,t.yg)("th",{parentName:"tr",align:null},"Required"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"),(0,t.yg)("th",{parentName:"tr",align:null},"Annotations"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"typeNames"),(0,t.yg)("td",{parentName:"tr",align:null},"string[]"),(0,t.yg)("td",{parentName:"tr",align:null},"\u2713"),(0,t.yg)("td",{parentName:"tr",align:null},"The names of the specific types."),(0,t.yg)("td",{parentName:"tr",align:null},"Searchable"))))),(0,t.yg)(i.A,{value:"raw",label:"Raw Schema",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "subTypes"\n  },\n  "name": "SubTypes",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "/*": {\n          "addToFilters": true,\n          "fieldType": "KEYWORD",\n          "filterNameOverride": "Sub Type",\n          "queryByDefault": false\n        }\n      },\n      "type": {\n        "type": "array",\n        "items": "string"\n      },\n      "name": "typeNames",\n      "doc": "The names of the specific types."\n    }\n  ],\n  "doc": "Sub Types. Use this aspect to specialize a generic Entity\\ne.g. Making a Dataset also be a View or also be a LookerExplore"\n}\n')))),(0,t.yg)("h3",{id:"common-types"},"Common Types"),(0,t.yg)("p",null,"These types are used across multiple aspects in this entity."),(0,t.yg)("h4",{id:"auditstamp"},"AuditStamp"),(0,t.yg)("p",null,"Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Fields:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"time")," (long): When did the resource/association/sub-resource move into the specific lifecyc..."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"actor")," (string): The entity (e.g. a member URN) which will be credited for moving the resource..."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"impersonator")," (string?): The entity (e.g. a service URN) which performs the change on behalf of the Ac..."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"message")," (string?): Additional context around how DataHub was informed of the particular change. ...")),(0,t.yg)("h4",{id:"formassociation"},"FormAssociation"),(0,t.yg)("p",null,"Properties of an applied form."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Fields:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"urn")," (string): Urn of the applied form"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"incompletePrompts")," (FormPromptAssociation[]): A list of prompts that are not yet complete for this form."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"completedPrompts")," (FormPromptAssociation[]): A list of prompts that have been completed for this form.")),(0,t.yg)("h4",{id:"testresult"},"TestResult"),(0,t.yg)("p",null,"Information about a Test Result"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Fields:")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"test")," (string): The urn of the test"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"type")," (TestResultType): The type of the result"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"testDefinitionMd5")," (string?): The md5 of the test definition that was used to compute this result. See Test..."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"lastComputed")," (AuditStamp?): The audit stamp of when the result was computed, including the actor who comp...")),(0,t.yg)("h3",{id:"relationships"},"Relationships"),(0,t.yg)("h4",{id:"outgoing"},"Outgoing"),(0,t.yg)("p",null,"These are the relationships stored in this entity's aspects"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"DerivedFrom"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Dataset via ",(0,t.yg)("inlineCode",{parentName:"li"},"mlPrimaryKeyProperties.sources")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"OwnedBy"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Corpuser via ",(0,t.yg)("inlineCode",{parentName:"li"},"ownership.owners.owner")),(0,t.yg)("li",{parentName:"ul"},"CorpGroup via ",(0,t.yg)("inlineCode",{parentName:"li"},"ownership.owners.owner")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"ownershipType"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"OwnershipType via ",(0,t.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"TaggedWith"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Tag via ",(0,t.yg)("inlineCode",{parentName:"li"},"globalTags.tags")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"TermedWith"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"GlossaryTerm via ",(0,t.yg)("inlineCode",{parentName:"li"},"glossaryTerms.terms.urn")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"AssociatedWith"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Domain via ",(0,t.yg)("inlineCode",{parentName:"li"},"domains.domains")),(0,t.yg)("li",{parentName:"ul"},"Application via ",(0,t.yg)("inlineCode",{parentName:"li"},"applications.applications")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"IsFailing"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Test via ",(0,t.yg)("inlineCode",{parentName:"li"},"testResults.failing")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"IsPassing"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Test via ",(0,t.yg)("inlineCode",{parentName:"li"},"testResults.passing"))))),(0,t.yg)("h4",{id:"incoming"},"Incoming"),(0,t.yg)("p",null,"These are the relationships stored in other entity's aspects"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"KeyedBy"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"MlFeatureTable via ",(0,t.yg)("inlineCode",{parentName:"li"},"mlFeatureTableProperties.mlPrimaryKeys"))))),(0,t.yg)("h3",{id:"global-metadata-model"},(0,t.yg)("a",{parentName:"h3",href:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,t.yg)("p",null,(0,t.yg)("img",{parentName:"p",src:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}h.isMDXComponent=!0}}]);