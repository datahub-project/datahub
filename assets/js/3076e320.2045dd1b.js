"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[59303],{15680:(e,t,a)=>{a.d(t,{xA:()=>m,yg:()=>d});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),y=r,d=u["".concat(s,".").concat(y)]||u[y]||g[y]||i;return a?n.createElement(d,l(l({ref:t},m),{},{components:a})):n.createElement(d,l({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=y;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},3901:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>u});a(96540);var n=a(15680);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})),e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const o={title:"DataHub Library Examples",sidebar_label:"Library Examples",slug:"/metadata-ingestion/examples/library",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/examples/library/README.md"},s="DataHub Library Examples",p={unversionedId:"metadata-ingestion/examples/library/README",id:"metadata-ingestion/examples/library/README",title:"DataHub Library Examples",description:"This directory contains examples demonstrating how to use the DataHub Python SDK and metadata emission APIs.",source:"@site/genDocs/metadata-ingestion/examples/library/README.md",sourceDirName:"metadata-ingestion/examples/library",slug:"/metadata-ingestion/examples/library",permalink:"/docs/metadata-ingestion/examples/library",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/examples/library/README.md",tags:[],version:"current",frontMatter:{title:"DataHub Library Examples",sidebar_label:"Library Examples",slug:"/metadata-ingestion/examples/library",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/examples/library/README.md"}},m={},u=[{value:"Structure",id:"structure",level:2},{value:"Writing Testable Examples",id:"writing-testable-examples",level:2},{value:"Pattern Overview",id:"pattern-overview",level:3},{value:"Example Structure",id:"example-structure",level:3},{value:"For SDK-based Examples",id:"for-sdk-based-examples",level:3},{value:"Benefits of This Pattern",id:"benefits-of-this-pattern",level:3},{value:"Running Examples",id:"running-examples",level:3},{value:"Testing",id:"testing",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Running Tests",id:"running-tests",level:3},{value:"Guidelines",id:"guidelines",level:2},{value:"Example Categories",id:"example-categories",level:2},{value:"Entity Creation",id:"entity-creation",level:3},{value:"Metadata Updates",id:"metadata-updates",level:3},{value:"Querying Metadata",id:"querying-metadata",level:3},{value:"Getting Help",id:"getting-help",level:2}],g={toc:u},y="wrapper";function d(e){var{components:t}=e,a=l(e,["components"]);return(0,n.yg)(y,i(function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),n.forEach((function(t){r(e,t,a[t])}))}return e}({},g,a),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"datahub-library-examples"},"DataHub Library Examples"),(0,n.yg)("p",null,"This directory contains examples demonstrating how to use the DataHub Python SDK and metadata emission APIs."),(0,n.yg)("h2",{id:"structure"},"Structure"),(0,n.yg)("p",null,"Each example is a standalone Python script that demonstrates a specific use case:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Create examples"),": Show how to create new metadata entities"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Update examples"),": Show how to modify existing metadata"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Query examples"),": Show how to read and query metadata"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Delete examples"),": Show how to remove metadata")),(0,n.yg)("h2",{id:"writing-testable-examples"},"Writing Testable Examples"),(0,n.yg)("p",null,"To ensure examples are maintainable and correct, follow this pattern when writing new examples:"),(0,n.yg)("h3",{id:"pattern-overview"},"Pattern Overview"),(0,n.yg)("p",null,"Examples should have two main components:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Testable functions"),": Pure functions that take dependencies as parameters and return values/metadata"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Main function"),": Entry point that creates dependencies and calls the testable functions")),(0,n.yg)("h3",{id:"example-structure"},"Example Structure"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'from typing import Optional\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\n\n\ndef create_entity_metadata(...) -> MetadataChangeProposalWrapper:\n    """\n    Create metadata for an entity.\n\n    This function is pure and testable - it doesn\'t have side effects.\n\n    Args:\n        ... (all required parameters)\n\n    Returns:\n        MetadataChangeProposalWrapper containing the metadata\n    """\n    # Build and return the MCP\n    return MetadataChangeProposalWrapper(...)\n\n\ndef main(emitter: Optional[DatahubRestEmitter] = None) -> None:\n    """\n    Main function demonstrating the example use case.\n\n    Args:\n        emitter: Optional emitter for testing. If not provided, creates a new one.\n    """\n    emitter = emitter or DatahubRestEmitter(gms_server="http://localhost:8080")\n\n    # Use the testable function\n    mcp = create_entity_metadata(...)\n\n    # Emit the metadata\n    emitter.emit(mcp)\n    print(f"Successfully created entity")\n\n\nif __name__ == "__main__":\n    main()\n')),(0,n.yg)("h3",{id:"for-sdk-based-examples"},"For SDK-based Examples"),(0,n.yg)("p",null,"When using the DataHub SDK (",(0,n.yg)("inlineCode",{parentName:"p"},"DataHubClient"),"):"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'from typing import Optional\nfrom datahub.sdk import DataHubClient\n\n\ndef perform_operation(client: DataHubClient, ...) -> ...:\n    """\n    Perform an operation using the DataHub client.\n\n    Args:\n        client: DataHub client to use\n        ...: Other parameters\n\n    Returns:\n        Result of the operation\n    """\n    # Perform the operation\n    return result\n\n\ndef main(client: Optional[DataHubClient] = None) -> None:\n    """\n    Main function demonstrating the example use case.\n\n    Args:\n        client: Optional client for testing. If not provided, creates one from env.\n    """\n    client = client or DataHubClient.from_env()\n\n    result = perform_operation(client, ...)\n    print(f"Operation result: {result}")\n\n\nif __name__ == "__main__":\n    main()\n')),(0,n.yg)("h3",{id:"benefits-of-this-pattern"},"Benefits of This Pattern"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Testability"),": Core logic can be unit tested without needing a running DataHub instance"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Reusability"),": The testable functions can be imported and used in other code"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Clarity"),": Separates business logic from infrastructure setup"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Flexibility"),": Examples can still be run standalone while being testable")),(0,n.yg)("h3",{id:"running-examples"},"Running Examples"),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"As standalone scripts:")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"python examples/library/notebook_create.py\n")),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"In tests:")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'from examples.library.create_notebook import create_notebook_metadata\n\n# Unit test\nmcp = create_notebook_metadata(...)\nassert mcp.entityUrn == "..."\n\n# Integration test\nfrom examples.library.create_notebook import main\nmain(emitter=test_emitter)  # Inject test emitter\n')),(0,n.yg)("h2",{id:"testing"},"Testing"),(0,n.yg)("p",null,"Examples are tested at two levels:"),(0,n.yg)("h3",{id:"unit-tests"},"Unit Tests"),(0,n.yg)("p",null,"Located in ",(0,n.yg)("inlineCode",{parentName:"p"},"tests/unit/test_library_examples.py"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Test that examples compile and imports resolve"),(0,n.yg)("li",{parentName:"ul"},"Test that core functions produce valid metadata structures"),(0,n.yg)("li",{parentName:"ul"},"Use mocking to avoid needing a real DataHub instance"),(0,n.yg)("li",{parentName:"ul"},"Fast and run on every commit")),(0,n.yg)("h3",{id:"integration-tests"},"Integration Tests"),(0,n.yg)("p",null,"Located in ",(0,n.yg)("inlineCode",{parentName:"p"},"tests/integration/library_examples/"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Test examples against a real DataHub instance"),(0,n.yg)("li",{parentName:"ul"},"Verify end-to-end functionality including reads after writes"),(0,n.yg)("li",{parentName:"ul"},"Test that metadata is correctly persisted and retrievable"),(0,n.yg)("li",{parentName:"ul"},"Slower, may run less frequently")),(0,n.yg)("h3",{id:"running-tests"},"Running Tests"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"# Run all example tests (unit only)\npytest tests/unit/test_library_examples.py\n\n# Run specific unit tests\npytest tests/unit/test_library_examples.py::test_create_notebook_metadata\n\n# Run integration tests (requires running DataHub)\npytest tests/integration/library_examples/ -m integration\n\n# Run all tests\npytest tests/unit/test_library_examples.py tests/integration/library_examples/\n")),(0,n.yg)("h2",{id:"guidelines"},"Guidelines"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Keep examples simple"),": Focus on demonstrating one concept clearly"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Use realistic data"),": URNs, names, and values should look like real-world usage"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Add comments"),": Explain non-obvious choices or important details"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Follow the pattern"),": Use the testable function + main() pattern"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Document parameters"),": Use clear docstrings with type hints"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Handle errors gracefully"),": Show proper error handling where relevant"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Test your examples"),": Add unit tests for new examples")),(0,n.yg)("h2",{id:"example-categories"},"Example Categories"),(0,n.yg)("h3",{id:"entity-creation"},"Entity Creation"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"notebook_create.py")," - Create a notebook entity"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"data_platform_create.py")," - Create a custom data platform"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"glossary_term_create.py")," - Create glossary terms")),(0,n.yg)("h3",{id:"metadata-updates"},"Metadata Updates"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"dataset_add_term.py")," - Add glossary terms to datasets"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"dataset_add_owner.py")," - Add ownership information"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"notebook_add_tags.py")," - Add tags to notebooks")),(0,n.yg)("h3",{id:"querying-metadata"},"Querying Metadata"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"dataset_query_deprecation.py")," - Check if a dataset is deprecated"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"search_with_query.py")," - Search for entities"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"lineage_column_get.py")," - Query column-level lineage")),(0,n.yg)("h2",{id:"getting-help"},"Getting Help"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://datahubproject.io/docs/"},"DataHub Documentation")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://datahubproject.io/docs/python-sdk/"},"Python SDK Reference")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://datahubproject.io/docs/metadata-model/"},"Metadata Model")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://github.com/datahub-project/datahub/issues"},"GitHub Issues"))))}d.isMDXComponent=!0}}]);