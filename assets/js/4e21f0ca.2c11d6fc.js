"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[2627],{15680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>f});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=c(n),p=r,f=d["".concat(i,".").concat(p)]||d[p]||u[p]||o;return n?a.createElement(f,s(s({ref:t},m),{},{components:n})):a.createElement(f,s({ref:t},m))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[d]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},48242:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>f,frontMatter:()=>l,metadata:()=>c,toc:()=>d});n(96540);var a=n(15680);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const l={sidebar_position:41,title:"PlatformResource",slug:"/generated/metamodel/entities/platformresource",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/platformResource.md"},i="PlatformResource",c={unversionedId:"docs/generated/metamodel/entities/platformResource",id:"version-1.1.0/docs/generated/metamodel/entities/platformResource",title:"PlatformResource",description:"Platform Resources are assets that are unmodeled and stored outside of the core data model. They are stored in DataHub primarily to help with application-specific use-cases that are not sufficiently generalized to move into the core data model.",source:"@site/versioned_docs/version-1.1.0/docs/generated/metamodel/entities/platformResource.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/platformresource",permalink:"/docs/1.1.0/generated/metamodel/entities/platformresource",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/platformResource.md",tags:[],version:"1.1.0",sidebarPosition:41,frontMatter:{sidebar_position:41,title:"PlatformResource",slug:"/generated/metamodel/entities/platformresource",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/platformResource.md"},sidebar:"overviewSidebar",previous:{title:"Form",permalink:"/docs/1.1.0/generated/metamodel/entities/form"},next:{title:"DataHubPolicy",permalink:"/docs/1.1.0/generated/metamodel/entities/datahubpolicy"}},m={},d=[{value:"Aspects",id:"aspects",level:2},{value:"dataPlatformInstance",id:"dataplatforminstance",level:3},{value:"platformResourceInfo",id:"platformresourceinfo",level:3},{value:"status",id:"status",level:3},{value:"Relationships",id:"relationships",level:2},{value:"Global Metadata Model",id:"global-metadata-model",level:2}],u={toc:d},p="wrapper";function f(e){var{components:t}=e,n=s(e,["components"]);return(0,a.yg)(p,o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"platformresource"},"PlatformResource"),(0,a.yg)("p",null,"Platform Resources are assets that are unmodeled and stored outside of the core data model. They are stored in DataHub primarily to help with application-specific use-cases that are not sufficiently generalized to move into the core data model."),(0,a.yg)("h2",{id:"aspects"},"Aspects"),(0,a.yg)("h3",{id:"dataplatforminstance"},"dataPlatformInstance"),(0,a.yg)("p",null,"The specific instance of the data platform that this entity belongs to"),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Schema"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "dataPlatformInstance"\n  },\n  "name": "DataPlatformInstance",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "addToFilters": true,\n        "fieldType": "URN",\n        "filterNameOverride": "Platform"\n      },\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": "string",\n      "name": "platform",\n      "doc": "Data Platform"\n    },\n    {\n      "Searchable": {\n        "addToFilters": true,\n        "fieldName": "platformInstance",\n        "fieldType": "URN",\n        "filterNameOverride": "Platform Instance"\n      },\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "instance",\n      "default": null,\n      "doc": "Instance of the data platform (e.g. db instance)"\n    }\n  ],\n  "doc": "The specific instance of the data platform that this entity belongs to"\n}\n'))),(0,a.yg)("h3",{id:"platformresourceinfo"},"platformResourceInfo"),(0,a.yg)("p",null,"Platform Resource Info.\nThese entities are for miscelaneous data that is used in non-core parts of the system.\nFor instance, if we want to persist & retrieve data from auxiliary integrations such as Slack or Microsoft Teams."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Schema"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "platformResourceInfo"\n  },\n  "name": "PlatformResourceInfo",\n  "namespace": "com.linkedin.platformresource",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "KEYWORD"\n      },\n      "type": "string",\n      "name": "resourceType",\n      "doc": "The type of the resource. \\nIntended as a loose specifier of the generic type of the resource.\\nProducer is not forced to conform to a specific set of symbols for\\nresource types.\\nThe @PlatformResourceType enumeration offers a paved path for agreed upon\\ncommon terms, but is not required to be followed.\\nExample values could be: conversation, user, grant, etc.\\nResource types are indexed for ease of access. \\ne.g. Get me all platform resources of type user for the platform looker"\n    },\n    {\n      "Searchable": {\n        "fieldType": "KEYWORD"\n      },\n      "type": "string",\n      "name": "primaryKey",\n      "doc": "The primary key for this platform resource.\\ne.g. for a slack member this would be the memberID.\\nprimary keys specified here don\'t need to include any additional specificity for the\\n     dataPlatform\\nThe @PlatformResourceKey is supposed to represent that"\n    },\n    {\n      "Searchable": {\n        "/*": {\n          "fieldType": "KEYWORD"\n        }\n      },\n      "type": [\n        "null",\n        {\n          "type": "array",\n          "items": "string"\n        }\n      ],\n      "name": "secondaryKeys",\n      "default": null,\n      "doc": "The secondary keys this platform resource can be located by.\\nI.e., for a slack member this would be email or phone."\n    },\n    {\n      "type": [\n        "null",\n        {\n          "type": "record",\n          "name": "SerializedValue",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "type": "bytes",\n              "name": "blob",\n              "doc": "The serialized blob value."\n            },\n            {\n              "type": {\n                "type": "enum",\n                "name": "SerializedValueContentType",\n                "namespace": "com.linkedin.common",\n                "symbols": [\n                  "JSON",\n                  "BINARY"\n                ]\n              },\n              "name": "contentType",\n              "default": "JSON",\n              "doc": "The content-type of the serialized blob value."\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "enum",\n                  "name": "SerializedValueSchemaType",\n                  "namespace": "com.linkedin.common",\n                  "symbols": [\n                    "AVRO",\n                    "PROTOBUF",\n                    "PEGASUS",\n                    "THRIFT",\n                    "JSON",\n                    "NONE"\n                  ]\n                }\n              ],\n              "name": "schemaType",\n              "default": null,\n              "doc": "The schema type for the schema that models the object that was serialized\\n       into the blob.\\nAbsence of this field indicates that the schema is not known.\\nIf the schema is known, the value should be set to the appropriate schema\\ntype.\\nUse the NONE value if the existing schema categories do not apply."\n            },\n            {\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "schemaRef",\n              "default": null,\n              "doc": "An optional reference to the schema that models the object.\\ne.g., \'com.linkedin.platformresource.slack.SlackConversation\'"\n            }\n          ],\n          "doc": "Captures the serialized value of a (usually) schema-d blob."\n        }\n      ],\n      "name": "value",\n      "default": null,\n      "doc": "The serialized value of this platform resource item."\n    }\n  ],\n  "doc": "Platform Resource Info.\\nThese entities are for miscelaneous data that is used in non-core parts of the system.\\nFor instance, if we want to persist & retrieve data from auxiliary integrations such as Slack or Microsoft Teams."\n}\n'))),(0,a.yg)("h3",{id:"status"},"status"),(0,a.yg)("p",null,"The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\nThis aspect is used to represent soft deletes conventionally."),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Schema"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "status"\n  },\n  "name": "Status",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "BOOLEAN"\n      },\n      "type": "boolean",\n      "name": "removed",\n      "default": false,\n      "doc": "Whether the entity has been removed (soft-deleted)."\n    }\n  ],\n  "doc": "The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\\nThis aspect is used to represent soft deletes conventionally."\n}\n'))),(0,a.yg)("h2",{id:"relationships"},"Relationships"),(0,a.yg)("h2",{id:"global-metadata-model"},(0,a.yg)("a",{parentName:"h2",href:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,a.yg)("p",null,(0,a.yg)("img",{parentName:"p",src:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}f.isMDXComponent=!0}}]);