"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[9609],{15680:(e,a,t)=>{t.d(a,{xA:()=>b,yg:()=>d});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),p=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},b=function(e){var a=p(e.components);return n.createElement(s.Provider,{value:a},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},g=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),c=p(t),g=r,d=c["".concat(s,".").concat(g)]||c[g]||m[g]||i;return t?n.createElement(d,o(o({ref:a},b),{},{components:t})):n.createElement(d,o({ref:a},b))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=g;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},99205:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>b,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>c});t(96540);var n=t(15680);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){return a=null!=a?a:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):function(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})),e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const l={title:"Universal transformers",sidebar_label:"Universal transformers",slug:"/metadata-ingestion/docs/transformer/universal_transformers",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/docs/transformer/universal_transformers.md"},s="Transformers",p={unversionedId:"metadata-ingestion/docs/transformer/universal_transformers",id:"metadata-ingestion/docs/transformer/universal_transformers",title:"Universal transformers",description:"The below table shows transformer which can transform aspects of any entity having them.",source:"@site/genDocs/metadata-ingestion/docs/transformer/universal_transformers.md",sourceDirName:"metadata-ingestion/docs/transformer",slug:"/metadata-ingestion/docs/transformer/universal_transformers",permalink:"/docs/metadata-ingestion/docs/transformer/universal_transformers",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/docs/transformer/universal_transformers.md",tags:[],version:"current",frontMatter:{title:"Universal transformers",sidebar_label:"Universal transformers",slug:"/metadata-ingestion/docs/transformer/universal_transformers",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/docs/transformer/universal_transformers.md"},sidebar:"overviewSidebar",previous:{title:"Dataset",permalink:"/docs/metadata-ingestion/docs/transformer/dataset_transformer"},next:{title:"CLI Ingestion",permalink:"/docs/metadata-ingestion/cli-ingestion"}},b={},c=[{value:"Set browsePaths",id:"set-browsepaths",level:2},{value:"Config Details",id:"config-details",level:3},{value:"Variable substitution",id:"variable-substitution",level:3},{value:"Examples",id:"examples",level:3}],m={toc:c},g="wrapper";function d(e){var{components:a}=e,t=o(e,["components"]);return(0,n.yg)(g,i(function(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{},n=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),n.forEach((function(a){r(e,a,t[a])}))}return e}({},m,t),{components:a,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"transformers"},"Transformers"),(0,n.yg)("p",null,"The below table shows transformer which can transform aspects of any entity having them."),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Aspect"),(0,n.yg)("th",{parentName:"tr",align:null},"Transformer"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"browsePathsV2")),(0,n.yg)("td",{parentName:"tr",align:null},"- ",(0,n.yg)("a",{parentName:"td",href:"#set-browsepaths"},"Set browsePaths"))))),(0,n.yg)("h2",{id:"set-browsepaths"},"Set browsePaths"),(0,n.yg)("p",null,"This transformer operates on ",(0,n.yg)("inlineCode",{parentName:"p"},"browsePathsV2")," aspect. If it is not emitted by the ingestion source, it will be created\nby the transformer. By default it will prepend configured path to the original path (so it will add it as a prefix)."),(0,n.yg)("h3",{id:"config-details"},"Config Details"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Field"),(0,n.yg)("th",{parentName:"tr",align:null},"Required"),(0,n.yg)("th",{parentName:"tr",align:null},"Type"),(0,n.yg)("th",{parentName:"tr",align:null},"Default"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"path")),(0,n.yg)("td",{parentName:"tr",align:null},"\u2705"),(0,n.yg)("td",{parentName:"tr",align:null},"list","[string]"),(0,n.yg)("td",{parentName:"tr",align:null}),(0,n.yg)("td",{parentName:"tr",align:null},"List of nodes in the new path.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"replace_existing")),(0,n.yg)("td",{parentName:"tr",align:null}),(0,n.yg)("td",{parentName:"tr",align:null},"boolean"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"false")),(0,n.yg)("td",{parentName:"tr",align:null},"Whether to overwrite existing browse path, if set to ",(0,n.yg)("inlineCode",{parentName:"td"},"false"),", the configured path will be prepended")))),(0,n.yg)("p",null,"In the most basic case ",(0,n.yg)("inlineCode",{parentName:"p"},"path")," contains list of static strings, for example, below config:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},'transformers:\n  - type: "set_browse_path"\n    config:\n      path:\n        - abc\n        - def\n')),(0,n.yg)("p",null,"will be reflected as every entity having path prefixed by ",(0,n.yg)("inlineCode",{parentName:"p"},"abc")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"def")," nodes (",(0,n.yg)("inlineCode",{parentName:"p"},"def")," will be contained by ",(0,n.yg)("inlineCode",{parentName:"p"},"abc"),")."),(0,n.yg)("h3",{id:"variable-substitution"},"Variable substitution"),(0,n.yg)("p",null,"The transformer has a mechanism of variables substitution in the path, where list of variables are build based on\nexisting ",(0,n.yg)("inlineCode",{parentName:"p"},"browsePathsV2")," aspect of the entity. Every ",(0,n.yg)("em",{parentName:"p"},"node")," in the existing path, as long as it contains reference to\nanother entity (e.g. a ",(0,n.yg)("inlineCode",{parentName:"p"},"container")," or a ",(0,n.yg)("inlineCode",{parentName:"p"},"dataPlatformInstance"),") is stored in the list of variables to use. Since\nwe can have multiple references to entities of the same type (e.g. ",(0,n.yg)("inlineCode",{parentName:"p"},"containers"),") in the browse path, they are stored\nin a list-like object, with original order being respected. Let's consider an example, real-world situation, of a table\ningested from Snowflake source, and having ",(0,n.yg)("inlineCode",{parentName:"p"},"platform_instance")," set to some value. Such table will have ",(0,n.yg)("inlineCode",{parentName:"p"},"browsePathsV2"),"\naspect set to contain below references:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},"- urn:li:dataPlatformInstance:(urn:li:dataPlatform:snowflake,my_platform_instance)\n- urn:li:container:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n- urn:li:container:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n")),(0,n.yg)("p",null,"where ",(0,n.yg)("inlineCode",{parentName:"p"},"urn:li:container:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")," identifies a ",(0,n.yg)("inlineCode",{parentName:"p"},"container")," reflecting a Snowflake's ",(0,n.yg)("em",{parentName:"p"},"database")," and\n",(0,n.yg)("inlineCode",{parentName:"p"},"urn:li:container:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")," identifies a ",(0,n.yg)("inlineCode",{parentName:"p"},"container")," reflecting a Snowflake's ",(0,n.yg)("em",{parentName:"p"},"schema"),".\nSuch, existing, path will be mapped into variables as shown below:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'dataPlatformInstance[0] = "urn:li:dataPlatformInstance:(urn:li:dataPlatform:snowflake,my_platform_instance)"\ncontainer[0] = "urn:li:container:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"\ncontainer[1] = "urn:li:container:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"\n')),(0,n.yg)("p",null,"Those variables can be refered to, from the config, by using ",(0,n.yg)("inlineCode",{parentName:"p"},"$")," character, like below:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},'transformers:\n  - type: "set_browse_path"\n    config:\n      path:\n        - $dataPlatformInstance[0]\n        - $container[0]\n        - $container[1]\n')),(0,n.yg)("p",null,"Additionally, 2 more rules apply to the variables resolution:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"If a variable does not exist (or if the index reached outside of list's length) - it will be ignored and not used in the path, all the other nodes will be used and path will be modified"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"$variable[*]")," will expand entire list of variables to multiple ",(0,n.yg)("em",{parentName:"li"},"nodes"),' in the path (think about it as a "flat map"), for example, the equivalent of above config, would be:',(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},'transformers:\n  - type: "set_browse_path"\n    config:\n      path:\n        - $dataPlatformInstance[0]\n        - $container[*]\n')))),(0,n.yg)("h3",{id:"examples"},"Examples"),(0,n.yg)("p",null,'Add (prefix) a top-level node "datahub" to paths emitted by the source:'),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},'transformers:\n  - type: "set_browse_path"\n    config:\n      path:\n        - datahub\n')),(0,n.yg)("p",null,"Remove data platform instance from the path (if it was set), while retaining containers structure:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml"},'transformers:\n  - type: "set_browse_path"\n    config:\n      replace_existing: true\n      path:\n        - $container[*]\n')))}d.isMDXComponent=!0}}]);