"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[84839],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>m});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(n),u=a,m=h["".concat(l,".").concat(u)]||h[u]||d[u]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2371:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>h});n(96540);var r=n(15680);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const s={title:"What is a relationship?",slug:"/what/relationship",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/what/relationship.md"},l="What is a relationship?",p={unversionedId:"docs/what/relationship",id:"docs/what/relationship",title:"What is a relationship?",description:"A relationship is a named associate between exactly two entities, a source and a destination.",source:"@site/genDocs/docs/what/relationship.md",sourceDirName:"docs/what",slug:"/what/relationship",permalink:"/docs/what/relationship",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/what/relationship.md",tags:[],version:"current",frontMatter:{title:"What is a relationship?",slug:"/what/relationship",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/what/relationship.md"}},c={},h=[{value:"Direction of Relationships",id:"direction-of-relationships",level:2},{value:"High Cardinality Relationships",id:"high-cardinality-relationships",level:2}],d={toc:h},u="wrapper";function m(e){var{components:t}=e,n=o(e,["components"]);return(0,r.yg)(u,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}({},d,n),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"what-is-a-relationship"},"What is a relationship?"),(0,r.yg)("p",null,"A relationship is a named associate between exactly two ",(0,r.yg)("a",{parentName:"p",href:"/docs/what/entity"},"entities"),", a source and a destination."),(0,r.yg)("p",{align:"center"},(0,r.yg)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/metadata-modeling.png"})),(0,r.yg)("p",null,"From the above graph, a ",(0,r.yg)("inlineCode",{parentName:"p"},"Group")," entity can be linked to a ",(0,r.yg)("inlineCode",{parentName:"p"},"User")," entity via a ",(0,r.yg)("inlineCode",{parentName:"p"},"HasMember")," relationship.\nNote that the name of the relationship reflects the direction, i.e. pointing from ",(0,r.yg)("inlineCode",{parentName:"p"},"Group")," to ",(0,r.yg)("inlineCode",{parentName:"p"},"User"),".\nThis is due to the fact that the actual metadata aspect holding this information is associated with ",(0,r.yg)("inlineCode",{parentName:"p"},"Group"),", rather than\nUser.\nHad the direction been reversed, the relationship would have been named ",(0,r.yg)("inlineCode",{parentName:"p"},"IsMemberOf")," instead.\nSee ",(0,r.yg)("a",{parentName:"p",href:"#direction-of-relationships"},"Direction of Relationships")," for more discussions on relationship directionality.\nA specific instance of a relationship, e.g. ",(0,r.yg)("inlineCode",{parentName:"p"},"urn:li:corpGroup:group1")," has a member ",(0,r.yg)("inlineCode",{parentName:"p"},"urn:li:corpuser:user1"),",\ncorresponds to an edge in the metadata graph."),(0,r.yg)("p",null,'Relationships are meant to be "entity-neutral". In other words, one would expect to use the same ',(0,r.yg)("inlineCode",{parentName:"p"},"OwnedBy")," relationship\nto link a ",(0,r.yg)("inlineCode",{parentName:"p"},"Dataset")," to a ",(0,r.yg)("inlineCode",{parentName:"p"},"User")," and to link a ",(0,r.yg)("inlineCode",{parentName:"p"},"Dashboard")," to a ",(0,r.yg)("inlineCode",{parentName:"p"},"User"),".\nAs Pegasus doesn\u2019t allow typing a field using multiple URNs (because they\u2019re all essentially strings), we resort to\nusing generic URN type for the source and destination.\nWe also introduce a ",(0,r.yg)("inlineCode",{parentName:"p"},"@Relationship")," ",(0,r.yg)("a",{parentName:"p",href:"/docs/metadata-modeling/extending-the-metadata-model/#relationship"},"annotation")," to\nlimit the allowed source and destination URN types."),(0,r.yg)("p",null,"While it\u2019s possible to model relationships in rest.li\nas ",(0,r.yg)("a",{parentName:"p",href:"https://linkedin.github.io/rest.li/modeling/modeling#association"},"association resources"),', which often get stored as\nmapping tables, it is far more common to model them as "foreign keys" field in a metadata aspect. For instance,\nthe ',(0,r.yg)("inlineCode",{parentName:"p"},"Ownership")," aspect is likely to contain an array of owner\u2019s corpUser URNs."),(0,r.yg)("p",null,"Below is an example of how a relationship is modeled in PDL. Note that:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"This aspect, ",(0,r.yg)("inlineCode",{parentName:"li"},"nativeGroupMembership")," would be associated with a ",(0,r.yg)("inlineCode",{parentName:"li"},"corpUser")),(0,r.yg)("li",{parentName:"ol"},"The ",(0,r.yg)("inlineCode",{parentName:"li"},"corpUser"),"'s aspect points to one or more parent entities of type ",(0,r.yg)("inlineCode",{parentName:"li"},"corpGroup"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'namespace com.linkedin.identity\n\nimport com.linkedin.common.Urn\n\n/**\n * Carries information about the native CorpGroups a user is in.\n */\n@Aspect = {\n  "name": "nativeGroupMembership"\n}\nrecord NativeGroupMembership {\n  @Relationship = {\n    "/*": {\n      "name": "IsMemberOfNativeGroup",\n      "entityTypes": [ "corpGroup" ]\n    }\n  }\n  nativeGroups: array[Urn]\n}\n')),(0,r.yg)("h2",{id:"direction-of-relationships"},"Direction of Relationships"),(0,r.yg)("p",null,'As relationships are modeled as directed edges between nodes, it\u2019s natural to ask which way should it be pointing,\nor should there be edges going both ways? The answer is, "doesn\u2019t really matter." It\u2019s rather an aesthetic choice than\ntechnical one.'),(0,r.yg)("p",null,"For one, the actual direction doesn\u2019t really impact the execution of graph queries. Most graph DBs are fully capable of\ntraversing edges in reverse direction efficiently."),(0,r.yg)("p",null,'That being said, generally there\u2019s a more "natural way" to specify the direction of a relationship, which closely relate\nto how the metadata is stored. For example, the membership information for an LDAP group is generally stored as a list\nin group\u2019s metadata. As a result, it\u2019s more natural to model a ',(0,r.yg)("inlineCode",{parentName:"p"},"HasMember")," relationship that points from a group to a\nmember, instead of a ",(0,r.yg)("inlineCode",{parentName:"p"},"IsMemberOf")," relationship pointing from member to group."),(0,r.yg)("h2",{id:"high-cardinality-relationships"},"High Cardinality Relationships"),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"/docs/advanced/high-cardinality"},"this doc")," for suggestions on how to best model relationships with high\ncardinality."))}m.isMDXComponent=!0}}]);