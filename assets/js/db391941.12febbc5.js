"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[92386],{59380:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>y,contentTitle:()=>p,default:()=>v,frontMatter:()=>u,metadata:()=>g,toc:()=>d});t(96540);var a=t(15680),s=t(53720),r=t(5400);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function l(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}const u={title:"Assertions",slug:"/api/tutorials/assertions",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/assertions.md"},p="Assertions",g={unversionedId:"docs/api/tutorials/assertions",id:"version-1.1.0/docs/api/tutorials/assertions",title:"Assertions",description:"This guide specifically covers how to use the Assertion APIs for DataHub Cloud native assertions, including:",source:"@site/versioned_docs/version-1.1.0/docs/api/tutorials/assertions.md",sourceDirName:"docs/api/tutorials",slug:"/api/tutorials/assertions",permalink:"/docs/1.1.0/api/tutorials/assertions",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/assertions.md",tags:[],version:"1.1.0",frontMatter:{title:"Assertions",slug:"/api/tutorials/assertions",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/assertions.md"},sidebar:"overviewSidebar",previous:{title:"Custom Properties",permalink:"/docs/1.1.0/api/tutorials/custom-properties"},next:{title:"Custom Assertions",permalink:"/docs/1.1.0/api/tutorials/custom-assertions"}},y={},d=[{value:"Why Would You Use Assertions APIs?",id:"why-would-you-use-assertions-apis",level:2},{value:"Goal Of This Guide",id:"goal-of-this-guide",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Create Assertions",id:"create-assertions",level:2},{value:"Freshness Assertion",id:"freshness-assertion",level:3},{value:"Volume Assertions",id:"volume-assertions",level:3},{value:"Column Assertions",id:"column-assertions",level:3},{value:"Custom SQL Assertions",id:"custom-sql-assertions",level:3},{value:"Schema Assertions",id:"schema-assertions",level:3},{value:"Run Assertions",id:"run-assertions",level:2},{value:"Run Assertion",id:"run-assertion",level:3},{value:"Run Group of Assertions",id:"run-group-of-assertions",level:3},{value:"Run All Assertions for Table",id:"run-all-assertions-for-table",level:3},{value:"Run Group of Assertions for Table",id:"run-group-of-assertions-for-table",level:3},{value:"Step 1: Adding Tag to an Assertion",id:"step-1-adding-tag-to-an-assertion",level:4},{value:"Step 2: Run All Assertions for a Table with Tags",id:"step-2-run-all-assertions-for-a-table-with-tags",level:4},{value:"Run Assertion",id:"run-assertion-1",level:3},{value:"Run Group of Assertions",id:"run-group-of-assertions-1",level:3},{value:"Run All Assertions for Table",id:"run-all-assertions-for-table-1",level:3},{value:"Experimental: Providing Dynamic Parameters to Assertions",id:"experimental-providing-dynamic-parameters-to-assertions",level:3},{value:"Get Assertion Details",id:"get-assertion-details",level:2},{value:"Get Assertions for Table",id:"get-assertions-for-table",level:3},{value:"Get Assertion Details",id:"get-assertion-details-1",level:3},{value:"Add Tag to Assertion",id:"add-tag-to-assertion",level:2},{value:"Delete Assertions",id:"delete-assertions",level:2},{value:"(Advanced) Create and Report Results for Custom Assertions",id:"advanced-create-and-report-results-for-custom-assertions",level:2}],m=(h="FeatureAvailability",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.yg)("div",e)});var h;const c={toc:d},f="wrapper";function v(e){var{components:n}=e,t=l(e,["components"]);return(0,a.yg)(f,i(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){o(e,n,t[n])}))}return e}({},c,t),{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"assertions"},"Assertions"),(0,a.yg)(m,{saasOnly:!0,mdxType:"FeatureAvailability"}),(0,a.yg)("p",null,"This guide specifically covers how to use the Assertion APIs for ",(0,a.yg)("strong",{parentName:"p"},"DataHub Cloud")," native assertions, including:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/docs/1.1.0/managed-datahub/observe/freshness-assertions"},"Freshness Assertions")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/docs/1.1.0/managed-datahub/observe/volume-assertions"},"Volume Assertions")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/docs/1.1.0/managed-datahub/observe/column-assertions"},"Column Assertions")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/docs/1.1.0/managed-datahub/observe/schema-assertions"},"Schema Assertions")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/docs/1.1.0/managed-datahub/observe/custom-sql-assertions"},"Custom SQL Assertions"))),(0,a.yg)("h2",{id:"why-would-you-use-assertions-apis"},"Why Would You Use Assertions APIs?"),(0,a.yg)("p",null,"The Assertions APIs allow you to create, schedule, run, and delete Assertions with DataHub Cloud."),(0,a.yg)("h3",{id:"goal-of-this-guide"},"Goal Of This Guide"),(0,a.yg)("p",null,"This guide will show you how to create, schedule, run and delete Assertions for a Table."),(0,a.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.yg)("p",null,"The actor making API calls must have the ",(0,a.yg)("inlineCode",{parentName:"p"},"Edit Assertions")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"Edit Monitors")," privileges for the Tables at hand."),(0,a.yg)("h2",{id:"create-assertions"},"Create Assertions"),(0,a.yg)("p",null,"You can create new dataset Assertions to DataHub using the following APIs."),(0,a.yg)(s.A,{mdxType:"Tabs"},(0,a.yg)(r.A,{value:"graphql",label:"GraphQL",default:!0,mdxType:"TabItem"},(0,a.yg)("h3",{id:"freshness-assertion"},"Freshness Assertion"),(0,a.yg)("p",null,"To create a new freshness assertion, use the ",(0,a.yg)("inlineCode",{parentName:"p"},"upsertDatasetFreshnessAssertionMonitor")," GraphQL Mutation."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation upsertDatasetFreshnessAssertionMonitor {\n  upsertDatasetFreshnessAssertionMonitor(\n    input: {\n      entityUrn: "<urn of entity being monitored>"\n      schedule: {\n        type: FIXED_INTERVAL\n        fixedInterval: { unit: HOUR, multiple: 8 }\n      }\n      evaluationSchedule: {\n        timezone: "America/Los_Angeles"\n        cron: "0 */8 * * *"\n      }\n      evaluationParameters: { sourceType: INFORMATION_SCHEMA }\n      mode: ACTIVE\n    }\n  ) {\n    urn\n  }\n}\n')),(0,a.yg)("p",null,"This API will return a unique identifier (URN) for the new assertion if you were successful:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "upsertDatasetFreshnessAssertionMonitor": {\n      "urn": "urn:li:assertion:your-new-assertion-id"\n    }\n  },\n  "extensions": {}\n}\n')),(0,a.yg)("p",null,"For more details, see the ",(0,a.yg)("a",{parentName:"p",href:"/docs/1.1.0/managed-datahub/observe/freshness-assertions"},"Freshness Assertions")," guide."),(0,a.yg)("h3",{id:"volume-assertions"},"Volume Assertions"),(0,a.yg)("p",null,"To create a new volume assertion, use the ",(0,a.yg)("inlineCode",{parentName:"p"},"upsertDatasetVolumeAssertionMonitor")," GraphQL Mutation."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation upsertDatasetVolumeAssertionMonitor {\n  upsertDatasetVolumeAssertionMonitor(\n    input: {\n      entityUrn: "<urn of entity being monitored>"\n      type: ROW_COUNT_TOTAL\n      rowCountTotal: {\n        operator: BETWEEN\n        parameters: {\n          minValue: { value: "10", type: NUMBER }\n          maxValue: { value: "20", type: NUMBER }\n        }\n      }\n      evaluationSchedule: {\n        timezone: "America/Los_Angeles"\n        cron: "0 */8 * * *"\n      }\n      evaluationParameters: { sourceType: INFORMATION_SCHEMA }\n      mode: ACTIVE\n    }\n  ) {\n    urn\n  }\n}\n')),(0,a.yg)("p",null,"This API will return a unique identifier (URN) for the new assertion if you were successful:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "upsertDatasetVolumeAssertionMonitor": {\n      "urn": "urn:li:assertion:your-new-assertion-id"\n    }\n  },\n  "extensions": {}\n}\n')),(0,a.yg)("p",null,"For more details, see the ",(0,a.yg)("a",{parentName:"p",href:"/docs/1.1.0/managed-datahub/observe/volume-assertions"},"Volume Assertions")," guide."),(0,a.yg)("h3",{id:"column-assertions"},"Column Assertions"),(0,a.yg)("p",null,"To create a new column assertion, use the ",(0,a.yg)("inlineCode",{parentName:"p"},"upsertDatasetFieldAssertionMonitor")," GraphQL Mutation."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation upsertDatasetFieldAssertionMonitor {\n  upsertDatasetFieldAssertionMonitor(\n    input: {\n      entityUrn: "<urn of entity being monitored>"\n      type: FIELD_VALUES\n      fieldValuesAssertion: {\n        field: {\n          path: "<name of the column to be monitored>"\n          type: "NUMBER"\n          nativeType: "NUMBER(38,0)"\n        }\n        operator: GREATER_THAN\n        parameters: { value: { type: NUMBER, value: "10" } }\n        failThreshold: { type: COUNT, value: 0 }\n        excludeNulls: true\n      }\n      evaluationSchedule: {\n        timezone: "America/Los_Angeles"\n        cron: "0 */8 * * *"\n      }\n      evaluationParameters: { sourceType: ALL_ROWS_QUERY }\n      mode: ACTIVE\n    }\n  ) {\n    urn\n  }\n}\n')),(0,a.yg)("p",null,"This API will return a unique identifier (URN) for the new assertion if you were successful:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "upsertDatasetFieldAssertionMonitor": {\n      "urn": "urn:li:assertion:your-new-assertion-id"\n    }\n  },\n  "extensions": {}\n}\n')),(0,a.yg)("p",null,"For more details, see the ",(0,a.yg)("a",{parentName:"p",href:"/docs/1.1.0/managed-datahub/observe/column-assertions"},"Column Assertions")," guide."),(0,a.yg)("h3",{id:"custom-sql-assertions"},"Custom SQL Assertions"),(0,a.yg)("p",null,"To create a new column assertion, use the ",(0,a.yg)("inlineCode",{parentName:"p"},"upsertDatasetSqlAssertionMonitor")," GraphQL Mutation."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation upsertDatasetSqlAssertionMonitor {\n  upsertDatasetSqlAssertionMonitor(\n    assertionUrn: "<urn of assertion created in earlier query>"\n    input: {\n      entityUrn: "<urn of entity being monitored>"\n      type: METRIC\n      description: "<description of the custom assertion>"\n      statement: "<SQL query to be evaluated>"\n      operator: GREATER_THAN_OR_EQUAL_TO\n      parameters: { value: { value: "100", type: NUMBER } }\n      evaluationSchedule: {\n        timezone: "America/Los_Angeles"\n        cron: "0 */6 * * *"\n      }\n      mode: ACTIVE\n    }\n  ) {\n    urn\n  }\n}\n')),(0,a.yg)("p",null,"This API will return a unique identifier (URN) for the new assertion if you were successful:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "upsertDatasetSqlAssertionMonitor": {\n      "urn": "urn:li:assertion:your-new-assertion-id"\n    }\n  },\n  "extensions": {}\n}\n')),(0,a.yg)("p",null,"For more details, see the ",(0,a.yg)("a",{parentName:"p",href:"/docs/1.1.0/managed-datahub/observe/custom-sql-assertions"},"Custom SQL Assertions")," guide."),(0,a.yg)("h3",{id:"schema-assertions"},"Schema Assertions"),(0,a.yg)("p",null,"To create a new schema assertion, use the ",(0,a.yg)("inlineCode",{parentName:"p"},"upsertDatasetSchemaAssertionMonitor")," GraphQL Mutation."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation upsertDatasetSchemaAssertionMonitor {\n  upsertDatasetSchemaAssertionMonitor(\n    assertionUrn: "urn:li:assertion:existing-assertion-id"\n    input: {\n      entityUrn: "<urn of the table to be monitored>"\n      assertion: {\n        compatibility: EXACT_MATCH\n        fields: [\n          { path: "id", type: STRING }\n          { path: "count", type: NUMBER }\n          { path: "struct", type: STRUCT }\n          { path: "struct.nestedBooleanField", type: BOOLEAN }\n        ]\n      }\n      description: "<description of the schema assertion>"\n      mode: ACTIVE\n    }\n  )\n}\n')),(0,a.yg)("p",null,"This API will return a unique identifier (URN) for the new assertion if you were successful:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "upsertDatasetSchemaAssertionMonitor": {\n      "urn": "urn:li:assertion:your-new-assertion-id"\n    }\n  },\n  "extensions": {}\n}\n')),(0,a.yg)("p",null,"For more details, see the ",(0,a.yg)("a",{parentName:"p",href:"/docs/1.1.0/managed-datahub/observe/schema-assertions"},"Schema Assertions")," guide."))),(0,a.yg)("h2",{id:"run-assertions"},"Run Assertions"),(0,a.yg)("p",null,"You can use the following APIs to trigger the assertions you've created to run on-demand. This is\nparticularly useful for running assertions on a custom schedule, for example from your production\ndata pipelines."),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},(0,a.yg)("strong",{parentName:"p"},"Long-Running Assertions"),": The timeout for synchronously running an assertion is currently limited to a maximum of 30 seconds.\nEach of the following APIs support an ",(0,a.yg)("inlineCode",{parentName:"p"},"async")," parameter, which can be set to ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," to run the assertion asynchronously.\nWhen set to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),", the API will kick off the assertion run and return null immediately. To view the result of the assertion,\nsimply fetching the runEvents field of the ",(0,a.yg)("inlineCode",{parentName:"p"},"assertion(urn: String!)")," GraphQL query.")),(0,a.yg)(s.A,{mdxType:"Tabs"},(0,a.yg)(r.A,{value:"graphql",label:"GraphQL",default:!0,mdxType:"TabItem"},(0,a.yg)("h3",{id:"run-assertion"},"Run Assertion"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation runAssertion {\n  runAssertion(urn: "urn:li:assertion:your-assertion-id", saveResult: true) {\n    type\n    nativeResults {\n      key\n      value\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Where ",(0,a.yg)("strong",{parentName:"p"},"type")," will contain the Result of the assertion run, either ",(0,a.yg)("inlineCode",{parentName:"p"},"SUCCESS"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"FAILURE"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"ERROR"),"."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"saveResult")," argument determines whether the result of the assertion will be saved to DataHub's backend,\nand available to view through the DataHub UI. If this is set to false, the result will NOT be stored in DataHub's\nbackend. The value defaults to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,a.yg)("p",null,"If the assertion is external (not natively executed by DataHub), this API will return an error."),(0,a.yg)("p",null,"If running the assertion is successful, the result will be returned as follows:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "runAssertion": {\n      "type": "SUCCESS",\n      "nativeResults": [\n        {\n          "key": "Value",\n          "value": "1382"\n        }\n      ]\n    }\n  },\n  "extensions": {}\n}\n')),(0,a.yg)("h3",{id:"run-group-of-assertions"},"Run Group of Assertions"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation runAssertions {\n  runAssertions(\n    urns: [\n      "urn:li:assertion:your-assertion-id-1"\n      "urn:li:assertion:your-assertion-id-2"\n    ]\n    saveResults: true\n  ) {\n    passingCount\n    failingCount\n    errorCount\n    results {\n      urn\n      result {\n        type\n        nativeResults {\n          key\n          value\n        }\n      }\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Where ",(0,a.yg)("strong",{parentName:"p"},"type")," will contain the Result of the assertion run, either ",(0,a.yg)("inlineCode",{parentName:"p"},"SUCCESS"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"FAILURE"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"ERROR"),"."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"saveResults")," argument determines whether the result of the assertion will be saved to DataHub's backend,\nand available to view through the DataHub UI. If this is set to false, the result will NOT be stored in DataHub's\nbackend. The value defaults to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,a.yg)("p",null,"If any of the assertion are external (not natively executed by DataHub), they will simply be omitted from the result set."),(0,a.yg)("p",null,"If running the assertions is successful, the results will be returned as follows:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "runAssertions": {\n      "passingCount": 2,\n      "failingCount": 0,\n      "errorCount": 0,\n      "results": [\n        {\n          "urn": "urn:li:assertion:your-assertion-id-1",\n          "result": {\n            "type": "SUCCESS",\n            "nativeResults": [\n              {\n                "key": "Value",\n                "value": "1382"\n              }\n            ]\n          }\n        },\n        {\n          "urn": "urn:li:assertion:your-assertion-id-2",\n          "result": {\n            "type": "FAILURE",\n            "nativeResults": [\n              {\n                "key": "Value",\n                "value": "12323"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  },\n  "extensions": {}\n}\n')),(0,a.yg)("p",null,"Where you should see one result object for each assertion."),(0,a.yg)("h3",{id:"run-all-assertions-for-table"},"Run All Assertions for Table"),(0,a.yg)("p",null,"You can also run all assertions for a specific data asset using the ",(0,a.yg)("inlineCode",{parentName:"p"},"runAssertionsForAsset")," mutation."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation runAssertionsForAsset {\n  runAssertionsForAsset(\n    urn: "urn:li:dataset:(urn:li:dataPlatform:snowflake,purchase_events,PROD)"\n    saveResults: true\n  ) {\n    passingCount\n    failingCount\n    errorCount\n    results {\n      urn\n      result {\n        type\n        nativeResults {\n          key\n          value\n        }\n      }\n    }\n  }\n}\n')),(0,a.yg)("p",null,"Where ",(0,a.yg)("inlineCode",{parentName:"p"},"type")," will contain the Result of the assertion run, either ",(0,a.yg)("inlineCode",{parentName:"p"},"SUCCESS"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"FAILURE"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"ERROR"),"."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"saveResults")," argument determines whether the result of the assertion will be saved to DataHub's backend,\nand available to view through the DataHub UI. If this is set to false, the result will NOT be stored in DataHub's\nbackend. The value defaults to ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,a.yg)("p",null,"If any of the assertion are external (not natively executed by DataHub), they will simply be omitted from the result\nset."),(0,a.yg)("p",null,"If running the assertions is successful, the results will be returned as follows:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "runAssertionsForAsset": {\n      "passingCount": 2,\n      "failingCount": 0,\n      "errorCount": 0,\n      "results": [\n        {\n          "urn": "urn:li:assertion:your-assertion-id-1",\n          "result": {\n            "type": "SUCCESS",\n            "nativeResults": [\n              {\n                "key": "Value",\n                "value": "1382"\n              }\n            ]\n          }\n        },\n        {\n          "urn": "urn:li:assertion:your-assertion-id-2",\n          "result": {\n            "type": "FAILURE",\n            "nativeResults": [\n              {\n                "key": "Value",\n                "value": "12323"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  },\n  "extensions": {}\n}\n')),(0,a.yg)("p",null,"Where you should see one result object for each assertion."),(0,a.yg)("h3",{id:"run-group-of-assertions-for-table"},"Run Group of Assertions for Table"),(0,a.yg)("p",null,"If you don't always want to run ",(0,a.yg)("em",{parentName:"p"},"all")," assertions for a given table, you can also opt to run a subset of the\ntable's assertions using ",(0,a.yg)("em",{parentName:"p"},"Assertion Tags"),". First, you'll add tags to your assertions to group and categorize them,\nthen you'll call the ",(0,a.yg)("inlineCode",{parentName:"p"},"runAssertionsForAsset")," mutation with the ",(0,a.yg)("inlineCode",{parentName:"p"},"tagUrns")," argument to filter for assertions having those tags."),(0,a.yg)("h4",{id:"step-1-adding-tag-to-an-assertion"},"Step 1: Adding Tag to an Assertion"),(0,a.yg)("p",null,"Currently, you can add tags to an assertion only via the DataHub GraphQL API. You can do this using the following mutation:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation addTags {\n  addTag(\n    input: {\n      resourceUrn: "urn:li:assertion:your-assertion"\n      tagUrn: "urn:li:tag:my-important-tag"\n    }\n  )\n}\n')),(0,a.yg)("h4",{id:"step-2-run-all-assertions-for-a-table-with-tags"},"Step 2: Run All Assertions for a Table with Tags"),(0,a.yg)("p",null,"Now, you can run all assertions for a table with a specific tag(s) using the ",(0,a.yg)("inlineCode",{parentName:"p"},"runAssertionsForAsset")," mutation with the\n",(0,a.yg)("inlineCode",{parentName:"p"},"tagUrns")," input parameter:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation runAssertionsForAsset {\n  runAssertionsForAsset(\n    urn: "urn:li:dataset:(urn:li:dataPlatform:snowflake,purchase_events,PROD)"\n    tagUrns: ["urn:li:tag:my-important-tag"]\n  ) {\n    passingCount\n    failingCount\n    errorCount\n    results {\n      urn\n      result {\n        type\n        nativeResults {\n          key\n          value\n        }\n      }\n    }\n  }\n}\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Coming Soon"),": Support for adding tags to assertions through the DataHub UI.")),(0,a.yg)(r.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.yg)("h3",{id:"run-assertion-1"},"Run Assertion"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/run_assertion.py\nimport logging\n\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\n\nlog = logging.getLogger(__name__)\n\ngraph = DataHubGraph(\n    config=DatahubClientConfig(\n        server="http://localhost:8080",\n    )\n)\n\nassertion_urn = "urn:li:assertion:6e3f9e09-1483-40f9-b9cd-30e5f182694a"\n\n# Run the assertion\nassertion_result = graph.run_assertion(urn=assertion_urn, save_result=True)\n\nlog.info(\n    f"Assertion result (SUCCESS / FAILURE / ERROR): {assertion_result.get(\'type\')}"\n)\n\n')),(0,a.yg)("h3",{id:"run-group-of-assertions-1"},"Run Group of Assertions"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/run_assertions.py\nimport logging\n\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\n\nlog = logging.getLogger(__name__)\n\ngraph = DataHubGraph(\n    config=DatahubClientConfig(\n        server="http://localhost:8080",\n    )\n)\n\nassertion_urns = [\n    "urn:li:assertion:6e3f9e09-1483-40f9-b9cd-30e5f182694a",\n    "urn:li:assertion:9e3f9e09-1483-40f9-b9cd-30e5f182694g",\n]\n\n# Run the assertions\nassertion_results = graph.run_assertions(urns=assertion_urns, save_result=True).get(\n    "results"\n)\n\nif assertion_results is not None:\n    assertion_result_1 = assertion_results.get(\n        "urn:li:assertion:6e3f9e09-1483-40f9-b9cd-30e5f182694a"\n    )\n    assertion_result_2 = assertion_results.get(\n        "urn:li:assertion:9e3f9e09-1483-40f9-b9cd-30e5f182694g"\n    )\n\n    log.info(f"Assertion results: {assertion_results}")\n    log.info(\n        f"Assertion result 1 (SUCCESS / FAILURE / ERROR): {assertion_result_1.get(\'type\')}"\n    )\n    log.info(\n        f"Assertion result 2 (SUCCESS / FAILURE / ERROR): {assertion_result_2.get(\'type\')}"\n    )\n\n')),(0,a.yg)("h3",{id:"run-all-assertions-for-table-1"},"Run All Assertions for Table"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/run_assertions_for_asset.py\nimport logging\n\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\n\nlog = logging.getLogger(__name__)\n\ngraph = DataHubGraph(\n    config=DatahubClientConfig(\n        server="http://localhost:8080",\n    )\n)\n\ndataset_urn = "urn:li:dataset:(urn:li:dataPlatform:snowflake,my_snowflake_table,PROD)"\n\n# Run all native assertions for the dataset\nassertion_results = graph.run_assertions_for_asset(urn=dataset_urn).get("results")\n\nif assertion_results is not None:\n    assertion_result_1 = assertion_results.get(\n        "urn:li:assertion:6e3f9e09-1483-40f9-b9cd-30e5f182694a"\n    )\n    assertion_result_2 = assertion_results.get(\n        "urn:li:assertion:9e3f9e09-1483-40f9-b9cd-30e5f182694g"\n    )\n\n    log.info(f"Assertion results: {assertion_results}")\n    log.info(\n        f"Assertion result 1 (SUCCESS / FAILURE / ERROR): {assertion_result_1.get(\'type\')}"\n    )\n    log.info(\n        f"Assertion result 2 (SUCCESS / FAILURE / ERROR): {assertion_result_2.get(\'type\')}"\n    )\n\n# Run a subset of native assertions having a specific tag\nimportant_assertion_tag = "urn:li:tag:my-important-assertion-tag"\nassertion_results = graph.run_assertions_for_asset(\n    urn=dataset_urn, tag_urns=[important_assertion_tag]\n).get("results")\n\n')))),(0,a.yg)("h3",{id:"experimental-providing-dynamic-parameters-to-assertions"},"Experimental: Providing Dynamic Parameters to Assertions"),(0,a.yg)("p",null,"You can provide ",(0,a.yg)("strong",{parentName:"p"},"dynamic parameters")," to your assertions to customize their behavior. This is particularly useful for\nassertions that require dynamic parameters, such as a threshold value that changes based on the time of day."),(0,a.yg)("p",null,"Dynamic parameters can be injected into the SQL fragment portion of any Assertion. For example, it can appear\nin any part of the SQL statement in a ",(0,a.yg)("a",{parentName:"p",href:"/docs/1.1.0/managed-datahub/observe/custom-sql-assertions"},"Custom SQL")," Assertion,\nor it can appear in the ",(0,a.yg)("strong",{parentName:"p"},"Advanced > Filter")," section of a ",(0,a.yg)("a",{parentName:"p",href:"/docs/1.1.0/managed-datahub/observe/column-assertions"},"Column"),",\n",(0,a.yg)("a",{parentName:"p",href:"/docs/1.1.0/managed-datahub/observe/volume-assertions"},"Volume"),", or ",(0,a.yg)("a",{parentName:"p",href:"/docs/1.1.0/managed-datahub/observe/freshness-assertions"},"Freshness")," Assertion."),(0,a.yg)("p",null,"To do so, you'll first need to edit the SQL fragment to include the dynamic parameter. Dynamic parameters appear\nas ",(0,a.yg)("inlineCode",{parentName:"p"},"${parameterName}")," in the SQL fragment."),(0,a.yg)("p",null,"Next, you'll call the ",(0,a.yg)("inlineCode",{parentName:"p"},"runAssertion"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"runAssertions"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"runAssertionsForAsset")," mutations with the ",(0,a.yg)("inlineCode",{parentName:"p"},"parameters")," input argument.\nThis argument is a list of key-value tuples, where the key is the parameter name and the value is the parameter value:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation runAssertion {\n  runAssertion(\n    urn: "urn:li:assertion:your-assertion-id"\n    parameters: [{ key: "parameterName", value: "parameterValue" }]\n  ) {\n    type\n    nativeResults {\n      key\n      value\n    }\n  }\n}\n')),(0,a.yg)("p",null,"At runtime, the ",(0,a.yg)("inlineCode",{parentName:"p"},"${parameterName}")," placeholder in the SQL fragment will be replaced with the provided ",(0,a.yg)("inlineCode",{parentName:"p"},"parameterValue")," before the query\nis sent to the database for execution."),(0,a.yg)("h2",{id:"get-assertion-details"},"Get Assertion Details"),(0,a.yg)("p",null,"You can use the following APIs to"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Fetch existing assertion definitions + run history"),(0,a.yg)("li",{parentName:"ol"},"Fetch the assertions associated with a given table + their run history.")),(0,a.yg)(s.A,{mdxType:"Tabs"},(0,a.yg)(r.A,{value:"graphql",label:"GraphQL",default:!0,mdxType:"TabItem"},(0,a.yg)("h3",{id:"get-assertions-for-table"},"Get Assertions for Table"),(0,a.yg)("p",null,"To retrieve all the assertions for a table, you can use the following GraphQL Query."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'query dataset {\n  dataset(\n    urn: "urn:li:dataset:(urn:li:dataPlatform:snowflake,purchases,PROD)"\n  ) {\n    assertions(start: 0, count: 1000) {\n      start\n      count\n      total\n      assertions {\n        urn\n        # Fetch the last run of each associated assertion.\n        runEvents(status: COMPLETE, limit: 1) {\n          total\n          failed\n          succeeded\n          runEvents {\n            timestampMillis\n            status\n            result {\n              type\n              nativeResults {\n                key\n                value\n              }\n            }\n          }\n        }\n        info {\n          type\n          description\n          lastUpdated {\n            time\n            actor\n          }\n          datasetAssertion {\n            datasetUrn\n            scope\n            aggregation\n            operator\n            parameters {\n              value {\n                value\n                type\n              }\n              minValue {\n                value\n                type\n              }\n              maxValue {\n                value\n                type\n              }\n            }\n            fields {\n              urn\n              path\n            }\n            nativeType\n            nativeParameters {\n              key\n              value\n            }\n            logic\n          }\n          freshnessAssertion {\n            type\n            entityUrn\n            schedule {\n              type\n              cron {\n                cron\n                timezone\n              }\n              fixedInterval {\n                unit\n                multiple\n              }\n            }\n            filter {\n              type\n              sql\n            }\n          }\n          sqlAssertion {\n            type\n            entityUrn\n            statement\n            changeType\n            operator\n            parameters {\n              value {\n                value\n                type\n              }\n              minValue {\n                value\n                type\n              }\n              maxValue {\n                value\n                type\n              }\n            }\n          }\n          fieldAssertion {\n            type\n            entityUrn\n            filter {\n              type\n              sql\n            }\n            fieldValuesAssertion {\n              field {\n                path\n                type\n                nativeType\n              }\n              transform {\n                type\n              }\n              operator\n              parameters {\n                value {\n                  value\n                  type\n                }\n                minValue {\n                  value\n                  type\n                }\n                maxValue {\n                  value\n                  type\n                }\n              }\n              failThreshold {\n                type\n                value\n              }\n              excludeNulls\n            }\n            fieldMetricAssertion {\n              field {\n                path\n                type\n                nativeType\n              }\n              metric\n              operator\n              parameters {\n                value {\n                  value\n                  type\n                }\n                minValue {\n                  value\n                  type\n                }\n                maxValue {\n                  value\n                  type\n                }\n              }\n            }\n          }\n          volumeAssertion {\n            type\n            entityUrn\n            filter {\n              type\n              sql\n            }\n            rowCountTotal {\n              operator\n              parameters {\n                value {\n                  value\n                  type\n                }\n                minValue {\n                  value\n                  type\n                }\n                maxValue {\n                  value\n                  type\n                }\n              }\n            }\n            rowCountChange {\n              type\n              operator\n              parameters {\n                value {\n                  value\n                  type\n                }\n                minValue {\n                  value\n                  type\n                }\n                maxValue {\n                  value\n                  type\n                }\n              }\n            }\n          }\n          schemaAssertion {\n            entityUrn\n            compatibility\n            fields {\n              path\n              type\n              nativeType\n            }\n            schema {\n              fields {\n                fieldPath\n                type\n                nativeDataType\n              }\n            }\n          }\n          source {\n            type\n            created {\n              time\n              actor\n            }\n          }\n        }\n      }\n    }\n  }\n}\n')),(0,a.yg)("h3",{id:"get-assertion-details-1"},"Get Assertion Details"),(0,a.yg)("p",null,"You can use the following GraphQL query to fetch the details for an assertion along with its evaluation history by URN."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'query getAssertion {\n  assertion(urn: "urn:li:assertion:assertion-id") {\n    urn\n    # Fetch the last 10 runs for the assertion.\n    runEvents(status: COMPLETE, limit: 10) {\n      total\n      failed\n      succeeded\n      runEvents {\n        timestampMillis\n        status\n        result {\n          type\n          nativeResults {\n            key\n            value\n          }\n        }\n      }\n    }\n    info {\n      type\n      description\n      lastUpdated {\n        time\n        actor\n      }\n      datasetAssertion {\n        datasetUrn\n        scope\n        aggregation\n        operator\n        parameters {\n          value {\n            value\n            type\n          }\n          minValue {\n            value\n            type\n          }\n          maxValue {\n            value\n            type\n          }\n        }\n        fields {\n          urn\n          path\n        }\n        nativeType\n        nativeParameters {\n          key\n          value\n        }\n        logic\n      }\n      freshnessAssertion {\n        type\n        entityUrn\n        schedule {\n          type\n          cron {\n            cron\n            timezone\n          }\n          fixedInterval {\n            unit\n            multiple\n          }\n        }\n        filter {\n          type\n          sql\n        }\n      }\n      sqlAssertion {\n        type\n        entityUrn\n        statement\n        changeType\n        operator\n        parameters {\n          value {\n            value\n            type\n          }\n          minValue {\n            value\n            type\n          }\n          maxValue {\n            value\n            type\n          }\n        }\n      }\n      fieldAssertion {\n        type\n        entityUrn\n        filter {\n          type\n          sql\n        }\n        fieldValuesAssertion {\n          field {\n            path\n            type\n            nativeType\n          }\n          transform {\n            type\n          }\n          operator\n          parameters {\n            value {\n              value\n              type\n            }\n            minValue {\n              value\n              type\n            }\n            maxValue {\n              value\n              type\n            }\n          }\n          failThreshold {\n            type\n            value\n          }\n          excludeNulls\n        }\n        fieldMetricAssertion {\n          field {\n            path\n            type\n            nativeType\n          }\n          metric\n          operator\n          parameters {\n            value {\n              value\n              type\n            }\n            minValue {\n              value\n              type\n            }\n            maxValue {\n              value\n              type\n            }\n          }\n        }\n      }\n      volumeAssertion {\n        type\n        entityUrn\n        filter {\n          type\n          sql\n        }\n        rowCountTotal {\n          operator\n          parameters {\n            value {\n              value\n              type\n            }\n            minValue {\n              value\n              type\n            }\n            maxValue {\n              value\n              type\n            }\n          }\n        }\n        rowCountChange {\n          type\n          operator\n          parameters {\n            value {\n              value\n              type\n            }\n            minValue {\n              value\n              type\n            }\n            maxValue {\n              value\n              type\n            }\n          }\n        }\n      }\n      schemaAssertion {\n        entityUrn\n        compatibility\n        fields {\n          path\n          type\n          nativeType\n        }\n        schema {\n          fields {\n            fieldPath\n            type\n            nativeDataType\n          }\n        }\n      }\n      source {\n        type\n        created {\n          time\n          actor\n        }\n      }\n    }\n  }\n}\n'))),(0,a.yg)(r.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"Python support coming soon!\n")))),(0,a.yg)("h2",{id:"add-tag-to-assertion"},"Add Tag to Assertion"),(0,a.yg)("p",null,"You can add tags to individual assertions to group and categorize them, for example by its priority or severity.\nNote that the tag should already exist in DataHub, or the operation will fail."),(0,a.yg)(s.A,{mdxType:"Tabs"},(0,a.yg)(r.A,{value:"graphql",label:"GraphQL",default:!0,mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation addTags {\n  addTag(\n    input: {\n      resourceUrn: "urn:li:assertion:your-assertion"\n      tagUrn: "urn:li:tag:my-important-tag"\n    }\n  )\n}\n')),(0,a.yg)("p",null,"If you see the following response, the operation was successful:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "addTag": true\n  },\n  "extensions": {}\n}\n')),(0,a.yg)("p",null,"You can create new tags using the ",(0,a.yg)("inlineCode",{parentName:"p"},"createTag")," mutation or via the UI."))),(0,a.yg)("h2",{id:"delete-assertions"},"Delete Assertions"),(0,a.yg)("p",null,"You can use delete dataset operations to DataHub using the following APIs."),(0,a.yg)(s.A,{mdxType:"Tabs"},(0,a.yg)(r.A,{value:"graphql",label:"GraphQL",default:!0,mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation deleteAssertion {\n  deleteAssertion(urn: "urn:li:assertion:test")\n}\n')),(0,a.yg)("p",null,"If you see the following response, the operation was successful:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "deleteAssertion": true\n  },\n  "extensions": {}\n}\n'))),(0,a.yg)(r.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/delete_assertion.py\nimport logging\n\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\n\nlog = logging.getLogger(__name__)\n\ngraph = DataHubGraph(\n    config=DatahubClientConfig(\n        server="http://localhost:8080",\n    )\n)\n\nassertion_urn = "urn:li:assertion:my-assertion"\n\n# Delete the Assertion\ngraph.delete_entity(urn=assertion_urn, hard=True)\n\nlog.info(f"Deleted assertion {assertion_urn}")\n\n')))),(0,a.yg)("h2",{id:"advanced-create-and-report-results-for-custom-assertions"},"(Advanced) Create and Report Results for Custom Assertions"),(0,a.yg)("p",null,"If you'd like to create and report results for your own custom assertions, e.g. those which are run and\nevaluated outside of DataHub Cloud, you need to generate 2 important Assertion Entity aspects, and give the assertion a unique\nURN of the following format:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Generate a unique URN for your assertion")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-plaintext"},"urn:li:assertion:<unique-assertion-id>\n")),(0,a.yg)("ol",{start:2},(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Generate the ",(0,a.yg)("a",{parentName:"p",href:"/docs/1.1.0/generated/metamodel/entities/assertion#assertion-info"},(0,a.yg)("strong",{parentName:"a"},"AssertionInfo"))," aspect for the assertion. You can do this using the Python SDK. Give your assertion a ",(0,a.yg)("inlineCode",{parentName:"p"},"type")," and a ",(0,a.yg)("inlineCode",{parentName:"p"},"source"),"\nwith type ",(0,a.yg)("inlineCode",{parentName:"p"},"EXTERNAL")," to mark it as an external assertion, not run by DataHub itself.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Generate the ",(0,a.yg)("a",{parentName:"p",href:"/docs/1.1.0/generated/metamodel/entities/assertion#assertionrunevent-timeseries"},(0,a.yg)("strong",{parentName:"a"},"AssertionRunEvent"))," timeseries aspect using the Python SDK. This aspect should contain the result of the assertion\nrun at a given timestamp and will be shown on the results graph in DataHub's UI."))))}v.isMDXComponent=!0}}]);