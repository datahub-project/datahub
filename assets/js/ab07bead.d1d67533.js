"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[9085],{7653:(e,t,a)=>{a.d(t,{A:()=>n});const n={icon:{tag:"svg",attrs:{"fill-rule":"evenodd",viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64c247.4 0 448 200.6 448 448S759.4 960 512 960 64 759.4 64 512 264.6 64 512 64zm127.98 274.82h-.04l-.08.06L512 466.75 384.14 338.88c-.04-.05-.06-.06-.08-.06a.12.12 0 00-.07 0c-.03 0-.05.01-.09.05l-45.02 45.02a.2.2 0 00-.05.09.12.12 0 000 .07v.02a.27.27 0 00.06.06L466.75 512 338.88 639.86c-.05.04-.06.06-.06.08a.12.12 0 000 .07c0 .03.01.05.05.09l45.02 45.02a.2.2 0 00.09.05.12.12 0 00.07 0c.02 0 .04-.01.08-.05L512 557.25l127.86 127.87c.04.04.06.05.08.05a.12.12 0 00.07 0c.03 0 .05-.01.09-.05l45.02-45.02a.2.2 0 00.05-.09.12.12 0 000-.07v-.02a.27.27 0 00-.05-.06L557.25 512l127.87-127.86c.04-.04.05-.06.05-.08a.12.12 0 000-.07c0-.03-.01-.05-.05-.09l-45.02-45.02a.2.2 0 00-.09-.05.12.12 0 00-.07 0z"}}]},name:"close-circle",theme:"filled"}},4732:(e,t,a)=>{a.d(t,{A:()=>l});var n=a(89379),s=a(96540),r=a(7653),o=a(89990),i=function(e,t){return s.createElement(o.A,(0,n.A)((0,n.A)({},e),{},{ref:t,icon:r.A}))};const l=s.forwardRef(i)},15680:(e,t,a)=>{a.d(t,{xA:()=>p,yg:()=>d});var n=a(96540);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=n.createContext({}),h=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=h(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=h(a),g=s,d=u["".concat(l,".").concat(g)]||u[g]||c[g]||r;return a?n.createElement(d,o(o({ref:t},p),{},{components:a})):n.createElement(d,o({ref:t},p))}));function d(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,o=new Array(r);o[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:s,o[1]=i;for(var h=2;h<r;h++)o[h]=a[h];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},43655:(e,t,a)=>{a.d(t,{A:()=>b});var n=a(96540),s=a(20053);const r="availabilityCard_P5od",o="managedIcon_AxXO",i="platform_wqXv",l="platformAvailable_Y8lN";var h=a(4732),p=a(89379);const u={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z"}}]},name:"check-circle",theme:"filled"};var c=a(89990),g=function(e,t){return n.createElement(c.A,(0,p.A)((0,p.A)({},e),{},{ref:t,icon:u}))};const d=n.forwardRef(g);const m={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M811.4 418.7C765.6 297.9 648.9 212 512.2 212S258.8 297.8 213 418.6C127.3 441.1 64 519.1 64 612c0 110.5 89.5 200 199.9 200h496.2C870.5 812 960 722.5 960 612c0-92.7-63.1-170.7-148.6-193.3zm36.3 281a123.07 123.07 0 01-87.6 36.3H263.9c-33.1 0-64.2-12.9-87.6-36.3A123.3 123.3 0 01140 612c0-28 9.1-54.3 26.2-76.3a125.7 125.7 0 0166.1-43.7l37.9-9.9 13.9-36.6c8.6-22.8 20.6-44.1 35.7-63.4a245.6 245.6 0 0152.4-49.9c41.1-28.9 89.5-44.2 140-44.2s98.9 15.3 140 44.2c19.9 14 37.5 30.8 52.4 49.9 15.1 19.3 27.1 40.7 35.7 63.4l13.8 36.5 37.8 10c54.3 14.5 92.1 63.8 92.1 120 0 33.1-12.9 64.3-36.3 87.7z"}}]},name:"cloud",theme:"outlined"};var y=function(e,t){return n.createElement(c.A,(0,p.A)((0,p.A)({},e),{},{ref:t,icon:m}))};const f=n.forwardRef(y),b=({saasOnly:e,ossOnly:t})=>n.createElement("div",{className:(0,s.A)(r,"card")},n.createElement("strong",null,"Feature Availability"),n.createElement("div",null,n.createElement("span",{className:(0,s.A)(i,!e&&l)},"Self-Hosted DataHub ",e?n.createElement(h.A,null):n.createElement(d,null))),n.createElement("div",null,n.createElement(f,{className:o}),n.createElement("span",{className:(0,s.A)(i,!t&&l)},"DataHub Cloud ",t?n.createElement(h.A,null):n.createElement(d,null))))},78618:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>h,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>c});a(96540);var n=a(15680),s=a(43655);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})),e}function i(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}const l={description:"This page provides an overview of working with DataHub Freshness Assertions",title:"Freshness Assertions",slug:"/managed-datahub/observe/freshness-assertions",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/managed-datahub/observe/freshness-assertions.md"},h="Freshness Assertions",p={unversionedId:"docs/managed-datahub/observe/freshness-assertions",id:"version-1.1.0/docs/managed-datahub/observe/freshness-assertions",title:"Freshness Assertions",description:"This page provides an overview of working with DataHub Freshness Assertions",source:"@site/versioned_docs/version-1.1.0/docs/managed-datahub/observe/freshness-assertions.md",sourceDirName:"docs/managed-datahub/observe",slug:"/managed-datahub/observe/freshness-assertions",permalink:"/docs/1.1.0/managed-datahub/observe/freshness-assertions",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/managed-datahub/observe/freshness-assertions.md",tags:[],version:"1.1.0",frontMatter:{description:"This page provides an overview of working with DataHub Freshness Assertions",title:"Freshness Assertions",slug:"/managed-datahub/observe/freshness-assertions",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/managed-datahub/observe/freshness-assertions.md"},sidebar:"overviewSidebar",previous:{title:"Custom SQL Assertions",permalink:"/docs/1.1.0/managed-datahub/observe/custom-sql-assertions"},next:{title:"Schema Assertions",permalink:"/docs/1.1.0/managed-datahub/observe/schema-assertions"}},u={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Support",id:"support",level:2},{value:"What is a Freshness Assertion?",id:"what-is-a-freshness-assertion",level:2},{value:"Anatomy of a Freshness Assertion",id:"anatomy-of-a-freshness-assertion",level:3},{value:"1. Evaluation Schedule",id:"1-evaluation-schedule",level:4},{value:"2. Change Window",id:"2-change-window",level:4},{value:"3. Change Source",id:"3-change-source",level:4},{value:"Creating a Freshness Assertion",id:"creating-a-freshness-assertion",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Steps",id:"steps",level:3},{value:"Stopping a Freshness Assertion",id:"stopping-a-freshness-assertion",level:2},{value:"Smart Assertions \u26a1",id:"smart-assertions-",level:2},{value:"Creating Freshness Assertions via API",id:"creating-freshness-assertions-via-api",level:2},{value:"GraphQL",id:"graphql",level:4},{value:"Examples",id:"examples",level:5},{value:"Reporting Operations via API",id:"reporting-operations-via-api",level:3},{value:"Examples",id:"examples-1",level:5},{value:"Tips",id:"tips",level:3}],g={toc:c},d="wrapper";function m(e){var{components:t}=e,a=i(e,["components"]);return(0,n.yg)(d,o(function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),n.forEach((function(t){r(e,t,a[t])}))}return e}({},g,a),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"freshness-assertions"},"Freshness Assertions"),(0,n.yg)(s.A,{saasOnly:!0,mdxType:"FeatureAvailability"}),(0,n.yg)("blockquote",null,(0,n.yg)("p",{parentName:"blockquote"},"The ",(0,n.yg)("strong",{parentName:"p"},"Freshness Assertions")," feature is available as part of the ",(0,n.yg)("strong",{parentName:"p"},"DataHub Cloud Observe")," module of DataHub Cloud.\nIf you are interested in learning more about ",(0,n.yg)("strong",{parentName:"p"},"DataHub Cloud Observe")," or trying it out, please ",(0,n.yg)("a",{parentName:"p",href:"https://datahub.com/products/data-observability/"},"visit our website"),".")),(0,n.yg)("h2",{id:"introduction"},"Introduction"),(0,n.yg)("p",null,"Can you remember a time when a Data Warehouse Table that you depended on went days, weeks, or even\nmonths without being updated with fresh data?"),(0,n.yg)("p",null,"Perhaps a bug had been introduced into an upstream Airflow DAG\nor worse, the person in charge of maintaining the Table has departed from your organization entirely.\nThere are many reasons why an important Table on Snowflake, Redshift, BigQuery, or Databricks may fail to be updated as often as expected."),(0,n.yg)("p",null,"What if you could reduce the time to detect these incidents, so that the people responsible for the data were made aware of data\nissues ",(0,n.yg)("em",{parentName:"p"},"before")," anyone else? What if you could communicate commitments about the freshness or change frequency\nof a table? With DataHub Cloud Freshness Assertions, you can."),(0,n.yg)("p",null,"DataHub Cloud allows users to define expectations about when a particular Table in the warehouse\nshould change, and then monitor those expectations over time, with the ability to be notified when things go wrong."),(0,n.yg)("p",null,"In this article, we'll cover the basics of monitoring Freshness Assertions - what they are, how to configure them, and more - so that you and your team can\nstart building trust in your most important data assets."),(0,n.yg)("p",null,"Let's get started!"),(0,n.yg)("h2",{id:"support"},"Support"),(0,n.yg)("p",null,"Freshness Assertions are currently supported for:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"Snowflake"),(0,n.yg)("li",{parentName:"ol"},"Redshift"),(0,n.yg)("li",{parentName:"ol"},"BigQuery"),(0,n.yg)("li",{parentName:"ol"},"Databricks"),(0,n.yg)("li",{parentName:"ol"},"DataHub Operations (collected via ingestion)")),(0,n.yg)("p",null,"Note that an Ingestion Source ",(0,n.yg)("em",{parentName:"p"},"must")," be configured with the data platform of your choice in DataHub Cloud's ",(0,n.yg)("strong",{parentName:"p"},"Ingestion"),"\ntab."),(0,n.yg)("blockquote",null,(0,n.yg)("p",{parentName:"blockquote"},"Note that Freshness Assertions are not yet supported if you are connecting to your warehouse\nusing the DataHub CLI.")),(0,n.yg)("h2",{id:"what-is-a-freshness-assertion"},"What is a Freshness Assertion?"),(0,n.yg)("p",null,"A ",(0,n.yg)("strong",{parentName:"p"},"Freshness Assertion")," is a configurable Data Quality rule used to determine whether a Table\non the Data Warehouse has been updated within a given period of time. Freshness Assertions are particularly useful when you have frequently-changing\nTables."),(0,n.yg)("p",null,'For example, imagine that we work for a company with a Snowflake Table that stores user clicks collected from our e-commerce website.\nThis table is updated with new data on a specific cadence: once per hour (In practice, daily or even weekly are also common).\nIn turn, there is a downstream Business Analytics Dashboard in Looker that shows important metrics like\nthe number of people clicking our "Daily Sale" banners, and this dashboard is generated from data stored in our "clicks" table.\nIt is important that our clicks Table continues to be updated each hour because if it stops being updated, it could mean\nthat our downstream metrics dashboard becomes incorrect. And the risk of this situation is obvious: our organization\nmay make bad decisions based on incomplete information.'),(0,n.yg)("p",null,"In such cases, we can use a ",(0,n.yg)("strong",{parentName:"p"},"Freshness Assertion"),' that checks whether the Snowflake "clicks" Table is being updated with\nfresh data each and every hour as expected. If an hour goes by without any changes, we can immediately notify our team, to prevent any\nnegative impacts.'),(0,n.yg)("h3",{id:"anatomy-of-a-freshness-assertion"},"Anatomy of a Freshness Assertion"),(0,n.yg)("p",null,"At the most basic level, ",(0,n.yg)("strong",{parentName:"p"},"Freshness Assertions")," consist of a few important parts:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"An ",(0,n.yg)("strong",{parentName:"li"},"Evaluation Schedule")),(0,n.yg)("li",{parentName:"ol"},"A ",(0,n.yg)("strong",{parentName:"li"},"Change Window")),(0,n.yg)("li",{parentName:"ol"},"A ",(0,n.yg)("strong",{parentName:"li"},"Change Source"))),(0,n.yg)("p",null,"In this section, we'll give an overview of each."),(0,n.yg)("h4",{id:"1-evaluation-schedule"},"1. Evaluation Schedule"),(0,n.yg)("p",null,"The ",(0,n.yg)("strong",{parentName:"p"},"Evaluation Schedule"),": This defines how often to check a given warehouse Table for new updates. This should usually\nbe configured to match the expected change frequency of the Table, although is can also be more frequently.\nIf the Table changes daily, it should be daily. If it changes hourly, it should be hourly. You can also specify specific days of the week, hours in the day, or even\nminutes in an hour."),(0,n.yg)("h4",{id:"2-change-window"},"2. Change Window"),(0,n.yg)("p",null,"The ",(0,n.yg)("strong",{parentName:"p"},"Change Window"),": This defines the window of time that is used when determining whether a change has been made to a Table.\nWe can either check for change to the Table"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("em",{parentName:"p"},"Since the freshness check was last evaluated"),". For example, if the evaluation schedule is set to run every day at\n8am PST, we can check whether a change was made between the previous day at 8am and the following day at 8am.")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("em",{parentName:"p"},"Within a specific amount of time of the freshness check being evaluated")," (A fixed interval). For example, if the evaluation schedule is set to run\nevery day at 8am PST, we can check whether a change was made in the ",(0,n.yg)("em",{parentName:"p"},"8 hours before")," the check is evaluated, which would mean\nin the time between midnight (12:00am) and 8:00am PST."))),(0,n.yg)("h4",{id:"3-change-source"},"3. Change Source"),(0,n.yg)("p",null,"The ",(0,n.yg)("strong",{parentName:"p"},"Change Source"),": This is the mechanism that DataHub Cloud should use to determine whether the Table has changed. The supported\nChange Source types vary by the platform, but generally fall into these categories:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Audit Log")," (Default): A metadata API or Table that is exposed by the Data Warehouse which contains captures information about the\noperations that have been performed to each Table. It is usually efficient to check, but some useful operations are not\nfully supported across all major Warehouse platforms. Note that for Databricks, ",(0,n.yg)("a",{parentName:"p",href:"https://docs.databricks.com/en/delta/history.html"},"this option"),"\nis only available for tables stored in Delta format.")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Information Schema"),": A system Table that is exposed by the Data Warehouse which contains live information about the Databases\nand Tables stored inside the Data Warehouse. It is usually efficient to check, but lacks detailed information about the ",(0,n.yg)("em",{parentName:"p"},"type"),"\nof change that was last made to a specific table (e.g. the operation itself - INSERT, UPDATE, DELETE, number of impacted rows, etc).\nNote that for Databricks, ",(0,n.yg)("a",{parentName:"p",href:"https://docs.databricks.com/en/delta/table-details.html"},"this option")," is only available for tables stored in Delta format.")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Last Modified Column"),": A Date or Timestamp column that represents the last time that a specific ",(0,n.yg)("em",{parentName:"p"},"row")," was touched or updated.\nAdding a Last Modified Column to each warehouse Table is a pattern is often used for existing use cases around change management.\nIf this change source is used, a query will be issued to the Table to search for rows that have been modified within a specific\nwindow of time (based on the Change Window)")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"High Watermark Column"),': A column that contains a constantly-incrementing value - a date, a time, or another always-increasing number.\nIf this change source is used, a query will be issued to the Table to look for rows with a new "high watermark", e.g. a value that\nis higher than the previously observed value, in order to determine whether the Table has been changed within a given period of time.\nNote that this approach is only supported if the Change Window does not use a fixed interval.')),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"DataHub Operation"),': A DataHub "Operation" aspect contains timeseries information used to describe changes made to an entity. Using this\noption avoids contacting your data platform, and instead uses the DataHub Operation metadata to evaluate Freshness Assertions.\nThis relies on Operations being reported to DataHub, either via ingestion or via use of the DataHub APIs (see ',(0,n.yg)("a",{parentName:"p",href:"#reporting-operations-via-api"},"Report Operation via API"),").\nNote if you have not configured an ingestion source through DataHub, then this may be the only option available. By default, any operation type found will be considered a valid change. Use the ",(0,n.yg)("strong",{parentName:"p"},"Operation Types"),' dropdown when selecting this option to specify which operation types should be considered valid changes. You may choose from one of DataHub\'s standard Operation Types, or specify a "Custom" Operation Type by typing in the name of the Operation Type.')),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"File Metadata")," (Databricks Only): A column that is exposed by Databricks for both Unity Catalog and Hive Metastore based tables\nwhich includes information about the last time that a file for the table was changed. Read more about it ",(0,n.yg)("a",{parentName:"p",href:"https://docs.databricks.com/en/ingestion/file-metadata-column.html"},"here"),"."),(0,n.yg)("p",{parentName:"li"},"Using either of the column value approaches (",(0,n.yg)("strong",{parentName:"p"},"Last Modified Column")," or ",(0,n.yg)("strong",{parentName:"p"},"High Watermark Column"),") to determine whether a Table has changed can be useful because it can be customized to determine whether specific types of changes have been made to a given Table.\nAnd because this type of assertion does not involve system warehouse tables, they are easily portable across Data Warehouse and Data Lake providers."))),(0,n.yg)("p",null,"Freshness Assertions also have an off switch: they can be started or stopped at any time with the click of button."),(0,n.yg)("h2",{id:"creating-a-freshness-assertion"},"Creating a Freshness Assertion"),(0,n.yg)("h3",{id:"prerequisites"},"Prerequisites"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Permissions"),": To create or delete Freshness Assertions for a specific entity on DataHub, you'll need to be granted the\n",(0,n.yg)("inlineCode",{parentName:"li"},"Edit Assertions")," and ",(0,n.yg)("inlineCode",{parentName:"li"},"Edit Monitors")," privileges for the entity. This will be granted to Entity owners as part of the ",(0,n.yg)("inlineCode",{parentName:"li"},"Asset Owners - Metadata Policy"),"\nby default."),(0,n.yg)("li",{parentName:"ol"},"(Optional) ",(0,n.yg)("strong",{parentName:"li"},"Data Platform Connection"),": In order to create a Freshness Assertion that queries the source data platform directly (instead of DataHub metadata), you'll need to have an ",(0,n.yg)("strong",{parentName:"li"},"Ingestion Source")," configured to your\nData Platform: Snowflake, BigQuery, or Redshift under the ",(0,n.yg)("strong",{parentName:"li"},"Integrations")," tab.")),(0,n.yg)("p",null,"Once these are in place, you're ready to create your Freshness Assertions!"),(0,n.yg)("h3",{id:"steps"},"Steps"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"Navigate to the Table that to monitor for freshness"),(0,n.yg)("li",{parentName:"ol"},"Click the ",(0,n.yg)("strong",{parentName:"li"},"Validations")," tab")),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"80%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/freshness/profile-validation-tab.png"})),(0,n.yg)("ol",{start:3},(0,n.yg)("li",{parentName:"ol"},"Click ",(0,n.yg)("strong",{parentName:"li"},"+ Create Assertion"))),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"40%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/freshness/assertion-builder-choose-type.png"})),(0,n.yg)("ol",{start:4},(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Choose ",(0,n.yg)("strong",{parentName:"p"},"Freshness"))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Configure the evaluation ",(0,n.yg)("strong",{parentName:"p"},"schedule"),". This is the frequency that the table will be checked for changes. This represents you\nexpectation about the frequency at which the table should be updated.")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Configure the evaluation ",(0,n.yg)("strong",{parentName:"p"},"period"),". This defines the period of time that will be considered when looking for changes to the table. Choose between ",(0,n.yg)("em",{parentName:"p"},"Since the previous check")," to check whether the table has changed since the past evaluation,\nor ",(0,n.yg)("em",{parentName:"p"},"In the past X hours")," to configure a fixed interval that is used when checking the table."))),(0,n.yg)("p",null,(0,n.yg)("em",{parentName:"p"},"Check whether the table has changed between subsequent evaluations of the check")),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"80%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/freshness/assertion-builder-freshness-since-last.png"})),(0,n.yg)("p",null,(0,n.yg)("em",{parentName:"p"},"Check whether the table has changed in a specific window of time")),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"80%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/freshness/assertion-builder-freshness-fixed-interval.png"})),(0,n.yg)("ol",{start:7},(0,n.yg)("li",{parentName:"ol"},"(Optional) Click ",(0,n.yg)("strong",{parentName:"li"},"Advanced")," to customize the evaluation ",(0,n.yg)("strong",{parentName:"li"},"source"),". This is the mechanism that will be used to evaluate\nthe check. Each Data Platform supports different options including Audit Log, Information Schema, Last Modified Column, High Watermark Column, and DataHub Operation.")),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"40%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/freshness/assertion-builder-freshness-source-type.png"})),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Audit Log"),": Check the Data Platform operational audit log to determine whether the table changed within the evaluation period."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Information Schema"),": Check the Data Platform system metadata tables to determine whether the table changed within the evaluation period."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Last Modified Column"),': Check for the presence of rows using a "Last Modified Time" column, which should reflect the time at which a given row was last changed in the table, to\ndetermine whether the table changed within the evaluation period.'),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"High Watermark Column"),': Monitor changes to a continuously-increasing "high watermark" column value to determine whether a table\nhas been changed. This option is particularly useful for tables that grow consistently with time, for example fact or event (e.g. click-stream) tables. It is not available\nwhen using a fixed lookback period.'),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"DataHub Operation"),": Use DataHub Operations to determine whether the table changed within the evaluation period.")),(0,n.yg)("ol",{start:8},(0,n.yg)("li",{parentName:"ol"},"Configure actions that should be taken when the Freshness Assertion passes or fails")),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"45%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/shared/assertion-builder-actions.png"})),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Raise incident"),": Automatically raise a new DataHub ",(0,n.yg)("inlineCode",{parentName:"p"},"Freshness")," Incident for the Table whenever the Freshness Assertion is failing. This\nmay indicate that the Table is unfit for consumption. Configure Slack Notifications under ",(0,n.yg)("strong",{parentName:"p"},"Settings")," to be notified when\nan incident is created due to an Assertion failure.")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Resolve incident"),": Automatically resolved any incidents that were raised due to failures in this Freshness Assertion. Note that\nany other incidents will not be impacted."))),(0,n.yg)("ol",{start:9},(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Click ",(0,n.yg)("strong",{parentName:"p"},"Next")," and add a description.")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Click ",(0,n.yg)("strong",{parentName:"p"},"Save"),"."))),(0,n.yg)("p",null,"And that's it! DataHub will now begin to monitor your Freshness Assertion for the table."),(0,n.yg)("p",null,"Once your assertion has run, you will begin to see Success or Failure status for the Table"),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"45%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/freshness/failing-assertions-section.png"})),(0,n.yg)("h2",{id:"stopping-a-freshness-assertion"},"Stopping a Freshness Assertion"),(0,n.yg)("p",null,"In order to temporarily stop the evaluation of the assertion:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"Navigate to the ",(0,n.yg)("strong",{parentName:"li"},"Validations")," tab of the Table with the assertion"),(0,n.yg)("li",{parentName:"ol"},"Click ",(0,n.yg)("strong",{parentName:"li"},"Freshness")," to open the Freshness Assertion assertions"),(0,n.yg)("li",{parentName:"ol"},'Click the "Stop" button for the assertion you wish to pause.')),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"25%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/shared/stop-assertion.png"})),(0,n.yg)("p",null,"To resume the assertion, simply click ",(0,n.yg)("strong",{parentName:"p"},"Start"),"."),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"25%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/shared/start-assertion.png"})),(0,n.yg)("h2",{id:"smart-assertions-"},"Smart Assertions \u26a1"),(0,n.yg)("p",null,"As part of the ",(0,n.yg)("strong",{parentName:"p"},"DataHub Cloud Observe")," module, DataHub Cloud also provides ",(0,n.yg)("strong",{parentName:"p"},"Smart Assertions")," out of the box. These are\ndynamic, AI-powered Freshness Assertions that you can use to monitor the freshness of important warehouse Tables, without\nrequiring any manual setup."),(0,n.yg)("p",null,"If DataHub Cloud is able to detect a pattern in the change frequency of a Snowflake, Redshift, BigQuery, or Databricks Table, you'll find\na recommended Smart Assertion under the ",(0,n.yg)("inlineCode",{parentName:"p"},"Validations")," tab on the Table profile page:"),(0,n.yg)("p",{align:"left"},(0,n.yg)("img",{width:"90%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/observe/freshness/smart-assertion.png"})),(0,n.yg)("p",null,"In order to enable it, simply click ",(0,n.yg)("strong",{parentName:"p"},"Turn On"),". From this point forward, the Smart Assertion will check for changes on a cadence\nbased on the Table history, by default using the ",(0,n.yg)("strong",{parentName:"p"},"Audit Log"),"."),(0,n.yg)("p",null,'Don\'t need it anymore? Smart Assertions can just as easily be turned off by clicking the three-dot "more" button and then ',(0,n.yg)("strong",{parentName:"p"},"Stop"),"."),(0,n.yg)("h2",{id:"creating-freshness-assertions-via-api"},"Creating Freshness Assertions via API"),(0,n.yg)("p",null,"Under the hood, DataHub Cloud implements Freshness Assertion Monitoring using two concepts:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Assertion"),': The specific expectation for freshness, e.g. "The table was changed int the past 7 hours"\nor "The table is changed on a schedule of every day by 8am". This is the "what".'),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Monitor"),': The process responsible for evaluating the Assertion on a given evaluation schedule and using specific\nmechanisms. This is the "how".')),(0,n.yg)("p",null,"Note that to create or delete Assertions and Monitors for a specific entity on DataHub, you'll need the\n",(0,n.yg)("inlineCode",{parentName:"p"},"Edit Assertions")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"Edit Monitors")," privileges for it."),(0,n.yg)("h4",{id:"graphql"},"GraphQL"),(0,n.yg)("p",null,"In order to create or update a Freshness Assertion, you can use the ",(0,n.yg)("inlineCode",{parentName:"p"},"upsertDatasetFreshnessAssertionMonitor")," mutation."),(0,n.yg)("h5",{id:"examples"},"Examples"),(0,n.yg)("p",null,"To create a Freshness Assertion Entity that checks whether a table has been updated in the past 8, and runs every 8 hours:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation upsertDatasetFreshnessAssertionMonitor {\n  upsertDatasetFreshnessAssertionMonitor(\n    input: {\n      entityUrn: "<urn of entity being monitored>"\n      schedule: {\n        type: FIXED_INTERVAL\n        fixedInterval: { unit: HOUR, multiple: 8 }\n      }\n      evaluationSchedule: {\n        timezone: "America/Los_Angeles"\n        cron: "0 */8 * * *"\n      }\n      evaluationParameters: { sourceType: INFORMATION_SCHEMA }\n      mode: ACTIVE\n    }\n  ) {\n    urn\n  }\n}\n')),(0,n.yg)("p",null,"You can use same endpoint with assertion urn input to update an existing Freshness Assertion and corresponding Monitor:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation upsertDatasetFreshnessAssertionMonitor {\n  upsertDatasetFreshnessAssertionMonitor(\n    assertionUrn: "<urn of assertion created in earlier query>"\n    input: {\n      entityUrn: "<urn of entity being monitored>"\n      schedule: {\n        type: FIXED_INTERVAL\n        fixedInterval: { unit: HOUR, multiple: 6 }\n      }\n      evaluationSchedule: {\n        timezone: "America/Los_Angeles"\n        cron: "0 */6 * * *"\n      }\n      evaluationParameters: { sourceType: INFORMATION_SCHEMA }\n      mode: ACTIVE\n    }\n  ) {\n    urn\n  }\n}\n')),(0,n.yg)("p",null,"You can delete assertions along with their monitors using GraphQL mutations: ",(0,n.yg)("inlineCode",{parentName:"p"},"deleteAssertion")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"deleteMonitor"),"."),(0,n.yg)("h3",{id:"reporting-operations-via-api"},"Reporting Operations via API"),(0,n.yg)("p",null,"DataHub Operations can be used to capture changes made to entities. This is useful for cases where the underlying data platform does not provide a mechanism\nto capture changes, or where the data platform's mechanism is not reliable. In order to report an operation, you can use the ",(0,n.yg)("inlineCode",{parentName:"p"},"reportOperation")," GraphQL mutation."),(0,n.yg)("h5",{id:"examples-1"},"Examples"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation reportOperation {\n  reportOperation(\n    input: {\n      urn: "<urn of the dataset being reported>"\n      operationType: INSERT\n      sourceType: DATA_PLATFORM\n      timestampMillis: 1693252366489\n    }\n  )\n}\n')),(0,n.yg)("p",null,"Use the ",(0,n.yg)("inlineCode",{parentName:"p"},"timestampMillis")," field to specify the time at which the operation occurred. If no value is provided, the current time will be used."),(0,n.yg)("h3",{id:"tips"},"Tips"),(0,n.yg)("admonition",{type:"info"},(0,n.yg)("p",{parentName:"admonition"},(0,n.yg)("strong",{parentName:"p"},"Authorization")),(0,n.yg)("p",{parentName:"admonition"},"Remember to always provide a DataHub Personal Access Token when calling the GraphQL API. To do so, just add the 'Authorization' header as follows:"),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",{parentName:"pre"},"Authorization: Bearer <personal-access-token>\n")),(0,n.yg)("p",{parentName:"admonition"},(0,n.yg)("strong",{parentName:"p"},"Exploring GraphQL API")),(0,n.yg)("p",{parentName:"admonition"},"Also, remember that you can play with an interactive version of the DataHub Cloud GraphQL API at ",(0,n.yg)("inlineCode",{parentName:"p"},"https://your-account-id.acryl.io/api/graphiql"))))}m.isMDXComponent=!0}}]);