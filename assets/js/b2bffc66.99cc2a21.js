"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[74258],{15680:(e,a,n)=>{n.d(a,{xA:()=>u,yg:()=>c});var t=n(96540);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,l=function(e,a){if(null==e)return{};var n,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=t.createContext({}),m=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},u=function(e){var a=m(e.components);return t.createElement(s.Provider,{value:a},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},p=t.forwardRef((function(e,a){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),g=m(n),p=l,c=g["".concat(s,".").concat(p)]||g[p]||d[p]||r;return n?t.createElement(c,i(i({ref:a},u),{},{components:n})):t.createElement(c,i({ref:a},u))}));function c(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=p;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[g]="string"==typeof e?e:l,i[1]=o;for(var m=2;m<r;m++)i[m]=n[m];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},33324:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>u,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>m,toc:()=>g});n(96540);var t=n(15680);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){return a=null!=a?a:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):function(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))})),e}function i(e,a){if(null==e)return{};var n,t,l=function(e,a){if(null==e)return{};var n,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}const o={title:"Lineage",slug:"/api/tutorials/lineage",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/lineage.md"},s="Lineage",m={unversionedId:"docs/api/tutorials/lineage",id:"docs/api/tutorials/lineage",title:"Lineage",description:"DataHub\u2019s Python SDK allows you to programmatically define and retrieve lineage between metadata entities. With the DataHub Lineage SDK, you can:",source:"@site/genDocs/docs/api/tutorials/lineage.md",sourceDirName:"docs/api/tutorials",slug:"/api/tutorials/lineage",permalink:"/docs/api/tutorials/lineage",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/lineage.md",tags:[],version:"current",frontMatter:{title:"Lineage",slug:"/api/tutorials/lineage",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/lineage.md"},sidebar:"overviewSidebar",previous:{title:"Compliance Forms",permalink:"/docs/api/tutorials/forms"},next:{title:"Container",permalink:"/docs/api/tutorials/container"}},u={},g=[{value:"Getting Started",id:"getting-started",level:2},{value:"Add Lineage",id:"add-lineage",level:2},{value:"Add Entity Lineage",id:"add-entity-lineage",level:3},{value:"Add Entity Lineage Between Datasets",id:"add-entity-lineage-between-datasets",level:4},{value:"Add Entity Lineage Between Datajobs",id:"add-entity-lineage-between-datajobs",level:4},{value:"Add Column Lineage",id:"add-column-lineage",level:3},{value:"Add Column Lineage with Fuzzy Matching",id:"add-column-lineage-with-fuzzy-matching",level:4},{value:"Add Column Lineage with Strict Matching",id:"add-column-lineage-with-strict-matching",level:4},{value:"Add Column Lineage with Custom Mapping",id:"add-column-lineage-with-custom-mapping",level:4},{value:"Infer Lineage from SQL",id:"infer-lineage-from-sql",level:3},{value:"Add Query Node with Lineage",id:"add-query-node-with-lineage",level:3},{value:"Get Lineage",id:"get-lineage",level:2},{value:"Get Entity Lineage",id:"get-entity-lineage",level:3},{value:"Get Upstream Lineage for a Dataset",id:"get-upstream-lineage-for-a-dataset",level:4},{value:"Get Downstream Lineage for a Dataset Across Multiple Hops",id:"get-downstream-lineage-for-a-dataset-across-multiple-hops",level:4},{value:"Return Type",id:"return-type",level:4},{value:"Get Column-Level Lineage",id:"get-column-level-lineage",level:3},{value:"Get Downstream Lineage for a Dataset Column",id:"get-downstream-lineage-for-a-dataset-column",level:4},{value:"Return type",id:"return-type-1",level:4},{value:"Filter Lineage Results",id:"filter-lineage-results",level:3},{value:"Lineage SDK Reference",id:"lineage-sdk-reference",level:2},{value:"Supported Lineage Combinations",id:"supported-lineage-combinations",level:3},{value:"Column Lineage Options",id:"column-lineage-options",level:3},{value:"Interpreting Column Lineage Results",id:"interpreting-column-lineage-results",level:3},{value:"Example with <code>max_hops=1</code>",id:"example-with-max_hops1",level:4},{value:"Example with <code>max_hops=2</code>",id:"example-with-max_hops2",level:4},{value:"Alternative: Lineage GraphQL API",id:"alternative-lineage-graphql-api",level:2},{value:"Add Lineage Between Datasets with GraphQL",id:"add-lineage-between-datasets-with-graphql",level:4},{value:"Get Downstream Lineage with GraphQL",id:"get-downstream-lineage-with-graphql",level:4},{value:"FAQ",id:"faq",level:2}],d={toc:g},p="wrapper";function c(e){var{components:a}=e,n=i(e,["components"]);return(0,t.yg)(p,r(function(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{},t=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),t.forEach((function(a){l(e,a,n[a])}))}return e}({},d,n),{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"lineage"},"Lineage"),(0,t.yg)("p",null,"DataHub\u2019s Python SDK allows you to programmatically define and retrieve lineage between metadata entities. With the DataHub Lineage SDK, you can:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Add ",(0,t.yg)("strong",{parentName:"li"},"table-level and column-level lineage")," across datasets, data jobs, dashboards, and charts"),(0,t.yg)("li",{parentName:"ul"},"Automatically ",(0,t.yg)("strong",{parentName:"li"},"infer lineage from SQL queries")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Read lineage")," (upstream or downstream) for a given entity or column"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Filter lineage results")," using structured filters")),(0,t.yg)("h2",{id:"getting-started"},"Getting Started"),(0,t.yg)("p",null,"To use DataHub SDK, you'll need to install ",(0,t.yg)("a",{parentName:"p",href:"https://pypi.org/project/acryl-datahub/"},(0,t.yg)("inlineCode",{parentName:"a"},"acryl-datahub"))," and set up a connection to your DataHub instance. Follow the ",(0,t.yg)("a",{parentName:"p",href:"/docs/metadata-ingestion/cli-ingestion#installing-datahub-cli"},"installation guide")," to get started."),(0,t.yg)("p",null,"Connect to your DataHub instance:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'from datahub.sdk import DataHubClient\n\nclient = DataHubClient(server="<your_server>", token="<your_token>")\n')),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"server"),": The URL of your DataHub GMS server",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"local: ",(0,t.yg)("inlineCode",{parentName:"li"},"http://localhost:8080")),(0,t.yg)("li",{parentName:"ul"},"hosted: ",(0,t.yg)("inlineCode",{parentName:"li"},"https://<your_datahub_url>/gms")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"token"),": You'll need to ",(0,t.yg)("a",{parentName:"li",href:"/docs/authentication/personal-access-tokens"},"generate a Personal Access Token")," from your DataHub instance.")),(0,t.yg)("h2",{id:"add-lineage"},"Add Lineage"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"add_lineage()")," method allows you to define lineage between two entities."),(0,t.yg)("h3",{id:"add-entity-lineage"},"Add Entity Lineage"),(0,t.yg)("p",null,"You can create lineage between two datasets, data jobs, dashboards, or charts. The ",(0,t.yg)("inlineCode",{parentName:"p"},"upstream")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"downstream")," parameters should be the URNs of the entities you want to link."),(0,t.yg)("h4",{id:"add-entity-lineage-between-datasets"},"Add Entity Lineage Between Datasets"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/lineage_dataset_add.py\nfrom datahub.metadata.urns import DatasetUrn\nfrom datahub.sdk.main_client import DataHubClient\n\nclient = DataHubClient.from_env()\n\n\nupstream_urn = DatasetUrn(platform="snowflake", name="sales_raw")\ndownstream_urn = DatasetUrn(platform="snowflake", name="sales_cleaned")\nclient.lineage.add_lineage(upstream=upstream_urn, downstream=downstream_urn)\n\n')),(0,t.yg)("h4",{id:"add-entity-lineage-between-datajobs"},"Add Entity Lineage Between Datajobs"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/lineage_datajob_to_datajob.py\nfrom datahub.metadata.urns import DataFlowUrn, DataJobUrn\nfrom datahub.sdk import DataHubClient\n\nclient = DataHubClient.from_env()\n\ndataflow_urn = DataFlowUrn(\n    orchestrator="airflow", flow_id="data_pipeline", cluster="PROD"\n)\n\nclient.lineage.add_lineage(\n    upstream=DataJobUrn(flow=dataflow_urn, job_id="data_job_1"),\n    downstream=DataJobUrn(flow=dataflow_urn, job_id="data_job_2"),\n)\n\n')),(0,t.yg)("admonition",{title:"Lineage Combinations",type:"note"},(0,t.yg)("p",{parentName:"admonition"},"For supported lineage combinations, see ",(0,t.yg)("a",{parentName:"p",href:"#supported-lineage-combinations"},"Supported Lineage Combinations"),".")),(0,t.yg)("h3",{id:"add-column-lineage"},"Add Column Lineage"),(0,t.yg)("p",null,"You can add column-level lineage by using ",(0,t.yg)("inlineCode",{parentName:"p"},"column_lineage")," parameter when linking datasets."),(0,t.yg)("h4",{id:"add-column-lineage-with-fuzzy-matching"},"Add Column Lineage with Fuzzy Matching"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/lineage_dataset_column.py\nfrom datahub.metadata.urns import DatasetUrn\nfrom datahub.sdk import DataHubClient\n\nclient = DataHubClient.from_env()\n\nclient.lineage.add_lineage(\n    upstream=DatasetUrn(platform="snowflake", name="sales_raw"),\n    downstream=DatasetUrn(platform="snowflake", name="sales_cleaned"),\n    column_lineage=True,  # same as "auto_fuzzy", which maps columns based on name similarity\n)\n\n')),(0,t.yg)("p",null,"When ",(0,t.yg)("inlineCode",{parentName:"p"},"column_lineage")," is set to ",(0,t.yg)("strong",{parentName:"p"},"True"),", DataHub will automatically map columns based on their names, allowing for fuzzy matching. This is useful when upstream and downstream datasets have similar but not identical column names. (e.g. ",(0,t.yg)("inlineCode",{parentName:"p"},"customer_id")," in upstream and ",(0,t.yg)("inlineCode",{parentName:"p"},"CustomerId")," in downstream). See ",(0,t.yg)("a",{parentName:"p",href:"#column-lineage-options"},"Column Lineage Options")," for more details."),(0,t.yg)("h4",{id:"add-column-lineage-with-strict-matching"},"Add Column Lineage with Strict Matching"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/lineage_dataset_column_auto_strict.py\nfrom datahub.metadata.urns import DatasetUrn\nfrom datahub.sdk import DataHubClient\n\nclient = DataHubClient.from_env()\n\nclient.lineage.add_lineage(\n    upstream=DatasetUrn(platform="snowflake", name="sales_raw"),\n    downstream=DatasetUrn(platform="snowflake", name="sales_cleaned"),\n    column_lineage="auto_strict",\n)\n\n')),(0,t.yg)("p",null,"This will create column-level lineage with strict matching, meaning the column names must match exactly between upstream and downstream datasets."),(0,t.yg)("h4",{id:"add-column-lineage-with-custom-mapping"},"Add Column Lineage with Custom Mapping"),(0,t.yg)("p",null,"For custom mapping, you can use a dictionary where keys are downstream column names and values represent lists of upstream column names. This allows you to specify complex relationships."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/lineage_dataset_column_custom_mapping.py\nfrom datahub.metadata.urns import DatasetUrn\nfrom datahub.sdk import DataHubClient\n\nclient = DataHubClient.from_env()\n\nclient.lineage.add_lineage(\n    upstream=DatasetUrn(platform="snowflake", name="sales_raw"),\n    downstream=DatasetUrn(platform="snowflake", name="sales_cleaned"),\n    # { downstream_column -> [upstream_columns] }\n    column_lineage={\n        "id": ["id"],\n        "region": ["region", "region_id"],\n        "total_revenue": ["revenue"],\n    },\n)\n\n')),(0,t.yg)("h3",{id:"infer-lineage-from-sql"},"Infer Lineage from SQL"),(0,t.yg)("p",null,"You can infer lineage directly from a SQL query using ",(0,t.yg)("inlineCode",{parentName:"p"},"infer_lineage_from_sql()"),". This will parse the query, determine upstream and downstream datasets, and automatically add lineage (including column-level lineage when possible) and a query node showing the SQL transformation logic."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/lineage_dataset_from_sql.py\nfrom datahub.sdk.main_client import DataHubClient\n\nclient = DataHubClient.from_env()\n\nsql_query = """\nCREATE TABLE sales_summary AS\nSELECT \n    p.product_name,\n    c.customer_segment,\n    SUM(s.quantity) as total_quantity,\n    SUM(s.amount) as total_sales\nFROM sales s\nJOIN products p ON s.product_id = p.id\nJOIN customers c ON s.customer_id = c.id\nGROUP BY p.product_name, c.customer_segment\n"""\n\n# sales_summary will be assumed to be in the default db/schema\n# e.g. prod_db.public.sales_summary\nclient.lineage.infer_lineage_from_sql(\n    query_text=sql_query,\n    platform="snowflake",\n    default_db="prod_db",\n    default_schema="public",\n)\n\n')),(0,t.yg)("admonition",{title:"DataHub SQL Parser",type:"note"},(0,t.yg)("p",{parentName:"admonition"},"Check out more information on how we handle SQL parsing below."),(0,t.yg)("ul",{parentName:"admonition"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/docs/lineage/sql_parsing"},"The DataHub SQL Parser Documentation")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"https://medium.com/datahub-project/extracting-column-level-lineage-from-sql-779b8ce17567"},"Blog Post: Extracting Column-Level Lineage from SQL")))),(0,t.yg)("h3",{id:"add-query-node-with-lineage"},"Add Query Node with Lineage"),(0,t.yg)("p",null,"If you provide a ",(0,t.yg)("inlineCode",{parentName:"p"},"transformation_text")," to ",(0,t.yg)("inlineCode",{parentName:"p"},"add_lineage"),", DataHub will create a query node that represents the transformation logic. This is useful for tracking how data is transformed between datasets."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/lineage_dataset_add_with_query_node.py\nfrom datahub.metadata.urns import DatasetUrn\nfrom datahub.sdk.main_client import DataHubClient\n\nclient = DataHubClient.from_env()\n\nupstream_urn = DatasetUrn(platform="snowflake", name="upstream_table")\ndownstream_urn = DatasetUrn(platform="snowflake", name="downstream_table")\n\ntransformation_text = """\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName("HighValueFilter").getOrCreate()\ndf = spark.read.table("customers")\nhigh_value = df.filter("lifetime_value > 10000")\nhigh_value.write.saveAsTable("high_value_customers")\n"""\n\nclient.lineage.add_lineage(\n    upstream=upstream_urn,\n    downstream=downstream_urn,\n    transformation_text=transformation_text,\n    column_lineage={"id": ["id", "customer_id"]},\n)\n\n# by passing the transformation_text, the query node will be created with the table level lineage.\n# transformation_text can be any transformation logic e.g. a spark job, an airflow DAG, python script, etc.\n# if you have a SQL query, we recommend using add_dataset_lineage_from_sql instead.\n# note that transformation_text itself will not create a column level lineage.\n\n')),(0,t.yg)("p",null,"Transformation text can be any transformation logic, Python scripts, Airflow DAG code, or any other code that describes how the upstream dataset is transformed into the downstream dataset."),(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"80%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/lineage/query-node.png"})),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"Providing ",(0,t.yg)("inlineCode",{parentName:"p"},"transformation_text")," will NOT create column lineage. You need to specify ",(0,t.yg)("inlineCode",{parentName:"p"},"column_lineage")," parameter to enable column-level lineage."),(0,t.yg)("p",{parentName:"admonition"},"If you have a SQL query that describes the transformation, you can use ",(0,t.yg)("a",{parentName:"p",href:"#infer-lineage-from-sql"},"infer_lineage_from_sql")," to automatically parse the query and add column level lineage.")),(0,t.yg)("h2",{id:"get-lineage"},"Get Lineage"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"get_lineage()")," method allows you to retrieve lineage for a given entity."),(0,t.yg)("h3",{id:"get-entity-lineage"},"Get Entity Lineage"),(0,t.yg)("h4",{id:"get-upstream-lineage-for-a-dataset"},"Get Upstream Lineage for a Dataset"),(0,t.yg)("p",null,"This will return the direct upstream entity that the dataset depends on. By default, it retrieves only the immediate upstream entities (1 hop)."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/lineage_get_basic.py\nfrom datahub.metadata.urns import DatasetUrn\nfrom datahub.sdk.main_client import DataHubClient\n\nclient = DataHubClient.from_env()\n\ndownstream_lineage = client.lineage.get_lineage(\n    source_urn=DatasetUrn(platform="snowflake", name="sales_summary"),\n    direction="downstream",\n)\n\nprint(downstream_lineage)\n\n')),(0,t.yg)("h4",{id:"get-downstream-lineage-for-a-dataset-across-multiple-hops"},"Get Downstream Lineage for a Dataset Across Multiple Hops"),(0,t.yg)("p",null,"To get upstream/downstream entities that are more than one hop away, you can use the ",(0,t.yg)("inlineCode",{parentName:"p"},"max_hops")," parameter. This allows you to traverse the lineage graph up to a specified number of hops."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/lineage_get_with_hops.py\nfrom datahub.metadata.urns import DatasetUrn\nfrom datahub.sdk.main_client import DataHubClient\n\nclient = DataHubClient.from_env()\n\ndownstream_lineage = client.lineage.get_lineage(\n    source_urn=DatasetUrn(platform="snowflake", name="sales_summary"),\n    direction="downstream",\n    max_hops=2,\n)\n\nprint(downstream_lineage)\n\n\n')),(0,t.yg)("admonition",{title:"USING MAX_HOPS",type:"note"},(0,t.yg)("p",{parentName:"admonition"},"if you provide ",(0,t.yg)("inlineCode",{parentName:"p"},"max_hops")," greater than 2, it will traverse the full lineage graph and limit the results by ",(0,t.yg)("inlineCode",{parentName:"p"},"count"),".")),(0,t.yg)("h4",{id:"return-type"},"Return Type"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"get_lineage()")," returns a list of ",(0,t.yg)("inlineCode",{parentName:"p"},"LineageResult")," objects."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'results = [\n  LineageResult(\n    urn="urn:li:dataset:(urn:li:dataPlatform:snowflake,table_2,PROD)",\n    type="DATASET",\n    hops=1,\n    direction="downstream",\n    platform="snowflake",\n    name="table_2", # name of the entity\n    paths=[] # Only populated for column-level lineage\n  )\n]\n')),(0,t.yg)("h3",{id:"get-column-level-lineage"},"Get Column-Level Lineage"),(0,t.yg)("h4",{id:"get-downstream-lineage-for-a-dataset-column"},"Get Downstream Lineage for a Dataset Column"),(0,t.yg)("p",null,"You can retrieve column-level lineage by specifying the ",(0,t.yg)("inlineCode",{parentName:"p"},"source_column")," parameter. This will return lineage paths that include the specified column."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/lineage_column_get.py\nfrom datahub.metadata.urns import DatasetUrn\nfrom datahub.sdk.main_client import DataHubClient\n\nclient = DataHubClient.from_env()\n\n# Get column lineage for the entire flow\n# you can pass source_urn and source_column to get lineage for a specific column\n# alternatively, you can pass schemaFieldUrn to source_urn.\n# e.g. source_urn="urn:li:schemaField:(urn:li:dataset:(urn:li:dataPlatform:snowflake,downstream_table),id)"\ndownstream_column_lineage = client.lineage.get_lineage(\n    source_urn=DatasetUrn(platform="snowflake", name="sales_summary"),\n    source_column="id",\n    direction="downstream",\n)\n\nprint(downstream_column_lineage)\n\n')),(0,t.yg)("p",null,"You can also pass ",(0,t.yg)("inlineCode",{parentName:"p"},"SchemaFieldUrn")," as the ",(0,t.yg)("inlineCode",{parentName:"p"},"source_urn")," to get column-level lineage."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/lineage_column_get_from_schemafield.py\nfrom datahub.sdk.main_client import DataHubClient\n\nclient = DataHubClient.from_env()\n\n# Get column lineage for the entire flow\nresults = client.lineage.get_lineage(\n    source_urn="urn:li:schemaField:(urn:li:dataset:(urn:li:dataPlatform:snowflake,sales_summary,PROD),id)",\n    direction="downstream",\n)\n\nprint(list(results))\n\n\n')),(0,t.yg)("h4",{id:"return-type-1"},"Return type"),(0,t.yg)("p",null,"The return type is the same as for entity lineage, but with additional ",(0,t.yg)("inlineCode",{parentName:"p"},"paths")," field that contains column lineage paths."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'results = [\n  LineageResult(\n    urn="urn:li:dataset:(urn:li:dataPlatform:snowflake,table_2,PROD)",\n    type="DATASET",\n    hops=1,\n    direction="downstream",\n    platform="snowflake",\n    name="table_2", # name of the entity\n    paths=[\n      LineagePath(\n        urn="urn:li:schemaField:(urn:li:dataset:(urn:li:dataPlatform:snowflake,table_1,PROD),col1)",\n        column_name="col1", # name of the column\n        entity_name="table_1", # name of the entity that contains the column\n      ),\n      LineagePath(\n        urn="urn:li:schemaField:(urn:li:dataset:(urn:li:dataPlatform:snowflake,table_2,PROD),col4)",\n        column_name="col4", # name of the column\n        entity_name="table_2", # name of the entity that contains the column\n      )\n    ] # Only populated for column-level lineage\n  )\n]\n')),(0,t.yg)("p",null,"For more details on how to interpret the results, see ",(0,t.yg)("a",{parentName:"p",href:"#interpreting-lineage-results"},"Interpreting Lineage Results"),"."),(0,t.yg)("h3",{id:"filter-lineage-results"},"Filter Lineage Results"),(0,t.yg)("p",null,"You can filter by platform, type, domain, environment, and more."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/lineage_get_with_filter.py\nfrom datahub.sdk.main_client import DataHubClient\nfrom datahub.sdk.search_filters import FilterDsl as F\n\nclient = DataHubClient.from_env()\n\n# get upstream snowflake production datasets.\nresults = client.lineage.get_lineage(\n    source_urn="urn:li:dataset:(platform,sales_agg,PROD)",\n    direction="upstream",\n    filter=F.and_(F.platform("snowflake"), F.entity_type("dataset"), F.env("PROD")),\n)\n\nprint(results)\n\n')),(0,t.yg)("p",null,"You can check more details about the available filters in the ",(0,t.yg)("a",{parentName:"p",href:"/docs/api/tutorials/sdk/search_client#filter-based-search"},"Search SDK documentation"),"."),(0,t.yg)("h2",{id:"lineage-sdk-reference"},"Lineage SDK Reference"),(0,t.yg)("p",null,"For a full reference, see the ",(0,t.yg)("a",{parentName:"p",href:"/docs/python-sdk/sdk-v2/lineage-client"},"lineage SDK reference"),"."),(0,t.yg)("h3",{id:"supported-lineage-combinations"},"Supported Lineage Combinations"),(0,t.yg)("p",null,"The Lineage APIs support the following entity combinations:"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Upstream Entity"),(0,t.yg)("th",{parentName:"tr",align:null},"Downstream Entity"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"Dataset"),(0,t.yg)("td",{parentName:"tr",align:null},"Dataset")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"Dataset"),(0,t.yg)("td",{parentName:"tr",align:null},"DataJob")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"DataJob"),(0,t.yg)("td",{parentName:"tr",align:null},"DataJob")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"DataJob"),(0,t.yg)("td",{parentName:"tr",align:null},"Dataset")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"Dataset"),(0,t.yg)("td",{parentName:"tr",align:null},"Dashboard")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"Chart"),(0,t.yg)("td",{parentName:"tr",align:null},"Dashboard")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"Dashboard"),(0,t.yg)("td",{parentName:"tr",align:null},"Dashboard")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"Dataset"),(0,t.yg)("td",{parentName:"tr",align:null},"Chart")))),(0,t.yg)("blockquote",null,(0,t.yg)("p",{parentName:"blockquote"},"\u2139\ufe0f Column-level lineage and creating query node with transformation text are ",(0,t.yg)("strong",{parentName:"p"},"only supported")," for ",(0,t.yg)("inlineCode",{parentName:"p"},"Dataset \u2192 Dataset")," lineage.")),(0,t.yg)("h3",{id:"column-lineage-options"},"Column Lineage Options"),(0,t.yg)("p",null,"For dataset-to-dataset lineage, you can specify ",(0,t.yg)("inlineCode",{parentName:"p"},"column_lineage")," parameter in ",(0,t.yg)("inlineCode",{parentName:"p"},"add_lineage()")," in several ways:"),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"Value"),(0,t.yg)("th",{parentName:"tr",align:null},"Description"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("inlineCode",{parentName:"td"},"False")),(0,t.yg)("td",{parentName:"tr",align:null},"Disable column-level lineage (default)")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("inlineCode",{parentName:"td"},"True")),(0,t.yg)("td",{parentName:"tr",align:null},'Enable column-level lineage with automatic mapping (same as "auto_fuzzy")')),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("inlineCode",{parentName:"td"},'"auto_fuzzy"')),(0,t.yg)("td",{parentName:"tr",align:null},"Enable column-level lineage with fuzzy matching (useful for similar column names)")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},(0,t.yg)("inlineCode",{parentName:"td"},'"auto_strict"')),(0,t.yg)("td",{parentName:"tr",align:null},"Enable column-level lineage with strict matching (exact column names required)")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"Column Mapping"),(0,t.yg)("td",{parentName:"tr",align:null},"A dictionary mapping downstream column names to lists of upstream column names")))),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("mdxAdmonitionTitle",{parentName:"admonition"},(0,t.yg)("inlineCode",{parentName:"mdxAdmonitionTitle"},"auto_fuzzy")," vs ",(0,t.yg)("inlineCode",{parentName:"mdxAdmonitionTitle"},"auto_strict")),(0,t.yg)("ul",{parentName:"admonition"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("inlineCode",{parentName:"strong"},"auto_fuzzy")),": Automatically matches columns based on similar names, allowing for some flexibility in naming conventions. For example, these two columns would be considered a match:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"user_id \u2192 userId"),(0,t.yg)("li",{parentName:"ul"},"customer_id \u2192 CustomerId"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},(0,t.yg)("inlineCode",{parentName:"strong"},"auto_strict")),": Requires exact column name matches between upstream and downstream datasets. For example, ",(0,t.yg)("inlineCode",{parentName:"li"},"customer_id")," in the upstream dataset must match ",(0,t.yg)("inlineCode",{parentName:"li"},"customer_id")," in the downstream dataset exactly."))),(0,t.yg)("h3",{id:"interpreting-column-lineage-results"},"Interpreting Column Lineage Results"),(0,t.yg)("p",null,"When retrieving column-level lineage, the results include ",(0,t.yg)("inlineCode",{parentName:"p"},"paths")," that show how columns are related across datasets. Each path is a list of column URNs that represent the lineage from the source column to the target column."),(0,t.yg)("p",null,"For example, let's say we have the following lineage across three tables:"),(0,t.yg)("p",{align:"center"},(0,t.yg)("img",{width:"80%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/lineage/column-lineage.png"})),(0,t.yg)("h4",{id:"example-with-max_hops1"},"Example with ",(0,t.yg)("inlineCode",{parentName:"h4"},"max_hops=1")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'>>> client.lineage.get_lineage(\n        source_urn="urn:li:dataset:(urn:li:dataPlatform:snowflake,table_1,PROD)",\n        source_column="col1",\n        direction="downstream",\n        max_hops=1\n    )\n')),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returns:")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'[\n    {\n        "urn": "...table_2...",\n        "hops": 1,\n        "paths": [\n            ["...table_1.col1", "...table_2.col4"],\n            ["...table_1.col1", "...table_2.col5"]\n        ]\n    }\n]\n')),(0,t.yg)("h4",{id:"example-with-max_hops2"},"Example with ",(0,t.yg)("inlineCode",{parentName:"h4"},"max_hops=2")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'>>> client.lineage.get_lineage(\n        source_urn="urn:li:dataset:(urn:li:dataPlatform:snowflake,table_1,PROD)",\n        source_column="col1",\n        direction="downstream",\n        max_hops=2\n    )\n')),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returns:")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'[\n    {\n        "urn": "...table_2...",\n        "hops": 1,\n        "paths": [\n            ["...table_1.col1", "...table_2.col4"],\n            ["...table_1.col1", "...table_2.col5"]\n        ]\n    },\n    {\n        "urn": "...table_3...",\n        "hops": 2,\n        "paths": [\n            ["...table_1.col1", "...table_2.col4", "...table_3.col7"]\n        ]\n    }\n]\n')),(0,t.yg)("h2",{id:"alternative-lineage-graphql-api"},"Alternative: Lineage GraphQL API"),(0,t.yg)("p",null,"While we generally recommend using the Python SDK for lineage, you can also use the GraphQL API to add and retrieve lineage."),(0,t.yg)("h4",{id:"add-lineage-between-datasets-with-graphql"},"Add Lineage Between Datasets with GraphQL"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-graphql"},'mutation updateLineage {\n  updateLineage(\n    input: {\n      edgesToAdd: [\n        {\n          downstreamUrn: "urn:li:dataset:(urn:li:dataPlatform:hive,logging_events,PROD)"\n          upstreamUrn: "urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_deleted,PROD)"\n        }\n      ]\n      edgesToRemove: []\n    }\n  )\n}\n')),(0,t.yg)("h4",{id:"get-downstream-lineage-with-graphql"},"Get Downstream Lineage with GraphQL"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-graphql"},'query scrollAcrossLineage {\n  scrollAcrossLineage(\n    input: {\n      query: "*"\n      urn: "urn:li:dataset:(urn:li:dataPlatform:hive,logging_events,PROD)"\n      count: 10\n      direction: DOWNSTREAM\n      orFilters: [\n        {\n          and: [\n            {\n              condition: EQUAL\n              negated: false\n              field: "degree"\n              values: ["1", "2", "3+"]\n            }\n          ]\n        }\n      ]\n    }\n  ) {\n    searchResults {\n      degree\n      entity {\n        urn\n        type\n      }\n    }\n  }\n}\n')),(0,t.yg)("h2",{id:"faq"},"FAQ"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Can I get lineage at the column level?"),"\nYes \u2014 for dataset-to-dataset lineage, both ",(0,t.yg)("inlineCode",{parentName:"p"},"add_lineage()")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"get_lineage()")," support column-level lineage."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Can I pass a SQL query and get lineage automatically?"),"\nYes \u2014 use ",(0,t.yg)("inlineCode",{parentName:"p"},"infer_lineage_from_sql()")," to parse a query and extract table and column lineage."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Can I use filters when retrieving lineage?"),"\nYes \u2014 ",(0,t.yg)("inlineCode",{parentName:"p"},"get_lineage()")," accepts structured filters via ",(0,t.yg)("inlineCode",{parentName:"p"},"FilterDsl"),", just like in the Search SDK."))}c.isMDXComponent=!0}}]);