"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[51348],{96204:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>u,default:()=>h,frontMatter:()=>d,metadata:()=>g,toc:()=>m});t(96540);var n=t(15680),r=t(53720),l=t(5400);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){return a=null!=a?a:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):function(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})),e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const d={title:"Data Lineage",slug:"/api/tutorials/lineage",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/lineage.md"},u="Data Lineage",g={unversionedId:"docs/api/tutorials/lineage",id:"version-1.1.0/docs/api/tutorials/lineage",title:"Data Lineage",description:"Why Would You Use Lineage?",source:"@site/versioned_docs/version-1.1.0/docs/api/tutorials/lineage.md",sourceDirName:"docs/api/tutorials",slug:"/api/tutorials/lineage",permalink:"/docs/1.1.0/api/tutorials/lineage",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/lineage.md",tags:[],version:"1.1.0",frontMatter:{title:"Data Lineage",slug:"/api/tutorials/lineage",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/lineage.md"},sidebar:"overviewSidebar",previous:{title:"Compliance Forms",permalink:"/docs/1.1.0/api/tutorials/forms"},next:{title:"AI/ML Framework Integration with DataHub",permalink:"/docs/1.1.0/api/tutorials/ml"}},p={},m=[{value:"Why Would You Use Lineage?",id:"why-would-you-use-lineage",level:2},{value:"Goal Of This Guide",id:"goal-of-this-guide",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Add Lineage",id:"add-lineage",level:2},{value:"Expected Outcome",id:"expected-outcome",level:3},{value:"Add Column-level Lineage",id:"add-column-level-lineage",level:2},{value:"Expected Outcome",id:"expected-outcome-1",level:3},{value:"Add Lineage to Non-Dataset Entities",id:"add-lineage-to-non-dataset-entities",level:2},{value:"Read Lineage (Lineage Impact Analysis)",id:"read-lineage-lineage-impact-analysis",level:2},{value:"Expected Outcome",id:"expected-outcome-2",level:3},{value:"Read Column-level Lineage",id:"read-column-level-lineage",level:2},{value:"Expected Outcome",id:"expected-outcome-3",level:3}],y={toc:m},c="wrapper";function h(e){var{components:a}=e,t=s(e,["components"]);return(0,n.yg)(c,o(function(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{},n=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),n.forEach((function(a){i(e,a,t[a])}))}return e}({},y,t),{components:a,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"data-lineage"},"Data Lineage"),(0,n.yg)("h2",{id:"why-would-you-use-lineage"},"Why Would You Use Lineage?"),(0,n.yg)("p",null,"Data lineage is used to capture data dependencies within an organization. It allows you to track the inputs from which a data asset is derived, along with the data assets that depend on it downstream."),(0,n.yg)("p",null,"For more information about data lineage, refer to ",(0,n.yg)("a",{parentName:"p",href:"/docs/1.1.0/generated/lineage/lineage-feature-guide"},"About DataHub Lineage"),"."),(0,n.yg)("h3",{id:"goal-of-this-guide"},"Goal Of This Guide"),(0,n.yg)("p",null,"This guide will show you how to"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Add lineage between datasets."),(0,n.yg)("li",{parentName:"ul"},"Add column-level lineage between datasets."),(0,n.yg)("li",{parentName:"ul"},"Read lineage.")),(0,n.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,n.yg)("p",null,"For this tutorial, you need to deploy DataHub Quickstart and ingest sample data.\nFor detailed steps, please refer to ",(0,n.yg)("a",{parentName:"p",href:"/docs/1.1.0/quickstart"},"Datahub Quickstart Guide"),"."),(0,n.yg)("admonition",{type:"note"},(0,n.yg)("p",{parentName:"admonition"},"Before adding lineage, you need to ensure the targeted dataset is already present in your datahub.\nIf you attempt to manipulate entities that do not exist, your operation will fail.\nIn this guide, we will be using data from sample ingestion.")),(0,n.yg)("h2",{id:"add-lineage"},"Add Lineage"),(0,n.yg)(r.A,{mdxType:"Tabs"},(0,n.yg)(l.A,{value:"graphql",label:"GraphQL",default:!0,mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'mutation updateLineage {\n  updateLineage(\n    input: {\n      edgesToAdd: [\n        {\n          downstreamUrn: "urn:li:dataset:(urn:li:dataPlatform:hive,logging_events,PROD)"\n          upstreamUrn: "urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_deleted,PROD)"\n        }\n      ]\n      edgesToRemove: []\n    }\n  )\n}\n')),(0,n.yg)("p",null,"Note that you can create a list of edges. For example, if you want to assign multiple upstream entities to a downstream entity, you can do the following."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'mutation updateLineage {\n  updateLineage(\n    input: {\n      edgesToAdd: [\n        {\n          downstreamUrn: "urn:li:dataset:(urn:li:dataPlatform:hive,logging_events,PROD)"\n          upstreamUrn: "urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_deleted,PROD)"\n        }\n        {\n          downstreamUrn: "urn:li:dataset:(urn:li:dataPlatform:hive,logging_events,PROD)"\n          upstreamUrn: "urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_created,PROD)"\n        }\n      ]\n      edgesToRemove: []\n    }\n  )\n}\n\n')),(0,n.yg)("p",null,"For more information about the ",(0,n.yg)("inlineCode",{parentName:"p"},"updateLineage")," mutation, please refer to ",(0,n.yg)("a",{parentName:"p",href:"/docs/graphql/mutations/#updatelineage"},"updateLineage"),"."),(0,n.yg)("p",null,"If you see the following response, the operation was successful:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'{\n  "data": {\n    "updateLineage": true\n  },\n  "extensions": {}\n}\n'))),(0,n.yg)(l.A,{value:"curl",label:"Curl",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-shell"},'curl --location --request POST \'http://localhost:8080/api/graphql\' \\\n--header \'Authorization: Bearer <my-access-token>\' \\\n--header \'Content-Type: application/json\'  --data-raw \'{ "query": "mutation updateLineage { updateLineage( input:{ edgesToAdd : { downstreamUrn: \\"urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_deleted,PROD)\\", upstreamUrn : \\"urn:li:dataset:(urn:li:dataPlatform:hive,logging_events,PROD)\\"}, edgesToRemove :{downstreamUrn: \\"urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_deleted,PROD)\\",upstreamUrn : \\"urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_deleted,PROD)\\" } })}", "variables":{}}\'\n')),(0,n.yg)("p",null,"Expected Response:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'{ "data": { "updateLineage": true }, "extensions": {} }\n'))),(0,n.yg)(l.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/lineage_emitter_rest.py\nimport datahub.emitter.mce_builder as builder\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\n\n# Construct a lineage object.\nlineage_mce = builder.make_lineage_mce(\n    [\n        builder.make_dataset_urn("hive", "fct_users_deleted"),  # Upstream\n    ],\n    builder.make_dataset_urn("hive", "logging_events"),  # Downstream\n)\n\n# Create an emitter to the GMS REST API.\nemitter = DatahubRestEmitter("http://localhost:8080")\n\n# Emit metadata!\nemitter.emit_mce(lineage_mce)\n\n')))),(0,n.yg)("h3",{id:"expected-outcome"},"Expected Outcome"),(0,n.yg)("p",null,"You can now see the lineage between ",(0,n.yg)("inlineCode",{parentName:"p"},"fct_users_deleted")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"logging_events"),"."),(0,n.yg)("p",{align:"center"},(0,n.yg)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/lineage-added.png"})),(0,n.yg)("h2",{id:"add-column-level-lineage"},"Add Column-level Lineage"),(0,n.yg)(r.A,{mdxType:"Tabs"},(0,n.yg)(l.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/lineage_emitter_dataset_finegrained_sample.py\nimport datahub.emitter.mce_builder as builder\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\nfrom datahub.metadata.com.linkedin.pegasus2avro.dataset import (\n    DatasetLineageType,\n    FineGrainedLineage,\n    FineGrainedLineageDownstreamType,\n    FineGrainedLineageUpstreamType,\n    Upstream,\n    UpstreamLineage,\n)\n\n\ndef datasetUrn(tbl):\n    return builder.make_dataset_urn("hive", tbl)\n\n\ndef fldUrn(tbl, fld):\n    return builder.make_schema_field_urn(datasetUrn(tbl), fld)\n\n\nfineGrainedLineages = [\n    FineGrainedLineage(\n        upstreamType=FineGrainedLineageUpstreamType.FIELD_SET,\n        upstreams=[\n            fldUrn("fct_users_deleted", "browser_id"),\n            fldUrn("fct_users_created", "user_id"),\n        ],\n        downstreamType=FineGrainedLineageDownstreamType.FIELD,\n        downstreams=[fldUrn("logging_events", "browser")],\n    ),\n]\n\n\n# this is just to check if any conflicts with existing Upstream, particularly the DownstreamOf relationship\nupstream = Upstream(\n    dataset=datasetUrn("fct_users_deleted"), type=DatasetLineageType.TRANSFORMED\n)\n\nfieldLineages = UpstreamLineage(\n    upstreams=[upstream], fineGrainedLineages=fineGrainedLineages\n)\n\nlineageMcp = MetadataChangeProposalWrapper(\n    entityUrn=datasetUrn("logging_events"),\n    aspect=fieldLineages,\n)\n\n# Create an emitter to the GMS REST API.\nemitter = DatahubRestEmitter("http://localhost:8080")\n\n# Emit metadata!\nemitter.emit_mcp(lineageMcp)\n\n')))),(0,n.yg)("h3",{id:"expected-outcome-1"},"Expected Outcome"),(0,n.yg)("p",null,"You can now see the column-level lineage between datasets. Note that you have to enable ",(0,n.yg)("inlineCode",{parentName:"p"},"Show Columns")," to be able to see the column-level lineage."),(0,n.yg)("p",{align:"center"},(0,n.yg)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/column-level-lineage-added.png"})),(0,n.yg)("h2",{id:"add-lineage-to-non-dataset-entities"},"Add Lineage to Non-Dataset Entities"),(0,n.yg)("p",null,"You can also add lineage to non-dataset entities, such as DataJobs, Charts, and Dashboards.\nPlease refer to the following examples."),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Connection"),(0,n.yg)("th",{parentName:"tr",align:null},"Examples"),(0,n.yg)("th",{parentName:"tr",align:null},"A.K.A"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"DataJob to DataFlow"),(0,n.yg)("td",{parentName:"tr",align:null},"- ",(0,n.yg)("a",{parentName:"td",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/examples/library/lineage_job_dataflow.py"},"lineage_job_dataflow.py")),(0,n.yg)("td",{parentName:"tr",align:null})),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"DataJob to Dataset"),(0,n.yg)("td",{parentName:"tr",align:null},"- ",(0,n.yg)("a",{parentName:"td",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/examples/library/lineage_dataset_job_dataset.py"},"lineage_dataset_job_dataset.py")," ",(0,n.yg)("br",null)),(0,n.yg)("td",{parentName:"tr",align:null},"Pipeline Lineage")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Chart to Dashboard"),(0,n.yg)("td",{parentName:"tr",align:null},"- ",(0,n.yg)("a",{parentName:"td",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/examples/library/lineage_chart_dashboard.py"},"lineage_chart_dashboard.py")),(0,n.yg)("td",{parentName:"tr",align:null})),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Chart to Dataset"),(0,n.yg)("td",{parentName:"tr",align:null},"- ",(0,n.yg)("a",{parentName:"td",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/examples/library/lineage_dataset_chart.py"},"lineage_dataset_chart.py")),(0,n.yg)("td",{parentName:"tr",align:null})))),(0,n.yg)("h2",{id:"read-lineage-lineage-impact-analysis"},"Read Lineage (Lineage Impact Analysis)"),(0,n.yg)(r.A,{mdxType:"Tabs"},(0,n.yg)(l.A,{value:"graphql",label:"GraphQL",default:!0,mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-graphql"},'query scrollAcrossLineage {\n  scrollAcrossLineage(\n    input: {\n      query: "*"\n      urn: "urn:li:dataset:(urn:li:dataPlatform:hive,logging_events,PROD)"\n      count: 10\n      direction: DOWNSTREAM\n      orFilters: [\n        {\n          and: [\n            {\n              condition: EQUAL\n              negated: false\n              field: "degree"\n              values: ["1", "2", "3+"]\n            }\n          ]\n        }\n      ]\n    }\n  ) {\n    searchResults {\n      degree\n      entity {\n        urn\n        type\n      }\n    }\n  }\n}\n')),(0,n.yg)("admonition",{title:"Degree",type:"info"},(0,n.yg)("p",{parentName:"admonition"},"Note that ",(0,n.yg)("inlineCode",{parentName:"p"},"degree")," means the number of hops in the lineage. For example, ",(0,n.yg)("inlineCode",{parentName:"p"},"degree: 1")," means the immediate downstream entities, ",(0,n.yg)("inlineCode",{parentName:"p"},"degree: 2")," means the entities that are two hops away, and so on.")),(0,n.yg)("p",null,"The GraphQL example shows using lineage degrees as a filter, but additional search filters can be included here as well.\nThis will perform a multi-hop lineage search on the urn specified. For more information about the ",(0,n.yg)("inlineCode",{parentName:"p"},"scrollAcrossLineage")," mutation, please refer to ",(0,n.yg)("a",{parentName:"p",href:"/docs/graphql/queries/#scrollacrosslineage"},"scrollAcrossLineage"),".")),(0,n.yg)(l.A,{value:"curl",label:"Curl",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-shell"},'curl --location --request POST \'http://localhost:8080/api/graphql\' \\\n--header \'Authorization: Bearer <my-access-token>\' \\\n--header \'Content-Type: application/json\'  --data-raw \'{ { "query": "query scrollAcrossLineage { scrollAcrossLineage( input: { query: \\"*\\" urn: \\"urn:li:dataset:(urn:li:dataPlatform:hive,logging_events,PROD)\\" count: 10 direction: DOWNSTREAM orFilters: [ { and: [ { condition: EQUAL negated: false field: \\"degree\\" values: [\\"1\\", \\"2\\", \\"3+\\"] } ] } ] } ) { searchResults { degree entity { urn type } } }}"\n}}\'\n'))),(0,n.yg)(l.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/read_lineage_execute_graphql.py\n# read-modify-write requires access to the DataHubGraph (RestEmitter is not enough)\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\n\ngms_endpoint = "http://localhost:8080"\ngraph = DataHubGraph(DatahubClientConfig(server=gms_endpoint))\n\n# Query multiple aspects from entity\nquery = """\nquery scrollAcrossLineage($input: ScrollAcrossLineageInput!) {\n  scrollAcrossLineage(input: $input) {\n    searchResults {\n      degree\n      entity {\n        urn\n        type\n      }\n    }\n  }\n}\n"""\n\nvariables = {\n    "input": {\n        "query": "*",\n        "urn": "urn:li:dataset:(urn:li:dataPlatform:hive,logging_events,PROD)",\n        "count": 10,\n        "direction": "DOWNSTREAM",\n        "orFilters": [\n            {\n                "and": [\n                    {\n                        "condition": "EQUAL",\n                        "negated": "false",\n                        "field": "degree",\n                        "values": ["1", "2", "3+"],\n                    }\n                ]\n            }\n        ],\n    }\n}\nresult = graph.execute_graphql(query=query, variables=variables)\n\nprint(result)\n\n')),(0,n.yg)("p",null,"The Python SDK example shows how to read lineage of a dataset. Please note that the ",(0,n.yg)("inlineCode",{parentName:"p"},"aspect_type")," parameter can vary depending on the entity type.\nBelow is a few examples of ",(0,n.yg)("inlineCode",{parentName:"p"},"aspect_type")," for different entities."),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Entity"),(0,n.yg)("th",{parentName:"tr",align:null},"Aspect_type"),(0,n.yg)("th",{parentName:"tr",align:null},"Reference"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Dataset"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"UpstreamLineageClass")),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("a",{parentName:"td",href:"/docs/1.1.0/generated/metamodel/entities/dataset#upstreamlineage"},"Link"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Datajob"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"DataJobInputOutputClass")),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("a",{parentName:"td",href:"/docs/1.1.0/generated/metamodel/entities/datajob#datajobinputoutput"},"Link"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Dashboard"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"DashboardInfoClass")),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("a",{parentName:"td",href:"/docs/1.1.0/generated/metamodel/entities/dashboard#dashboardinfo"},"Link"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"DataFlow"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"DataFlowInfoClass")),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("a",{parentName:"td",href:"/docs/1.1.0/generated/metamodel/entities/dataflow#dataflowinfo"},"Link"))))),(0,n.yg)("p",null,"Learn more about lineages of different entities in the ",(0,n.yg)("a",{parentName:"p",href:"#add-lineage-to-non-dataset-entities"},"Add Lineage to Non-Dataset Entities")," Section."))),(0,n.yg)("h3",{id:"expected-outcome-2"},"Expected Outcome"),(0,n.yg)("p",null,"As an outcome, you should see the downstream entities of ",(0,n.yg)("inlineCode",{parentName:"p"},"logging_events"),"."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-graphql"},'{\n  "data": {\n    "scrollAcrossLineage": {\n      "searchResults": [\n        {\n          "degree": 1,\n          "entity": {\n            "urn": "urn:li:dataJob:(urn:li:dataFlow:(airflow,dag_abc,PROD),task_123)",\n            "type": "DATA_JOB"\n          }\n        },\n        ...\n        {\n          "degree": 2,\n          "entity": {\n            "urn": "urn:li:mlPrimaryKey:(user_analytics,user_name)",\n            "type": "MLPRIMARY_KEY"\n          }\n        }\n      ]\n    }\n  },\n  "extensions": {}\n}\n')),(0,n.yg)("h2",{id:"read-column-level-lineage"},"Read Column-level Lineage"),(0,n.yg)("p",null,"You can also read column-level lineage via Python SDK."),(0,n.yg)(r.A,{mdxType:"Tabs"},(0,n.yg)(l.A,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/read_lineage_dataset_rest.py\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\n\n# Imports for metadata model classes\nfrom datahub.metadata.schema_classes import UpstreamLineageClass\n\n# Get the current lineage for a dataset\ngms_endpoint = "http://localhost:8080"\ngraph = DataHubGraph(DatahubClientConfig(server=gms_endpoint))\n\nurn = "urn:li:dataset:(urn:li:dataPlatform:hive,logging_events,PROD)"\nresult = graph.get_aspect(entity_urn=urn, aspect_type=UpstreamLineageClass)\n\nprint(result)\n\n\n')))),(0,n.yg)("h3",{id:"expected-outcome-3"},"Expected Outcome"),(0,n.yg)("p",null,"As a response, you will get the full lineage information like this."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-graphql"},'{\n  "UpstreamLineageClass": {\n    "upstreams": [\n      {\n        "UpstreamClass": {\n          "auditStamp": {\n            "AuditStampClass": {\n              "time": 0,\n              "actor": "urn:li:corpuser:unknown",\n              "impersonator": null,\n              "message": null\n            }\n          },\n          "created": null,\n          "dataset": "urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_deleted,PROD)",\n          "type": "TRANSFORMED",\n          "properties": null,\n          "query": null\n        }\n      }\n    ],\n    "fineGrainedLineages": [\n      {\n        "FineGrainedLineageClass": {\n          "upstreamType": "FIELD_SET",\n          "upstreams": [\n            "urn:li:schemaField:(urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_deleted,PROD),browser_id)",\n            "urn:li:schemaField:(urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_created,PROD),user_id)"\n          ],\n          "downstreamType": "FIELD",\n          "downstreams": [\n            "urn:li:schemaField:(urn:li:dataset:(urn:li:dataPlatform:hive,logging_events,PROD),browser)"\n          ],\n          "transformOperation": null,\n          "confidenceScore": 1.0,\n          "query": null\n        }\n      }\n    ]\n  }\n}\n')))}h.isMDXComponent=!0}}]);