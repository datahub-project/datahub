"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[88112],{15680:(e,t,n)=>{n.d(t,{xA:()=>g,yg:()=>d});var a=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},g=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),u=p(n),y=i,d=u["".concat(s,".").concat(y)]||u[y]||m[y]||r;return n?a.createElement(d,l(l({ref:t},g),{},{components:n})):a.createElement(d,l({ref:t},g))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=y;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},52493:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>u});n(96540);var a=n(15680);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const o={title:"DataHub Metadata Ingestion Development Guide",sidebar_label:"Metadata Ingestion Development Guide",slug:"/metadata-ingestion/claude",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/CLAUDE.md"},s="DataHub Metadata Ingestion Development Guide",p={unversionedId:"metadata-ingestion/CLAUDE",id:"metadata-ingestion/CLAUDE",title:"DataHub Metadata Ingestion Development Guide",description:"Build and Test Commands",source:"@site/genDocs/metadata-ingestion/CLAUDE.md",sourceDirName:"metadata-ingestion",slug:"/metadata-ingestion/claude",permalink:"/docs/metadata-ingestion/claude",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/CLAUDE.md",tags:[],version:"current",frontMatter:{title:"DataHub Metadata Ingestion Development Guide",sidebar_label:"Metadata Ingestion Development Guide",slug:"/metadata-ingestion/claude",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/CLAUDE.md"}},g={},u=[{value:"Build and Test Commands",id:"build-and-test-commands",level:2},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Directory Structure",id:"directory-structure",level:2},{value:"Code Style Guidelines",id:"code-style-guidelines",level:2},{value:"Testing Conventions",id:"testing-conventions",level:2},{value:"Configuration Guidelines (Pydantic)",id:"configuration-guidelines-pydantic",level:2},{value:"Key Files",id:"key-files",level:2}],m={toc:u},y="wrapper";function d(e){var{components:t}=e,n=l(e,["components"]);return(0,a.yg)(y,r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){i(e,t,n[t])}))}return e}({},m,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"datahub-metadata-ingestion-development-guide"},"DataHub Metadata Ingestion Development Guide"),(0,a.yg)("h2",{id:"build-and-test-commands"},"Build and Test Commands"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Using Gradle (slow but reliable):")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"# Development setup from repository root\n../gradlew :metadata-ingestion:installDev   # Setup Python environment\nsource venv/bin/activate                    # Activate virtual environment\n\n# Linting and formatting\n../gradlew :metadata-ingestion:lint         # Run ruff + mypy\n../gradlew :metadata-ingestion:lintFix      # Auto-fix linting issues\n\n# Testing\n../gradlew :metadata-ingestion:testQuick                           # Fast unit tests\n../gradlew :metadata-ingestion:testFull                            # All tests\n../gradlew :metadata-ingestion:testSingle -PtestFile=tests/unit/test_file.py  # Single test\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Direct Python commands (when venv is activated):")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"# Linting\nruff format src/ tests/\nruff check src/ tests/\nmypy src/ tests/\n\n# Testing\npytest -vv                                 # Run all tests\npytest -m 'not integration'                # Unit tests only\npytest -m 'integration'                    # Integration tests\npytest tests/path/to/file.py               # Single test file\npytest tests/path/to/file.py::TestClass    # Single test class\npytest tests/path/to/file.py::TestClass::test_method  # Single test\n")),(0,a.yg)("h2",{id:"environment-variables"},"Environment Variables"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Build configuration:")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("inlineCode",{parentName:"p"},"DATAHUB_VENV_USE_COPIES"),": Set to ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," to use ",(0,a.yg)("inlineCode",{parentName:"p"},"--copies")," flag when creating Python virtual environments. This copies the Python binary instead of creating a symlink. Useful for Nix environments, immutable filesystems, Windows, or container environments where symlinks don't work correctly. Increases disk usage and setup time, so only enable if needed."),(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"export DATAHUB_VENV_USE_COPIES=true\n../gradlew :metadata-ingestion:installDev\n")))),(0,a.yg)("h2",{id:"directory-structure"},"Directory Structure"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"src/datahub/"),": Source code for the DataHub CLI and ingestion framework"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"tests/"),": All tests (NOT in ",(0,a.yg)("inlineCode",{parentName:"li"},"src/")," directory)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"tests/unit/"),": Unit tests"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"tests/integration/"),": Integration tests"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"scripts/"),": Build and development scripts"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"examples/"),": Example ingestion configurations"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"developing.md"),": Detailed development environment information")),(0,a.yg)("h2",{id:"code-style-guidelines"},"Code Style Guidelines"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Formatting"),": Uses ruff, 88 character line length"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Imports"),": Sorted with ruff.lint.isort, no relative imports, Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Types"),": Always use type annotations, prefer Protocol for interfaces",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Avoid ",(0,a.yg)("inlineCode",{parentName:"li"},"Any")," type - use specific types (",(0,a.yg)("inlineCode",{parentName:"li"},"Dict[str, int]"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"TypedDict"),", or typevars)"),(0,a.yg)("li",{parentName:"ul"},"Use ",(0,a.yg)("inlineCode",{parentName:"li"},"isinstance")," checks instead of ",(0,a.yg)("inlineCode",{parentName:"li"},"hasattr")),(0,a.yg)("li",{parentName:"ul"},"Prefer ",(0,a.yg)("inlineCode",{parentName:"li"},"assert isinstance(...)")," over ",(0,a.yg)("inlineCode",{parentName:"li"},"cast")))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Data Structures"),": Use dataclasses/pydantic for internal data representation",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Return dataclasses instead of tuples from methods"),(0,a.yg)("li",{parentName:"ul"},"Centralize utility functions to avoid code duplication"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Naming"),": Descriptive names, match source system terminology in configs"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Error Handling"),": Validators throw only ValueError/TypeError/AssertionError",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Add robust error handling with layers of protection for known failure points"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Code Quality"),": Avoid global state, use named arguments, don't re-export in ",(0,a.yg)("inlineCode",{parentName:"li"},"__init__.py")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Documentation"),": All configs need descriptions"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Dependencies"),": Avoid version pinning, use ranges with comments"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Architecture"),": Avoid tall inheritance hierarchies, prefer mixins")),(0,a.yg)("h2",{id:"testing-conventions"},"Testing Conventions"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Location"),": Tests go in ",(0,a.yg)("inlineCode",{parentName:"li"},"tests/")," directory alongside ",(0,a.yg)("inlineCode",{parentName:"li"},"src/"),", NOT in ",(0,a.yg)("inlineCode",{parentName:"li"},"src/")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Structure"),": Test files should mirror the source directory structure"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Framework"),": Use pytest, not unittest"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Assertions"),": Use ",(0,a.yg)("inlineCode",{parentName:"li"},"assert")," statements, not ",(0,a.yg)("inlineCode",{parentName:"li"},"self.assertEqual()")," or ",(0,a.yg)("inlineCode",{parentName:"li"},"self.assertIsNone()"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Boolean: ",(0,a.yg)("inlineCode",{parentName:"li"},"assert func()")," or ",(0,a.yg)("inlineCode",{parentName:"li"},"assert not func()"),", not ",(0,a.yg)("inlineCode",{parentName:"li"},"assert func() is True/False")),(0,a.yg)("li",{parentName:"ul"},"None: ",(0,a.yg)("inlineCode",{parentName:"li"},"assert result is None")," (correct), not ",(0,a.yg)("inlineCode",{parentName:"li"},"assert result == None")),(0,a.yg)("li",{parentName:"ul"},"Keep tests concise, avoid verbose repetitive patterns"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Classes"),": Use regular classes, not ",(0,a.yg)("inlineCode",{parentName:"li"},"unittest.TestCase")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Imports"),": Import ",(0,a.yg)("inlineCode",{parentName:"li"},"pytest")," in test files"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Naming"),": Test files should be named ",(0,a.yg)("inlineCode",{parentName:"li"},"test_*.py")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Categories"),":",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Unit tests: ",(0,a.yg)("inlineCode",{parentName:"li"},"tests/unit/")," - fast, no external dependencies"),(0,a.yg)("li",{parentName:"ul"},"Integration tests: ",(0,a.yg)("inlineCode",{parentName:"li"},"tests/integration/")," - may use Docker/external services")))),(0,a.yg)("h2",{id:"configuration-guidelines-pydantic"},"Configuration Guidelines (Pydantic)"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Naming"),": Match terminology of the source system (e.g., ",(0,a.yg)("inlineCode",{parentName:"li"},"account_id")," for Snowflake, not ",(0,a.yg)("inlineCode",{parentName:"li"},"host_port"),")"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Descriptions"),": All configs must have descriptions"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Patterns"),": Use AllowDenyPatterns for filtering, named ",(0,a.yg)("inlineCode",{parentName:"li"},"*_pattern")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Defaults"),": Set reasonable defaults, avoid config-driven filtering that should be automatic"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Validation"),": Single pydantic validator per validation concern"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Security"),": Use ",(0,a.yg)("inlineCode",{parentName:"li"},"SecretStr")," for passwords, auth tokens, etc."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Deprecation"),": Use ",(0,a.yg)("inlineCode",{parentName:"li"},"pydantic_removed_field")," helper for field deprecations")),(0,a.yg)("h2",{id:"key-files"},"Key Files"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"src/datahub/emitter/mcp_builder.py"),": Examples of defining various aspect types"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"setup.py"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"pyproject.toml"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"setup.cfg"),": Code style and dependency configuration"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},".github/workflows/metadata-ingestion.yml"),": CI workflow configuration")))}d.isMDXComponent=!0}}]);