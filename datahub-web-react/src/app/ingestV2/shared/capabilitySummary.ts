interface Capability {
    capability: string;
    description: string;
    supported: boolean;
}

interface PluginDetails {
    capabilities: Capability[];
    classname: string;
    platform_id: string;
    platform_name: string;
    support_status: string;
}

// this type is based off of the type in metadata-ingestion/src/datahub/ingestion/autogenerated/capability_summary.json
interface CapabilitySummary {
    generated_at: string;
    generated_by: string;
    plugin_details: Record<string, PluginDetails>;
}

class CapabilitySummaryManager {
    private capabilitySummary: CapabilitySummary | null = null;

    private isLoading = true;

    private error: string | null = null;

    async fetchCapabilitySummary(): Promise<void> {
        this.isLoading = true;
        this.error = null;

        try {
            const response = await fetch('/assets/ingestion/capability_summary.json');
            if (!response.ok) {
                throw new Error(`Failed to fetch capability summary: ${response.status} ${response.statusText}`);
            }
            const data = await response.json();
            this.capabilitySummary = data;
        } catch (error) {
            console.error('Error fetching capability summary:', error);
            this.error = error instanceof Error ? error.message : 'Failed to fetch capability summary';
        } finally {
            this.isLoading = false;
        }
    }

    getPluginCapabilities(platformId: string): PluginDetails | null {
        if (!this.capabilitySummary?.plugin_details?.[platformId]) {
            return null;
        }
        return this.capabilitySummary.plugin_details[platformId];
    }

    isCapabilitySupported(platformId: string, capabilityName: string): boolean {
        const capabilities = this.getPluginCapabilities(platformId)?.capabilities;
        if (!capabilities) {
            return false;
        }
        return capabilities?.some((capability) => capability.capability === capabilityName && capability.supported);
    }

    isProfilingSupported(platformId: string): boolean {
        return this.isCapabilitySupported(platformId, 'DATA_PROFILING');
    }

    isTestConnectionSupported(platformId: string): boolean {
        return this.isCapabilitySupported(platformId, 'TEST_CONNECTION');
    }

    // const isLineageSupported = (platformId: string): boolean => isCapabilitySupported(platformId, 'LINEAGE_COARSE');
    // const isFineGrainedLineageSupported = (platformId: string): boolean =>
    //     isCapabilitySupported(platformId, 'LINEAGE_FINE');
    // const isUsageStatsSupported = (platformId: string): boolean => isCapabilitySupported(platformId, 'USAGE_STATS');

    getConnectorsWithTestConnection(): Set<string> {
        if (!this.capabilitySummary?.plugin_details) {
            return new Set();
        }

        const connectorsWithTestConnection = new Set<string>();

        Object.keys(this.capabilitySummary.plugin_details).forEach((platformId) => {
            if (this.isTestConnectionSupported(platformId)) {
                connectorsWithTestConnection.add(platformId);
            }
        });

        return connectorsWithTestConnection;
    }

    getState() {
        return {
            capabilitySummary: this.capabilitySummary,
            isLoading: this.isLoading,
            error: this.error,
        };
    }
}

// Export a singleton instance
export const capabilitySummaryManager = new CapabilitySummaryManager();

// Export types for use in other files
export type { CapabilitySummary, PluginDetails, Capability };
