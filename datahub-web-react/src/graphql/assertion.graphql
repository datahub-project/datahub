#import "./assertion_monitor_shared.graphql"

fragment assertionInfo on AssertionInfo {
    type
    description
    lastUpdated {
        time
        actor
    }
    datasetAssertion {
        datasetUrn
        scope
        aggregation
        operator
        parameters {
            value {
                value
                type
            }
            minValue {
                value
                type
            }
            maxValue {
                value
                type
            }
        }
        fields {
            urn
            path
        }
        nativeType
        nativeParameters {
            key
            value
        }
        logic
    }
    freshnessAssertion {
        type
        entityUrn
        schedule {
            type
            cron {
                cron
                timezone
            }
            fixedInterval {
                unit
                multiple
            }
        }
        filter {
            type
            sql
        }
    }
    sqlAssertion {
        type
        entityUrn
        statement
        changeType
        operator
        parameters {
            ...assertionStdParametersDetails
        }
    }
    fieldAssertion {
        type
        entityUrn
        filter {
            type
            sql
        }
        fieldValuesAssertion {
            field {
                path
                type
                nativeType
            }
            transform {
                type
            }
            operator
            parameters {
                ...assertionStdParametersDetails
            }
            failThreshold {
                type
                value
            }
            excludeNulls
        }
        fieldMetricAssertion {
            field {
                path
                type
                nativeType
            }
            metric
            operator
            parameters {
                ...assertionStdParametersDetails
            }
        }
    }
    volumeAssertion {
        type
        entityUrn
        filter {
            type
            sql
        }
        rowCountTotal {
            operator
            parameters {
                ...assertionStdParametersDetails
            }
        }
        rowCountChange {
            type
            operator
            parameters {
                ...assertionStdParametersDetails
            }
        }
        incrementingSegmentRowCountTotal {
            operator
            parameters {
                ...assertionStdParametersDetails
            }
            segment {
                ...incrementingSegmentSpecDetails
            }
        }
        incrementingSegmentRowCountChange {
            type
            operator
            parameters {
                ...assertionStdParametersDetails
            }
            segment {
                ...incrementingSegmentSpecDetails
            }
        }
    }
    schemaAssertion {
        entityUrn
        compatibility
        fields {
            path
            type
            nativeType
        }
        schema {
            fields {
                fieldPath
                type
                nativeDataType
            }
        }
    }
    customAssertion {
        type
        entityUrn
        field {
            urn
            path
        }
        logic
    }
    source {
        type
        created {
            time
            actor
        }
    }
    externalUrl
}

fragment assertionDetails on Assertion {
    urn
    type
    platform {
        urn
        name
        properties {
            displayName
            logoUrl
        }
        info {
            displayName
            logoUrl
        }
    }
    dataPlatformInstance {
        ...dataPlatformInstanceFields
    }
    info {
        ...assertionInfo
    }
    actions {
        onSuccess {
            type
        }
        onFailure {
            type
        }
    }
    tags {
        ...globalTagsFields
    }
}

fragment incrementingSegmentSpecDetails on IncrementingSegmentSpec {
    field {
        path
        type
        nativeType
    }
    transformer {
        type
        nativeType
    }
}

fragment assertionStdParametersDetails on AssertionStdParameters {
    value {
        value
        type
    }
    minValue {
        value
        type
    }
    maxValue {
        value
        type
    }
}

fragment assertionDetailsWithRunEvents on Assertion {
    ...assertionDetails
    runEvents(status: COMPLETE, limit: 1) {
        total
        failed
        succeeded
        runEvents {
            ...assertionRunEventDetails
        }
    }
}

fragment incrementingSegmentSpecDetails on IncrementingSegmentSpec {
    field {
        path
        type
        nativeType
    }
    transformer {
        type
        nativeType
    }
}

fragment assertionStdParametersDetails on AssertionStdParameters {
    value {
        value
        type
    }
    minValue {
        value
        type
    }
    maxValue {
        value
        type
    }
}

fragment assertionResultDetails on AssertionResult {
    type
    actualAggValue
    rowCount
    missingCount
    unexpectedCount
    externalUrl
    nativeResults {
        key
        value
    }
    error {
        type
        properties {
            key
            value
        }
    }
}

fragment assertionRunEventDetails on AssertionRunEvent {
    timestampMillis
    lastObservedMillis
    assertionUrn
    status
    runId
    runtimeContext {
        key
        value
    }
    result {
        ...assertionResultDetails
    }
}

query getAssertionRuns($assertionUrn: String!, $startTime: Long, $endTime: Long, $limit: Int) {
    assertion(urn: $assertionUrn) {
        urn
        ...assertionDetails
        runEvents(status: COMPLETE, startTimeMillis: $startTime, endTimeMillis: $endTime, limit: $limit) {
            total
            failed
            succeeded
            runEvents {
                ...assertionRunEventDetails
            }
        }
    }
}

mutation deleteAssertion($urn: String!) {
    deleteAssertion(urn: $urn)
}

fragment assertionDetailsWithRunEvents on Assertion {
    ...assertionDetails
    runEvents(status: COMPLETE, limit: 1) {
        total
        failed
        succeeded
        runEvents {
            ...assertionRunEventDetails
        }
    }
}

query getAssertionWithRunEvents($assertionUrn: String!) {
    assertion(urn: $assertionUrn) {
        urn
        ...assertionDetailsWithRunEvents
    }
}
