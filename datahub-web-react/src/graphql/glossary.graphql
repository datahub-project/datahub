query getRootGlossaryTerms {
    getRootGlossaryTerms(input: { start: 0, count: 1000 }) {
        count
        start
        total
        terms {
            ...childGlossaryTerm
        }
    }
}

query getRootGlossaryNodes {
    getRootGlossaryNodes(input: { start: 0, count: 1000 }) {
        count
        start
        total
        nodes {
            ...rootGlossaryNodeWithFourLayers
        }
    }
}

query getRelatedTerms($urn: String!) {
    glossaryTerm(urn: $urn) {
        urn
        type
        exists
        name
        hierarchicalName
        isRelatedTerms: relationships(input: { types: ["IsA"], direction: OUTGOING, start: 0, count: 10 }) {
            start
            count
            total
            relationships {
                entity {
                    ...autoCompleteFields
                }
            }
        }
        hasRelatedTerms: relationships(input: { types: ["HasA"], direction: OUTGOING, start: 0, count: 10 }) {
            start
            count
            total
            relationships {
                entity {
                    ...autoCompleteFields
                }
            }
        }
        isAChildren: relationships(input: { types: ["IsA"], direction: INCOMING, start: 0, count: 10 }) {
            start
            count
            total
            relationships {
                entity {
                    ...autoCompleteFields
                }
            }
        }
        containedBy: relationships(input: { types: ["HasA"], direction: INCOMING, start: 0, count: 10 }) {
            start
            count
            total
            relationships {
                entity {
                    ...autoCompleteFields
                }
            }
        }
    }
}

mutation updateParentNode($input: UpdateParentNodeInput!) {
    updateParentNode(input: $input)
}

mutation deleteGlossaryEntity($urn: String!) {
    deleteGlossaryEntity(urn: $urn)
}
