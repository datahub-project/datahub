fragment childGlossaryTerm on GlossaryTerm {
    urn
    type
    name
    hierarchicalName
    properties {
        name
        description
    }
}

fragment glossaryNodeFields on GlossaryNode {
    urn
    type
    exists
    properties {
        name
        description
        customProperties {
            ...customPropertiesFields
        }
    }
    ownership {
        ...ownershipFields
    }
    parentNodes {
        ...parentNodesFields
    }
    privileges {
        ...entityPrivileges
    }
    autoRenderAspects: aspects(input: { autoRenderOnly: true }) {
        ...autoRenderAspectFields
    }
    structuredProperties {
        properties {
            ...structuredPropertiesFields
        }
    }
    forms {
        ...formsFields
    }
    childrenCount {
        termsCount
        nodesCount
    }
    displayProperties {
        ...displayPropertiesFields
    }
    ...notes
}

query getGlossaryNode($urn: String!) {
    glossaryNode(urn: $urn) {
        ...glossaryNodeFields
    }
}

query getGlossaryNodeWithChildren($urn: String!) {
    glossaryNode(urn: $urn) {
        ...glossaryNodeFields
        children: relationships(input: { types: ["IsPartOf"], direction: INCOMING, start: 0, count: 1000 }) {
            total
            relationships {
                direction
                entity {
                    type
                    urn
                    ... on GlossaryNode {
                        ...glossaryNode
                    }
                    ... on GlossaryTerm {
                        ...childGlossaryTerm
                    }
                }
            }
        }
    }
}
