fragment incidentsFields on EntityIncidentsResult {
    start
    count
    total
    incidents {
        urn
        type
        incidentType
        customType
        title
        description
        startedAt
        status {
            state
            stage
            message
            lastUpdated {
                time
                actor
            }
        }
        source {
            type
            source {
                ...assertionDetails
            }
        }
        created {
            time
            actor
        }
        tags {
            ...globalTagsFields
        }
        priority
        assignees {
            ... on CorpUser {
                urn
                type
                username
                status
                properties {
                    displayName
                }
            }
        }
        linkedAssets: relationships(
            input: { types: ["IncidentOn"], direction: OUTGOING, start: 0, count: 1000, includeSoftDelete: false }
        ) {
            relationships {
                entity {
                    ...entityPreview
                }
            }
        }
    }
}

fragment datasetSiblingIncidents on Dataset {
    siblings {
        isPrimary
        siblings {
            urn
            type
            ... on Dataset {
                incidents(start: $start, count: $count, state: $state) {
                    ...incidentsFields
                }
            }
        }
    }
    siblingsSearch(input: { query: "*", count: 5 }) {
        count
        total
        searchResults {
            entity {
                urn
                type
                ... on Dataset {
                    incidents(start: $start, count: $count, state: $state) {
                        ...incidentsFields
                    }
                }
            }
        }
    }
}

query getEntityIncidents($urn: String!, $start: Int!, $count: Int!, $state: IncidentState) {
    entity(urn: $urn) {
        ... on Dataset {
            incidents(start: $start, count: $count, state: $state) {
                ...incidentsFields
            }
            ...datasetSiblingIncidents
            privileges {
                canEditIncidents
            }
        }
        ... on DataJob {
            incidents(start: $start, count: $count, state: $state) {
                ...incidentsFields
            }
            privileges {
                canEditIncidents
            }
        }
        ... on DataFlow {
            incidents(start: $start, count: $count, state: $state) {
                ...incidentsFields
            }
            privileges {
                canEditIncidents
            }
        }
        ... on Dashboard {
            incidents(start: $start, count: $count, state: $state) {
                ...incidentsFields
            }
            privileges {
                canEditIncidents
            }
        }
        ... on Chart {
            incidents(start: $start, count: $count, state: $state) {
                ...incidentsFields
            }
            privileges {
                canEditIncidents
            }
        }
    }
}
