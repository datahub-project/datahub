fragment incidentFields on Incident {
    incidentType
    customType
    title
    description
    startedAt
    incidentStatus {
        state
        stage
        message
        lastUpdated {
            time
            actor
        }
    }
    source {
        type
        source {
            ...assertionDetails
        }
    }
    created {
        time
        actor
    }
    tags {
        ...globalTagsFields
    }
    priority
    assignees {
        ... on CorpUser {
            urn
            type
            username
            status
            properties {
                displayName
            }
        }
    }
    entity {
        ...entityPreview
    }
    linkedAssets: relationships(
        input: { types: ["IncidentOn"], direction: OUTGOING, start: 0, count: 1000, includeSoftDelete: false }
    ) {
        relationships {
            entity {
                ...entityPreview
            }
        }
    }
}

fragment incidentResultFields on EntityIncidentsResult {
    start
    count
    total
    incidents {
        urn
        type
        ...incidentFields
    }
}

fragment datasetSiblingIncidents on Dataset {
    siblings {
        isPrimary
        siblings {
            urn
            type
            ... on Dataset {
                incidents(start: $start, count: $count, state: $state) {
                    ...incidentResultFields
                }
            }
        }
    }
    siblingsSearch(input: { query: "*", count: 5 }) {
        count
        total
        searchResults {
            entity {
                urn
                type
                ... on Dataset {
                    incidents(start: $start, count: $count, state: $state) {
                        ...incidentResultFields
                    }
                }
            }
        }
    }
}

query getEntityIncidents($urn: String!, $start: Int!, $count: Int!, $state: IncidentState) {
    entity(urn: $urn) {
        ... on Dataset {
            incidents(start: $start, count: $count, state: $state) {
                ...incidentResultFields
            }
            ...datasetSiblingIncidents
            privileges {
                canEditIncidents
            }
        }
        ... on DataJob {
            incidents(start: $start, count: $count, state: $state) {
                ...incidentResultFields
            }
            privileges {
                canEditIncidents
            }
        }
        ... on DataFlow {
            incidents(start: $start, count: $count, state: $state) {
                ...incidentResultFields
            }
            privileges {
                canEditIncidents
            }
        }
        ... on Dashboard {
            incidents(start: $start, count: $count, state: $state) {
                ...incidentResultFields
            }
            privileges {
                canEditIncidents
            }
        }
        ... on Chart {
            incidents(start: $start, count: $count, state: $state) {
                ...incidentResultFields
            }
            privileges {
                canEditIncidents
            }
        }
    }
}
