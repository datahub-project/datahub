(venv) ➜  smoke-test git:(main) ✗ pytest integration/test_snowflake_queries_v2.py -v -s --log-cli-level=DEBUG                                   
/Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/pytest_asyncio/plugin.py:208: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
==================================================================================== test session starts =====================================================================================
platform darwin -- Python 3.11.11, pytest-8.3.4, pluggy-1.6.0 -- /Users/sergio/workspace/github/acryldata/connector-tests/venv/bin/python3
cachedir: .pytest_cache
Test order randomisation NOT enabled. Enable with --random-order or --random-order-bucket=<bucket_type>
rootdir: /Users/sergio/workspace/github/acryldata/connector-tests/smoke-test
configfile: pyproject.toml
plugins: anyio-4.9.0, docker-3.2.2, Faker-37.4.0, timeout-2.4.0, random-order-1.1.1, cov-6.2.1, typeguard-2.13.3, asyncio-1.0.0, requests-mock-1.12.1
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... 
------------------------------------------------------------------------------------ live log collection -------------------------------------------------------------------------------------
DEBUG    snowflake.connector.ssl_wrap_socket:ssl_wrap_socket.py:40 Injecting ssl_wrap_socket_with_ocsp
DEBUG    datahub.ingestion.source.common.subtypes:subtypes.py:146 Warning: SCHEMA already exists with value Schema, skipping Schema
WARNING  py.warnings:warnings.py:110 /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/datasource/data_connector/util.py:8: DeprecationWarning: module 'sre_constants' is deprecated
  import sre_constants

WARNING  py.warnings:warnings.py:110 /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/datasource/data_connector/util.py:9: DeprecationWarning: module 'sre_parse' is deprecated
  import sre_parse

DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:34 1a. MetaDatasource.__new__() for `Datasource`
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:40 1c. Skip factory registration of base `Datasource`
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasClipboardAsset
{'kwargs': _FieldSpec(type=typing.Optional[dict], default_value=FieldInfo(description='Extra keyword arguments that will be passed to the reader method', extra={})),
 'sep': _FieldSpec(type='str', default_value='\\s+')}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping sep type - lib.NoDefault
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping delimiter type - lib.NoDefault
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping names type - lib.NoDefault
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping prefix type - lib.NoDefault
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `converters` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `true_values` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `false_values` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `na_values` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `parse_dates` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `date_parser` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `on_bad_lines` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `low_memory` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasCSVAsset
{'cache_dates': _FieldSpec(type='bool', default_value=True),
 'chunksize': _FieldSpec(type='Union[int, None]', default_value=None),
 'comment': _FieldSpec(type='Union[str, None]', default_value=None),
 'compression': _FieldSpec(type='CompressionOptions', default_value='infer'),
 'converters': _FieldSpec(type=typing.Any, default_value=None),
 'date_parser': _FieldSpec(type=typing.Any, default_value=None),
 'dayfirst': _FieldSpec(type='bool', default_value=False),
 'decimal': _FieldSpec(type='str', default_value='.'),
 'delim_whitespace': _FieldSpec(type='bool', default_value=False),
 'delimiter': _FieldSpec(type='Union[str, None]', default_value=None),
 'dialect': _FieldSpec(type=typing.Optional[str], default_value=None),
 'doublequote': _FieldSpec(type='bool', default_value=True),
 'dtype': _FieldSpec(type=typing.Optional[dict], default_value=None),
 'encoding': _FieldSpec(type='Union[str, None]', default_value=None),
 'encoding_errors': _FieldSpec(type='Union[str, None]', default_value='strict'),
 'engine': _FieldSpec(type='Union[CSVEngine, None]', default_value=None),
 'error_bad_lines': _FieldSpec(type='Union[bool, None]', default_value=None),
 'escapechar': _FieldSpec(type='Union[str, None]', default_value=None),
 'false_values': _FieldSpec(type=typing.Any, default_value=None),
 'filepath_or_buffer': _FieldSpec(type=<class 'pydantic.types.FilePath'>, default_value=Ellipsis),
 'float_precision': _FieldSpec(type="Union[Literal['high', 'legacy'], None]", default_value=None),
 'header': _FieldSpec(type="Union[int, Sequence[int], None, Literal['infer']]", default_value='infer'),
 'index_col': _FieldSpec(type='Union[IndexLabel, Literal[False], None]', default_value=None),
 'infer_datetime_format': _FieldSpec(type='bool', default_value=False),
 'iterator': _FieldSpec(type='bool', default_value=False),
 'keep_date_col': _FieldSpec(type='bool', default_value=False),
 'keep_default_na': _FieldSpec(type='bool', default_value=True),
 'lineterminator': _FieldSpec(type='Union[str, None]', default_value=None),
 'low_memory': _FieldSpec(type=typing.Any, default_value=True),
 'mangle_dupe_cols': _FieldSpec(type='bool', default_value=True),
 'memory_map': _FieldSpec(type='bool', default_value=False),
 'na_filter': _FieldSpec(type='bool', default_value=True),
 'na_values': _FieldSpec(type=typing.Any, default_value=None),
 'names': _FieldSpec(type='Union[Sequence[Hashable], None]', default_value=None),
 'nrows': _FieldSpec(type='Union[int, None]', default_value=None),
 'on_bad_lines': _FieldSpec(type=typing.Any, default_value=None),
 'parse_dates': _FieldSpec(type=typing.Any, default_value=None),
 'prefix': _FieldSpec(type='str', default_value=None),
 'quotechar': _FieldSpec(type='str', default_value='"'),
 'quoting': _FieldSpec(type='int', default_value=0),
 'sep': _FieldSpec(type='Union[str, None]', default_value=None),
 'skip_blank_lines': _FieldSpec(type='bool', default_value=True),
 'skipfooter': _FieldSpec(type='int', default_value=0),
 'skipinitialspace': _FieldSpec(type='bool', default_value=False),
 'skiprows': _FieldSpec(type=typing.Union[typing.Sequence[int], int, NoneType], default_value=None),
 'squeeze': _FieldSpec(type='Union[bool, None]', default_value=None),
 'storage_options': _FieldSpec(type='StorageOptions', default_value=None),
 'thousands': _FieldSpec(type='Union[str, None]', default_value=None),
 'true_values': _FieldSpec(type=typing.Any, default_value=None),
 'usecols': _FieldSpec(type=typing.Union[int, str, typing.Sequence[int], NoneType], default_value=None),
 'verbose': _FieldSpec(type='bool', default_value=False),
 'warn_bad_lines': _FieldSpec(type='Union[bool, None]', default_value=None)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `io` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping sheet_name type - list[IntStrT]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping converters type - dict[str, Callable]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping converters type - dict[int, Callable]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:326 `converters` has no supported types. Field skipped
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `na_values` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping date_parser type - Callable
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:326 `date_parser` has no supported types. Field skipped
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasExcelAsset
{'comment': _FieldSpec(type='Union[str, None]', default_value=None),
 'convert_float': _FieldSpec(type='Union[bool, None]', default_value=None),
 'decimal': _FieldSpec(type='str', default_value='.'),
 'dtype': _FieldSpec(type=typing.Optional[dict], default_value=None),
 'engine': _FieldSpec(type="Union[Literal['xlrd', 'openpyxl', 'odf', 'pyxlsb'], None]", default_value=None),
 'false_values': _FieldSpec(type='Union[Iterable[Hashable], None]', default_value=None),
 'header': _FieldSpec(type='Union[int, Sequence[int], None]', default_value=0),
 'index_col': _FieldSpec(type='Union[int, Sequence[int], None]', default_value=None),
 'io': _FieldSpec(type=typing.Any, default_value=Ellipsis),
 'keep_default_na': _FieldSpec(type='bool', default_value=True),
 'mangle_dupe_cols': _FieldSpec(type='bool', default_value=True),
 'na_filter': _FieldSpec(type='bool', default_value=True),
 'na_values': _FieldSpec(type=typing.Any, default_value=None),
 'names': _FieldSpec(type='Union[List[str], None]', default_value=None),
 'nrows': _FieldSpec(type='Union[int, None]', default_value=None),
 'parse_dates': _FieldSpec(type='Union[List, Dict, bool]', default_value=False),
 'sheet_name': _FieldSpec(type='Union[str, int, None]', default_value=0),
 'skipfooter': _FieldSpec(type='int', default_value=0),
 'skiprows': _FieldSpec(type=typing.Union[typing.Sequence[int], int, NoneType], default_value=None),
 'squeeze': _FieldSpec(type='Union[bool, None]', default_value=None),
 'storage_options': _FieldSpec(type='StorageOptions', default_value=None),
 'thousands': _FieldSpec(type='Union[str, None]', default_value=None),
 'true_values': _FieldSpec(type='Union[Iterable[Hashable], None]', default_value=None),
 'usecols': _FieldSpec(type=typing.Union[int, str, typing.Sequence[int], NoneType], default_value=None),
 'verbose': _FieldSpec(type='bool', default_value=False)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping path type - ReadBuffer[bytes]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasFeatherAsset
{'columns': _FieldSpec(type='Union[Sequence[Hashable], None]', default_value=None),
 'path': _FieldSpec(type='FilePath', default_value=Ellipsis),
 'storage_options': _FieldSpec(type='StorageOptions', default_value=None),
 'use_threads': _FieldSpec(type='bool', default_value=True)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `credentials` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasGBQAsset
{'auth_local_webserver': _FieldSpec(type='bool', default_value=True),
 'col_order': _FieldSpec(type='Union[List[str], None]', default_value=None),
 'configuration': _FieldSpec(type='Union[Dict[str, Any], None]', default_value=None),
 'credentials': _FieldSpec(type=typing.Any, default_value=None),
 'dialect': _FieldSpec(type=typing.Optional[str], default_value=None),
 'index_col': _FieldSpec(type='Union[str, None]', default_value=None),
 'location': _FieldSpec(type='Union[str, None]', default_value=None),
 'max_results': _FieldSpec(type='Union[int, None]', default_value=None),
 'progress_bar_type': _FieldSpec(type='Union[str, None]', default_value=None),
 'project_id': _FieldSpec(type='Union[str, None]', default_value=None),
 'query': _FieldSpec(type='str', default_value=Ellipsis),
 'reauth': _FieldSpec(type='bool', default_value=False),
 'use_bqstorage_api': _FieldSpec(type='Union[bool, None]', default_value=None)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping path_or_buf type - HDFStore
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `key` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasHDFAsset
{'chunksize': _FieldSpec(type='Union[int, None]', default_value=None),
 'columns': _FieldSpec(type='Union[List[str], None]', default_value=None),
 'errors': _FieldSpec(type='str', default_value='strict'),
 'iterator': _FieldSpec(type='bool', default_value=False),
 'key': _FieldSpec(type=typing.Any, default_value=None),
 'kwargs': _FieldSpec(type=typing.Optional[dict], default_value=FieldInfo(description='Extra keyword arguments that will be passed to the reader method', extra={})),
 'mode': _FieldSpec(type='str', default_value='r'),
 'path_or_buf': _FieldSpec(type='FilePath', default_value=Ellipsis),
 'start': _FieldSpec(type='Union[int, None]', default_value=None),
 'stop': _FieldSpec(type='Union[int, None]', default_value=None),
 'where': _FieldSpec(type='Union[str, List, None]', default_value=None)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping io type - ReadBuffer[str]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasHTMLAsset
{'attrs': _FieldSpec(type='Union[Dict[str, str], None]', default_value=None),
 'converters': _FieldSpec(type='Union[Dict, None]', default_value=None),
 'decimal': _FieldSpec(type='str', default_value='.'),
 'displayed_only': _FieldSpec(type='bool', default_value=True),
 'encoding': _FieldSpec(type='Union[str, None]', default_value=None),
 'extract_links': _FieldSpec(type="Literal[None, 'header', 'footer', 'body', 'all']", default_value=None),
 'flavor': _FieldSpec(type='Union[str, None]', default_value=None),
 'header': _FieldSpec(type='Union[int, Sequence[int], None]', default_value=None),
 'index_col': _FieldSpec(type='Union[int, Sequence[int], None]', default_value=None),
 'io': _FieldSpec(type='FilePath', default_value=Ellipsis),
 'keep_default_na': _FieldSpec(type='bool', default_value=True),
 'match': _FieldSpec(type='Union[str, Pattern]', default_value='.+'),
 'na_values': _FieldSpec(type='Union[Iterable[object], None]', default_value=None),
 'parse_dates': _FieldSpec(type='bool', default_value=False),
 'skiprows': _FieldSpec(type=typing.Union[typing.Sequence[int], int, NoneType], default_value=None),
 'thousands': _FieldSpec(type='Union[str, None]', default_value=',')}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping path_or_buf type - ReadBuffer[str]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping path_or_buf type - ReadBuffer[bytes]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `convert_axes` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasJSONAsset
{'chunksize': _FieldSpec(type='Union[int, None]', default_value=None),
 'compression': _FieldSpec(type='CompressionOptions', default_value='infer'),
 'convert_axes': _FieldSpec(type=typing.Any, default_value=None),
 'convert_dates': _FieldSpec(type='Union[bool, List[str]]', default_value=True),
 'date_unit': _FieldSpec(type='Union[str, None]', default_value=None),
 'dtype': _FieldSpec(type=typing.Optional[dict], default_value=None),
 'encoding': _FieldSpec(type='Union[str, None]', default_value=None),
 'encoding_errors': _FieldSpec(type='Union[str, None]', default_value='strict'),
 'keep_default_dates': _FieldSpec(type='bool', default_value=True),
 'lines': _FieldSpec(type='bool', default_value=False),
 'nrows': _FieldSpec(type='Union[int, None]', default_value=None),
 'numpy': _FieldSpec(type='bool', default_value=False),
 'orient': _FieldSpec(type='Union[str, None]', default_value=None),
 'path_or_buf': _FieldSpec(type='FilePath', default_value=Ellipsis),
 'precise_float': _FieldSpec(type='bool', default_value=False),
 'storage_options': _FieldSpec(type='StorageOptions', default_value=None),
 'typ': _FieldSpec(type="Literal['frame', 'series']", default_value='frame')}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping path type - ReadBuffer[bytes]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasORCAsset
{'columns': _FieldSpec(type='Union[List[str], None]', default_value=None),
 'kwargs': _FieldSpec(type=typing.Optional[dict], default_value=FieldInfo(description='Extra keyword arguments that will be passed to the reader method', extra={})),
 'path': _FieldSpec(type='FilePath', default_value=Ellipsis)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping path type - ReadBuffer[bytes]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasParquetAsset
{'columns': _FieldSpec(type='Union[List[str], None]', default_value=None),
 'engine': _FieldSpec(type='str', default_value='auto'),
 'kwargs': _FieldSpec(type=typing.Optional[dict], default_value=FieldInfo(description='Extra keyword arguments that will be passed to the reader method', extra={})),
 'path': _FieldSpec(type='FilePath', default_value=Ellipsis),
 'storage_options': _FieldSpec(type='StorageOptions', default_value=None),
 'use_nullable_dtypes': _FieldSpec(type='bool', default_value=False)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasPickleAsset
{'compression': _FieldSpec(type='CompressionOptions', default_value='infer'),
 'filepath_or_buffer': _FieldSpec(type=<class 'pydantic.types.FilePath'>, default_value=Ellipsis),
 'storage_options': _FieldSpec(type='StorageOptions', default_value=None)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasSASAsset
{'chunksize': _FieldSpec(type='Union[int, None]', default_value=None),
 'compression': _FieldSpec(type='CompressionOptions', default_value='infer'),
 'encoding': _FieldSpec(type='Union[str, None]', default_value=None),
 'filepath_or_buffer': _FieldSpec(type=<class 'pydantic.types.FilePath'>, default_value=Ellipsis),
 'format': _FieldSpec(type='Union[str, None]', default_value=None),
 'index': _FieldSpec(type='Union[Hashable, None]', default_value=None),
 'iterator': _FieldSpec(type='bool', default_value=False)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasSPSSAsset
{'convert_categoricals': _FieldSpec(type='bool', default_value=True),
 'path': _FieldSpec(type='Union[str, Path]', default_value=Ellipsis),
 'usecols': _FieldSpec(type=typing.Union[int, str, typing.Sequence[int], NoneType], default_value=None)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `sql` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `con` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `params` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `parse_dates` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasSqlAsset
{'chunksize': _FieldSpec(type='Union[int, None]', default_value=None),
 'coerce_float': _FieldSpec(type='bool', default_value=True),
 'columns': _FieldSpec(type='Union[List[str], None]', default_value=None),
 'con': _FieldSpec(type=typing.Any, default_value=Ellipsis),
 'index_col': _FieldSpec(type='Union[str, List[str], None]', default_value=None),
 'params': _FieldSpec(type=typing.Any, default_value=None),
 'parse_dates': _FieldSpec(type=typing.Any, default_value=None),
 'sql': _FieldSpec(type=typing.Any, default_value=Ellipsis)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `sql` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `con` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasSQLQueryAsset
{'chunksize': _FieldSpec(type='Union[int, None]', default_value=None),
 'coerce_float': _FieldSpec(type='bool', default_value=True),
 'con': _FieldSpec(type=typing.Any, default_value=Ellipsis),
 'dtype': _FieldSpec(type=typing.Optional[dict], default_value=None),
 'index_col': _FieldSpec(type='Union[str, List[str], None]', default_value=None),
 'params': _FieldSpec(type='Union[List[str], Dict[str, str], None]', default_value=None),
 'parse_dates': _FieldSpec(type='Union[List[str], Dict[str, str], None]', default_value=None),
 'sql': _FieldSpec(type=typing.Any, default_value=Ellipsis)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `con` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasSQLTableAsset
{'chunksize': _FieldSpec(type='Union[int, None]', default_value=None),
 'coerce_float': _FieldSpec(type='bool', default_value=True),
 'columns': _FieldSpec(type='Union[List[str], None]', default_value=None),
 'con': _FieldSpec(type=typing.Any, default_value=Ellipsis),
 'index_col': _FieldSpec(type='Union[str, List[str], None]', default_value=None),
 'parse_dates': _FieldSpec(type='Union[List[str], Dict[str, str], None]', default_value=None),
 'schema_name': _FieldSpec(type=typing.Optional[str], default_value=FieldInfo(alias='schema', alias_priority=2, description="'schema_name' on the instance model. Will be passed to pandas reader method as 'schema'", extra={})),
 'table_name': _FieldSpec(type='str', default_value=Ellipsis)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasSTATAAsset
{'chunksize': _FieldSpec(type='Union[int, None]', default_value=None),
 'columns': _FieldSpec(type='Union[Sequence[str], None]', default_value=None),
 'compression': _FieldSpec(type='CompressionOptions', default_value='infer'),
 'convert_categoricals': _FieldSpec(type='bool', default_value=True),
 'convert_dates': _FieldSpec(type='bool', default_value=True),
 'convert_missing': _FieldSpec(type='bool', default_value=False),
 'filepath_or_buffer': _FieldSpec(type=<class 'pydantic.types.FilePath'>, default_value=Ellipsis),
 'index_col': _FieldSpec(type='Union[str, None]', default_value=None),
 'iterator': _FieldSpec(type='bool', default_value=False),
 'order_categoricals': _FieldSpec(type='bool', default_value=True),
 'preserve_dtypes': _FieldSpec(type='bool', default_value=True),
 'storage_options': _FieldSpec(type='StorageOptions', default_value=None)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping sep type - lib.NoDefault
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping delimiter type - lib.NoDefault
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping names type - lib.NoDefault
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping prefix type - lib.NoDefault
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `converters` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `true_values` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `false_values` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `na_values` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `parse_dates` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `date_parser` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `on_bad_lines` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `delim_whitespace` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `low_memory` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasTableAsset
{'cache_dates': _FieldSpec(type='bool', default_value=True),
 'chunksize': _FieldSpec(type='Union[int, None]', default_value=None),
 'comment': _FieldSpec(type='Union[str, None]', default_value=None),
 'compression': _FieldSpec(type='CompressionOptions', default_value='infer'),
 'converters': _FieldSpec(type=typing.Any, default_value=None),
 'date_parser': _FieldSpec(type=typing.Any, default_value=None),
 'dayfirst': _FieldSpec(type='bool', default_value=False),
 'decimal': _FieldSpec(type='str', default_value='.'),
 'delim_whitespace': _FieldSpec(type=typing.Any, default_value=False),
 'delimiter': _FieldSpec(type='Union[str, None]', default_value=None),
 'dialect': _FieldSpec(type=typing.Optional[str], default_value=None),
 'doublequote': _FieldSpec(type='bool', default_value=True),
 'dtype': _FieldSpec(type=typing.Optional[dict], default_value=None),
 'encoding': _FieldSpec(type='Union[str, None]', default_value=None),
 'encoding_errors': _FieldSpec(type='Union[str, None]', default_value='strict'),
 'engine': _FieldSpec(type='Union[CSVEngine, None]', default_value=None),
 'error_bad_lines': _FieldSpec(type='Union[bool, None]', default_value=None),
 'escapechar': _FieldSpec(type='Union[str, None]', default_value=None),
 'false_values': _FieldSpec(type=typing.Any, default_value=None),
 'filepath_or_buffer': _FieldSpec(type=<class 'pydantic.types.FilePath'>, default_value=Ellipsis),
 'float_precision': _FieldSpec(type='Union[str, None]', default_value=None),
 'header': _FieldSpec(type="Union[int, Sequence[int], None, Literal['infer']]", default_value='infer'),
 'index_col': _FieldSpec(type='Union[IndexLabel, Literal[False], None]', default_value=None),
 'infer_datetime_format': _FieldSpec(type='bool', default_value=False),
 'iterator': _FieldSpec(type='bool', default_value=False),
 'keep_date_col': _FieldSpec(type='bool', default_value=False),
 'keep_default_na': _FieldSpec(type='bool', default_value=True),
 'lineterminator': _FieldSpec(type='Union[str, None]', default_value=None),
 'low_memory': _FieldSpec(type=typing.Any, default_value=True),
 'mangle_dupe_cols': _FieldSpec(type='bool', default_value=True),
 'memory_map': _FieldSpec(type='bool', default_value=False),
 'na_filter': _FieldSpec(type='bool', default_value=True),
 'na_values': _FieldSpec(type=typing.Any, default_value=None),
 'names': _FieldSpec(type='Union[Sequence[Hashable], None]', default_value=None),
 'nrows': _FieldSpec(type='Union[int, None]', default_value=None),
 'on_bad_lines': _FieldSpec(type=typing.Any, default_value=None),
 'parse_dates': _FieldSpec(type=typing.Any, default_value=False),
 'prefix': _FieldSpec(type='str', default_value=None),
 'quotechar': _FieldSpec(type='str', default_value='"'),
 'quoting': _FieldSpec(type='int', default_value=0),
 'sep': _FieldSpec(type='Union[str, None]', default_value=None),
 'skip_blank_lines': _FieldSpec(type='bool', default_value=True),
 'skipfooter': _FieldSpec(type='int', default_value=0),
 'skipinitialspace': _FieldSpec(type='bool', default_value=False),
 'skiprows': _FieldSpec(type=typing.Union[typing.Sequence[int], int, NoneType], default_value=None),
 'squeeze': _FieldSpec(type='Union[bool, None]', default_value=None),
 'storage_options': _FieldSpec(type='StorageOptions', default_value=None),
 'thousands': _FieldSpec(type='Union[str, None]', default_value=None),
 'true_values': _FieldSpec(type=typing.Any, default_value=None),
 'usecols': _FieldSpec(type=typing.Union[int, str, typing.Sequence[int], NoneType], default_value=None),
 'verbose': _FieldSpec(type='bool', default_value=False),
 'warn_bad_lines': _FieldSpec(type='Union[bool, None]', default_value=None)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping path_or_buffer type - ReadBuffer[bytes]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping path_or_buffer type - ReadBuffer[str]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping converters type - ConvertersArg
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:326 `converters` has no supported types. Field skipped
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping parse_dates type - ParseDatesArg
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:326 `parse_dates` has no supported types. Field skipped
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping parser type - XMLParsers
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:326 `parser` has no supported types. Field skipped
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping stylesheet type - ReadBuffer[bytes]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping stylesheet type - ReadBuffer[str]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PandasXMLAsset
{'attrs_only': _FieldSpec(type='bool', default_value=False),
 'compression': _FieldSpec(type='CompressionOptions', default_value='infer'),
 'dtype': _FieldSpec(type=typing.Optional[dict], default_value=None),
 'elems_only': _FieldSpec(type='bool', default_value=False),
 'encoding': _FieldSpec(type='Union[str, None]', default_value='utf-8'),
 'iterparse': _FieldSpec(type='Union[Dict[str, List[str]], None]', default_value=None),
 'names': _FieldSpec(type='Union[Sequence[str], None]', default_value=None),
 'namespaces': _FieldSpec(type='Union[Dict[str, str], None]', default_value=None),
 'path_or_buffer': _FieldSpec(type='FilePath', default_value=Ellipsis),
 'storage_options': _FieldSpec(type='StorageOptions', default_value=None),
 'stylesheet': _FieldSpec(type='Union[FilePath, None]', default_value=None),
 'xpath': _FieldSpec(type='str', default_value='./*')}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:433 Needs extra handling
{'converters': {'dict[str, Callable]', 'dict[int, Callable]', 'ConvertersArg'},
 'date_parser': {'Callable'},
 'delimiter': {'lib.NoDefault'},
 'io': {'ReadBuffer[str]'},
 'names': {'lib.NoDefault'},
 'parse_dates': {'ParseDatesArg'},
 'parser': {'XMLParsers'},
 'path': {'ReadBuffer[bytes]'},
 'path_or_buf': {'HDFStore', 'ReadBuffer[bytes]', 'ReadBuffer[str]'},
 'path_or_buffer': {'ReadBuffer[bytes]', 'ReadBuffer[str]'},
 'prefix': {'lib.NoDefault'},
 'sep': {'lib.NoDefault'},
 'sheet_name': {'list[IntStrT]'},
 'stylesheet': {'ReadBuffer[bytes]', 'ReadBuffer[str]'}}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:434 No Annotation
{'false_values', 'sql', 'on_bad_lines', 'credentials', 'params', 'converters', 'io', 'delim_whitespace', 'key', 'na_values', 'true_values', 'parse_dates', 'low_memory', 'convert_axes', 'con', 'date_parser'}
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:34 1a. MetaDatasource.__new__() for `_PandasDatasource`
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:40 1c. Skip factory registration of base `_PandasDatasource`
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:34 1a. MetaDatasource.__new__() for `PandasDatasource`
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:43   PandasDatasource __dict__ ->
mappingproxy({'__abstractmethods__': frozenset(),
              '__annotations__': {'asset_types': 'ClassVar[List[Type[DataAsset]]]',
                                  'assets': 'Dict[str, _PandasDataAsset]',
                                  'name': 'str',
                                  'type': "Literal['pandas']"},
              '__class_vars__': {'_EXCLUDED_EXEC_ENG_ARGS',
                                 'asset_types',
                                 'execution_engine_override'},
              '__config__': <class 'great_expectations.experimental.datasources.metadatasource.Config'>,
              '__custom_root_type__': False,
              '__doc__': None,
              '__exclude_fields__': None,
              '__fields__': {'assets': ModelField(name='assets', type=Mapping[str, _PandasDataAsset], required=False, default={}),
                             'name': ModelField(name='name', type=str, required=True),
                             'type': ModelField(name='type', type=Literal['pandas'], required=False, default='pandas')},
              '__hash__': None,
              '__include_fields__': None,
              '__json_encoder__': <staticmethod(<cyfunction pydantic_encoder at 0x107b781e0>)>,
              '__module__': 'great_expectations.experimental.datasources.pandas_datasource',
              '__parameters__': (),
              '__post_root_validators__': [],
              '__pre_root_validators__': [],
              '__private_attributes__': {'_cached_execution_engine_kwargs': ModelPrivateAttr(default={}),
                                         '_execution_engine': ModelPrivateAttr()},
              '__schema_cache__': {},
              '__signature__': <pydantic.utils.ClassAttribute object at 0x16f5a8760>,
              '__slots__': set(),
              '__validators__': {'assets': [...]},
              '_abc_impl': <_abc._abc_data object at 0x16f5af5c0>,
              'asset_types': [<class 'pydantic.main.PandasClipboardAsset'>,
                              <class 'pydantic.main.PandasCSVAsset'>,
                              <class 'pydantic.main.PandasExcelAsset'>,
                              <class 'pydantic.main.PandasFeatherAsset'>,
                              <class 'pydantic.main.PandasGBQAsset'>,
                              <class 'pydantic.main.PandasHDFAsset'>,
                              <class 'pydantic.main.PandasHTMLAsset'>,
                              <class 'pydantic.main.PandasJSONAsset'>,
                              <class 'pydantic.main.PandasORCAsset'>,
                              <class 'pydantic.main.PandasParquetAsset'>,
                              <class 'pydantic.main.PandasPickleAsset'>,
                              <class 'pydantic.main.PandasSASAsset'>,
                              <class 'pydantic.main.PandasSPSSAsset'>,
                              <class 'pydantic.main.PandasSqlAsset'>,
                              <class 'pydantic.main.PandasSQLQueryAsset'>,
                              <class 'pydantic.main.PandasSQLTableAsset'>,
                              <class 'pydantic.main.PandasSTATAAsset'>,
                              <class 'pydantic.main.PandasTableAsset'>,
                              <class 'pydantic.main.PandasXMLAsset'>],
              'test_connection': <function PandasDatasource.test_connection at 0x16f4eb600>})
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:46 Datasources: 1
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:138 Beginning TypeLookup transaction
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasClipboardAsset` as pandas_clipboard
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_clipboard_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasCSVAsset` as pandas_csv
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_csv_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasExcelAsset` as pandas_excel
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_excel_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasFeatherAsset` as pandas_feather
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_feather_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasGBQAsset` as pandas_gbq
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_gbq_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasHDFAsset` as pandas_hdf
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_hdf_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasHTMLAsset` as pandas_html
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_html_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasJSONAsset` as pandas_json
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_json_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasORCAsset` as pandas_orc
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_orc_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasParquetAsset` as pandas_parquet
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_parquet_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasPickleAsset` as pandas_pickle
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_pickle_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasSASAsset` as pandas_sas
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_sas_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasSPSSAsset` as pandas_spss
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_spss_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasSqlAsset` as pandas_sql
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_sql_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasSQLQueryAsset` as pandas_sql_query
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_sql_query_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasSQLTableAsset` as pandas_sql_table
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_sql_table_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasSTATAAsset` as pandas_stata
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_stata_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasTableAsset` as pandas_table
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_table_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PandasXMLAsset` as pandas_xml
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pandas_xml_asset()` method found for `PandasDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:139 2a. Registering PandasDatasource as pandas with add_pandas() factory
DEBUG    great_expectations.experimental.datasources.sources:sources.py:150 'pandas' added to `type_lookup`
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:149 Transaction committing items
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:150 Completed TypeLookup transaction
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping sep type - lib.NoDefault
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping delimiter type - lib.NoDefault
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping names type - lib.NoDefault
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping prefix type - lib.NoDefault
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `converters` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `true_values` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `false_values` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `na_values` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `parse_dates` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `date_parser` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `on_bad_lines` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `low_memory` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 CSVAsset
{'cache_dates': _FieldSpec(type='bool', default_value=True),
 'chunksize': _FieldSpec(type='Union[int, None]', default_value=None),
 'comment': _FieldSpec(type='Union[str, None]', default_value=None),
 'compression': _FieldSpec(type='CompressionOptions', default_value='infer'),
 'converters': _FieldSpec(type=typing.Any, default_value=None),
 'date_parser': _FieldSpec(type=typing.Any, default_value=None),
 'dayfirst': _FieldSpec(type='bool', default_value=False),
 'decimal': _FieldSpec(type='str', default_value='.'),
 'delim_whitespace': _FieldSpec(type='bool', default_value=False),
 'delimiter': _FieldSpec(type='Union[str, None]', default_value=None),
 'dialect': _FieldSpec(type=typing.Optional[str], default_value=None),
 'doublequote': _FieldSpec(type='bool', default_value=True),
 'dtype': _FieldSpec(type=typing.Optional[dict], default_value=None),
 'encoding': _FieldSpec(type='Union[str, None]', default_value=None),
 'encoding_errors': _FieldSpec(type='Union[str, None]', default_value='strict'),
 'engine': _FieldSpec(type='Union[CSVEngine, None]', default_value=None),
 'error_bad_lines': _FieldSpec(type='Union[bool, None]', default_value=None),
 'escapechar': _FieldSpec(type='Union[str, None]', default_value=None),
 'false_values': _FieldSpec(type=typing.Any, default_value=None),
 'float_precision': _FieldSpec(type="Union[Literal['high', 'legacy'], None]", default_value=None),
 'header': _FieldSpec(type="Union[int, Sequence[int], None, Literal['infer']]", default_value='infer'),
 'index_col': _FieldSpec(type='Union[IndexLabel, Literal[False], None]', default_value=None),
 'infer_datetime_format': _FieldSpec(type='bool', default_value=False),
 'iterator': _FieldSpec(type='bool', default_value=False),
 'keep_date_col': _FieldSpec(type='bool', default_value=False),
 'keep_default_na': _FieldSpec(type='bool', default_value=True),
 'lineterminator': _FieldSpec(type='Union[str, None]', default_value=None),
 'low_memory': _FieldSpec(type=typing.Any, default_value=True),
 'mangle_dupe_cols': _FieldSpec(type='bool', default_value=True),
 'memory_map': _FieldSpec(type='bool', default_value=False),
 'na_filter': _FieldSpec(type='bool', default_value=True),
 'na_values': _FieldSpec(type=typing.Any, default_value=None),
 'names': _FieldSpec(type='Union[Sequence[Hashable], None]', default_value=None),
 'nrows': _FieldSpec(type='Union[int, None]', default_value=None),
 'on_bad_lines': _FieldSpec(type=typing.Any, default_value=None),
 'parse_dates': _FieldSpec(type=typing.Any, default_value=None),
 'prefix': _FieldSpec(type='str', default_value=None),
 'quotechar': _FieldSpec(type='str', default_value='"'),
 'quoting': _FieldSpec(type='int', default_value=0),
 'sep': _FieldSpec(type='Union[str, None]', default_value=None),
 'skip_blank_lines': _FieldSpec(type='bool', default_value=True),
 'skipfooter': _FieldSpec(type='int', default_value=0),
 'skipinitialspace': _FieldSpec(type='bool', default_value=False),
 'skiprows': _FieldSpec(type=typing.Union[typing.Sequence[int], int, NoneType], default_value=None),
 'squeeze': _FieldSpec(type='Union[bool, None]', default_value=None),
 'storage_options': _FieldSpec(type='StorageOptions', default_value=None),
 'thousands': _FieldSpec(type='Union[str, None]', default_value=None),
 'true_values': _FieldSpec(type=typing.Any, default_value=None),
 'usecols': _FieldSpec(type=typing.Union[int, str, typing.Sequence[int], NoneType], default_value=None),
 'verbose': _FieldSpec(type='bool', default_value=False),
 'warn_bad_lines': _FieldSpec(type='Union[bool, None]', default_value=None)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping sheet_name type - list[IntStrT]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping converters type - dict[str, Callable]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping converters type - dict[int, Callable]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:326 `converters` has no supported types. Field skipped
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `na_values` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping date_parser type - Callable
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:326 `date_parser` has no supported types. Field skipped
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 ExcelAsset
{'comment': _FieldSpec(type='Union[str, None]', default_value=None),
 'convert_float': _FieldSpec(type='Union[bool, None]', default_value=None),
 'decimal': _FieldSpec(type='str', default_value='.'),
 'dtype': _FieldSpec(type=typing.Optional[dict], default_value=None),
 'engine': _FieldSpec(type="Union[Literal['xlrd', 'openpyxl', 'odf', 'pyxlsb'], None]", default_value=None),
 'false_values': _FieldSpec(type='Union[Iterable[Hashable], None]', default_value=None),
 'header': _FieldSpec(type='Union[int, Sequence[int], None]', default_value=0),
 'index_col': _FieldSpec(type='Union[int, Sequence[int], None]', default_value=None),
 'keep_default_na': _FieldSpec(type='bool', default_value=True),
 'mangle_dupe_cols': _FieldSpec(type='bool', default_value=True),
 'na_filter': _FieldSpec(type='bool', default_value=True),
 'na_values': _FieldSpec(type=typing.Any, default_value=None),
 'names': _FieldSpec(type='Union[List[str], None]', default_value=None),
 'nrows': _FieldSpec(type='Union[int, None]', default_value=None),
 'parse_dates': _FieldSpec(type='Union[List, Dict, bool]', default_value=False),
 'sheet_name': _FieldSpec(type='Union[str, int, None]', default_value=0),
 'skipfooter': _FieldSpec(type='int', default_value=0),
 'skiprows': _FieldSpec(type=typing.Union[typing.Sequence[int], int, NoneType], default_value=None),
 'squeeze': _FieldSpec(type='Union[bool, None]', default_value=None),
 'storage_options': _FieldSpec(type='StorageOptions', default_value=None),
 'thousands': _FieldSpec(type='Union[str, None]', default_value=None),
 'true_values': _FieldSpec(type='Union[Iterable[Hashable], None]', default_value=None),
 'usecols': _FieldSpec(type=typing.Union[int, str, typing.Sequence[int], NoneType], default_value=None),
 'verbose': _FieldSpec(type='bool', default_value=False)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 FeatherAsset
{'columns': _FieldSpec(type='Union[Sequence[Hashable], None]', default_value=None),
 'storage_options': _FieldSpec(type='StorageOptions', default_value=None),
 'use_threads': _FieldSpec(type='bool', default_value=True)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `key` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 HDFAsset
{'chunksize': _FieldSpec(type='Union[int, None]', default_value=None),
 'columns': _FieldSpec(type='Union[List[str], None]', default_value=None),
 'errors': _FieldSpec(type='str', default_value='strict'),
 'iterator': _FieldSpec(type='bool', default_value=False),
 'key': _FieldSpec(type=typing.Any, default_value=None),
 'kwargs': _FieldSpec(type=typing.Optional[dict], default_value=FieldInfo(description='Extra keyword arguments that will be passed to the reader method', extra={})),
 'mode': _FieldSpec(type='str', default_value='r'),
 'start': _FieldSpec(type='Union[int, None]', default_value=None),
 'stop': _FieldSpec(type='Union[int, None]', default_value=None),
 'where': _FieldSpec(type='Union[str, List, None]', default_value=None)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 HTMLAsset
{'attrs': _FieldSpec(type='Union[Dict[str, str], None]', default_value=None),
 'converters': _FieldSpec(type='Union[Dict, None]', default_value=None),
 'decimal': _FieldSpec(type='str', default_value='.'),
 'displayed_only': _FieldSpec(type='bool', default_value=True),
 'encoding': _FieldSpec(type='Union[str, None]', default_value=None),
 'extract_links': _FieldSpec(type="Literal[None, 'header', 'footer', 'body', 'all']", default_value=None),
 'flavor': _FieldSpec(type='Union[str, None]', default_value=None),
 'header': _FieldSpec(type='Union[int, Sequence[int], None]', default_value=None),
 'index_col': _FieldSpec(type='Union[int, Sequence[int], None]', default_value=None),
 'keep_default_na': _FieldSpec(type='bool', default_value=True),
 'match': _FieldSpec(type='Union[str, Pattern]', default_value='.+'),
 'na_values': _FieldSpec(type='Union[Iterable[object], None]', default_value=None),
 'parse_dates': _FieldSpec(type='bool', default_value=False),
 'skiprows': _FieldSpec(type=typing.Union[typing.Sequence[int], int, NoneType], default_value=None),
 'thousands': _FieldSpec(type='Union[str, None]', default_value=',')}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:320 `convert_axes` has no type annotation
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 JSONAsset
{'chunksize': _FieldSpec(type='Union[int, None]', default_value=None),
 'compression': _FieldSpec(type='CompressionOptions', default_value='infer'),
 'convert_axes': _FieldSpec(type=typing.Any, default_value=None),
 'convert_dates': _FieldSpec(type='Union[bool, List[str]]', default_value=True),
 'date_unit': _FieldSpec(type='Union[str, None]', default_value=None),
 'dtype': _FieldSpec(type=typing.Optional[dict], default_value=None),
 'encoding': _FieldSpec(type='Union[str, None]', default_value=None),
 'encoding_errors': _FieldSpec(type='Union[str, None]', default_value='strict'),
 'keep_default_dates': _FieldSpec(type='bool', default_value=True),
 'lines': _FieldSpec(type='bool', default_value=False),
 'nrows': _FieldSpec(type='Union[int, None]', default_value=None),
 'numpy': _FieldSpec(type='bool', default_value=False),
 'orient': _FieldSpec(type='Union[str, None]', default_value=None),
 'precise_float': _FieldSpec(type='bool', default_value=False),
 'storage_options': _FieldSpec(type='StorageOptions', default_value=None),
 'typ': _FieldSpec(type="Literal['frame', 'series']", default_value='frame')}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 ORCAsset
{'columns': _FieldSpec(type='Union[List[str], None]', default_value=None),
 'kwargs': _FieldSpec(type=typing.Optional[dict], default_value=FieldInfo(description='Extra keyword arguments that will be passed to the reader method', extra={}))}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 ParquetAsset
{'columns': _FieldSpec(type='Union[List[str], None]', default_value=None),
 'engine': _FieldSpec(type='str', default_value='auto'),
 'kwargs': _FieldSpec(type=typing.Optional[dict], default_value=FieldInfo(description='Extra keyword arguments that will be passed to the reader method', extra={})),
 'storage_options': _FieldSpec(type='StorageOptions', default_value=None),
 'use_nullable_dtypes': _FieldSpec(type='bool', default_value=False)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 PickleAsset
{'compression': _FieldSpec(type='CompressionOptions', default_value='infer'),
 'storage_options': _FieldSpec(type='StorageOptions', default_value=None)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 SASAsset
{'chunksize': _FieldSpec(type='Union[int, None]', default_value=None),
 'compression': _FieldSpec(type='CompressionOptions', default_value='infer'),
 'encoding': _FieldSpec(type='Union[str, None]', default_value=None),
 'format': _FieldSpec(type='Union[str, None]', default_value=None),
 'index': _FieldSpec(type='Union[Hashable, None]', default_value=None),
 'iterator': _FieldSpec(type='bool', default_value=False)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 SPSSAsset
{'convert_categoricals': _FieldSpec(type='bool', default_value=True),
 'usecols': _FieldSpec(type=typing.Union[int, str, typing.Sequence[int], NoneType], default_value=None)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 STATAAsset
{'chunksize': _FieldSpec(type='Union[int, None]', default_value=None),
 'columns': _FieldSpec(type='Union[Sequence[str], None]', default_value=None),
 'compression': _FieldSpec(type='CompressionOptions', default_value='infer'),
 'convert_categoricals': _FieldSpec(type='bool', default_value=True),
 'convert_dates': _FieldSpec(type='bool', default_value=True),
 'convert_missing': _FieldSpec(type='bool', default_value=False),
 'index_col': _FieldSpec(type='Union[str, None]', default_value=None),
 'iterator': _FieldSpec(type='bool', default_value=False),
 'order_categoricals': _FieldSpec(type='bool', default_value=True),
 'preserve_dtypes': _FieldSpec(type='bool', default_value=True),
 'storage_options': _FieldSpec(type='StorageOptions', default_value=None)}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping converters type - ConvertersArg
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:326 `converters` has no supported types. Field skipped
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping parse_dates type - ParseDatesArg
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:326 `parse_dates` has no supported types. Field skipped
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping parser type - XMLParsers
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:326 `parser` has no supported types. Field skipped
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping stylesheet type - ReadBuffer[bytes]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:287 skipping stylesheet type - ReadBuffer[str]
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:412 XMLAsset
{'attrs_only': _FieldSpec(type='bool', default_value=False),
 'compression': _FieldSpec(type='CompressionOptions', default_value='infer'),
 'dtype': _FieldSpec(type=typing.Optional[dict], default_value=None),
 'elems_only': _FieldSpec(type='bool', default_value=False),
 'encoding': _FieldSpec(type='Union[str, None]', default_value='utf-8'),
 'iterparse': _FieldSpec(type='Union[Dict[str, List[str]], None]', default_value=None),
 'names': _FieldSpec(type='Union[Sequence[str], None]', default_value=None),
 'namespaces': _FieldSpec(type='Union[Dict[str, str], None]', default_value=None),
 'storage_options': _FieldSpec(type='StorageOptions', default_value=None),
 'stylesheet': _FieldSpec(type='Union[FilePath, None]', default_value=None),
 'xpath': _FieldSpec(type='str', default_value='./*')}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:433 Needs extra handling
{'converters': {'dict[str, Callable]', 'dict[int, Callable]', 'ConvertersArg'},
 'date_parser': {'Callable'},
 'delimiter': {'lib.NoDefault'},
 'io': {'ReadBuffer[str]'},
 'names': {'lib.NoDefault'},
 'parse_dates': {'ParseDatesArg'},
 'parser': {'XMLParsers'},
 'path': {'ReadBuffer[bytes]'},
 'path_or_buf': {'HDFStore', 'ReadBuffer[bytes]', 'ReadBuffer[str]'},
 'path_or_buffer': {'ReadBuffer[bytes]', 'ReadBuffer[str]'},
 'prefix': {'lib.NoDefault'},
 'sep': {'lib.NoDefault'},
 'sheet_name': {'list[IntStrT]'},
 'stylesheet': {'ReadBuffer[bytes]', 'ReadBuffer[str]'}}
DEBUG    /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/experimental/datasources/dynamic_pandas.py:dynamic_pandas.py:434 No Annotation
{'false_values', 'sql', 'on_bad_lines', 'credentials', 'params', 'converters', 'io', 'delim_whitespace', 'key', 'na_values', 'true_values', 'parse_dates', 'low_memory', 'convert_axes', 'con', 'date_parser'}
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:34 1a. MetaDatasource.__new__() for `PandasFilesystemDatasource`
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:43   PandasFilesystemDatasource __dict__ ->
mappingproxy({'__abstractmethods__': frozenset(),
              '__annotations__': {'asset_types': 'ClassVar[List[Type[DataAsset]]]',
                                  'assets': 'Dict[str, _FilesystemDataAsset]',
                                  'base_directory': 'pathlib.Path',
                                  'data_context_root_directory': 'Optional[pathlib.Path]',
                                  'name': 'str',
                                  'type': "Literal['pandas_filesystem']"},
              '__class_vars__': {'_EXCLUDED_EXEC_ENG_ARGS',
                                 'asset_types',
                                 'execution_engine_override'},
              '__config__': <class 'great_expectations.experimental.datasources.metadatasource.Config'>,
              '__custom_root_type__': False,
              '__doc__': None,
              '__exclude_fields__': None,
              '__fields__': {'assets': ModelField(name='assets', type=Mapping[str, _FilesystemDataAsset], required=False, default={}),
                             'base_directory': ModelField(name='base_directory', type=Path, required=True),
                             'data_context_root_directory': ModelField(name='data_context_root_directory', type=Optional[Path], required=False, default=None),
                             'name': ModelField(name='name', type=str, required=True),
                             'type': ModelField(name='type', type=Literal['pandas_filesystem'], required=False, default='pandas_filesystem')},
              '__hash__': None,
              '__include_fields__': None,
              '__json_encoder__': <staticmethod(<cyfunction pydantic_encoder at 0x107b781e0>)>,
              '__module__': 'great_expectations.experimental.datasources.pandas_filesystem_datasource',
              '__parameters__': (),
              '__post_root_validators__': [],
              '__pre_root_validators__': [],
              '__private_attributes__': {'_cached_execution_engine_kwargs': ModelPrivateAttr(default={}),
                                         '_execution_engine': ModelPrivateAttr()},
              '__schema_cache__': {},
              '__signature__': <pydantic.utils.ClassAttribute object at 0x16f73b250>,
              '__slots__': set(),
              '__validators__': {'assets': [...]},
              '_abc_impl': <_abc._abc_data object at 0x16f772880>,
              'add_csv_asset': <function PandasFilesystemDatasource.add_csv_asset at 0x16f5ee3e0>,
              'add_excel_asset': <function PandasFilesystemDatasource.add_excel_asset at 0x16f5ee480>,
              'add_json_asset': <function PandasFilesystemDatasource.add_json_asset at 0x16f5ee520>,
              'add_parquet_asset': <function PandasFilesystemDatasource.add_parquet_asset at 0x16f5ee5c0>,
              'asset_types': [<class 'pydantic.main.CSVAsset'>,
                              <class 'pydantic.main.ExcelAsset'>,
                              <class 'pydantic.main.FeatherAsset'>,
                              <class 'pydantic.main.HDFAsset'>,
                              <class 'pydantic.main.HTMLAsset'>,
                              <class 'pydantic.main.JSONAsset'>,
                              <class 'pydantic.main.ORCAsset'>,
                              <class 'pydantic.main.ParquetAsset'>,
                              <class 'pydantic.main.PickleAsset'>,
                              <class 'pydantic.main.SASAsset'>,
                              <class 'pydantic.main.SPSSAsset'>,
                              <class 'pydantic.main.STATAAsset'>,
                              <class 'pydantic.main.XMLAsset'>],
              'test_connection': <function PandasFilesystemDatasource.test_connection at 0x16f5ee200>})
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:46 Datasources: 2
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:138 Beginning TypeLookup transaction
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `CSVAsset` as csv
DEBUG    great_expectations.experimental.datasources.sources:sources.py:244 `add_csv_asset()` already defined `PandasFilesystemDatasource`
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `ExcelAsset` as excel
DEBUG    great_expectations.experimental.datasources.sources:sources.py:244 `add_excel_asset()` already defined `PandasFilesystemDatasource`
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `FeatherAsset` as feather
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_feather_asset()` method found for `PandasFilesystemDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `HDFAsset` as hdf
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_hdf_asset()` method found for `PandasFilesystemDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `HTMLAsset` as html
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_html_asset()` method found for `PandasFilesystemDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `JSONAsset` as json
DEBUG    great_expectations.experimental.datasources.sources:sources.py:244 `add_json_asset()` already defined `PandasFilesystemDatasource`
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `ORCAsset` as orc
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_orc_asset()` method found for `PandasFilesystemDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `ParquetAsset` as parquet
DEBUG    great_expectations.experimental.datasources.sources:sources.py:244 `add_parquet_asset()` already defined `PandasFilesystemDatasource`
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `PickleAsset` as pickle
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_pickle_asset()` method found for `PandasFilesystemDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `SASAsset` as sas
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_sas_asset()` method found for `PandasFilesystemDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `SPSSAsset` as spss
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_spss_asset()` method found for `PandasFilesystemDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `STATAAsset` as stata
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_stata_asset()` method found for `PandasFilesystemDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `XMLAsset` as xml
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_xml_asset()` method found for `PandasFilesystemDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:139 2a. Registering PandasFilesystemDatasource as pandas_filesystem with add_pandas_filesystem() factory
DEBUG    great_expectations.experimental.datasources.sources:sources.py:150 'pandas_filesystem' added to `type_lookup`
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:149 Transaction committing items
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:150 Completed TypeLookup transaction
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:34 1a. MetaDatasource.__new__() for `SQLDatasource`
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:43   SQLDatasource __dict__ ->
mappingproxy({'__abstractmethods__': frozenset(),
              '__annotations__': {'_cached_connection_string': 'str',
                                  '_engine': 'Union[sqlalchemy.engine.Engine, '
                                             'None]',
                                  'asset_types': 'ClassVar[List[Type[DataAsset]]]',
                                  'assets': 'Dict[str, Union[TableAsset, '
                                            'QueryAsset]]',
                                  'connection_string': 'str',
                                  'type': "Literal['sql']"},
              '__class_vars__': {'_EXCLUDED_EXEC_ENG_ARGS',
                                 'asset_types',
                                 'execution_engine_override'},
              '__config__': <class 'great_expectations.experimental.datasources.metadatasource.Config'>,
              '__custom_root_type__': False,
              '__doc__': 'Adds a generic SQL datasource to the data context.\n'
                         '\n'
                         '    Args:\n'
                         '        name: The name of this datasource.\n'
                         '        connection_string: The SQLAlchemy connection '
                         'string used to connect to the database.\n'
                         '            For example: '
                         '"postgresql+psycopg2://postgres:@localhost/test_database"\n'
                         '        assets: An optional dictionary whose keys '
                         'are SQL DataAsset names and whose values\n'
                         '            are SQL DataAsset objects.\n'
                         '    ',
              '__exclude_fields__': None,
              '__fields__': {'assets': ModelField(name='assets', type=Mapping[str, Union[TableAsset, QueryAsset]], required=False, default={}),
                             'connection_string': ModelField(name='connection_string', type=str, required=True),
                             'name': ModelField(name='name', type=str, required=True),
                             'type': ModelField(name='type', type=Literal['sql'], required=False, default='sql')},
              '__hash__': None,
              '__include_fields__': None,
              '__json_encoder__': <staticmethod(<cyfunction pydantic_encoder at 0x107b781e0>)>,
              '__module__': 'great_expectations.experimental.datasources.sql_datasource',
              '__parameters__': (),
              '__post_root_validators__': [],
              '__pre_root_validators__': [],
              '__private_attributes__': {'_cached_connection_string': ModelPrivateAttr(default=''),
                                         '_cached_execution_engine_kwargs': ModelPrivateAttr(default={}),
                                         '_engine': ModelPrivateAttr(),
                                         '_execution_engine': ModelPrivateAttr()},
              '__schema_cache__': {},
              '__signature__': <pydantic.utils.ClassAttribute object at 0x16f7b4370>,
              '__slots__': {'_cached_connection_string', '_engine'},
              '__validators__': {'assets': [...]},
              '_abc_impl': <_abc._abc_data object at 0x16f7b0f80>,
              '_cached_connection_string': <member '_cached_connection_string' of 'SQLDatasource' objects>,
              '_engine': <member '_engine' of 'SQLDatasource' objects>,
              'add_query_asset': <function SQLDatasource.add_query_asset at 0x16f7960c0>,
              'add_table_asset': <function SQLDatasource.add_table_asset at 0x16f796020>,
              'asset_types': [<class 'great_expectations.experimental.datasources.sql_datasource.TableAsset'>,
                              <class 'great_expectations.experimental.datasources.sql_datasource.QueryAsset'>],
              'execution_engine_type': <property object at 0x16f74bc90>,
              'get_engine': <function SQLDatasource.get_engine at 0x16f795da0>,
              'test_connection': <function SQLDatasource.test_connection at 0x16f795f80>})
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:46 Datasources: 3
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:138 Beginning TypeLookup transaction
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `TableAsset` as table
DEBUG    great_expectations.experimental.datasources.sources:sources.py:244 `add_table_asset()` already defined `SQLDatasource`
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `QueryAsset` as query
DEBUG    great_expectations.experimental.datasources.sources:sources.py:244 `add_query_asset()` already defined `SQLDatasource`
DEBUG    great_expectations.experimental.datasources.sources:sources.py:139 2a. Registering SQLDatasource as sql with add_sql() factory
DEBUG    great_expectations.experimental.datasources.sources:sources.py:150 'sql' added to `type_lookup`
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:149 Transaction committing items
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:150 Completed TypeLookup transaction
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:34 1a. MetaDatasource.__new__() for `PostgresDatasource`
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:43   PostgresDatasource __dict__ ->
mappingproxy({'__abstractmethods__': frozenset(),
              '__annotations__': {'connection_string': <class 'pydantic.networks.PostgresDsn'>,
                                  'type': typing.Literal['postgres']},
              '__class_vars__': {'_EXCLUDED_EXEC_ENG_ARGS',
                                 'asset_types',
                                 'execution_engine_override'},
              '__config__': <class 'great_expectations.experimental.datasources.metadatasource.Config'>,
              '__custom_root_type__': False,
              '__doc__': 'Adds a postgres datasource to the data context.\n'
                         '\n'
                         '    Args:\n'
                         '        name: The name of this postgres datasource.\n'
                         '        connection_string: The SQLAlchemy connection '
                         'string used to connect to the postgres database.\n'
                         '            For example: '
                         '"postgresql+psycopg2://postgres:@localhost/test_database"\n'
                         '        assets: An optional dictionary whose keys '
                         'are TableAsset or QueryAsset names and whose values\n'
                         '            are TableAsset or QueryAsset objects.\n'
                         '    ',
              '__exclude_fields__': None,
              '__fields__': {'assets': ModelField(name='assets', type=Mapping[str, Union[TableAsset, QueryAsset]], required=False, default={}),
                             'connection_string': ModelField(name='connection_string', type=PostgresDsn, required=True),
                             'name': ModelField(name='name', type=str, required=True),
                             'type': ModelField(name='type', type=Literal['postgres'], required=False, default='postgres')},
              '__hash__': None,
              '__include_fields__': None,
              '__json_encoder__': <staticmethod(<cyfunction pydantic_encoder at 0x107b781e0>)>,
              '__module__': 'great_expectations.experimental.datasources.postgres_datasource',
              '__parameters__': (),
              '__post_root_validators__': [],
              '__pre_root_validators__': [],
              '__private_attributes__': {'_cached_connection_string': ModelPrivateAttr(default=''),
                                         '_cached_execution_engine_kwargs': ModelPrivateAttr(default={}),
                                         '_engine': ModelPrivateAttr(),
                                         '_execution_engine': ModelPrivateAttr()},
              '__schema_cache__': {},
              '__signature__': <pydantic.utils.ClassAttribute object at 0x16f7b4f70>,
              '__slots__': set(),
              '__validators__': {'assets': [...]},
              '_abc_impl': <_abc._abc_data object at 0x16f7b1c80>})
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:46 Datasources: 4
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:138 Beginning TypeLookup transaction
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `TableAsset` as table
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_table_asset()` method found for `PostgresDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `QueryAsset` as query
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_query_asset()` method found for `PostgresDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:139 2a. Registering PostgresDatasource as postgres with add_postgres() factory
DEBUG    great_expectations.experimental.datasources.sources:sources.py:150 'postgres' added to `type_lookup`
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:149 Transaction committing items
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:150 Completed TypeLookup transaction
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:34 1a. MetaDatasource.__new__() for `_SparkDatasource`
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:40 1c. Skip factory registration of base `_SparkDatasource`
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:34 1a. MetaDatasource.__new__() for `SparkFilesystemDatasource`
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:43   SparkFilesystemDatasource __dict__ ->
mappingproxy({'__abstractmethods__': frozenset(),
              '__annotations__': {'assets': 'Dict[str, CSVSparkAsset]',
                                  'base_directory': 'pathlib.Path',
                                  'data_context_root_directory': 'Optional[pathlib.Path]',
                                  'name': 'str',
                                  'type': "Literal['spark_filesystem']"},
              '__class_vars__': {'_EXCLUDED_EXEC_ENG_ARGS',
                                 'asset_types',
                                 'execution_engine_override'},
              '__config__': <class 'great_expectations.experimental.datasources.metadatasource.Config'>,
              '__custom_root_type__': False,
              '__doc__': None,
              '__exclude_fields__': None,
              '__fields__': {'assets': ModelField(name='assets', type=Mapping[str, CSVSparkAsset], required=False, default={}),
                             'base_directory': ModelField(name='base_directory', type=Path, required=True),
                             'data_context_root_directory': ModelField(name='data_context_root_directory', type=Optional[Path], required=False, default=None),
                             'name': ModelField(name='name', type=str, required=True),
                             'type': ModelField(name='type', type=Literal['spark_filesystem'], required=False, default='spark_filesystem')},
              '__hash__': None,
              '__include_fields__': None,
              '__json_encoder__': <staticmethod(<cyfunction pydantic_encoder at 0x107b781e0>)>,
              '__module__': 'great_expectations.experimental.datasources.spark_datasource',
              '__parameters__': (),
              '__post_root_validators__': [],
              '__pre_root_validators__': [],
              '__private_attributes__': {'_cached_execution_engine_kwargs': ModelPrivateAttr(default={}),
                                         '_execution_engine': ModelPrivateAttr()},
              '__schema_cache__': {},
              '__signature__': <pydantic.utils.ClassAttribute object at 0x16f7b5ff0>,
              '__slots__': set(),
              '__validators__': {'assets': [...]},
              '_abc_impl': <_abc._abc_data object at 0x16f7bd1c0>,
              'add_csv_asset': <function SparkFilesystemDatasource.add_csv_asset at 0x16f796a20>,
              'test_connection': <function SparkFilesystemDatasource.test_connection at 0x16f7968e0>})
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:46 Datasources: 5
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:138 Beginning TypeLookup transaction
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `CSVSparkAsset` as csv_spark
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_csv_spark_asset()` method found for `SparkFilesystemDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:139 2a. Registering SparkFilesystemDatasource as spark_filesystem with add_spark_filesystem() factory
DEBUG    great_expectations.experimental.datasources.sources:sources.py:150 'spark_filesystem' added to `type_lookup`
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:149 Transaction committing items
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:150 Completed TypeLookup transaction
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:34 1a. MetaDatasource.__new__() for `SqliteDatasource`
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:43   SqliteDatasource __dict__ ->
mappingproxy({'__abstractmethods__': frozenset(),
              '__annotations__': {'connection_string': 'SqliteDsn',
                                  'type': "Literal['sqlite']"},
              '__class_vars__': {'_EXCLUDED_EXEC_ENG_ARGS',
                                 'asset_types',
                                 'execution_engine_override'},
              '__config__': <class 'great_expectations.experimental.datasources.metadatasource.Config'>,
              '__custom_root_type__': False,
              '__doc__': 'Adds a sqlite datasource to the data context.\n'
                         '\n'
                         '    Args:\n'
                         '        name: The name of this sqlite datasource.\n'
                         '        connection_string: The SQLAlchemy connection '
                         'string used to connect to the sqlite database.\n'
                         '            For example: '
                         '"sqlite:///path/to/file.db"\n'
                         '        assets: An optional dictionary whose keys '
                         'are TableAsset names and whose values\n'
                         '            are TableAsset objects.\n'
                         '    ',
              '__exclude_fields__': None,
              '__fields__': {'assets': ModelField(name='assets', type=Mapping[str, Union[TableAsset, QueryAsset]], required=False, default={}),
                             'connection_string': ModelField(name='connection_string', type=SqliteDsn, required=True),
                             'name': ModelField(name='name', type=str, required=True),
                             'type': ModelField(name='type', type=Literal['sqlite'], required=False, default='sqlite')},
              '__hash__': None,
              '__include_fields__': None,
              '__json_encoder__': <staticmethod(<cyfunction pydantic_encoder at 0x107b781e0>)>,
              '__module__': 'great_expectations.experimental.datasources.sqlite_datasource',
              '__parameters__': (),
              '__post_root_validators__': [],
              '__pre_root_validators__': [],
              '__private_attributes__': {'_cached_connection_string': ModelPrivateAttr(default=''),
                                         '_cached_execution_engine_kwargs': ModelPrivateAttr(default={}),
                                         '_engine': ModelPrivateAttr(),
                                         '_execution_engine': ModelPrivateAttr()},
              '__schema_cache__': {},
              '__signature__': <pydantic.utils.ClassAttribute object at 0x16f7b6470>,
              '__slots__': set(),
              '__validators__': {'assets': [...]},
              '_abc_impl': <_abc._abc_data object at 0x16f7be580>})
DEBUG    great_expectations.experimental.datasources.metadatasource:metadatasource.py:46 Datasources: 6
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:138 Beginning TypeLookup transaction
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `TableAsset` as table
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_table_asset()` method found for `SqliteDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:176 2b. Registering `DataAsset` `QueryAsset` as query
DEBUG    great_expectations.experimental.datasources.sources:sources.py:198 No `add_query_asset()` method found for `SqliteDatasource` generating the method...
DEBUG    great_expectations.experimental.datasources.sources:sources.py:139 2a. Registering SqliteDatasource as sqlite with add_sqlite() factory
DEBUG    great_expectations.experimental.datasources.sources:sources.py:150 'sqlite' added to `type_lookup`
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:149 Transaction committing items
DEBUG    great_expectations.experimental.datasources.type_lookup:type_lookup.py:150 Completed TypeLookup transaction
WARNING  py.warnings:warnings.py:110 /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/altair/utils/schemapi.py:442: DeprecationWarning: jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
  resolver = jsonschema.RefResolver.from_schema(cls._rootschema or cls._schema)

WARNING  py.warnings:warnings.py:110 /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/altair/utils/schemapi.py:442: DeprecationWarning: jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
  resolver = jsonschema.RefResolver.from_schema(cls._rootschema or cls._schema)

WARNING  py.warnings:warnings.py:110 /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/altair/utils/schemapi.py:442: DeprecationWarning: jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
  resolver = jsonschema.RefResolver.from_schema(cls._rootschema or cls._schema)

WARNING  py.warnings:warnings.py:110 /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/altair/utils/schemapi.py:442: DeprecationWarning: jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
  resolver = jsonschema.RefResolver.from_schema(cls._rootschema or cls._schema)

WARNING  py.warnings:warnings.py:110 /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/altair/utils/schemapi.py:442: DeprecationWarning: jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
  resolver = jsonschema.RefResolver.from_schema(cls._rootschema or cls._schema)

WARNING  py.warnings:warnings.py:110 /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/altair/utils/schemapi.py:442: DeprecationWarning: jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
  resolver = jsonschema.RefResolver.from_schema(cls._rootschema or cls._schema)

WARNING  py.warnings:warnings.py:110 /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/altair/utils/schemapi.py:442: DeprecationWarning: jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
  resolver = jsonschema.RefResolver.from_schema(cls._rootschema or cls._schema)

WARNING  py.warnings:warnings.py:110 /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/altair/utils/schemapi.py:442: DeprecationWarning: jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
  resolver = jsonschema.RefResolver.from_schema(cls._rootschema or cls._schema)

WARNING  py.warnings:warnings.py:110 /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/altair/utils/schemapi.py:442: DeprecationWarning: jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
  resolver = jsonschema.RefResolver.from_schema(cls._rootschema or cls._schema)

WARNING  py.warnings:warnings.py:110 /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/altair/utils/schemapi.py:442: DeprecationWarning: jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
  resolver = jsonschema.RefResolver.from_schema(cls._rootschema or cls._schema)

DEBUG    great_expectations.rule_based_profiler.data_assistant.data_assistant_dispatcher:data_assistant_dispatcher.py:93 Registering the declaration of DataAssistant "onboarding" took place.
DEBUG    great_expectations.rule_based_profiler.data_assistant.data_assistant_dispatcher:data_assistant_dispatcher.py:93 Registering the declaration of DataAssistant "volume" took place.
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expectation.
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type table_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type table_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type table_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type table_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type table_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type table_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type table_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type table_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type table_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type table_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type query_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type query_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type query_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type query_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type query_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type query_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type query_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type query_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type query_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type query_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type column_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type column_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type column_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type column_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type column_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type column_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type column_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type column_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type column_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type column_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type column_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type column_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type column_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type column_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type column_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type column_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type column_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type column_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type column_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type column_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type column_pair_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type column_pair_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type column_pair_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type column_pair_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type column_pair_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type column_pair_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type column_pair_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type column_pair_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type column_pair_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type column_pair_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type multicolumn_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type multicolumn_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type multicolumn_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type multicolumn_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type multicolumn_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type multicolumn_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type multicolumn_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type multicolumn_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type multicolumn_map_expectation.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type multicolumn_map_expectation.
DEBUG    great_expectations.expectations.metrics.import_manager:import_manager.py:29 No SqlAlchemy.func module available.
DEBUG    great_expectations.expectations.metrics.import_manager:import_manager.py:37 No SqlAlchemy.sql.expression module available.
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.distinct_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.distinct_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.distinct_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.distinct_values.count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.distinct_values.count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.distinct_values.count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.distinct_values.count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.distinct_values.count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.distinct_values.count.under_threshold
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.distinct_values.count.under_threshold
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.distinct_values.count.under_threshold
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.histogram
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.histogram
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.histogram
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.max
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.max.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.max
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.max.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.max
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.mean
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.mean.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.mean
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.mean.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.mean
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.median
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.median
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.median
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.min
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.min.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.min
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.min.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.min
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.most_common_value
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.most_common_value
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.most_common_value
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.parameterized_distribution_ks_test_p_value
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.partition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.partition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.partition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.unique_proportion
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.unique_proportion
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.unique_proportion
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.quantile_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.quantile_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.quantile_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.standard_deviation
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.standard_deviation.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.standard_deviation
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.standard_deviation.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.standard_deviation
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.sum
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.sum.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.sum
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.sum.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.sum
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column.value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.length.max
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.length.max.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.length.max
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.length.max.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.length.max
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.length.min
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.length.min.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.length.min
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.length.min.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.length.min
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.equals.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.map
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.map
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.between.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.value_length.map
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.between.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.dateutil_parseable.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.dateutil_parseable.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.dateutil_parseable.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.dateutil_parseable.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.dateutil_parseable.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.dateutil_parseable.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.dateutil_parseable.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.decreasing.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.decreasing.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.decreasing.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.decreasing.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.decreasing.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.decreasing.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.decreasing.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.decreasing.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.decreasing.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.decreasing.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.decreasing.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.decreasing.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.decreasing.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.decreasing.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_set.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_be_of_type
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_be_of_type.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_be_of_type.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_be_of_type.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_be_of_type.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_be_of_type.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_be_of_type.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_be_of_type.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_be_of_type.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_be_of_type.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_be_of_type.
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_type_list.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_type_list.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_type_list.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_type_list.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_type_list.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_type_list.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.in_type_list.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.increasing.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.increasing.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.increasing.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.increasing.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.increasing.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.increasing.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.increasing.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.increasing.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.increasing.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.increasing.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.increasing.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.increasing.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.increasing.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.increasing.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.json_parseable.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.json_parseable.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.json_parseable.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.json_parseable.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.json_parseable.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.json_parseable.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.json_parseable.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.json_parseable.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.json_parseable.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.json_parseable.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.json_parseable.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.json_parseable.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.json_parseable.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.json_parseable.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.json_parseable.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_json_schema.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_json_schema.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_json_schema.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_json_schema.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_json_schema.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_json_schema.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_json_schema.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_json_schema.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_json_schema.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_json_schema.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_json_schema.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_json_schema.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_json_schema.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_json_schema.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_json_schema.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_like_pattern.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_like_pattern.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_like_pattern.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_like_pattern.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_like_pattern.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_like_pattern.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_like_pattern.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_like_pattern.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_like_pattern_list.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_like_pattern_list.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_like_pattern_list.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_like_pattern_list.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_like_pattern_list.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_like_pattern_list.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_like_pattern_list.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_like_pattern_list.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_regex_list.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_strftime_format.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_strftime_format.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_strftime_format.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_strftime_format.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_strftime_format.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_strftime_format.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_strftime_format.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_strftime_format.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_strftime_format.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_strftime_format.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_strftime_format.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_strftime_format.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_strftime_format.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_strftime_format.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.match_strftime_format.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.nonnull.count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_in_set.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_like_pattern.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_like_pattern.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_like_pattern.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_like_pattern.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_like_pattern.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_like_pattern.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_like_pattern.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_like_pattern.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_like_pattern_list.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_like_pattern_list.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_like_pattern_list.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_like_pattern_list.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_like_pattern_list.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_like_pattern_list.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_like_pattern_list.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_like_pattern_list.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.not_match_regex_list.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.null.count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.of_type.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.of_type.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.of_type.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.of_type.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.of_type.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.of_type.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.of_type.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.unique.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.map
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.map
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.under_threshold.unexpected_value_counts
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_values.z_score.map
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.equal.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.a_greater_than_b.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: column_pair_values.in_set.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.unique.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: compound_columns.count.map
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: multicolumn_sum.equal.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.condition
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.unexpected_rows
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.unexpected_index_list
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.unexpected_index_query
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.unexpected_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.unexpected_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: select_column_values.unique.within_record.filtered_row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: query.column
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: query.column
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: query.column_pair
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: query.column_pair
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: query.multiple_columns
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: query.multiple_columns
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: query.table
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: query.table
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: query.template_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: query.template_values
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: table.column_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: table.column_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: table.column_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: table.column_types
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: table.column_types
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: table.column_types
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: table.columns
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: table.columns
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: table.columns
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: table.head
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: table.head
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: table.head
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: table.row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: table.row_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: table.row_count
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: table.row_count.aggregate_fn
DEBUG    great_expectations.expectations.registry:registry.py:208 Registering metric: table.row_count
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_distinct_values_to_be_in_set
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_distinct_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDescriptiveRendererType.VALUE_COUNTS_BAR_CHART for expectation_type expect_column_distinct_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_distinct_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_distinct_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_distinct_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_distinct_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_distinct_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_distinct_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_distinct_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_distinct_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_distinct_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_distinct_values_to_contain_set
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_distinct_values_to_contain_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_distinct_values_to_contain_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_distinct_values_to_contain_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_distinct_values_to_contain_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_distinct_values_to_contain_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_distinct_values_to_contain_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_distinct_values_to_contain_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_distinct_values_to_contain_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_distinct_values_to_contain_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_distinct_values_to_contain_set.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_distinct_values_to_equal_set
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_distinct_values_to_equal_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_distinct_values_to_equal_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_distinct_values_to_equal_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_distinct_values_to_equal_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_distinct_values_to_equal_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_distinct_values_to_equal_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_distinct_values_to_equal_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_distinct_values_to_equal_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_distinct_values_to_equal_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_distinct_values_to_equal_set.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_kl_divergence_to_be_less_than
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_kl_divergence_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDescriptiveRendererType.HISTOGRAM for expectation_type expect_column_kl_divergence_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_kl_divergence_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_kl_divergence_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_kl_divergence_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_kl_divergence_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_kl_divergence_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_kl_divergence_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_kl_divergence_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_kl_divergence_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_kl_divergence_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_max_to_be_between
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_max_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDescriptiveRendererType.STATS_TABLE_MAX_ROW for expectation_type expect_column_max_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_max_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_max_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_max_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_max_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_max_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_max_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_max_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_max_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_max_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_mean_to_be_between
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_mean_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDescriptiveRendererType.STATS_TABLE_MEAN_ROW for expectation_type expect_column_mean_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_mean_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_mean_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_mean_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_mean_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_mean_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_mean_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_mean_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_mean_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_mean_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_median_to_be_between
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_median_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_median_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_median_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_median_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_median_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_median_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_median_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_median_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_median_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_median_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_min_to_be_between
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_min_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDescriptiveRendererType.STATS_TABLE_MIN_ROW for expectation_type expect_column_min_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_min_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_min_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_min_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_min_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_min_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_min_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_min_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_min_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_min_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_most_common_value_to_be_in_set
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_most_common_value_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_most_common_value_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_most_common_value_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_most_common_value_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_most_common_value_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_most_common_value_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_most_common_value_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_most_common_value_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_most_common_value_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_most_common_value_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_pair_cramers_phi_value_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_pair_cramers_phi_value_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_pair_cramers_phi_value_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_pair_cramers_phi_value_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_pair_cramers_phi_value_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_pair_cramers_phi_value_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_pair_cramers_phi_value_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_pair_cramers_phi_value_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_pair_cramers_phi_value_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_pair_cramers_phi_value_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_pair_values_a_to_be_greater_than_b
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_pair_values_a_to_be_greater_than_b.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_pair_values_a_to_be_greater_than_b.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_pair_values_a_to_be_greater_than_b.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_pair_values_a_to_be_greater_than_b.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_pair_values_a_to_be_greater_than_b.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_pair_values_a_to_be_greater_than_b.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_pair_values_a_to_be_greater_than_b.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_pair_values_a_to_be_greater_than_b.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_pair_values_a_to_be_greater_than_b.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_pair_values_a_to_be_greater_than_b.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_pair_values_to_be_equal
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_pair_values_to_be_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_pair_values_to_be_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_pair_values_to_be_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_pair_values_to_be_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_pair_values_to_be_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_pair_values_to_be_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_pair_values_to_be_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_pair_values_to_be_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_pair_values_to_be_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_pair_values_to_be_equal.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_pair_values_to_be_in_set
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_pair_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_pair_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_pair_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_pair_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_pair_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_pair_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_pair_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_pair_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_pair_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_pair_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_proportion_of_unique_values_to_be_between
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_proportion_of_unique_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDescriptiveRendererType.COLUMN_PROPERTIES_TABLE_DISTINCT_PERCENT_ROW for expectation_type expect_column_proportion_of_unique_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_proportion_of_unique_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_proportion_of_unique_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_proportion_of_unique_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_proportion_of_unique_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_proportion_of_unique_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_proportion_of_unique_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_proportion_of_unique_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_proportion_of_unique_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_proportion_of_unique_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_quantile_values_to_be_between
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_quantile_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDescriptiveRendererType.QUANTILE_TABLE for expectation_type expect_column_quantile_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_quantile_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_quantile_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_quantile_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_quantile_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_quantile_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_quantile_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_quantile_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_quantile_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_quantile_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_stdev_to_be_between
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_stdev_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_stdev_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_stdev_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_stdev_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_stdev_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_stdev_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_stdev_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_stdev_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_stdev_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_stdev_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_sum_to_be_between
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_sum_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_sum_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_sum_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_sum_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_sum_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_sum_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_sum_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_sum_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_sum_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_sum_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_to_exist
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_to_exist.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_to_exist.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_to_exist.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_to_exist.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_to_exist.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_to_exist.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_to_exist.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_to_exist.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_to_exist.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_to_exist.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_unique_value_count_to_be_between
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_unique_value_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDescriptiveRendererType.COLUMN_PROPERTIES_TABLE_DISTINCT_COUNT_ROW for expectation_type expect_column_unique_value_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_unique_value_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_unique_value_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_unique_value_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_unique_value_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_unique_value_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_unique_value_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_unique_value_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_unique_value_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_unique_value_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_value_lengths_to_be_between
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_value_lengths_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_value_lengths_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_value_lengths_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_value_lengths_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_value_lengths_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_value_lengths_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_value_lengths_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_value_lengths_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_value_lengths_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_value_lengths_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_value_lengths_to_equal
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_value_lengths_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_value_lengths_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_value_lengths_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_value_lengths_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_value_lengths_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_value_lengths_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_value_lengths_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_value_lengths_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_value_lengths_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_value_lengths_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_value_z_scores_to_be_less_than
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_value_z_scores_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_value_z_scores_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_value_z_scores_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_value_z_scores_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_value_z_scores_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_value_z_scores_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_value_z_scores_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_value_z_scores_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_value_z_scores_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_value_z_scores_to_be_less_than.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_be_between
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_be_dateutil_parseable
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_be_dateutil_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_be_dateutil_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_be_dateutil_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_be_dateutil_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_be_dateutil_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_be_dateutil_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_be_dateutil_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_be_dateutil_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_be_dateutil_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_be_dateutil_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_be_decreasing
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_be_decreasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_be_decreasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_be_decreasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_be_decreasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_be_decreasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_be_decreasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_be_decreasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_be_decreasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_be_decreasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_be_decreasing.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_be_in_set
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDescriptiveRendererType.EXAMPLE_VALUES_BLOCK for expectation_type expect_column_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_be_in_type_list
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_be_in_type_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_be_in_type_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_be_in_type_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_be_in_type_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_be_in_type_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_be_in_type_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_be_in_type_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_be_in_type_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_be_in_type_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_be_in_type_list.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_be_increasing
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_be_increasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_be_increasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_be_increasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_be_increasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_be_increasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_be_increasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_be_increasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_be_increasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_be_increasing.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_be_increasing.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_be_json_parseable
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_be_json_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_be_json_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_be_json_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_be_json_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_be_json_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_be_json_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_be_json_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_be_json_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_be_json_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_be_json_parseable.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_be_null
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_be_unique
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_match_json_schema
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_match_json_schema.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_match_json_schema.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_match_json_schema.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_match_json_schema.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_match_json_schema.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_match_json_schema.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_match_json_schema.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_match_json_schema.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_match_json_schema.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_match_json_schema.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_match_like_pattern
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_match_like_pattern_list
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_match_regex
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering LegacyRendererType.ANSWER for expectation_type expect_column_values_to_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.QUESTION for expectation_type expect_column_values_to_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_match_regex_list
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_match_strftime_format
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_match_strftime_format.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_match_strftime_format.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_match_strftime_format.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_match_strftime_format.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_match_strftime_format.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_match_strftime_format.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_match_strftime_format.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_match_strftime_format.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_match_strftime_format.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_match_strftime_format.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_not_be_in_set
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_not_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_not_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_not_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_not_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_not_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_not_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_not_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_not_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_not_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_not_be_in_set.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_not_be_null
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_not_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDescriptiveRendererType.COLUMN_PROPERTIES_TABLE_MISSING_COUNT_ROW for expectation_type expect_column_values_to_not_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDescriptiveRendererType.COLUMN_PROPERTIES_TABLE_MISSING_PERCENT_ROW for expectation_type expect_column_values_to_not_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_not_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_not_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_not_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_not_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_not_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_not_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_not_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_not_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_not_be_null.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_not_match_like_pattern
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_not_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_not_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_not_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_not_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_not_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_not_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_not_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_not_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_not_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_not_match_like_pattern.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_not_match_like_pattern_list
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_not_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_not_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_not_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_not_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_not_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_not_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_not_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_not_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_not_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_not_match_like_pattern_list.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_not_match_regex
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_not_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDescriptiveRendererType.COLUMN_PROPERTIES_TABLE_REGEX_COUNT_ROW for expectation_type expect_column_values_to_not_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_not_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_not_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_not_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_not_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_not_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_not_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_not_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_not_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_not_match_regex.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_column_values_to_not_match_regex_list
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_column_values_to_not_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_column_values_to_not_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_column_values_to_not_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_column_values_to_not_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_column_values_to_not_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_column_values_to_not_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_column_values_to_not_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_column_values_to_not_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_column_values_to_not_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_column_values_to_not_match_regex_list.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_compound_columns_to_be_unique
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_compound_columns_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_compound_columns_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_compound_columns_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_compound_columns_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_compound_columns_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_compound_columns_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_compound_columns_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_compound_columns_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_compound_columns_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_compound_columns_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_multicolumn_sum_to_equal
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_multicolumn_sum_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_multicolumn_sum_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_multicolumn_sum_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_multicolumn_sum_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_multicolumn_sum_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_multicolumn_sum_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_multicolumn_sum_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_multicolumn_sum_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_multicolumn_sum_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_multicolumn_sum_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_multicolumn_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_multicolumn_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_multicolumn_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_multicolumn_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_multicolumn_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_multicolumn_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_multicolumn_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_multicolumn_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_multicolumn_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_multicolumn_values_to_be_unique.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_select_column_values_to_be_unique_within_record
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_select_column_values_to_be_unique_within_record.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_select_column_values_to_be_unique_within_record.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_select_column_values_to_be_unique_within_record.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_select_column_values_to_be_unique_within_record.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_select_column_values_to_be_unique_within_record.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_select_column_values_to_be_unique_within_record.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_select_column_values_to_be_unique_within_record.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_select_column_values_to_be_unique_within_record.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_select_column_values_to_be_unique_within_record.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_select_column_values_to_be_unique_within_record.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_table_column_count_to_be_between
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_table_column_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_table_column_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_table_column_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_table_column_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_table_column_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_table_column_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_table_column_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_table_column_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_table_column_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_table_column_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_table_column_count_to_equal
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_table_column_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_table_column_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_table_column_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_table_column_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_table_column_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_table_column_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_table_column_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_table_column_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_table_column_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_table_column_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_table_columns_to_match_ordered_list
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_table_columns_to_match_ordered_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_table_columns_to_match_ordered_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_table_columns_to_match_ordered_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_table_columns_to_match_ordered_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_table_columns_to_match_ordered_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_table_columns_to_match_ordered_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_table_columns_to_match_ordered_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_table_columns_to_match_ordered_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_table_columns_to_match_ordered_list.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_table_columns_to_match_ordered_list.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_table_columns_to_match_set
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_table_columns_to_match_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_table_columns_to_match_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_table_columns_to_match_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_table_columns_to_match_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_table_columns_to_match_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_table_columns_to_match_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_table_columns_to_match_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_table_columns_to_match_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_table_columns_to_match_set.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_table_columns_to_match_set.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_table_row_count_to_be_between
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_table_row_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_table_row_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_table_row_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_table_row_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_table_row_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_table_row_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_table_row_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_table_row_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_table_row_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_table_row_count_to_be_between.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_table_row_count_to_equal
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_table_row_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_table_row_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_table_row_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_table_row_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_table_row_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_table_row_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_table_row_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_table_row_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_table_row_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_table_row_count_to_equal.
DEBUG    great_expectations.expectations.registry:registry.py:167 Registering expectation: expect_table_row_count_to_equal_other_table
DEBUG    great_expectations.expectations.registry:registry.py:69 Registering atomic.diagnostic.observed_value for expectation_type expect_table_row_count_to_equal_other_table.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.diagnostic.failed for expectation_type expect_table_row_count_to_equal_other_table.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.META_PROPERTIES for expectation_type expect_table_row_count_to_equal_other_table.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.OBSERVED_VALUE for expectation_type expect_table_row_count_to_equal_other_table.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.STATUS_ICON for expectation_type expect_table_row_count_to_equal_other_table.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_STATEMENT for expectation_type expect_table_row_count_to_equal_other_table.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyDiagnosticRendererType.UNEXPECTED_TABLE for expectation_type expect_table_row_count_to_equal_other_table.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.failed for expectation_type expect_table_row_count_to_equal_other_table.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering LegacyRendererType.PRESCRIPTIVE for expectation_type expect_table_row_count_to_equal_other_table.
DEBUG    great_expectations.expectations.registry:registry.py:96 Registering atomic.prescriptive.summary for expectation_type expect_table_row_count_to_equal_other_table.
collected 2 items                                                                                                                                                                            

integration/test_snowflake_queries_v2.py::Test::test_enterprise_lineage 
--------------------------------------------------------------------------------------- live log setup ---------------------------------------------------------------------------------------
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.address`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.address` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.automotive`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.automotive` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.bank`.
DEBUG    faker.factory:factory.py:88 Specified locale `en_US` is not available for provider `faker.providers.bank`. Locale reset to `en_GB` for this provider.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.barcode`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.barcode` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.color`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.color` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.company`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.company` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.credit_card`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.credit_card` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.currency`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.currency` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.date_time`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.date_time` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:108 Provider `faker.providers.doi` does not feature localization. Specified locale `en_US` is not utilized for this provider.
DEBUG    faker.factory:factory.py:108 Provider `faker.providers.emoji` does not feature localization. Specified locale `en_US` is not utilized for this provider.
DEBUG    faker.factory:factory.py:108 Provider `faker.providers.file` does not feature localization. Specified locale `en_US` is not utilized for this provider.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.geo`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.geo` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.internet`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.internet` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.isbn`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.isbn` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.job`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.job` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.lorem`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.lorem` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.misc`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.misc` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.passport`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.passport` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.person`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.person` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.phone_number`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.phone_number` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:108 Provider `faker.providers.profile` does not feature localization. Specified locale `en_US` is not utilized for this provider.
DEBUG    faker.factory:factory.py:108 Provider `faker.providers.python` does not feature localization. Specified locale `en_US` is not utilized for this provider.
DEBUG    faker.factory:factory.py:108 Provider `faker.providers.sbn` does not feature localization. Specified locale `en_US` is not utilized for this provider.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.ssn`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.ssn` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:108 Provider `faker.providers.user_agent` does not feature localization. Specified locale `en_US` is not utilized for this provider.
--------------------------------------------------------------------------------------- live log call ----------------------------------------------------------------------------------------
INFO     datahub.ingestion.run.pipeline:pipeline.py:221 Sink configured successfully. 
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_connection.py:154 using authenticator type 'KEY_PAIR_AUTHENTICATOR'
WARNING  datahub.ingestion.source.state.stateful_ingestion_base:stateful_ingestion_base.py:144 Stateful ingestion is disabled, disabling enable_stateful_profiling config option as well
WARNING  datahub.ingestion.source.state.stateful_ingestion_base:stateful_ingestion_base.py:168 Stateful ingestion is disabled, disabling enable_stateful_usage_ingestion config option as well
WARNING  datahub.ingestion.source.state.stateful_ingestion_base:stateful_ingestion_base.py:119 Stateful ingestion is disabled, disabling enable_stateful_lineage_ingestion config option as well
INFO     datahub.ingestion.run.pipeline:pipeline.py:250 Source configured successfully.
INFO     datahub.ingestion.source.snowflake.snowflake_v2:snowflake_v2.py:677 Checking current version
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:678 Query #1: select CURRENT_VERSION()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:678 Query #1 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_v2:snowflake_v2.py:686 Checking current role
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:687 Query #2: select CURRENT_ROLE()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:687 Query #2 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_v2:snowflake_v2.py:695 Checking current warehouse
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:696 Query #3: select CURRENT_WAREHOUSE()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:696 Query #3 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_v2:snowflake_v2.py:705 Checking current edition
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:749 Query #4: show tags
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:749 Query #4 got 57 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:716 Query #5: select CURRENT_ACCOUNT()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:716 Query #5 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:719 Query #6: select CURRENT_REGION()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:719 Query #6 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: *: Metadata Extraction at 2025-07-10 07:38:30.466257+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:256 Query #7: show databases
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:256 Query #7 got 14 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:273 Query #8: 
        SELECT database_name AS "DATABASE_NAME",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        from "ASEEM_TEST_DB".information_schema.databases
        order by database_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:273 Query #8 got 13 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: SMOKE_TEST_DB: Metadata Extraction at 2025-07-10 07:38:31.883723+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:291 Query #9: 
        SELECT schema_name AS "SCHEMA_NAME",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        from "SMOKE_TEST_DB".information_schema.schemata
        WHERE schema_name != 'INFORMATION_SCHEMA'
        order by schema_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:291 Query #9 got 2 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:344 Query #10: 
        SELECT table_catalog AS "TABLE_CATALOG",
        table_schema AS "TABLE_SCHEMA",
        table_name AS "TABLE_NAME",
        table_type AS "TABLE_TYPE",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED" ,
        comment AS "COMMENT",
        row_count AS "ROW_COUNT",
        bytes AS "BYTES",
        clustering_key AS "CLUSTERING_KEY",
        auto_clustering_on AS "AUTO_CLUSTERING_ON",
        is_dynamic AS "IS_DYNAMIC",
        is_iceberg AS "IS_ICEBERG",
        is_hybrid AS "IS_HYBRID"
        FROM "SMOKE_TEST_DB".information_schema.tables t
        WHERE table_schema != 'INFORMATION_SCHEMA'
        and table_type in ( 'BASE TABLE', 'EXTERNAL TABLE')
        order by table_schema, table_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:344 Query #10 got 17 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:411 Query #11: SHOW VIEWS IN DATABASE "SMOKE_TEST_DB"
LIMIT 10000 ;

INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:411 Query #11 got 50 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:670 Query #12: SHOW STREAMS IN DATABASE "SMOKE_TEST_DB" LIMIT 10000 ;
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:670 Query #12 got 0 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:724 Query #13: 
        SELECT procedure_catalog AS "PROCEDURE_CATALOG",
        procedure_schema AS "PROCEDURE_SCHEMA",
        procedure_name AS "PROCEDURE_NAME",
        procedure_language AS "PROCEDURE_LANGUAGE",
        argument_signature AS "ARGUMENT_SIGNATURE",
        data_type AS "PROCEDURE_RETURN_TYPE",
        procedure_definition AS "PROCEDURE_DEFINITION",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        FROM "SMOKE_TEST_DB".information_schema.procedures
        order by procedure_schema, procedure_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:724 Query #13 got 0 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_schema_gen.py:241 Time spent in stage <SMOKE_TEST_DB: Metadata Extraction at 2025-07-10 07:38:31.883723+00:00>: 3.81 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: SMOKE_TEST_DB_2: Metadata Extraction at 2025-07-10 07:38:35.698212+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:291 Query #14: 
        SELECT schema_name AS "SCHEMA_NAME",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        from "SMOKE_TEST_DB_2".information_schema.schemata
        WHERE schema_name != 'INFORMATION_SCHEMA'
        order by schema_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:291 Query #14 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:344 Query #15: 
        SELECT table_catalog AS "TABLE_CATALOG",
        table_schema AS "TABLE_SCHEMA",
        table_name AS "TABLE_NAME",
        table_type AS "TABLE_TYPE",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED" ,
        comment AS "COMMENT",
        row_count AS "ROW_COUNT",
        bytes AS "BYTES",
        clustering_key AS "CLUSTERING_KEY",
        auto_clustering_on AS "AUTO_CLUSTERING_ON",
        is_dynamic AS "IS_DYNAMIC",
        is_iceberg AS "IS_ICEBERG",
        is_hybrid AS "IS_HYBRID"
        FROM "SMOKE_TEST_DB_2".information_schema.tables t
        WHERE table_schema != 'INFORMATION_SCHEMA'
        and table_type in ( 'BASE TABLE', 'EXTERNAL TABLE')
        order by table_schema, table_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:344 Query #15 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:411 Query #16: SHOW VIEWS IN DATABASE "SMOKE_TEST_DB_2"
LIMIT 10000 ;

INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:411 Query #16 got 48 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:670 Query #17: SHOW STREAMS IN DATABASE "SMOKE_TEST_DB_2" LIMIT 10000 ;
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:670 Query #17 got 0 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:724 Query #18: 
        SELECT procedure_catalog AS "PROCEDURE_CATALOG",
        procedure_schema AS "PROCEDURE_SCHEMA",
        procedure_name AS "PROCEDURE_NAME",
        procedure_language AS "PROCEDURE_LANGUAGE",
        argument_signature AS "ARGUMENT_SIGNATURE",
        data_type AS "PROCEDURE_RETURN_TYPE",
        procedure_definition AS "PROCEDURE_DEFINITION",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        FROM "SMOKE_TEST_DB_2".information_schema.procedures
        order by procedure_schema, procedure_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:724 Query #18 got 0 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_schema_gen.py:241 Time spent in stage <SMOKE_TEST_DB_2: Metadata Extraction at 2025-07-10 07:38:35.698212+00:00>: 5.62 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: *: External table DDL Lineage at 2025-07-10 07:38:41.316362+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema_gen.py:1276 Query #19: show external tables in account
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema_gen.py:1276 Query #19 got 5 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_schema_gen.py:246 Time spent in stage <*: External table DDL Lineage at 2025-07-10 07:38:41.316362+00:00>: 3.67 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_v2.py:523 Time spent in stage <*: Metadata Extraction at 2025-07-10 07:38:30.466257+00:00>: 14.52 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: *: View Parsing at 2025-07-10 07:38:44.990719+00:00
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_v2.py:572 Time spent in stage <*: View Parsing at 2025-07-10 07:38:44.990719+00:00>: 0.03 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: *: Queries Extraction at 2025-07-10 07:38:45.024407+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:336 Fetching users from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:338 Query #20: SELECT name as "NAME", email as "EMAIL" FROM SNOWFLAKE.ACCOUNT_USAGE.USERS
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:338 Query #20 got 73 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:230 Using local temp path: /var/folders/zc/qty7kt_919db2qnrl7wndl0m0000gn/T/tmpecnsw66q
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:291 Fetching audit log into /var/folders/zc/qty7kt_919db2qnrl7wndl0m0000gn/T/tmpecnsw66q/audit_log.sqlite
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:364 Fetching copy history from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:365 Query #21: 
        SELECT
            ARRAY_UNIQUE_AGG(h.stage_location) AS "UPSTREAM_LOCATIONS",
            concat(
                h.table_catalog_name, '.', h.table_schema_name,
                '.', h.table_name
            ) AS "DOWNSTREAM_TABLE_NAME"
        FROM
            snowflake.account_usage.copy_history h
        WHERE h.status in ('Loaded','Partially loaded')
            AND DOWNSTREAM_TABLE_NAME IS NOT NULL
            AND h.last_load_time >= to_timestamp_ltz(1751789040000, 3)
            AND h.last_load_time < to_timestamp_ltz(1751789940000, 3)
            AND NOT RLIKE(DOWNSTREAM_TABLE_NAME,'.*\.FIVETRAN_.*_STAGING\..*','i') AND NOT RLIKE(DOWNSTREAM_TABLE_NAME,'.*__DBT_TMP$','i') AND NOT RLIKE(DOWNSTREAM_TABLE_NAME,'.*\.SEGMENT_[a-f0-9]{8}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{12}','i') AND NOT RLIKE(DOWNSTREAM_TABLE_NAME,'.*\.STAGING_.*_[a-f0-9]{8}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{12}','i') AND NOT RLIKE(DOWNSTREAM_TABLE_NAME,'.*\.(GE_TMP_|GE_TEMP_|GX_TEMP_)[0-9A-F]{8}','i') AND NOT RLIKE(DOWNSTREAM_TABLE_NAME,'.*\.SNOWPARK_TEMP_TABLE_.+','i')
        GROUP BY DOWNSTREAM_TABLE_NAME;
        
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:365 Query #21 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:407 Fetching query log from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:408 Query #22: WITH
fingerprinted_queries as (
    SELECT *,
        -- TODO: Generate better fingerprints for each query by pushing down regex logic.
        query_history.query_parameterized_hash as query_fingerprint,
        -- Optional and additional hash to be used for query deduplication and final query identity
        CASE 
            WHEN CONTAINS(query_history.query_text, '-- Hex query metadata:')
            -- Extract project id and hash it
            THEN CAST(HASH(
                REGEXP_SUBSTR(query_history.query_text, '"project_id"\\s*:\\s*"([^"]+)"', 1, 1, 'e', 1),
                REGEXP_SUBSTR(query_history.query_text, '"context"\\s*:\\s*"([^"]+)"', 1, 1, 'e', 1)
            ) AS VARCHAR)
            ELSE NULL 
        END as query_secondary_fingerprint
    FROM
        snowflake.account_usage.query_history
    WHERE
        query_history.start_time >= to_timestamp_ltz(1751789040000, 3) -- 2025-07-06T08:04:00+00:00
        AND query_history.start_time < to_timestamp_ltz(1751789940000, 3) -- 2025-07-06T08:19:00+00:00
        AND execution_status = 'SUCCESS'
        AND TRUE
)
, deduplicated_queries as (
    SELECT
        *,
        DATE_TRUNC(
            DAY,
            CONVERT_TIMEZONE('UTC', start_time)
        ) AS bucket_start_time,
        COUNT(*) OVER (PARTITION BY bucket_start_time, query_fingerprint, query_secondary_fingerprint) AS query_count,
    FROM
        fingerprinted_queries
    QUALIFY
        ROW_NUMBER() OVER (PARTITION BY bucket_start_time, query_fingerprint, query_secondary_fingerprint ORDER BY start_time DESC) = 1
)
, raw_access_history AS (
    SELECT
        query_id,
        root_query_id,
        query_start_time,
        user_name,
        direct_objects_accessed,
        objects_modified,
        object_modified_by_ddl
    FROM
        snowflake.account_usage.access_history
    WHERE
        query_start_time >= to_timestamp_ltz(1751789040000, 3) -- 2025-07-06T08:04:00+00:00
        AND query_start_time < to_timestamp_ltz(1751789940000, 3) -- 2025-07-06T08:19:00+00:00
        AND TRUE
        AND query_id IN (
            SELECT query_id FROM deduplicated_queries
        )
        AND (ARRAY_SIZE(FILTER(direct_objects_accessed, o -> (SPLIT_PART(UPPER(o:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB$' OR SPLIT_PART(UPPER(o:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB_2$'))) > 0 OR ARRAY_SIZE(FILTER(objects_modified, o -> (SPLIT_PART(UPPER(o:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB$' OR SPLIT_PART(UPPER(o:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB_2$'))) > 0 OR ((SPLIT_PART(UPPER(object_modified_by_ddl:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB$' OR SPLIT_PART(UPPER(object_modified_by_ddl:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB_2$')))
)
, filtered_access_history AS (
    -- TODO: Add table filter clause.
    SELECT
        query_id,
        root_query_id,
        query_start_time,
        ARRAY_SLICE(
            FILTER(direct_objects_accessed, o -> o:objectDomain IN ('Iceberg table','External table','Table','View','Stream','Materialized view')),
            0, 20
        ) as direct_objects_accessed,
        -- TODO: Drop the columns.baseSources subfield.
        FILTER(objects_modified, o -> o:objectDomain IN ('Iceberg table','External table','Table','View','Stream','Materialized view')) as objects_modified,
        case when object_modified_by_ddl:objectDomain IN ('Iceberg table','External table','Table','View','Stream','Materialized view') then object_modified_by_ddl else null end as object_modified_by_ddl
    FROM raw_access_history
    WHERE ( array_size(direct_objects_accessed) > 0 or array_size(objects_modified) > 0 or object_modified_by_ddl is not null )
)
, query_access_history AS (
    SELECT
        q.bucket_start_time,
        q.query_id,
        q.query_fingerprint,
        q.query_secondary_fingerprint,
        q.query_count,
        q.session_id AS "SESSION_ID",
        q.start_time AS "QUERY_START_TIME",
        q.total_elapsed_time AS "QUERY_DURATION",
        q.query_text AS "QUERY_TEXT",
        q.query_type AS "QUERY_TYPE",
        q.database_name as "DEFAULT_DB",
        q.schema_name as "DEFAULT_SCHEMA",
        q.rows_inserted AS "ROWS_INSERTED",
        q.rows_updated AS "ROWS_UPDATED",
        q.rows_deleted AS "ROWS_DELETED",
        q.user_name AS "USER_NAME",
        q.role_name AS "ROLE_NAME",
        a.root_query_id,
        a.direct_objects_accessed,
        a.objects_modified,
        a.object_modified_by_ddl
    FROM deduplicated_queries q
    JOIN filtered_access_history a USING (query_id)
)
SELECT * FROM query_access_history
-- Our query aggregator expects the queries to be added in chronological order.
-- It's easier for us to push down the sorting to Snowflake/SQL instead of doing it in Python.
ORDER BY QUERY_START_TIME ASC

INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:408 Query #22 got 68 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:312 Added 0 query log entries to SQL aggregator
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_v2.py:575 Time spent in stage <*: Queries Extraction at 2025-07-10 07:38:45.024407+00:00>: 16.68 seconds

Cli report:
{'cli_version': 'unavailable (installed in develop mode)',
 'cli_entry_location': '/Users/sergio/workspace/github/datahub-project/datahub/metadata-ingestion/src/datahub/ingestion/run/pipeline.py',
 'models_version': 'bundled',
 'py_version': '3.11.11 (main, Mar 17 2025, 21:33:08) [Clang 20.1.0 ]',
 'py_exec_path': '/Users/sergio/workspace/github/acryldata/connector-tests/venv/bin/python3',
 'os_details': 'macOS-15.5-arm64-arm-64bit',
 'mem_info': '432.67 MB',
 'peak_memory_usage': '432.67 MB',
 'disk_info': {'total': '994.66 GB', 'used': '297.46 GB', 'used_initally': '297.46 GB', 'free': '697.2 GB'},
 'peak_disk_usage': '297.46 GB',
 'thread_count': 1,
 'peak_thread_count': 1}
Source (snowflake) report:
{'ingestion_stage_durations': {'SMOKE_TEST_DB: Metadata Extraction at 2025-07-10 07:38:31.883723+00:00': 3.81,
                               'SMOKE_TEST_DB_2: Metadata Extraction at 2025-07-10 07:38:35.698212+00:00': 5.62,
                               '*: External table DDL Lineage at 2025-07-10 07:38:41.316362+00:00': 3.67,
                               '*: Metadata Extraction at 2025-07-10 07:38:30.466257+00:00': 14.52,
                               '*: View Parsing at 2025-07-10 07:38:44.990719+00:00': 0.03,
                               '*: Queries Extraction at 2025-07-10 07:38:45.024407+00:00': 16.68},
 'window_end_time': '2025-07-06 08:19:00+00:00 (3 days, 23 hours and 20 minutes ago)',
 'window_start_time': '2025-07-06 08:04:00+00:00 (3 days, 23 hours and 35 minutes ago)',
 'profiling_skipped_not_updated': {},
 'profiling_skipped_size_limit': {},
 'profiling_skipped_row_limit': {},
 'profiling_skipped_table_profile_pattern': {},
 'profiling_skipped_other': {},
 'num_tables_not_eligible_profiling': {},
 'num_tables_fetch_sample_values_failed': 0,
 'num_tables_classification_attempted': 0,
 'num_tables_classification_failed': 0,
 'num_tables_classification_found': 0,
 'info_types_detected': {},
 'aspects': {'dataset': {'fineGrainedLineages': 6, 'status': 16, 'upstreamLineage': 16},
             'query': {'dataPlatformInstance': 33, 'queryProperties': 33, 'querySubjects': 33, 'queryUsageStatistics': 25, 'status': 33}},
 'aspects_by_subtypes': {'dataset': {'unknown': {'fineGrainedLineages': 6, 'status': 16, 'upstreamLineage': 16}},
                         'query': {'unknown': {'dataPlatformInstance': 33,
                                               'queryProperties': 33,
                                               'querySubjects': 33,
                                               'queryUsageStatistics': 25,
                                               'status': 33}}},
 'samples': {'lineage': {'unknown': ['urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.covid19_external_table,PROD)',
                                     'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.lineage_from_base,PROD)',
                                     'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.person_info,PROD)',
                                     'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.person_info_final,PROD)',
                                     'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.person_info_tmp,PROD)',
                                     'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.simple_hybrid_table,PROD)',
                                     'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.simple_secure_view,PROD)',
                                     'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.table_from_s3_stage,PROD)',
                                     'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.table_from_temp_view,PROD)',
                                     'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.table_from_view,PROD)',
                                     'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.table_from_view_and_table,PROD)',
                                     'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.view_from_table,PROD)',
                                     'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD)',
                                     'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD)',
                                     'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD)',
                                     'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db_2.public.table_from_other_db,PROD)']}},
 'event_not_produced_warn': True,
 'events_produced': 189,
 'events_produced_per_sec': 5,
 'access_history_range_query_secs': -1,
 'access_history_query_secs': -1,
 'rows_processed': 0,
 'rows_missing_query_text': 0,
 'rows_zero_base_objects_accessed': 0,
 'rows_zero_direct_objects_accessed': 0,
 'rows_missing_email': 0,
 'rows_parsing_error': 0,
 'stateful_usage_ingestion_enabled': False,
 'usage_aggregation': {'query_secs': -1,
                       'query_row_count': -1,
                       'result_fetch_timer': None,
                       'result_skip_timer': None,
                       'result_map_timer': None,
                       'users_map_timer': None,
                       'queries_map_timer': None,
                       'fields_map_timer': None},
 'soft_deleted_stale_entities': [],
 'last_state_non_deletable_entities': [],
 'tables_scanned': 18,
 'views_scanned': 2,
 'entities_profiled': 0,
 'filtered': ['ASEEM_TEST_DB.*',
              'CORTEXDEMO.*',
              'DEMO_DB.*',
              'DEMO_PIPELINE.*',
              'FIVETRAN_SMOKE_TEST_DB.*',
              'HARSHAL_PLAYGROUND_1.*',
              'LONG_TAIL_COMPANIONS.*',
              'SMOKE_TEST_DB_PROFILING.*',
              'SMOKE_TEST_DB_PROFILING2.*',
              'UTIL_DB.*',
              '... sampled of 11 total elements'],
 'num_view_definitions_parsed': 0,
 'num_view_definitions_view_urn_mismatch': 0,
 'num_view_definitions_failed_parsing': 0,
 'num_view_definitions_failed_column_parsing': 0,
 'view_definitions_parsing_failures': [],
 'sql_aggregator': {'num_observed_queries': 0,
                    'num_observed_queries_failed': 0,
                    'num_observed_queries_column_timeout': 0,
                    'num_observed_queries_column_failed': 0,
                    'observed_query_parse_failures': [],
                    'num_view_definitions': 2,
                    'num_views_failed': 0,
                    'num_views_column_timeout': 0,
                    'num_views_column_failed': 0,
                    'views_parse_failures': {},
                    'num_sql_parsed': 2,
                    'sql_parsing_timer': '0.028 seconds',
                    'sql_fingerprinting_timer': None,
                    'sql_formatting_timer': None,
                    'sql_parsing_cache_stats': {'hits': 0, 'misses': 3, 'maxsize': 1000, 'currsize': 3},
                    'parse_statement_cache_stats': {'hits': 0, 'misses': 3, 'maxsize': 1000, 'currsize': 3},
                    'format_query_cache_stats': {'hits': 0, 'misses': 0, 'maxsize': 1000, 'currsize': 0},
                    'num_known_query_lineage': 0,
                    'num_preparsed_queries': 0,
                    'num_known_mapping_lineage': 1,
                    'num_table_renames': 0,
                    'num_table_swaps': 0,
                    'num_temp_sessions': 0,
                    'num_inferred_temp_schemas': 0,
                    'num_queries_with_temp_tables_in_session': 0,
                    'queries_with_temp_upstreams': {},
                    'queries_with_non_authoritative_session': [],
                    'make_schema_resolver_timer': None,
                    'schema_resolver_count': 0,
                    'num_unique_query_fingerprints': 3,
                    'num_urns_with_lineage': 3,
                    'num_lineage_skipped_due_to_filters': 0,
                    'num_table_lineage_trimmed_due_to_large_size': 0,
                    'num_column_lineage_trimmed_due_to_large_size': 0,
                    'num_queries_entities_generated': 2,
                    'num_queries_used_in_lineage': 3,
                    'num_queries_skipped_due_to_filters': 0,
                    'usage_skipped_missing_timestamp': 0,
                    'num_query_usage_stats_generated': 0,
                    'num_query_usage_stats_outside_window': 0,
                    'num_operations_generated': 0,
                    'num_operations_skipped_due_to_filters': 0,
                    'tool_meta_report': {'num_queries_meta_extracted': {}, 'failures': []}},
 'num_table_to_table_edges_scanned': 0,
 'num_table_to_view_edges_scanned': 0,
 'num_view_to_table_edges_scanned': 0,
 'num_external_table_edges_scanned': 2,
 'ignore_start_time_lineage': False,
 'upstream_lineage_in_report': False,
 'upstream_lineage': {},
 'lineage_start_time': '2025-07-06 08:04:00+00:00 (3 days, 23 hours and 35 minutes ago)',
 'lineage_end_time': '2025-07-06 08:19:00+00:00 (3 days, 23 hours and 20 minutes ago)',
 'stateful_lineage_ingestion_enabled': False,
 'cleaned_account_id': 'xaa48144',
 'run_ingestion': False,
 'saas_version': '9.18.1',
 'default_warehouse': 'SMOKE_TEST',
 'role': 'DATAHUB_ROLE',
 'profile_candidates': {},
 'account_locator': 'XAA48144',
 'region': 'AWS_US_WEST_2',
 'schemas_scanned': 3,
 'databases_scanned': 13,
 'tags_scanned': 0,
 'streams_scanned': 0,
 'procedures_scanned': 0,
 'include_usage_stats': False,
 'include_operational_stats': False,
 'include_technical_schema': False,
 'include_column_lineage': True,
 'table_lineage_query_secs': -1,
 'external_lineage_queries_secs': -1,
 'num_tables_with_known_upstreams': 0,
 'num_streams_with_known_upstreams': 0,
 'num_upstream_lineage_edge_parsing_failed': 0,
 'num_secure_views_missing_definition': 0,
 'num_structured_property_templates_created': 0,
 'data_dictionary_cache': {'get_tables_for_database': {'hits': 1, 'misses': 2, 'maxsize': 1, 'currsize': 1},
                           'get_views_for_database': {'hits': 1, 'misses': 2, 'maxsize': 1, 'currsize': 1},
                           'get_columns_for_schema': {'hits': 0, 'misses': 0, 'maxsize': 20, 'currsize': 0},
                           'get_streams_for_database': {'hits': 1, 'misses': 2, 'maxsize': 1, 'currsize': 1},
                           'get_pk_constraints_for_schema': {'hits': 0, 'misses': 0, 'maxsize': 20, 'currsize': 0},
                           'get_fk_constraints_for_schema': {'hits': 0, 'misses': 0, 'maxsize': 20, 'currsize': 0}},
 'queries_extractor': {'copy_history_fetch_timer': '4.751 seconds',
                       'query_log_fetch_timer': '8.136 seconds',
                       'users_fetch_timer': '3.749 seconds',
                       'audit_log_load_timer': '0.006 seconds',
                       'aggregator_generate_timer': '0.027 seconds',
                       'sql_aggregator': {'num_observed_queries': 1,
                                          'num_observed_queries_failed': 0,
                                          'num_observed_queries_column_timeout': 0,
                                          'num_observed_queries_column_failed': 0,
                                          'observed_query_parse_failures': [],
                                          'num_view_definitions': 0,
                                          'num_views_failed': 0,
                                          'num_views_column_timeout': 0,
                                          'num_views_column_failed': 0,
                                          'views_parse_failures': {},
                                          'num_sql_parsed': 1,
                                          'sql_parsing_timer': '0.004 seconds',
                                          'sql_fingerprinting_timer': None,
                                          'sql_formatting_timer': None,
                                          'sql_parsing_cache_stats': {'hits': 0, 'misses': 3, 'maxsize': 1000, 'currsize': 3},
                                          'parse_statement_cache_stats': {'hits': 0, 'misses': 3, 'maxsize': 1000, 'currsize': 3},
                                          'format_query_cache_stats': {'hits': 0, 'misses': 0, 'maxsize': 1000, 'currsize': 0},
                                          'num_known_query_lineage': 0,
                                          'num_preparsed_queries': 48,
                                          'num_known_mapping_lineage': 1,
                                          'num_table_renames': 1,
                                          'num_table_swaps': 1,
                                          'num_temp_sessions': 2,
                                          'num_inferred_temp_schemas': 0,
                                          'num_queries_with_temp_tables_in_session': 0,
                                          'queries_with_temp_upstreams': {'composite_11bdb86c4b4e98838daf09f03ea0407f72c65bf4d276b540672cac29623c25d7': ['aec3a9a8368a5dcaf2b5ae9ebaf9edc235aacbfa041e49d3f77fc1521ddb7e7b', '9cf7b20a1687ea6477cfef4c0a1fb7f264893ee378935f4273fc0e8c54754741', '5a796d340507767526a77a3b13571a0cd5ee4dfa2248a56ac8921d64e512b0cc', '481d0392ffeffdafd198d94e0a9f778dd722b60daa47083a32800b99ea21f86f', 'e641b3e915a163da9c8d29173c19e9d0b84fcf3da334ba7def30671af743d066', 'b344ef718a0bec2c1a49e16339d6626f9f102f8357c7fe64d155c5376d2f5795'],
                                                                          'composite_5981ebbdbe938a87e290d4fcbf407034a576ac8069ddf69e98da1c0a323b502d': ['470453c054e8b0207d2078e1e976cc9ccdc31ab0e633fbae37a2c8d47d8861d8', 'db08e78a39dab70ab32e137a73c48b6c099d5b504c77b6f34ba77049be7d223a'],
                                                                          'composite_cf4f52fdf565a46b3c9e1b40d1747cbd764d3c7a0299eabc67d5344b614ff8f8': ['7bdac69a2c61ff47f72706c4421325958d0045540a13053995bfb6a004128147', 'a9d6302215c443e69072a524ced1d3a277168aa190d95f7a6a47174c89a9f18f'],
                                                                          'composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413': ['39c6aa2fac8e484a0dc4071257b55728e14d5ee0045fb1c593a81590151ce6ae', '29dfcbd9a11892edf64e9bd074f7b6f107544597e0b7e8b23ed70bd6ecb9bfee', '3a22c34c09ccc19e162cd1338d568daceb625112f454e139cd56c6977a99ad22', 'a3700b3973b693ba6f4261d9a5346ada6bf9898de1a55eab4a8e37b0562e2dbb'],
                                                                          'composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46': ['73a3d55951422b189fb8d81d6400e5c93e783b25b2e9b19bdff771ab3661f708', '29dfcbd9a11892edf64e9bd074f7b6f107544597e0b7e8b23ed70bd6ecb9bfee', '3a22c34c09ccc19e162cd1338d568daceb625112f454e139cd56c6977a99ad22', 'a3700b3973b693ba6f4261d9a5346ada6bf9898de1a55eab4a8e37b0562e2dbb'],
                                                                          'composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c': ['d4cde5417c25962d004da7eb3b1a8fa7b80e73f2df6755f556159ce7e0293a5c', '29dfcbd9a11892edf64e9bd074f7b6f107544597e0b7e8b23ed70bd6ecb9bfee', '3a22c34c09ccc19e162cd1338d568daceb625112f454e139cd56c6977a99ad22', 'a3700b3973b693ba6f4261d9a5346ada6bf9898de1a55eab4a8e37b0562e2dbb']},
                                          'queries_with_non_authoritative_session': [],
                                          'make_schema_resolver_timer': '0.000 seconds',
                                          'schema_resolver_count': 0,
                                          'num_unique_query_fingerprints': 49,
                                          'num_urns_with_lineage': 16,
                                          'num_lineage_skipped_due_to_filters': 0,
                                          'num_table_lineage_trimmed_due_to_large_size': 0,
                                          'num_column_lineage_trimmed_due_to_large_size': 0,
                                          'num_queries_entities_generated': 31,
                                          'num_queries_used_in_lineage': 13,
                                          'num_queries_skipped_due_to_filters': 23,
                                          'usage_skipped_missing_timestamp': 0,
                                          'num_query_usage_stats_generated': 25,
                                          'num_query_usage_stats_outside_window': 0,
                                          'num_operations_generated': 0,
                                          'num_operations_skipped_due_to_filters': 0,
                                          'tool_meta_report': {'num_queries_meta_extracted': {}, 'failures': []}},
                       'stored_proc_lineage': {'num_stored_proc_calls': 1,
                                               'num_related_queries': 6,
                                               'num_related_queries_without_proc_call': 0,
                                               'num_stored_proc_lineage_entries': 6,
                                               'num_stored_proc_calls_with_no_inputs': 0,
                                               'num_stored_proc_calls_with_no_outputs': 0},
                       'num_ddl_queries_dropped': 20,
                       'num_stream_queries_observed': 0,
                       'num_create_temp_view_queries_observed': 1,
                       'num_users': 73},
 'num_get_tables_for_schema_queries': 0,
 'num_get_tags_for_object_queries': 0,
 'num_get_tags_on_columns_for_table_queries': 0,
 'num_get_streams_for_schema_queries': 3,
 'rows_zero_objects_modified': 0,
 'edition': 'ENTERPRISE',
 'start_time': '2025-07-10 09:38:26.663551 (35.52 seconds ago)',
 'running_time': '35.52 seconds',
 'failures': [],
 'warnings': [],
 'infos': []}
Sink (file) report:
{'total_records_written': 189,
 'records_written_per_second': 5,
 'warnings': [],
 'failures': [],
 'start_time': '2025-07-10 09:38:26.536198 (35.65 seconds ago)',
 'current_time': '2025-07-10 09:39:02.188399 (now)',
 'total_duration_in_seconds': 35.65}

Pipeline finished successfully; produced 189 events in 35.52 seconds.
ERROR    datahub.testing.compare_metadata_json:compare_metadata_json.py:108 Metadata files differ (use `pytest --update-golden-files` to update):
Urn changed, urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.
Old aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD)
New aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD)

Urn changed, urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.
Old aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD)
New aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD)

Urn changed, urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.
Old aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD)
New aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD)

Urn changed, urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD):
<upstreamLineage> changed:
	Value of root[0] changed from 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null} to 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null}.
Old aspect:
    upstreams:
    - auditStamp:
        time: 1752130649151
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
    - auditStamp:
        time: 1752130649151
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
    - auditStamp:
        time: 1752130649151
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
    - auditStamp:
        time: 1752130649151
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
    - auditStamp:
        time: 1752130649151
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
    - auditStamp:
        time: 1752130649151
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
    - auditStamp:
        time: 1752130649151
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
New aspect:
    upstreams:
    - auditStamp:
        time: 1752133141684
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
    - auditStamp:
        time: 1752133141684
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
    - auditStamp:
        time: 1752133141684
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413

Urn changed, urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD):
<upstreamLineage> changed:
	Value of root[0] changed from 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null} to 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null}.
Old aspect:
    upstreams:
    - auditStamp:
        time: 1752130649153
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
    - auditStamp:
        time: 1752130649153
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
    - auditStamp:
        time: 1752130649153
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
    - auditStamp:
        time: 1752130649153
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
    - auditStamp:
        time: 1752130649153
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
    - auditStamp:
        time: 1752130649153
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
    - auditStamp:
        time: 1752130649153
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
New aspect:
    upstreams:
    - auditStamp:
        time: 1752133141685
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
    - auditStamp:
        time: 1752133141685
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
    - auditStamp:
        time: 1752133141685
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46

Urn changed, urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD):
<upstreamLineage> changed:
	Value of root[0] changed from 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null} to 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null}.
Old aspect:
    upstreams:
    - auditStamp:
        time: 1752130649154
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
    - auditStamp:
        time: 1752130649154
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
    - auditStamp:
        time: 1752130649154
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
    - auditStamp:
        time: 1752130649154
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
    - auditStamp:
        time: 1752130649154
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
    - auditStamp:
        time: 1752130649154
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
    - auditStamp:
        time: 1752130649154
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
New aspect:
    upstreams:
    - auditStamp:
        time: 1752133141686
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
    - auditStamp:
        time: 1752133141686
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
    - auditStamp:
        time: 1752133141686
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c

FAILED
integration/test_snowflake_queries_v2.py::Test::test_enterprise_usage 
--------------------------------------------------------------------------------------- live log call ----------------------------------------------------------------------------------------
INFO     datahub.ingestion.run.pipeline:pipeline.py:221 Sink configured successfully. 
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_connection.py:154 using authenticator type 'KEY_PAIR_AUTHENTICATOR'
WARNING  datahub.ingestion.source.state.stateful_ingestion_base:stateful_ingestion_base.py:144 Stateful ingestion is disabled, disabling enable_stateful_profiling config option as well
WARNING  datahub.ingestion.source.state.stateful_ingestion_base:stateful_ingestion_base.py:168 Stateful ingestion is disabled, disabling enable_stateful_usage_ingestion config option as well
WARNING  datahub.ingestion.source.state.stateful_ingestion_base:stateful_ingestion_base.py:119 Stateful ingestion is disabled, disabling enable_stateful_lineage_ingestion config option as well
INFO     datahub.ingestion.run.pipeline:pipeline.py:250 Source configured successfully.
INFO     datahub.ingestion.source.snowflake.snowflake_v2:snowflake_v2.py:677 Checking current version
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:678 Query #1: select CURRENT_VERSION()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:678 Query #1 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_v2:snowflake_v2.py:686 Checking current role
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:687 Query #2: select CURRENT_ROLE()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:687 Query #2 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_v2:snowflake_v2.py:695 Checking current warehouse
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:696 Query #3: select CURRENT_WAREHOUSE()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:696 Query #3 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_v2:snowflake_v2.py:705 Checking current edition
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:749 Query #4: show tags
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:749 Query #4 got 57 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:716 Query #5: select CURRENT_ACCOUNT()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:716 Query #5 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:719 Query #6: select CURRENT_REGION()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:719 Query #6 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: *: Metadata Extraction at 2025-07-10 07:39:05.304930+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:256 Query #7: show databases
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:256 Query #7 got 14 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:273 Query #8: 
        SELECT database_name AS "DATABASE_NAME",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        from "ASEEM_TEST_DB".information_schema.databases
        order by database_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:273 Query #8 got 13 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: SMOKE_TEST_DB: Metadata Extraction at 2025-07-10 07:39:06.263155+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:291 Query #9: 
        SELECT schema_name AS "SCHEMA_NAME",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        from "SMOKE_TEST_DB".information_schema.schemata
        WHERE schema_name != 'INFORMATION_SCHEMA'
        order by schema_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:291 Query #9 got 2 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:344 Query #10: 
        SELECT table_catalog AS "TABLE_CATALOG",
        table_schema AS "TABLE_SCHEMA",
        table_name AS "TABLE_NAME",
        table_type AS "TABLE_TYPE",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED" ,
        comment AS "COMMENT",
        row_count AS "ROW_COUNT",
        bytes AS "BYTES",
        clustering_key AS "CLUSTERING_KEY",
        auto_clustering_on AS "AUTO_CLUSTERING_ON",
        is_dynamic AS "IS_DYNAMIC",
        is_iceberg AS "IS_ICEBERG",
        is_hybrid AS "IS_HYBRID"
        FROM "SMOKE_TEST_DB".information_schema.tables t
        WHERE table_schema != 'INFORMATION_SCHEMA'
        and table_type in ( 'BASE TABLE', 'EXTERNAL TABLE')
        order by table_schema, table_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:344 Query #10 got 17 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:411 Query #11: SHOW VIEWS IN DATABASE "SMOKE_TEST_DB"
LIMIT 10000 ;

INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:411 Query #11 got 50 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:670 Query #12: SHOW STREAMS IN DATABASE "SMOKE_TEST_DB" LIMIT 10000 ;
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:670 Query #12 got 0 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:724 Query #13: 
        SELECT procedure_catalog AS "PROCEDURE_CATALOG",
        procedure_schema AS "PROCEDURE_SCHEMA",
        procedure_name AS "PROCEDURE_NAME",
        procedure_language AS "PROCEDURE_LANGUAGE",
        argument_signature AS "ARGUMENT_SIGNATURE",
        data_type AS "PROCEDURE_RETURN_TYPE",
        procedure_definition AS "PROCEDURE_DEFINITION",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        FROM "SMOKE_TEST_DB".information_schema.procedures
        order by procedure_schema, procedure_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:724 Query #13 got 0 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_schema_gen.py:241 Time spent in stage <SMOKE_TEST_DB: Metadata Extraction at 2025-07-10 07:39:06.263155+00:00>: 4.44 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: SMOKE_TEST_DB_2: Metadata Extraction at 2025-07-10 07:39:10.700688+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:291 Query #14: 
        SELECT schema_name AS "SCHEMA_NAME",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        from "SMOKE_TEST_DB_2".information_schema.schemata
        WHERE schema_name != 'INFORMATION_SCHEMA'
        order by schema_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:291 Query #14 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:344 Query #15: 
        SELECT table_catalog AS "TABLE_CATALOG",
        table_schema AS "TABLE_SCHEMA",
        table_name AS "TABLE_NAME",
        table_type AS "TABLE_TYPE",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED" ,
        comment AS "COMMENT",
        row_count AS "ROW_COUNT",
        bytes AS "BYTES",
        clustering_key AS "CLUSTERING_KEY",
        auto_clustering_on AS "AUTO_CLUSTERING_ON",
        is_dynamic AS "IS_DYNAMIC",
        is_iceberg AS "IS_ICEBERG",
        is_hybrid AS "IS_HYBRID"
        FROM "SMOKE_TEST_DB_2".information_schema.tables t
        WHERE table_schema != 'INFORMATION_SCHEMA'
        and table_type in ( 'BASE TABLE', 'EXTERNAL TABLE')
        order by table_schema, table_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:344 Query #15 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:411 Query #16: SHOW VIEWS IN DATABASE "SMOKE_TEST_DB_2"
LIMIT 10000 ;

INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:411 Query #16 got 48 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:670 Query #17: SHOW STREAMS IN DATABASE "SMOKE_TEST_DB_2" LIMIT 10000 ;
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:670 Query #17 got 0 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:724 Query #18: 
        SELECT procedure_catalog AS "PROCEDURE_CATALOG",
        procedure_schema AS "PROCEDURE_SCHEMA",
        procedure_name AS "PROCEDURE_NAME",
        procedure_language AS "PROCEDURE_LANGUAGE",
        argument_signature AS "ARGUMENT_SIGNATURE",
        data_type AS "PROCEDURE_RETURN_TYPE",
        procedure_definition AS "PROCEDURE_DEFINITION",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        FROM "SMOKE_TEST_DB_2".information_schema.procedures
        order by procedure_schema, procedure_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:724 Query #18 got 0 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_schema_gen.py:241 Time spent in stage <SMOKE_TEST_DB_2: Metadata Extraction at 2025-07-10 07:39:10.700688+00:00>: 3.67 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: *: External table DDL Lineage at 2025-07-10 07:39:14.367885+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema_gen.py:1276 Query #19: show external tables in account
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema_gen.py:1276 Query #19 got 5 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_schema_gen.py:246 Time spent in stage <*: External table DDL Lineage at 2025-07-10 07:39:14.367885+00:00>: 2.56 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_v2.py:523 Time spent in stage <*: Metadata Extraction at 2025-07-10 07:39:05.304930+00:00>: 11.62 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: *: View Parsing at 2025-07-10 07:39:16.930043+00:00
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_v2.py:572 Time spent in stage <*: View Parsing at 2025-07-10 07:39:16.930043+00:00>: 0.01 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: *: Queries Extraction at 2025-07-10 07:39:16.936685+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:336 Fetching users from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:338 Query #20: SELECT name as "NAME", email as "EMAIL" FROM SNOWFLAKE.ACCOUNT_USAGE.USERS
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:338 Query #20 got 73 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:230 Using local temp path: /var/folders/zc/qty7kt_919db2qnrl7wndl0m0000gn/T/tmpdcsthf6f
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:291 Fetching audit log into /var/folders/zc/qty7kt_919db2qnrl7wndl0m0000gn/T/tmpdcsthf6f/audit_log.sqlite
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:364 Fetching copy history from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:365 Query #21: 
        SELECT
            ARRAY_UNIQUE_AGG(h.stage_location) AS "UPSTREAM_LOCATIONS",
            concat(
                h.table_catalog_name, '.', h.table_schema_name,
                '.', h.table_name
            ) AS "DOWNSTREAM_TABLE_NAME"
        FROM
            snowflake.account_usage.copy_history h
        WHERE h.status in ('Loaded','Partially loaded')
            AND DOWNSTREAM_TABLE_NAME IS NOT NULL
            AND h.last_load_time >= to_timestamp_ltz(1751789040000, 3)
            AND h.last_load_time < to_timestamp_ltz(1751789940000, 3)
            AND NOT RLIKE(DOWNSTREAM_TABLE_NAME,'.*_swap','i')
        GROUP BY DOWNSTREAM_TABLE_NAME;
        
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:365 Query #21 got 4 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:407 Fetching query log from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:408 Query #22: WITH
fingerprinted_queries as (
    SELECT *,
        -- TODO: Generate better fingerprints for each query by pushing down regex logic.
        query_history.query_parameterized_hash as query_fingerprint,
        -- Optional and additional hash to be used for query deduplication and final query identity
        CASE 
            WHEN CONTAINS(query_history.query_text, '-- Hex query metadata:')
            -- Extract project id and hash it
            THEN CAST(HASH(
                REGEXP_SUBSTR(query_history.query_text, '"project_id"\\s*:\\s*"([^"]+)"', 1, 1, 'e', 1),
                REGEXP_SUBSTR(query_history.query_text, '"context"\\s*:\\s*"([^"]+)"', 1, 1, 'e', 1)
            ) AS VARCHAR)
            ELSE NULL 
        END as query_secondary_fingerprint
    FROM
        snowflake.account_usage.query_history
    WHERE
        query_history.start_time >= to_timestamp_ltz(1751789040000, 3) -- 2025-07-06T08:04:00+00:00
        AND query_history.start_time < to_timestamp_ltz(1751789940000, 3) -- 2025-07-06T08:19:00+00:00
        AND execution_status = 'SUCCESS'
        AND TRUE
)
, deduplicated_queries as (
    SELECT
        *,
        DATE_TRUNC(
            DAY,
            CONVERT_TIMEZONE('UTC', start_time)
        ) AS bucket_start_time,
        COUNT(*) OVER (PARTITION BY bucket_start_time, query_fingerprint, query_secondary_fingerprint) AS query_count,
    FROM
        fingerprinted_queries
    QUALIFY
        ROW_NUMBER() OVER (PARTITION BY bucket_start_time, query_fingerprint, query_secondary_fingerprint ORDER BY start_time DESC) = 1
)
, raw_access_history AS (
    SELECT
        query_id,
        root_query_id,
        query_start_time,
        user_name,
        direct_objects_accessed,
        objects_modified,
        object_modified_by_ddl
    FROM
        snowflake.account_usage.access_history
    WHERE
        query_start_time >= to_timestamp_ltz(1751789040000, 3) -- 2025-07-06T08:04:00+00:00
        AND query_start_time < to_timestamp_ltz(1751789940000, 3) -- 2025-07-06T08:19:00+00:00
        AND TRUE
        AND query_id IN (
            SELECT query_id FROM deduplicated_queries
        )
        AND (ARRAY_SIZE(FILTER(direct_objects_accessed, o -> (SPLIT_PART(UPPER(o:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB$' OR SPLIT_PART(UPPER(o:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB_2$'))) > 0 OR ARRAY_SIZE(FILTER(objects_modified, o -> (SPLIT_PART(UPPER(o:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB$' OR SPLIT_PART(UPPER(o:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB_2$'))) > 0 OR ((SPLIT_PART(UPPER(object_modified_by_ddl:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB$' OR SPLIT_PART(UPPER(object_modified_by_ddl:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB_2$')))
)
, filtered_access_history AS (
    -- TODO: Add table filter clause.
    SELECT
        query_id,
        root_query_id,
        query_start_time,
        ARRAY_SLICE(
            FILTER(direct_objects_accessed, o -> o:objectDomain IN ('Iceberg table','External table','Table','View','Stream','Materialized view')),
            0, 20
        ) as direct_objects_accessed,
        -- TODO: Drop the columns.baseSources subfield.
        FILTER(objects_modified, o -> o:objectDomain IN ('Iceberg table','External table','Table','View','Stream','Materialized view')) as objects_modified,
        case when object_modified_by_ddl:objectDomain IN ('Iceberg table','External table','Table','View','Stream','Materialized view') then object_modified_by_ddl else null end as object_modified_by_ddl
    FROM raw_access_history
    WHERE ( array_size(direct_objects_accessed) > 0 or array_size(objects_modified) > 0 or object_modified_by_ddl is not null )
)
, query_access_history AS (
    SELECT
        q.bucket_start_time,
        q.query_id,
        q.query_fingerprint,
        q.query_secondary_fingerprint,
        q.query_count,
        q.session_id AS "SESSION_ID",
        q.start_time AS "QUERY_START_TIME",
        q.total_elapsed_time AS "QUERY_DURATION",
        q.query_text AS "QUERY_TEXT",
        q.query_type AS "QUERY_TYPE",
        q.database_name as "DEFAULT_DB",
        q.schema_name as "DEFAULT_SCHEMA",
        q.rows_inserted AS "ROWS_INSERTED",
        q.rows_updated AS "ROWS_UPDATED",
        q.rows_deleted AS "ROWS_DELETED",
        q.user_name AS "USER_NAME",
        q.role_name AS "ROLE_NAME",
        a.root_query_id,
        a.direct_objects_accessed,
        a.objects_modified,
        a.object_modified_by_ddl
    FROM deduplicated_queries q
    JOIN filtered_access_history a USING (query_id)
)
SELECT * FROM query_access_history
-- Our query aggregator expects the queries to be added in chronological order.
-- It's easier for us to push down the sorting to Snowflake/SQL instead of doing it in Python.
ORDER BY QUERY_START_TIME ASC

INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:408 Query #22 got 68 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:312 Added 0 query log entries to SQL aggregator
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_v2.py:575 Time spent in stage <*: Queries Extraction at 2025-07-10 07:39:16.936685+00:00>: 9.9 seconds

Cli report:
{'cli_version': 'unavailable (installed in develop mode)',
 'cli_entry_location': '/Users/sergio/workspace/github/datahub-project/datahub/metadata-ingestion/src/datahub/ingestion/run/pipeline.py',
 'models_version': 'bundled',
 'py_version': '3.11.11 (main, Mar 17 2025, 21:33:08) [Clang 20.1.0 ]',
 'py_exec_path': '/Users/sergio/workspace/github/acryldata/connector-tests/venv/bin/python3',
 'os_details': 'macOS-15.5-arm64-arm-64bit',
 'mem_info': '435.65 MB',
 'peak_memory_usage': '435.65 MB',
 'disk_info': {'total': '994.66 GB', 'used': '297.46 GB', 'used_initally': '297.46 GB', 'free': '697.2 GB'},
 'peak_disk_usage': '297.46 GB',
 'thread_count': 1,
 'peak_thread_count': 1}
Source (snowflake) report:
{'ingestion_stage_durations': {'SMOKE_TEST_DB: Metadata Extraction at 2025-07-10 07:39:06.263155+00:00': 4.44,
                               'SMOKE_TEST_DB_2: Metadata Extraction at 2025-07-10 07:39:10.700688+00:00': 3.67,
                               '*: External table DDL Lineage at 2025-07-10 07:39:14.367885+00:00': 2.56,
                               '*: Metadata Extraction at 2025-07-10 07:39:05.304930+00:00': 11.62,
                               '*: View Parsing at 2025-07-10 07:39:16.930043+00:00': 0.01,
                               '*: Queries Extraction at 2025-07-10 07:39:16.936685+00:00': 9.9},
 'window_end_time': '2025-07-06 08:19:00+00:00 (3 days, 23 hours and 20 minutes ago)',
 'window_start_time': '2025-07-06 08:04:00+00:00 (3 days, 23 hours and 35 minutes ago)',
 'profiling_skipped_not_updated': {},
 'profiling_skipped_size_limit': {},
 'profiling_skipped_row_limit': {},
 'profiling_skipped_table_profile_pattern': {},
 'profiling_skipped_other': {},
 'num_tables_not_eligible_profiling': {},
 'num_tables_fetch_sample_values_failed': 0,
 'num_tables_classification_attempted': 0,
 'num_tables_classification_failed': 0,
 'num_tables_classification_found': 0,
 'info_types_detected': {},
 'aspects': {'dataset': {'datasetUsageStatistics': 10, 'operation': 16, 'status': 19, 'upstreamLineage': 3},
             'query': {'dataPlatformInstance': 38, 'queryProperties': 38, 'querySubjects': 38, 'queryUsageStatistics': 36, 'status': 38}},
 'aspects_by_subtypes': {'dataset': {'unknown': {'datasetUsageStatistics': 10, 'operation': 16, 'status': 19, 'upstreamLineage': 3}},
                         'query': {'unknown': {'dataPlatformInstance': 38,
                                               'queryProperties': 38,
                                               'querySubjects': 38,
                                               'queryUsageStatistics': 36,
                                               'status': 38}}},
 'samples': {'usage': {'unknown': ['urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.base_table,PROD)',
                                   'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.lineage_from_base,PROD)',
                                   'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.person_distinct_names,PROD)',
                                   'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.person_info,PROD)',
                                   'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.person_info2,PROD)',
                                   'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.person_info_tmp,PROD)',
                                   'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.table_from_view,PROD)',
                                   'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.table_from_view_and_table,PROD)',
                                   'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.view_from_table,PROD)',
                                   'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db_2.public.table_from_other_db,PROD)']},
             'lineage': {'unknown': ['urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.covid19_external_table,PROD)',
                                     'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.simple_secure_view,PROD)',
                                     'urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.public.view_from_table,PROD)']}},
 'event_not_produced_warn': True,
 'events_produced': 237,
 'events_produced_per_sec': 9,
 'access_history_range_query_secs': -1,
 'access_history_query_secs': -1,
 'rows_processed': 0,
 'rows_missing_query_text': 0,
 'rows_zero_base_objects_accessed': 0,
 'rows_zero_direct_objects_accessed': 0,
 'rows_missing_email': 0,
 'rows_parsing_error': 0,
 'usage_start_time': '2025-07-06 08:04:00+00:00 (3 days, 23 hours and 35 minutes ago)',
 'usage_end_time': '2025-07-06 08:19:00+00:00 (3 days, 23 hours and 20 minutes ago)',
 'stateful_usage_ingestion_enabled': False,
 'usage_aggregation': {'query_secs': -1,
                       'query_row_count': -1,
                       'result_fetch_timer': None,
                       'result_skip_timer': None,
                       'result_map_timer': None,
                       'users_map_timer': None,
                       'queries_map_timer': None,
                       'fields_map_timer': None},
 'soft_deleted_stale_entities': [],
 'last_state_non_deletable_entities': [],
 'tables_scanned': 18,
 'views_scanned': 2,
 'entities_profiled': 0,
 'filtered': ['ASEEM_TEST_DB.*',
              'CORTEXDEMO.*',
              'DEMO_DB.*',
              'DEMO_PIPELINE.*',
              'FIVETRAN_SMOKE_TEST_DB.*',
              'HARSHAL_PLAYGROUND_1.*',
              'LONG_TAIL_COMPANIONS.*',
              'SMOKE_TEST_DB_PROFILING2.*',
              'SNOWFLAKE_SAMPLE_DATA.*',
              'UTIL_DB.*',
              '... sampled of 11 total elements'],
 'num_view_definitions_parsed': 0,
 'num_view_definitions_view_urn_mismatch': 0,
 'num_view_definitions_failed_parsing': 0,
 'num_view_definitions_failed_column_parsing': 0,
 'view_definitions_parsing_failures': [],
 'sql_aggregator': {'num_observed_queries': 0,
                    'num_observed_queries_failed': 0,
                    'num_observed_queries_column_timeout': 0,
                    'num_observed_queries_column_failed': 0,
                    'observed_query_parse_failures': [],
                    'num_view_definitions': 2,
                    'num_views_failed': 0,
                    'num_views_column_timeout': 0,
                    'num_views_column_failed': 0,
                    'views_parse_failures': {},
                    'num_sql_parsed': 2,
                    'sql_parsing_timer': '0.003 seconds',
                    'sql_fingerprinting_timer': None,
                    'sql_formatting_timer': None,
                    'sql_parsing_cache_stats': {'hits': 0, 'misses': 6, 'maxsize': 1000, 'currsize': 6},
                    'parse_statement_cache_stats': {'hits': 3, 'misses': 3, 'maxsize': 1000, 'currsize': 3},
                    'format_query_cache_stats': {'hits': 0, 'misses': 0, 'maxsize': 1000, 'currsize': 0},
                    'num_known_query_lineage': 0,
                    'num_preparsed_queries': 0,
                    'num_known_mapping_lineage': 1,
                    'num_table_renames': 0,
                    'num_table_swaps': 0,
                    'num_temp_sessions': 0,
                    'num_inferred_temp_schemas': 0,
                    'num_queries_with_temp_tables_in_session': 0,
                    'queries_with_temp_upstreams': {},
                    'queries_with_non_authoritative_session': [],
                    'make_schema_resolver_timer': None,
                    'schema_resolver_count': 0,
                    'num_unique_query_fingerprints': 3,
                    'num_urns_with_lineage': 3,
                    'num_lineage_skipped_due_to_filters': 0,
                    'num_table_lineage_trimmed_due_to_large_size': 0,
                    'num_column_lineage_trimmed_due_to_large_size': 0,
                    'num_queries_entities_generated': 2,
                    'num_queries_used_in_lineage': 3,
                    'num_queries_skipped_due_to_filters': 0,
                    'usage_skipped_missing_timestamp': 0,
                    'num_query_usage_stats_generated': 0,
                    'num_query_usage_stats_outside_window': 0,
                    'num_operations_generated': 0,
                    'num_operations_skipped_due_to_filters': 0,
                    'tool_meta_report': {'num_queries_meta_extracted': {}, 'failures': []}},
 'num_table_to_table_edges_scanned': 0,
 'num_table_to_view_edges_scanned': 0,
 'num_view_to_table_edges_scanned': 0,
 'num_external_table_edges_scanned': 2,
 'ignore_start_time_lineage': False,
 'upstream_lineage_in_report': False,
 'upstream_lineage': {},
 'stateful_lineage_ingestion_enabled': False,
 'cleaned_account_id': 'xaa48144',
 'run_ingestion': False,
 'saas_version': '9.18.1',
 'default_warehouse': 'SMOKE_TEST',
 'role': 'DATAHUB_ROLE',
 'profile_candidates': {},
 'account_locator': 'XAA48144',
 'region': 'AWS_US_WEST_2',
 'schemas_scanned': 3,
 'databases_scanned': 13,
 'tags_scanned': 0,
 'streams_scanned': 0,
 'procedures_scanned': 0,
 'include_usage_stats': True,
 'include_operational_stats': True,
 'include_technical_schema': False,
 'include_column_lineage': False,
 'table_lineage_query_secs': -1,
 'external_lineage_queries_secs': -1,
 'num_tables_with_known_upstreams': 0,
 'num_streams_with_known_upstreams': 0,
 'num_upstream_lineage_edge_parsing_failed': 0,
 'num_secure_views_missing_definition': 0,
 'num_structured_property_templates_created': 0,
 'data_dictionary_cache': {'get_tables_for_database': {'hits': 2, 'misses': 4, 'maxsize': 1, 'currsize': 1},
                           'get_views_for_database': {'hits': 2, 'misses': 4, 'maxsize': 1, 'currsize': 1},
                           'get_columns_for_schema': {'hits': 0, 'misses': 0, 'maxsize': 20, 'currsize': 0},
                           'get_streams_for_database': {'hits': 2, 'misses': 4, 'maxsize': 1, 'currsize': 1},
                           'get_pk_constraints_for_schema': {'hits': 0, 'misses': 0, 'maxsize': 20, 'currsize': 0},
                           'get_fk_constraints_for_schema': {'hits': 0, 'misses': 0, 'maxsize': 20, 'currsize': 0}},
 'queries_extractor': {'copy_history_fetch_timer': '2.988 seconds',
                       'query_log_fetch_timer': '4.898 seconds',
                       'users_fetch_timer': '1.952 seconds',
                       'audit_log_load_timer': '0.008 seconds',
                       'aggregator_generate_timer': '0.041 seconds',
                       'sql_aggregator': {'num_observed_queries': 1,
                                          'num_observed_queries_failed': 0,
                                          'num_observed_queries_column_timeout': 0,
                                          'num_observed_queries_column_failed': 0,
                                          'observed_query_parse_failures': [],
                                          'num_view_definitions': 0,
                                          'num_views_failed': 0,
                                          'num_views_column_timeout': 0,
                                          'num_views_column_failed': 0,
                                          'views_parse_failures': {},
                                          'num_sql_parsed': 1,
                                          'sql_parsing_timer': '0.003 seconds',
                                          'sql_fingerprinting_timer': None,
                                          'sql_formatting_timer': None,
                                          'sql_parsing_cache_stats': {'hits': 0, 'misses': 6, 'maxsize': 1000, 'currsize': 6},
                                          'parse_statement_cache_stats': {'hits': 3, 'misses': 3, 'maxsize': 1000, 'currsize': 3},
                                          'format_query_cache_stats': {'hits': 0, 'misses': 0, 'maxsize': 1000, 'currsize': 0},
                                          'num_known_query_lineage': 0,
                                          'num_preparsed_queries': 48,
                                          'num_known_mapping_lineage': 1,
                                          'num_table_renames': 1,
                                          'num_table_swaps': 1,
                                          'num_temp_sessions': 2,
                                          'num_inferred_temp_schemas': 0,
                                          'num_queries_with_temp_tables_in_session': 0,
                                          'queries_with_temp_upstreams': {},
                                          'queries_with_non_authoritative_session': [],
                                          'make_schema_resolver_timer': '0.000 seconds',
                                          'schema_resolver_count': 0,
                                          'num_unique_query_fingerprints': 49,
                                          'num_urns_with_lineage': 16,
                                          'num_lineage_skipped_due_to_filters': 0,
                                          'num_table_lineage_trimmed_due_to_large_size': 0,
                                          'num_column_lineage_trimmed_due_to_large_size': 0,
                                          'num_queries_entities_generated': 36,
                                          'num_queries_used_in_lineage': 0,
                                          'num_queries_skipped_due_to_filters': 12,
                                          'usage_skipped_missing_timestamp': 0,
                                          'num_query_usage_stats_generated': 36,
                                          'num_query_usage_stats_outside_window': 0,
                                          'num_operations_generated': 17,
                                          'num_operations_skipped_due_to_filters': 0,
                                          'tool_meta_report': {'num_queries_meta_extracted': {}, 'failures': []}},
                       'stored_proc_lineage': {'num_stored_proc_calls': 1,
                                               'num_related_queries': 6,
                                               'num_related_queries_without_proc_call': 0,
                                               'num_stored_proc_lineage_entries': 6,
                                               'num_stored_proc_calls_with_no_inputs': 0,
                                               'num_stored_proc_calls_with_no_outputs': 0},
                       'num_ddl_queries_dropped': 20,
                       'num_stream_queries_observed': 0,
                       'num_create_temp_view_queries_observed': 1,
                       'num_users': 73},
 'num_get_tables_for_schema_queries': 0,
 'num_get_tags_for_object_queries': 0,
 'num_get_tags_on_columns_for_table_queries': 0,
 'num_get_streams_for_schema_queries': 3,
 'rows_zero_objects_modified': 0,
 'edition': 'ENTERPRISE',
 'start_time': '2025-07-10 09:39:02.286855 (25.04 seconds ago)',
 'running_time': '25.04 seconds',
 'failures': [],
 'warnings': [],
 'infos': []}
Sink (file) report:
{'total_records_written': 253,
 'records_written_per_second': 10,
 'warnings': [],
 'failures': [],
 'start_time': '2025-07-10 09:39:02.285146 (25.05 seconds ago)',
 'current_time': '2025-07-10 09:39:27.330975 (now)',
 'total_duration_in_seconds': 25.05}

Pipeline finished successfully; produced 253 events in 25.04 seconds.
ERROR    datahub.testing.compare_metadata_json:compare_metadata_json.py:108 Metadata files differ (use `pytest --update-golden-files` to update):
Urn changed, urn:li:query:73a3d55951422b189fb8d81d6400e5c93e783b25b2e9b19bdff771ab3661f708:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.
Old aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD)
New aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD)

Urn changed, urn:li:query:39c6aa2fac8e484a0dc4071257b55728e14d5ee0045fb1c593a81590151ce6ae:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.
Old aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD)
New aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD)

Urn changed, urn:li:query:d4cde5417c25962d004da7eb3b1a8fa7b80e73f2df6755f556159ce7e0293a5c:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.
Old aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD)
New aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD)

FAILED

========================================================================================== FAILURES ==========================================================================================
________________________________________________________________________________ Test.test_enterprise_lineage ________________________________________________________________________________
Metadata files differ (use `pytest --update-golden-files` to update):
Urn changed, urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.

Urn changed, urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.

Urn changed, urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.

Urn changed, urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD):
<upstreamLineage> changed:
	Value of root[0] changed from 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null} to 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null}.

Urn changed, urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD):
<upstreamLineage> changed:
	Value of root[0] changed from 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null} to 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null}.

Urn changed, urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD):
<upstreamLineage> changed:
	Value of root[0] changed from 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null} to 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null}.

------------------------------------------------------------------------------------- Captured log setup -------------------------------------------------------------------------------------
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.address`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.address` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.automotive`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.automotive` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.bank`.
DEBUG    faker.factory:factory.py:88 Specified locale `en_US` is not available for provider `faker.providers.bank`. Locale reset to `en_GB` for this provider.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.barcode`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.barcode` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.color`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.color` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.company`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.company` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.credit_card`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.credit_card` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.currency`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.currency` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.date_time`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.date_time` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:108 Provider `faker.providers.doi` does not feature localization. Specified locale `en_US` is not utilized for this provider.
DEBUG    faker.factory:factory.py:108 Provider `faker.providers.emoji` does not feature localization. Specified locale `en_US` is not utilized for this provider.
DEBUG    faker.factory:factory.py:108 Provider `faker.providers.file` does not feature localization. Specified locale `en_US` is not utilized for this provider.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.geo`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.geo` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.internet`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.internet` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.isbn`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.isbn` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.job`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.job` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.lorem`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.lorem` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.misc`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.misc` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.passport`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.passport` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.person`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.person` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.phone_number`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.phone_number` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:108 Provider `faker.providers.profile` does not feature localization. Specified locale `en_US` is not utilized for this provider.
DEBUG    faker.factory:factory.py:108 Provider `faker.providers.python` does not feature localization. Specified locale `en_US` is not utilized for this provider.
DEBUG    faker.factory:factory.py:108 Provider `faker.providers.sbn` does not feature localization. Specified locale `en_US` is not utilized for this provider.
DEBUG    faker.factory:factory.py:78 Looking for locale `en_US` in provider `faker.providers.ssn`.
DEBUG    faker.factory:factory.py:97 Provider `faker.providers.ssn` has been localized to `en_US`.
DEBUG    faker.factory:factory.py:108 Provider `faker.providers.user_agent` does not feature localization. Specified locale `en_US` is not utilized for this provider.
------------------------------------------------------------------------------------- Captured log call --------------------------------------------------------------------------------------
INFO     datahub.ingestion.run.pipeline:pipeline.py:221 Sink configured successfully. 
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_connection.py:154 using authenticator type 'KEY_PAIR_AUTHENTICATOR'
WARNING  datahub.ingestion.source.state.stateful_ingestion_base:stateful_ingestion_base.py:144 Stateful ingestion is disabled, disabling enable_stateful_profiling config option as well
WARNING  datahub.ingestion.source.state.stateful_ingestion_base:stateful_ingestion_base.py:168 Stateful ingestion is disabled, disabling enable_stateful_usage_ingestion config option as well
WARNING  datahub.ingestion.source.state.stateful_ingestion_base:stateful_ingestion_base.py:119 Stateful ingestion is disabled, disabling enable_stateful_lineage_ingestion config option as well
INFO     datahub.ingestion.run.pipeline:pipeline.py:250 Source configured successfully.
INFO     datahub.ingestion.source.snowflake.snowflake_v2:snowflake_v2.py:677 Checking current version
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:678 Query #1: select CURRENT_VERSION()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:678 Query #1 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_v2:snowflake_v2.py:686 Checking current role
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:687 Query #2: select CURRENT_ROLE()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:687 Query #2 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_v2:snowflake_v2.py:695 Checking current warehouse
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:696 Query #3: select CURRENT_WAREHOUSE()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:696 Query #3 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_v2:snowflake_v2.py:705 Checking current edition
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:749 Query #4: show tags
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:749 Query #4 got 57 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:716 Query #5: select CURRENT_ACCOUNT()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:716 Query #5 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:719 Query #6: select CURRENT_REGION()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:719 Query #6 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: *: Metadata Extraction at 2025-07-10 07:38:30.466257+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:256 Query #7: show databases
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:256 Query #7 got 14 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:273 Query #8: 
        SELECT database_name AS "DATABASE_NAME",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        from "ASEEM_TEST_DB".information_schema.databases
        order by database_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:273 Query #8 got 13 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: SMOKE_TEST_DB: Metadata Extraction at 2025-07-10 07:38:31.883723+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:291 Query #9: 
        SELECT schema_name AS "SCHEMA_NAME",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        from "SMOKE_TEST_DB".information_schema.schemata
        WHERE schema_name != 'INFORMATION_SCHEMA'
        order by schema_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:291 Query #9 got 2 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:344 Query #10: 
        SELECT table_catalog AS "TABLE_CATALOG",
        table_schema AS "TABLE_SCHEMA",
        table_name AS "TABLE_NAME",
        table_type AS "TABLE_TYPE",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED" ,
        comment AS "COMMENT",
        row_count AS "ROW_COUNT",
        bytes AS "BYTES",
        clustering_key AS "CLUSTERING_KEY",
        auto_clustering_on AS "AUTO_CLUSTERING_ON",
        is_dynamic AS "IS_DYNAMIC",
        is_iceberg AS "IS_ICEBERG",
        is_hybrid AS "IS_HYBRID"
        FROM "SMOKE_TEST_DB".information_schema.tables t
        WHERE table_schema != 'INFORMATION_SCHEMA'
        and table_type in ( 'BASE TABLE', 'EXTERNAL TABLE')
        order by table_schema, table_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:344 Query #10 got 17 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:411 Query #11: SHOW VIEWS IN DATABASE "SMOKE_TEST_DB"
LIMIT 10000 ;

INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:411 Query #11 got 50 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:670 Query #12: SHOW STREAMS IN DATABASE "SMOKE_TEST_DB" LIMIT 10000 ;
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:670 Query #12 got 0 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:724 Query #13: 
        SELECT procedure_catalog AS "PROCEDURE_CATALOG",
        procedure_schema AS "PROCEDURE_SCHEMA",
        procedure_name AS "PROCEDURE_NAME",
        procedure_language AS "PROCEDURE_LANGUAGE",
        argument_signature AS "ARGUMENT_SIGNATURE",
        data_type AS "PROCEDURE_RETURN_TYPE",
        procedure_definition AS "PROCEDURE_DEFINITION",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        FROM "SMOKE_TEST_DB".information_schema.procedures
        order by procedure_schema, procedure_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:724 Query #13 got 0 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_schema_gen.py:241 Time spent in stage <SMOKE_TEST_DB: Metadata Extraction at 2025-07-10 07:38:31.883723+00:00>: 3.81 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: SMOKE_TEST_DB_2: Metadata Extraction at 2025-07-10 07:38:35.698212+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:291 Query #14: 
        SELECT schema_name AS "SCHEMA_NAME",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        from "SMOKE_TEST_DB_2".information_schema.schemata
        WHERE schema_name != 'INFORMATION_SCHEMA'
        order by schema_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:291 Query #14 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:344 Query #15: 
        SELECT table_catalog AS "TABLE_CATALOG",
        table_schema AS "TABLE_SCHEMA",
        table_name AS "TABLE_NAME",
        table_type AS "TABLE_TYPE",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED" ,
        comment AS "COMMENT",
        row_count AS "ROW_COUNT",
        bytes AS "BYTES",
        clustering_key AS "CLUSTERING_KEY",
        auto_clustering_on AS "AUTO_CLUSTERING_ON",
        is_dynamic AS "IS_DYNAMIC",
        is_iceberg AS "IS_ICEBERG",
        is_hybrid AS "IS_HYBRID"
        FROM "SMOKE_TEST_DB_2".information_schema.tables t
        WHERE table_schema != 'INFORMATION_SCHEMA'
        and table_type in ( 'BASE TABLE', 'EXTERNAL TABLE')
        order by table_schema, table_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:344 Query #15 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:411 Query #16: SHOW VIEWS IN DATABASE "SMOKE_TEST_DB_2"
LIMIT 10000 ;

INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:411 Query #16 got 48 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:670 Query #17: SHOW STREAMS IN DATABASE "SMOKE_TEST_DB_2" LIMIT 10000 ;
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:670 Query #17 got 0 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:724 Query #18: 
        SELECT procedure_catalog AS "PROCEDURE_CATALOG",
        procedure_schema AS "PROCEDURE_SCHEMA",
        procedure_name AS "PROCEDURE_NAME",
        procedure_language AS "PROCEDURE_LANGUAGE",
        argument_signature AS "ARGUMENT_SIGNATURE",
        data_type AS "PROCEDURE_RETURN_TYPE",
        procedure_definition AS "PROCEDURE_DEFINITION",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        FROM "SMOKE_TEST_DB_2".information_schema.procedures
        order by procedure_schema, procedure_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:724 Query #18 got 0 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_schema_gen.py:241 Time spent in stage <SMOKE_TEST_DB_2: Metadata Extraction at 2025-07-10 07:38:35.698212+00:00>: 5.62 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: *: External table DDL Lineage at 2025-07-10 07:38:41.316362+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema_gen.py:1276 Query #19: show external tables in account
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema_gen.py:1276 Query #19 got 5 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_schema_gen.py:246 Time spent in stage <*: External table DDL Lineage at 2025-07-10 07:38:41.316362+00:00>: 3.67 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_v2.py:523 Time spent in stage <*: Metadata Extraction at 2025-07-10 07:38:30.466257+00:00>: 14.52 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: *: View Parsing at 2025-07-10 07:38:44.990719+00:00
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_v2.py:572 Time spent in stage <*: View Parsing at 2025-07-10 07:38:44.990719+00:00>: 0.03 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: *: Queries Extraction at 2025-07-10 07:38:45.024407+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:336 Fetching users from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:338 Query #20: SELECT name as "NAME", email as "EMAIL" FROM SNOWFLAKE.ACCOUNT_USAGE.USERS
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:338 Query #20 got 73 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:230 Using local temp path: /var/folders/zc/qty7kt_919db2qnrl7wndl0m0000gn/T/tmpecnsw66q
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:291 Fetching audit log into /var/folders/zc/qty7kt_919db2qnrl7wndl0m0000gn/T/tmpecnsw66q/audit_log.sqlite
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:364 Fetching copy history from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:365 Query #21: 
        SELECT
            ARRAY_UNIQUE_AGG(h.stage_location) AS "UPSTREAM_LOCATIONS",
            concat(
                h.table_catalog_name, '.', h.table_schema_name,
                '.', h.table_name
            ) AS "DOWNSTREAM_TABLE_NAME"
        FROM
            snowflake.account_usage.copy_history h
        WHERE h.status in ('Loaded','Partially loaded')
            AND DOWNSTREAM_TABLE_NAME IS NOT NULL
            AND h.last_load_time >= to_timestamp_ltz(1751789040000, 3)
            AND h.last_load_time < to_timestamp_ltz(1751789940000, 3)
            AND NOT RLIKE(DOWNSTREAM_TABLE_NAME,'.*\.FIVETRAN_.*_STAGING\..*','i') AND NOT RLIKE(DOWNSTREAM_TABLE_NAME,'.*__DBT_TMP$','i') AND NOT RLIKE(DOWNSTREAM_TABLE_NAME,'.*\.SEGMENT_[a-f0-9]{8}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{12}','i') AND NOT RLIKE(DOWNSTREAM_TABLE_NAME,'.*\.STAGING_.*_[a-f0-9]{8}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{12}','i') AND NOT RLIKE(DOWNSTREAM_TABLE_NAME,'.*\.(GE_TMP_|GE_TEMP_|GX_TEMP_)[0-9A-F]{8}','i') AND NOT RLIKE(DOWNSTREAM_TABLE_NAME,'.*\.SNOWPARK_TEMP_TABLE_.+','i')
        GROUP BY DOWNSTREAM_TABLE_NAME;
        
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:365 Query #21 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:407 Fetching query log from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:408 Query #22: WITH
fingerprinted_queries as (
    SELECT *,
        -- TODO: Generate better fingerprints for each query by pushing down regex logic.
        query_history.query_parameterized_hash as query_fingerprint,
        -- Optional and additional hash to be used for query deduplication and final query identity
        CASE 
            WHEN CONTAINS(query_history.query_text, '-- Hex query metadata:')
            -- Extract project id and hash it
            THEN CAST(HASH(
                REGEXP_SUBSTR(query_history.query_text, '"project_id"\\s*:\\s*"([^"]+)"', 1, 1, 'e', 1),
                REGEXP_SUBSTR(query_history.query_text, '"context"\\s*:\\s*"([^"]+)"', 1, 1, 'e', 1)
            ) AS VARCHAR)
            ELSE NULL 
        END as query_secondary_fingerprint
    FROM
        snowflake.account_usage.query_history
    WHERE
        query_history.start_time >= to_timestamp_ltz(1751789040000, 3) -- 2025-07-06T08:04:00+00:00
        AND query_history.start_time < to_timestamp_ltz(1751789940000, 3) -- 2025-07-06T08:19:00+00:00
        AND execution_status = 'SUCCESS'
        AND TRUE
)
, deduplicated_queries as (
    SELECT
        *,
        DATE_TRUNC(
            DAY,
            CONVERT_TIMEZONE('UTC', start_time)
        ) AS bucket_start_time,
        COUNT(*) OVER (PARTITION BY bucket_start_time, query_fingerprint, query_secondary_fingerprint) AS query_count,
    FROM
        fingerprinted_queries
    QUALIFY
        ROW_NUMBER() OVER (PARTITION BY bucket_start_time, query_fingerprint, query_secondary_fingerprint ORDER BY start_time DESC) = 1
)
, raw_access_history AS (
    SELECT
        query_id,
        root_query_id,
        query_start_time,
        user_name,
        direct_objects_accessed,
        objects_modified,
        object_modified_by_ddl
    FROM
        snowflake.account_usage.access_history
    WHERE
        query_start_time >= to_timestamp_ltz(1751789040000, 3) -- 2025-07-06T08:04:00+00:00
        AND query_start_time < to_timestamp_ltz(1751789940000, 3) -- 2025-07-06T08:19:00+00:00
        AND TRUE
        AND query_id IN (
            SELECT query_id FROM deduplicated_queries
        )
        AND (ARRAY_SIZE(FILTER(direct_objects_accessed, o -> (SPLIT_PART(UPPER(o:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB$' OR SPLIT_PART(UPPER(o:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB_2$'))) > 0 OR ARRAY_SIZE(FILTER(objects_modified, o -> (SPLIT_PART(UPPER(o:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB$' OR SPLIT_PART(UPPER(o:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB_2$'))) > 0 OR ((SPLIT_PART(UPPER(object_modified_by_ddl:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB$' OR SPLIT_PART(UPPER(object_modified_by_ddl:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB_2$')))
)
, filtered_access_history AS (
    -- TODO: Add table filter clause.
    SELECT
        query_id,
        root_query_id,
        query_start_time,
        ARRAY_SLICE(
            FILTER(direct_objects_accessed, o -> o:objectDomain IN ('Iceberg table','External table','Table','View','Stream','Materialized view')),
            0, 20
        ) as direct_objects_accessed,
        -- TODO: Drop the columns.baseSources subfield.
        FILTER(objects_modified, o -> o:objectDomain IN ('Iceberg table','External table','Table','View','Stream','Materialized view')) as objects_modified,
        case when object_modified_by_ddl:objectDomain IN ('Iceberg table','External table','Table','View','Stream','Materialized view') then object_modified_by_ddl else null end as object_modified_by_ddl
    FROM raw_access_history
    WHERE ( array_size(direct_objects_accessed) > 0 or array_size(objects_modified) > 0 or object_modified_by_ddl is not null )
)
, query_access_history AS (
    SELECT
        q.bucket_start_time,
        q.query_id,
        q.query_fingerprint,
        q.query_secondary_fingerprint,
        q.query_count,
        q.session_id AS "SESSION_ID",
        q.start_time AS "QUERY_START_TIME",
        q.total_elapsed_time AS "QUERY_DURATION",
        q.query_text AS "QUERY_TEXT",
        q.query_type AS "QUERY_TYPE",
        q.database_name as "DEFAULT_DB",
        q.schema_name as "DEFAULT_SCHEMA",
        q.rows_inserted AS "ROWS_INSERTED",
        q.rows_updated AS "ROWS_UPDATED",
        q.rows_deleted AS "ROWS_DELETED",
        q.user_name AS "USER_NAME",
        q.role_name AS "ROLE_NAME",
        a.root_query_id,
        a.direct_objects_accessed,
        a.objects_modified,
        a.object_modified_by_ddl
    FROM deduplicated_queries q
    JOIN filtered_access_history a USING (query_id)
)
SELECT * FROM query_access_history
-- Our query aggregator expects the queries to be added in chronological order.
-- It's easier for us to push down the sorting to Snowflake/SQL instead of doing it in Python.
ORDER BY QUERY_START_TIME ASC

INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:408 Query #22 got 68 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:312 Added 0 query log entries to SQL aggregator
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_v2.py:575 Time spent in stage <*: Queries Extraction at 2025-07-10 07:38:45.024407+00:00>: 16.68 seconds
ERROR    datahub.testing.compare_metadata_json:compare_metadata_json.py:108 Metadata files differ (use `pytest --update-golden-files` to update):
Urn changed, urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.
Old aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD)
New aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD)

Urn changed, urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.
Old aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD)
New aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD)

Urn changed, urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.
Old aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD)
New aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD)

Urn changed, urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD):
<upstreamLineage> changed:
	Value of root[0] changed from 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null} to 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null}.
Old aspect:
    upstreams:
    - auditStamp:
        time: 1752130649151
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
    - auditStamp:
        time: 1752130649151
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
    - auditStamp:
        time: 1752130649151
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
    - auditStamp:
        time: 1752130649151
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
    - auditStamp:
        time: 1752130649151
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
    - auditStamp:
        time: 1752130649151
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
    - auditStamp:
        time: 1752130649151
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
New aspect:
    upstreams:
    - auditStamp:
        time: 1752133141684
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
    - auditStamp:
        time: 1752133141684
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413
    - auditStamp:
        time: 1752133141684
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_526473c77ded4b7d0bd3dd9312b8ff3eb26ca0e76ea0d52e1ef11b9cd2b7a413

Urn changed, urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD):
<upstreamLineage> changed:
	Value of root[0] changed from 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null} to 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null}.
Old aspect:
    upstreams:
    - auditStamp:
        time: 1752130649153
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
    - auditStamp:
        time: 1752130649153
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
    - auditStamp:
        time: 1752130649153
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
    - auditStamp:
        time: 1752130649153
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
    - auditStamp:
        time: 1752130649153
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
    - auditStamp:
        time: 1752130649153
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
    - auditStamp:
        time: 1752130649153
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
New aspect:
    upstreams:
    - auditStamp:
        time: 1752133141685
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
    - auditStamp:
        time: 1752133141685
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46
    - auditStamp:
        time: 1752133141685
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_c4c2d5f1b5428462ccfa395bca74211df94d486abd1e29b58f6bc1cdbe7dae46

Urn changed, urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD):
<upstreamLineage> changed:
	Value of root[0] changed from 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null} to 
		{"urn": "urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD)", "change_type": "UPSERT", "aspect_name": "upstreamLineage", "aspect": "<aspect>", "headers": null}.
Old aspect:
    upstreams:
    - auditStamp:
        time: 1752130649154
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
    - auditStamp:
        time: 1752130649154
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
    - auditStamp:
        time: 1752130649154
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
    - auditStamp:
        time: 1752130649154
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
    - auditStamp:
        time: 1752130649154
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
    - auditStamp:
        time: 1752130649154
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
    - auditStamp:
        time: 1752130649154
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
New aspect:
    upstreams:
    - auditStamp:
        time: 1752133141686
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
    - auditStamp:
        time: 1752133141686
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
    - auditStamp:
        time: 1752133141686
        actor: urn:li:corpuser:_ingestion
      created:
        time: 1751789635329
        actor: urn:li:corpuser:service_account_tests_admin@acryl.io
      dataset: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
      type: TRANSFORMED
      query: urn:li:query:composite_d991481e7ab125b9722b874046722c21b79c5dd60d0d452c173c5a4a2a02323c
_________________________________________________________________________________ Test.test_enterprise_usage _________________________________________________________________________________
Metadata files differ (use `pytest --update-golden-files` to update):
Urn changed, urn:li:query:73a3d55951422b189fb8d81d6400e5c93e783b25b2e9b19bdff771ab3661f708:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.

Urn changed, urn:li:query:39c6aa2fac8e484a0dc4071257b55728e14d5ee0045fb1c593a81590151ce6ae:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.

Urn changed, urn:li:query:d4cde5417c25962d004da7eb3b1a8fa7b80e73f2df6755f556159ce7e0293a5c:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.

------------------------------------------------------------------------------------- Captured log call --------------------------------------------------------------------------------------
INFO     datahub.ingestion.run.pipeline:pipeline.py:221 Sink configured successfully. 
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_connection.py:154 using authenticator type 'KEY_PAIR_AUTHENTICATOR'
WARNING  datahub.ingestion.source.state.stateful_ingestion_base:stateful_ingestion_base.py:144 Stateful ingestion is disabled, disabling enable_stateful_profiling config option as well
WARNING  datahub.ingestion.source.state.stateful_ingestion_base:stateful_ingestion_base.py:168 Stateful ingestion is disabled, disabling enable_stateful_usage_ingestion config option as well
WARNING  datahub.ingestion.source.state.stateful_ingestion_base:stateful_ingestion_base.py:119 Stateful ingestion is disabled, disabling enable_stateful_lineage_ingestion config option as well
INFO     datahub.ingestion.run.pipeline:pipeline.py:250 Source configured successfully.
INFO     datahub.ingestion.source.snowflake.snowflake_v2:snowflake_v2.py:677 Checking current version
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:678 Query #1: select CURRENT_VERSION()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:678 Query #1 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_v2:snowflake_v2.py:686 Checking current role
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:687 Query #2: select CURRENT_ROLE()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:687 Query #2 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_v2:snowflake_v2.py:695 Checking current warehouse
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:696 Query #3: select CURRENT_WAREHOUSE()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:696 Query #3 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_v2:snowflake_v2.py:705 Checking current edition
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:749 Query #4: show tags
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:749 Query #4 got 57 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:716 Query #5: select CURRENT_ACCOUNT()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:716 Query #5 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:719 Query #6: select CURRENT_REGION()
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_v2.py:719 Query #6 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: *: Metadata Extraction at 2025-07-10 07:39:05.304930+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:256 Query #7: show databases
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:256 Query #7 got 14 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:273 Query #8: 
        SELECT database_name AS "DATABASE_NAME",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        from "ASEEM_TEST_DB".information_schema.databases
        order by database_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:273 Query #8 got 13 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: SMOKE_TEST_DB: Metadata Extraction at 2025-07-10 07:39:06.263155+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:291 Query #9: 
        SELECT schema_name AS "SCHEMA_NAME",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        from "SMOKE_TEST_DB".information_schema.schemata
        WHERE schema_name != 'INFORMATION_SCHEMA'
        order by schema_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:291 Query #9 got 2 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:344 Query #10: 
        SELECT table_catalog AS "TABLE_CATALOG",
        table_schema AS "TABLE_SCHEMA",
        table_name AS "TABLE_NAME",
        table_type AS "TABLE_TYPE",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED" ,
        comment AS "COMMENT",
        row_count AS "ROW_COUNT",
        bytes AS "BYTES",
        clustering_key AS "CLUSTERING_KEY",
        auto_clustering_on AS "AUTO_CLUSTERING_ON",
        is_dynamic AS "IS_DYNAMIC",
        is_iceberg AS "IS_ICEBERG",
        is_hybrid AS "IS_HYBRID"
        FROM "SMOKE_TEST_DB".information_schema.tables t
        WHERE table_schema != 'INFORMATION_SCHEMA'
        and table_type in ( 'BASE TABLE', 'EXTERNAL TABLE')
        order by table_schema, table_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:344 Query #10 got 17 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:411 Query #11: SHOW VIEWS IN DATABASE "SMOKE_TEST_DB"
LIMIT 10000 ;

INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:411 Query #11 got 50 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:670 Query #12: SHOW STREAMS IN DATABASE "SMOKE_TEST_DB" LIMIT 10000 ;
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:670 Query #12 got 0 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:724 Query #13: 
        SELECT procedure_catalog AS "PROCEDURE_CATALOG",
        procedure_schema AS "PROCEDURE_SCHEMA",
        procedure_name AS "PROCEDURE_NAME",
        procedure_language AS "PROCEDURE_LANGUAGE",
        argument_signature AS "ARGUMENT_SIGNATURE",
        data_type AS "PROCEDURE_RETURN_TYPE",
        procedure_definition AS "PROCEDURE_DEFINITION",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        FROM "SMOKE_TEST_DB".information_schema.procedures
        order by procedure_schema, procedure_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:724 Query #13 got 0 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_schema_gen.py:241 Time spent in stage <SMOKE_TEST_DB: Metadata Extraction at 2025-07-10 07:39:06.263155+00:00>: 4.44 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: SMOKE_TEST_DB_2: Metadata Extraction at 2025-07-10 07:39:10.700688+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:291 Query #14: 
        SELECT schema_name AS "SCHEMA_NAME",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        from "SMOKE_TEST_DB_2".information_schema.schemata
        WHERE schema_name != 'INFORMATION_SCHEMA'
        order by schema_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:291 Query #14 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:344 Query #15: 
        SELECT table_catalog AS "TABLE_CATALOG",
        table_schema AS "TABLE_SCHEMA",
        table_name AS "TABLE_NAME",
        table_type AS "TABLE_TYPE",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED" ,
        comment AS "COMMENT",
        row_count AS "ROW_COUNT",
        bytes AS "BYTES",
        clustering_key AS "CLUSTERING_KEY",
        auto_clustering_on AS "AUTO_CLUSTERING_ON",
        is_dynamic AS "IS_DYNAMIC",
        is_iceberg AS "IS_ICEBERG",
        is_hybrid AS "IS_HYBRID"
        FROM "SMOKE_TEST_DB_2".information_schema.tables t
        WHERE table_schema != 'INFORMATION_SCHEMA'
        and table_type in ( 'BASE TABLE', 'EXTERNAL TABLE')
        order by table_schema, table_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:344 Query #15 got 1 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:411 Query #16: SHOW VIEWS IN DATABASE "SMOKE_TEST_DB_2"
LIMIT 10000 ;

INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:411 Query #16 got 48 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:670 Query #17: SHOW STREAMS IN DATABASE "SMOKE_TEST_DB_2" LIMIT 10000 ;
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:670 Query #17 got 0 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:724 Query #18: 
        SELECT procedure_catalog AS "PROCEDURE_CATALOG",
        procedure_schema AS "PROCEDURE_SCHEMA",
        procedure_name AS "PROCEDURE_NAME",
        procedure_language AS "PROCEDURE_LANGUAGE",
        argument_signature AS "ARGUMENT_SIGNATURE",
        data_type AS "PROCEDURE_RETURN_TYPE",
        procedure_definition AS "PROCEDURE_DEFINITION",
        created AS "CREATED",
        last_altered AS "LAST_ALTERED",
        comment AS "COMMENT"
        FROM "SMOKE_TEST_DB_2".information_schema.procedures
        order by procedure_schema, procedure_name
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema.py:724 Query #18 got 0 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_schema_gen.py:241 Time spent in stage <SMOKE_TEST_DB_2: Metadata Extraction at 2025-07-10 07:39:10.700688+00:00>: 3.67 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: *: External table DDL Lineage at 2025-07-10 07:39:14.367885+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema_gen.py:1276 Query #19: show external tables in account
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_schema_gen.py:1276 Query #19 got 5 row(s) back from Snowflake
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_schema_gen.py:246 Time spent in stage <*: External table DDL Lineage at 2025-07-10 07:39:14.367885+00:00>: 2.56 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_v2.py:523 Time spent in stage <*: Metadata Extraction at 2025-07-10 07:39:05.304930+00:00>: 11.62 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: *: View Parsing at 2025-07-10 07:39:16.930043+00:00
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_v2.py:572 Time spent in stage <*: View Parsing at 2025-07-10 07:39:16.930043+00:00>: 0.01 seconds
INFO     datahub.ingestion.source_report.ingestion_stage:ingestion_stage.py:39 Stage started: *: Queries Extraction at 2025-07-10 07:39:16.936685+00:00
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:336 Fetching users from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:338 Query #20: SELECT name as "NAME", email as "EMAIL" FROM SNOWFLAKE.ACCOUNT_USAGE.USERS
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:338 Query #20 got 73 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:230 Using local temp path: /var/folders/zc/qty7kt_919db2qnrl7wndl0m0000gn/T/tmpdcsthf6f
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:291 Fetching audit log into /var/folders/zc/qty7kt_919db2qnrl7wndl0m0000gn/T/tmpdcsthf6f/audit_log.sqlite
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:364 Fetching copy history from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:365 Query #21: 
        SELECT
            ARRAY_UNIQUE_AGG(h.stage_location) AS "UPSTREAM_LOCATIONS",
            concat(
                h.table_catalog_name, '.', h.table_schema_name,
                '.', h.table_name
            ) AS "DOWNSTREAM_TABLE_NAME"
        FROM
            snowflake.account_usage.copy_history h
        WHERE h.status in ('Loaded','Partially loaded')
            AND DOWNSTREAM_TABLE_NAME IS NOT NULL
            AND h.last_load_time >= to_timestamp_ltz(1751789040000, 3)
            AND h.last_load_time < to_timestamp_ltz(1751789940000, 3)
            AND NOT RLIKE(DOWNSTREAM_TABLE_NAME,'.*_swap','i')
        GROUP BY DOWNSTREAM_TABLE_NAME;
        
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:365 Query #21 got 4 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:407 Fetching query log from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:408 Query #22: WITH
fingerprinted_queries as (
    SELECT *,
        -- TODO: Generate better fingerprints for each query by pushing down regex logic.
        query_history.query_parameterized_hash as query_fingerprint,
        -- Optional and additional hash to be used for query deduplication and final query identity
        CASE 
            WHEN CONTAINS(query_history.query_text, '-- Hex query metadata:')
            -- Extract project id and hash it
            THEN CAST(HASH(
                REGEXP_SUBSTR(query_history.query_text, '"project_id"\\s*:\\s*"([^"]+)"', 1, 1, 'e', 1),
                REGEXP_SUBSTR(query_history.query_text, '"context"\\s*:\\s*"([^"]+)"', 1, 1, 'e', 1)
            ) AS VARCHAR)
            ELSE NULL 
        END as query_secondary_fingerprint
    FROM
        snowflake.account_usage.query_history
    WHERE
        query_history.start_time >= to_timestamp_ltz(1751789040000, 3) -- 2025-07-06T08:04:00+00:00
        AND query_history.start_time < to_timestamp_ltz(1751789940000, 3) -- 2025-07-06T08:19:00+00:00
        AND execution_status = 'SUCCESS'
        AND TRUE
)
, deduplicated_queries as (
    SELECT
        *,
        DATE_TRUNC(
            DAY,
            CONVERT_TIMEZONE('UTC', start_time)
        ) AS bucket_start_time,
        COUNT(*) OVER (PARTITION BY bucket_start_time, query_fingerprint, query_secondary_fingerprint) AS query_count,
    FROM
        fingerprinted_queries
    QUALIFY
        ROW_NUMBER() OVER (PARTITION BY bucket_start_time, query_fingerprint, query_secondary_fingerprint ORDER BY start_time DESC) = 1
)
, raw_access_history AS (
    SELECT
        query_id,
        root_query_id,
        query_start_time,
        user_name,
        direct_objects_accessed,
        objects_modified,
        object_modified_by_ddl
    FROM
        snowflake.account_usage.access_history
    WHERE
        query_start_time >= to_timestamp_ltz(1751789040000, 3) -- 2025-07-06T08:04:00+00:00
        AND query_start_time < to_timestamp_ltz(1751789940000, 3) -- 2025-07-06T08:19:00+00:00
        AND TRUE
        AND query_id IN (
            SELECT query_id FROM deduplicated_queries
        )
        AND (ARRAY_SIZE(FILTER(direct_objects_accessed, o -> (SPLIT_PART(UPPER(o:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB$' OR SPLIT_PART(UPPER(o:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB_2$'))) > 0 OR ARRAY_SIZE(FILTER(objects_modified, o -> (SPLIT_PART(UPPER(o:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB$' OR SPLIT_PART(UPPER(o:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB_2$'))) > 0 OR ((SPLIT_PART(UPPER(object_modified_by_ddl:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB$' OR SPLIT_PART(UPPER(object_modified_by_ddl:objectName), '.', 1) RLIKE '^SMOKE_TEST_DB_2$')))
)
, filtered_access_history AS (
    -- TODO: Add table filter clause.
    SELECT
        query_id,
        root_query_id,
        query_start_time,
        ARRAY_SLICE(
            FILTER(direct_objects_accessed, o -> o:objectDomain IN ('Iceberg table','External table','Table','View','Stream','Materialized view')),
            0, 20
        ) as direct_objects_accessed,
        -- TODO: Drop the columns.baseSources subfield.
        FILTER(objects_modified, o -> o:objectDomain IN ('Iceberg table','External table','Table','View','Stream','Materialized view')) as objects_modified,
        case when object_modified_by_ddl:objectDomain IN ('Iceberg table','External table','Table','View','Stream','Materialized view') then object_modified_by_ddl else null end as object_modified_by_ddl
    FROM raw_access_history
    WHERE ( array_size(direct_objects_accessed) > 0 or array_size(objects_modified) > 0 or object_modified_by_ddl is not null )
)
, query_access_history AS (
    SELECT
        q.bucket_start_time,
        q.query_id,
        q.query_fingerprint,
        q.query_secondary_fingerprint,
        q.query_count,
        q.session_id AS "SESSION_ID",
        q.start_time AS "QUERY_START_TIME",
        q.total_elapsed_time AS "QUERY_DURATION",
        q.query_text AS "QUERY_TEXT",
        q.query_type AS "QUERY_TYPE",
        q.database_name as "DEFAULT_DB",
        q.schema_name as "DEFAULT_SCHEMA",
        q.rows_inserted AS "ROWS_INSERTED",
        q.rows_updated AS "ROWS_UPDATED",
        q.rows_deleted AS "ROWS_DELETED",
        q.user_name AS "USER_NAME",
        q.role_name AS "ROLE_NAME",
        a.root_query_id,
        a.direct_objects_accessed,
        a.objects_modified,
        a.object_modified_by_ddl
    FROM deduplicated_queries q
    JOIN filtered_access_history a USING (query_id)
)
SELECT * FROM query_access_history
-- Our query aggregator expects the queries to be added in chronological order.
-- It's easier for us to push down the sorting to Snowflake/SQL instead of doing it in Python.
ORDER BY QUERY_START_TIME ASC

INFO     datahub.ingestion.source.snowflake.snowflake_connection:snowflake_queries.py:408 Query #22 got 68 row(s) back from Snowflake
INFO     datahub.ingestion.source.snowflake.snowflake_queries:snowflake_queries.py:312 Added 0 query log entries to SQL aggregator
INFO     datahub.ingestion.source_report.ingestion_stage:snowflake_v2.py:575 Time spent in stage <*: Queries Extraction at 2025-07-10 07:39:16.936685+00:00>: 9.9 seconds
ERROR    datahub.testing.compare_metadata_json:compare_metadata_json.py:108 Metadata files differ (use `pytest --update-golden-files` to update):
Urn changed, urn:li:query:73a3d55951422b189fb8d81d6400e5c93e783b25b2e9b19bdff771ab3661f708:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.
Old aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD)
New aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.detailed_sales_forecast,PROD)

Urn changed, urn:li:query:39c6aa2fac8e484a0dc4071257b55728e14d5ee0045fb1c593a81590151ce6ae:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.
Old aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD)
New aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.customer_segments,PROD)

Urn changed, urn:li:query:d4cde5417c25962d004da7eb3b1a8fa7b80e73f2df6755f556159ce7e0293a5c:
<querySubjects> changed:
	Item aspect['subjects'][0] removed from iterable.
	Item aspect['subjects'][1] removed from iterable.
	Item aspect['subjects'][2] removed from iterable.
	Item aspect['subjects'][3] removed from iterable.
Old aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.customer,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.nation,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.region,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,snowflake_sample_data.tpch_sf1.orders,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD)
New aspect:
    subjects:
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_d28svpmusw,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_b52b97ns0d,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.snowpark_temp_table_megwwrakxg,PROD)
    - entity: urn:li:dataset:(urn:li:dataPlatform:snowflake,smoke_test_db.sales_forecasting.overall_sales_forecast,PROD)
====================================================================================== warnings summary ======================================================================================
../venv/lib/python3.11/site-packages/great_expectations/util.py:55
  /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/util.py:55: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
    from pkg_resources import Distribution

../venv/lib/python3.11/site-packages/pkg_resources/__init__.py:3146
../venv/lib/python3.11/site-packages/pkg_resources/__init__.py:3146
../venv/lib/python3.11/site-packages/pkg_resources/__init__.py:3146
  /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:3146: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('google')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../venv/lib/python3.11/site-packages/pkg_resources/__init__.py:3146
../venv/lib/python3.11/site-packages/pkg_resources/__init__.py:3146
../venv/lib/python3.11/site-packages/pkg_resources/__init__.py:3146
  /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:3146: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../venv/lib/python3.11/site-packages/pkg_resources/__init__.py:2558
  /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:2558: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('google')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(parent)

../venv/lib/python3.11/site-packages/pkg_resources/__init__.py:3146
  /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:3146: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('google.cloud.datacatalog')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../venv/lib/python3.11/site-packages/pkg_resources/__init__.py:2558
  /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:2558: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(parent)

../venv/lib/python3.11/site-packages/pkg_resources/__init__.py:3146
  /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/pkg_resources/__init__.py:3146: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('ruamel')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

../venv/lib/python3.11/site-packages/great_expectations/data_context/types/base.py:1622
  /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/data_context/types/base.py:1622: ChangedInMarshmallow4Warning: `Number` field should not be instantiated. Use `Integer`, `Float`, or `Decimal` instead.
    config_version = fields.Number(

../venv/lib/python3.11/site-packages/great_expectations/data_context/types/base.py:2664
  /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/great_expectations/data_context/types/base.py:2664: ChangedInMarshmallow4Warning: `Number` field should not be instantiated. Use `Integer`, `Float`, or `Decimal` instead.
    config_version = fields.Number(

integration/test_snowflake_queries_v2.py::Test::test_enterprise_lineage
integration/test_snowflake_queries_v2.py::Test::test_enterprise_lineage
integration/test_snowflake_queries_v2.py::Test::test_enterprise_usage
integration/test_snowflake_queries_v2.py::Test::test_enterprise_usage
  /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/snowflake/connector/vendored/urllib3/contrib/pyopenssl.py:434: DeprecationWarning: Attempting to mutate a Context after a Connection was created. In the future, this will raise an exception
    self._ctx.set_options(value)

integration/test_snowflake_queries_v2.py::Test::test_enterprise_lineage
integration/test_snowflake_queries_v2.py::Test::test_enterprise_lineage
integration/test_snowflake_queries_v2.py::Test::test_enterprise_lineage
integration/test_snowflake_queries_v2.py::Test::test_enterprise_lineage
integration/test_snowflake_queries_v2.py::Test::test_enterprise_usage
integration/test_snowflake_queries_v2.py::Test::test_enterprise_usage
integration/test_snowflake_queries_v2.py::Test::test_enterprise_usage
integration/test_snowflake_queries_v2.py::Test::test_enterprise_usage
  /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/snowflake/connector/vendored/urllib3/contrib/pyopenssl.py:442: DeprecationWarning: Attempting to mutate a Context after a Connection was created. In the future, this will raise an exception
    self._ctx.set_verify(_stdlib_to_openssl_verify[value], _verify_callback)

integration/test_snowflake_queries_v2.py::Test::test_enterprise_lineage
integration/test_snowflake_queries_v2.py::Test::test_enterprise_lineage
integration/test_snowflake_queries_v2.py::Test::test_enterprise_usage
integration/test_snowflake_queries_v2.py::Test::test_enterprise_usage
  /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/snowflake/connector/vendored/urllib3/contrib/pyopenssl.py:458: DeprecationWarning: Attempting to mutate a Context after a Connection was created. In the future, this will raise an exception
    self._ctx.load_verify_locations(cafile, capath)

integration/test_snowflake_queries_v2.py::Test::test_enterprise_lineage
integration/test_snowflake_queries_v2.py::Test::test_enterprise_lineage
integration/test_snowflake_queries_v2.py::Test::test_enterprise_usage
integration/test_snowflake_queries_v2.py::Test::test_enterprise_usage
  /Users/sergio/workspace/github/acryldata/connector-tests/venv/lib/python3.11/site-packages/snowflake/connector/vendored/urllib3/contrib/pyopenssl.py:474: DeprecationWarning: Attempting to mutate a Context after a Connection was created. In the future, this will raise an exception
    return self._ctx.set_alpn_protos(protocols)

integration/test_snowflake_queries_v2.py::Test::test_enterprise_usage
  /Users/sergio/workspace/github/datahub-project/datahub/metadata-ingestion/src/datahub/ingestion/api/decorators.py:20: ConfigurationWarning: The include_view_lineage was removed, please remove it from your recipe.
    config = config_cls.parse_obj(config_dict)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================================================================================== short test summary info ===================================================================================
FAILED integration/test_snowflake_queries_v2.py::Test::test_enterprise_lineage - Failed: Metadata files differ (use `pytest --update-golden-files` to update):
FAILED integration/test_snowflake_queries_v2.py::Test::test_enterprise_usage - Failed: Metadata files differ (use `pytest --update-golden-files` to update):
========================================================================= 2 failed, 34 warnings in 63.97s (0:01:03) ==========================================================================
(venv) ➜  smoke-test git:(main) ✗ 
