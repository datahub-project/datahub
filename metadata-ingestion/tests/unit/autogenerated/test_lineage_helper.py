import json
from typing import Any, Dict

import pytest

from datahub.ingestion.autogenerated.lineage_helper import (
    _load_lineage_data,
    clear_cache,
    get_all_lineage_aspects,
    get_lineage_fields,
    has_lineage,
    has_lineage_aspect,
    is_lineage_field,
)


class MockAspect:
    """Mock aspect class for testing."""

    def __init__(self, class_name="UpstreamLineage"):
        self.__class__ = type(class_name, (), {})


class TestLineageHelper:
    """Test cases for lineage helper functions."""

    @pytest.fixture
    def mock_lineage_fields(self):
        """Fixture for common lineage fields mock data."""
        return [{"name": "dataset", "path": "upstreams.dataset", "isLineage": True}]

    @pytest.fixture
    def mock_lineage_data(self):
        """Fixture for common lineage data mock structure."""
        return {
            "entities": {
                "dataset": {
                    "upstreamLineage": {
                        "aspect": "upstreamLineage",
                        "fields": [
                            {
                                "name": "dataset",
                                "path": "upstreams.dataset",
                                "isLineage": True,
                                "relationship": {
                                    "name": "DownstreamOf",
                                    "entityTypes": ["dataset"],
                                    "isLineage": True,
                                },
                            }
                        ],
                    }
                }
            }
        }

    @pytest.fixture
    def mock_file_data(self, mock_lineage_data):
        """Fixture for mock file data."""
        return json.dumps(mock_lineage_data)

    def setup_method(self):
        """Clear cache before each test."""
        clear_cache()

    def teardown_method(self):
        """Clear cache after each test."""
        clear_cache()

    def setup_mock_get_fields(self, monkeypatch, fields):
        """Helper to setup mock for get_lineage_fields function."""

        def mock_get_fields(*args, **kwargs):
            return fields

        monkeypatch.setattr(
            "datahub.ingestion.autogenerated.lineage_helper.get_lineage_fields",
            mock_get_fields,
        )

    def setup_mock_load_data(self, monkeypatch, data):
        """Helper to setup mock for _load_lineage_data function."""

        def mock_load_data():
            return data

        monkeypatch.setattr(
            "datahub.ingestion.autogenerated.lineage_helper._load_lineage_data",
            mock_load_data,
        )

    def setup_mock_file_operations(self, monkeypatch, file_data, exists=True):
        """Helper to setup mock for file operations."""

        def mock_open_file(*args, **kwargs):
            class MockFile:
                def __enter__(self):
                    return self

                def __exit__(self, *args):
                    pass

                def read(self):
                    return file_data

            return MockFile()

        def mock_path_exists(*args, **kwargs):
            return exists

        monkeypatch.setattr("builtins.open", mock_open_file)
        monkeypatch.setattr("pathlib.Path.exists", mock_path_exists)

    def test_load_lineage_data_success(
        self, monkeypatch, mock_file_data, mock_lineage_data
    ):
        """Test successful loading of lineage data."""
        self.setup_mock_file_operations(monkeypatch, mock_file_data, exists=True)

        result = _load_lineage_data()

        assert result == mock_lineage_data
        assert (
            result["entities"]["dataset"]["upstreamLineage"]["fields"][0]["isLineage"]
            is True
        )

    def test_load_lineage_data_file_not_found(self, monkeypatch):
        """Test handling of missing lineage.json file."""
        self.setup_mock_file_operations(monkeypatch, "", exists=False)

        with pytest.raises(FileNotFoundError):
            _load_lineage_data()

    def test_load_lineage_data_invalid_json(self, monkeypatch):
        """Test handling of malformed JSON."""
        self.setup_mock_file_operations(monkeypatch, "invalid json", exists=True)

        with pytest.raises(json.JSONDecodeError):
            _load_lineage_data()

    def test_get_lineage_fields(self, monkeypatch, mock_lineage_data):
        """Test getting lineage fields for an entity and aspect."""
        self.setup_mock_load_data(monkeypatch, mock_lineage_data)

        result = get_lineage_fields("dataset", "upstreamLineage")

        assert len(result) == 1
        assert result[0]["name"] == "dataset"
        assert result[0]["path"] == "upstreams.dataset"
        assert result[0]["isLineage"] is True

    def test_get_lineage_fields_no_fields(self, monkeypatch):
        """Test getting lineage fields when none exist."""
        mock_data: Dict[str, Any] = {"entities": {"dataset": {"upstreamLineage": {}}}}
        self.setup_mock_load_data(monkeypatch, mock_data)

        result = get_lineage_fields("dataset", "upstreamLineage")

        assert result == []

    @pytest.mark.parametrize(
        "field_path,expected",
        [
            ("upstreams.dataset", True),
            ("nonexistent.path", False),
        ],
    )
    def test_is_lineage_field(
        self, monkeypatch, mock_lineage_fields, field_path, expected
    ):
        """Test checking if a field is lineage-related."""
        self.setup_mock_get_fields(monkeypatch, mock_lineage_fields)

        result = is_lineage_field("urn:li:dataset:test", "upstreamLineage", field_path)

        assert result is expected

    def test_is_lineage_field_invalid_urn(self):
        """Test checking if a field is lineage-related with invalid URN."""
        with pytest.raises(AssertionError):
            is_lineage_field("invalid:urn", "upstreamLineage", "upstreams.dataset")

    @pytest.mark.parametrize(
        "has_fields,expected",
        [
            (True, True),
            (False, False),
        ],
    )
    def test_has_lineage(self, monkeypatch, mock_lineage_fields, has_fields, expected):
        """Test checking if an aspect has lineage fields."""
        fields = mock_lineage_fields if has_fields else []
        self.setup_mock_get_fields(monkeypatch, fields)

        result = has_lineage("urn:li:dataset:test", MockAspect())

        assert result is expected

    def test_has_lineage_invalid_urn(self):
        """Test checking if an aspect has lineage fields with invalid URN."""
        with pytest.raises(AssertionError):
            has_lineage("invalid:urn", MockAspect())

    @pytest.mark.parametrize(
        "has_fields,expected",
        [
            (True, True),
            (False, False),
        ],
    )
    def test_has_lineage_aspect(
        self, monkeypatch, mock_lineage_fields, has_fields, expected
    ):
        """Test checking if an aspect has lineage fields."""
        fields = mock_lineage_fields if has_fields else []
        self.setup_mock_get_fields(monkeypatch, fields)

        result = has_lineage_aspect("dataset", "upstreamLineage")

        assert result is expected

    def test_get_all_lineage_aspects(self, monkeypatch):
        """Test getting all lineage aspects for an entity type."""
        mock_data = {
            "entities": {
                "dataset": {
                    "upstreamLineage": {"fields": [{"name": "field1"}]},
                    "ownership": {"fields": []},  # No lineage fields
                    "schemaMetadata": {"fields": [{"name": "field2"}]},
                }
            }
        }
        self.setup_mock_load_data(monkeypatch, mock_data)

        result = get_all_lineage_aspects("dataset")

        assert result == {"upstreamLineage", "schemaMetadata"}
        assert "ownership" not in result

    def test_clear_cache(self):
        """Test clearing the internal cache."""
        # This test ensures the clear_cache function doesn't raise any exceptions
        clear_cache()
        # If we get here without exceptions, the test passes
        assert True
