import json

import pytest

from datahub.ingestion.autogenerated.lineage_helper import (
    _load_lineage_data,
    clear_cache,
)


class TestLineageHelper:
    @pytest.fixture
    def mock_lineage_fields(self):
        return [{"name": "dataset", "path": "upstreams.dataset", "isLineage": True}]

    @pytest.fixture
    def mock_lineage_data(self):
        return {
            "entities": {
                "dataset": {
                    "upstreamLineage": {
                        "aspect": "upstreamLineage",
                        "fields": [
                            {
                                "name": "dataset",
                                "path": "upstreams.dataset",
                                "isLineage": True,
                                "relationship": {
                                    "name": "DownstreamOf",
                                    "entityTypes": ["dataset"],
                                    "isLineage": True,
                                },
                            }
                        ],
                    }
                }
            }
        }

    @pytest.fixture
    def mock_file_data(self, mock_lineage_data):
        return json.dumps(mock_lineage_data)

    def setup_method(self):
        clear_cache()

    def teardown_method(self):
        clear_cache()

    def setup_mock_get_fields(self, monkeypatch, fields):
        def mock_get_fields(*args, **kwargs):
            return fields

        monkeypatch.setattr(
            "datahub.ingestion.autogenerated.lineage_helper.get_lineage_fields",
            mock_get_fields,
        )

    def setup_mock_load_data(self, monkeypatch, data):
        def mock_load_data():
            return data

        monkeypatch.setattr(
            "datahub.ingestion.autogenerated.lineage_helper._load_lineage_data",
            mock_load_data,
        )

    def setup_mock_file_operations(self, monkeypatch, file_data, exists=True):
        def mock_open_file(*args, **kwargs):
            class MockFile:
                def __enter__(self):
                    return self

                def __exit__(self, *args):
                    pass

                def read(self):
                    return file_data

            return MockFile()

        def mock_path_exists(*args, **kwargs):
            return exists

        monkeypatch.setattr("builtins.open", mock_open_file)
        monkeypatch.setattr("pathlib.Path.exists", mock_path_exists)

    def test_load_lineage_data_success(
        self, monkeypatch, mock_file_data, mock_lineage_data
    ):
        self.setup_mock_file_operations(monkeypatch, mock_file_data, exists=True)

        result = _load_lineage_data()

        assert result == mock_lineage_data
        assert (
            result["entities"]["dataset"]["upstreamLineage"]["fields"][0]["isLineage"]
            is True
        )

    def test_load_lineage_data_file_not_found(self, monkeypatch):
        self.setup_mock_file_operations(monkeypatch, "", exists=False)

        with pytest.raises(FileNotFoundError):
            _load_lineage_data()

    def test_load_lineage_data_invalid_json(self, monkeypatch):
        self.setup_mock_file_operations(monkeypatch, "invalid json", exists=True)

        with pytest.raises(json.JSONDecodeError):
            _load_lineage_data()
