# GraphQL for authentication related operations

extend type Query {
  """
  Generates an access token for DataHub APIs for a particular user & of a particular type
  Deprecated, use createAccessToken instead
  """
  getAccessToken(input: GetAccessTokenInput!): AccessToken

  """
  List access tokens stored in DataHub.
  """
  listAccessTokens(input: ListAccessTokenInput!): ListAccessTokenResult!

  """
  Fetches the metadata of an access token.
  This is useful to debug when you have a raw token but don't know the actor.
  """
  getAccessTokenMetadata(token: String!): AccessTokenMetadata!

  """
  Experimental API to debug Access for users.
  Backward incompatible changes will be made without notice in the future.
  Do not build on top of this API.
  """
  debugAccess(userUrn: String!): DebugAccessResult!
}

extend type Mutation {
  """
  Generates an access token for DataHub APIs for a particular user & of a particular type
  """
  createAccessToken(input: CreateAccessTokenInput!): AccessToken

  """
  Revokes access tokens.
  """
  revokeAccessToken(tokenId: String!): Boolean!
}

"""
Input required to fetch a new Access Token.
"""
input GetAccessTokenInput {
  """
  The type of the Access Token.
  """
  type: AccessTokenType!

  """
  The actor associated with the Access Token.
  """
  actorUrn: String!

  """
  The duration for which the Access Token is valid.
  """
  duration: AccessTokenDuration!
}

input CreateAccessTokenInput {
  """
  The type of the Access Token.
  """
  type: AccessTokenType!

  """
  The actor associated with the Access Token.
  """
  actorUrn: String!

  """
  The duration for which the Access Token is valid.
  """
  duration: AccessTokenDuration!

  """
  The name of the token to be generated.
  """
  name: String!

  """
  Description of the token if defined.
  """
  description: String
}

"""
A type of DataHub Access Token.
"""
enum AccessTokenType {
  """
  Generates a personal access token
  """
  PERSONAL
}

"""
The duration for which an Access Token is valid.
"""
enum AccessTokenDuration {
  """
  1 hour
  """
  ONE_HOUR

  """
  1 day
  """
  ONE_DAY

  """
  1 week
  """
  ONE_WEEK

  """
  1 month
  """
  ONE_MONTH

  """
  3 months
  """
  THREE_MONTHS

  """
  6 months
  """
  SIX_MONTHS

  """
  1 year
  """
  ONE_YEAR

  """
  No expiry
  """
  NO_EXPIRY
}

type AccessToken {
  """
  The access token itself
  """
  accessToken: String!

  """
  Metadata about the generated token
  """
  metadata: AccessTokenMetadata
}

"""
Input arguments for listing access tokens
"""
input ListAccessTokenInput {
  """
  The starting offset of the result set, default is 0
  """
  start: Int

  """
  The number of results to be returned, default is 20
  """
  count: Int

  """
  Facet filters to apply to search results, default is no filters
  """
  filters: [FacetFilterInput!]
}

"""
Results returned when listing access tokens
"""
type ListAccessTokenResult {
  """
  The starting offset of the result set
  """
  start: Int!

  """
  The number of results to be returned
  """
  count: Int!

  """
  The total number of results in the result set
  """
  total: Int!

  """
  The token metadata themselves
  """
  tokens: [AccessTokenMetadata!]!
}

type AccessTokenMetadata implements Entity {
  """
  The primary key of the access token
  """
  urn: String!

  """
  The standard Entity Type
  """
  type: EntityType!

  """
  The unique identifier of the token.
  """
  id: String!

  """
  The name of the token, if it exists.
  """
  name: String!

  """
  The description of the token if defined.
  """
  description: String

  """
  The actor associated with the Access Token.
  """
  actorUrn: String!

  """
  The actor who created the Access Token.
  """
  ownerUrn: String!

  """
  The time when token was generated at.
  """
  createdAt: Long!

  """
  Time when token will be expired.
  """
  expiresAt: Long

  """
  Granular API for querying edges extending from this entity
  """
  relationships(input: RelationshipsInput!): EntityRelationshipsResult
}

"""
Shared privileges object across entities. Not all privileges apply to every entity.
"""
type EntityPrivileges {
  """
  Whether or not a user can create child entities under a parent entity.
  For example, can one create Terms/Node sunder a Glossary Node.
  """
  canManageChildren: Boolean

  """
  Whether or not a user can delete or move this entity.
  """
  canManageEntity: Boolean

  """
  Whether or not a user can create or delete lineage edges for an entity.
  """
  canEditLineage: Boolean

  """
  Whether or not a user update the embed information
  """
  canEditEmbed: Boolean

  """
  Whether or not a user can update the Queries for the entity (e.g. dataset)
  """
  canEditQueries: Boolean

  """
  Whether or not a user can update the properties for the entity (e.g. dataset)
  """
  canEditProperties: Boolean

  """
  Whether or not a user can update tags for the entity
  """
  canEditTags: Boolean

  """
  Whether or not a user can update glossary terms for the entity
  """
  canEditGlossaryTerms: Boolean

  """
  Whether or not a user can update the description for the entity
  """
  canEditDescription: Boolean

  """
  Whether or not a user can update the links for the entity
  """
  canEditLinks: Boolean

  """
  Whether or not a user can update the domain(s) for the entity
  """
  canEditDomains: Boolean

  """
  Whether or not a user can update the data product(s) that the entity belongs to
  """
  canEditDataProducts: Boolean

  """
  Whether or not a user can update the owners for the entity
  """
  canEditOwners: Boolean

  """
  Whether or not a user can update the incidents for an asset
  """
  canEditIncidents: Boolean

  """
  Whether or not a user can update assertions for an asset
  """
  canEditAssertions: Boolean

  """
  Whether or not a user can update the deprecation status for an entity
  """
  canEditDeprecation: Boolean

  """
  Whether or not a user can update the schema field tags for a dataset
  """
  canEditSchemaFieldTags: Boolean

  """
  Whether or not a user can update the schema field tags for a dataset
  """
  canEditSchemaFieldGlossaryTerms: Boolean

  """
  Whether or not a user can update the schema field tags for a dataset
  """
  canEditSchemaFieldDescription: Boolean

  """
  Whether the user can view dataset usage stats
  """
  canViewDatasetUsage: Boolean

  """
  Whether the user can view dataset profiling stats
  """
  canViewDatasetProfile: Boolean

  """
  Whether the user can view dataset operations
  """
  canViewDatasetOperations: Boolean
}

"""
Experimental API result to debug Access for users.
Backward incompatible changes will be made without notice in the future.
"""
type DebugAccessResult {
  """
  Roles that the user has.
  """
  roles: [String!]!

  """
  Groups that the user belongs to.
  """
  groups: [String!]!

  """
  List of groups that the user is assigned to AND where the group has a role.
  This is a subset of the groups property.
  """
  groupsWithRoles: [String!]!

  """
  Final set of roles that are coming through groups.
  If not role assigned to groups, then this would be empty.
  """
  rolesViaGroups: [String!]!

  """
  Union of `roles` + `rolesViaGroups` that the user has.
  """
  allRoles: [String!]!

  """
  List of Policy that apply to this user directly or indirectly.
  """
  policies: [String!]!

  """
  List of privileges that this user has directly or indirectly.
  """
  privileges: [String!]!
}
