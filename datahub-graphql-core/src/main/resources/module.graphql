"""
A Page Module used for rendering custom or default layouts in the UI
"""
type DataHubPageModule implements Entity {
  """
  A primary key associated with the Page Module
  """
  urn: String!

  """
  A standard Entity Type
  """
  type: EntityType!

  """
  The main properties of a DataHub page module
  """
  properties: DataHubPageModuleProperties!

  """
  Granular API for querying edges extending from this entity
  """
  relationships(input: RelationshipsInput!): EntityRelationshipsResult
}

extend type Mutation {
  """
  Create or update a DataHub page module
  """
  upsertPageModule(input: UpsertPageModuleInput!): DataHubPageModule!

  """
  Delete a DataHub page module
  """
  deletePageModule(input: DeletePageModuleInput!): Boolean!
}

"""
Input for creating or updating a DataHub page module
"""
input UpsertPageModuleInput {
  """
  The URN of the page module to update. If not provided, a new module will be created.
  """
  urn: String

  """
  The display name of this module
  """
  name: String!

  """
  The type of this module
  """
  type: DataHubPageModuleType!

  """
  The scope of this module and who can use/see it
  """
  scope: PageModuleScope!

  """
  The specific parameters stored for this module
  """
  params: PageModuleParamsInput!
}

"""
Input for the specific parameters stored for a module
"""
input PageModuleParamsInput {
  """
  The params required if the module is type LINK
  """
  linkParams: LinkModuleParamsInput

  """
  The params required if the module is type RICH_TEXT
  """
  richTextParams: RichTextModuleParamsInput

  """
  The params required if the module is type ASSET_COLLECTION
  """
  assetCollectionParams: AssetCollectionModuleParamsInput

  """
  The params required if the module is type HIERARCHY_VIEW
  """
  hierarchyViewParams: HierarchyViewModuleParamsInput
}

"""
Input for the params required if the module is type LINK
"""
input LinkModuleParamsInput {
  """
  The URL of the link
  """
  linkUrl: String!

  """
  The image URL of the link
  """
  imageUrl: String

  """
  The description of the link
  """
  description: String
}

"""
Input for the params required if the module is type RICH_TEXT
"""
input RichTextModuleParamsInput {
  """
  The content of the rich text module
  """
  content: String!
}

"""
Input for the params required if the module is type ASSET_COLLECTION
"""
input AssetCollectionModuleParamsInput {
  """
  The list of asset urns for the asset collection module
  """
  assetUrns: [String!]!
}

"""
Input for the params required if the module is type HIERARCHY_VIEW
"""
input HierarchyViewModuleParamsInput {
  """
  The list of assets to show in the module
  """
  assetUrns: [String!]!

  """
  Whether to show related entities in the module
  """
  showRelatedEntities: Boolean!

  """
  Optional filters to filter relatedEntities (assetUrns) out

  The stringified json representing the logical predicate built in the UI to select assets.
  This predicate is turned into orFilters to send through graphql since graphql doesn't support
  arbitrary nesting. This string is used to restore the UI for this logical predicate.
  """
  relatedEntitiesFilterJson: String
}

"""
The main properties of a DataHub page module
"""
type DataHubPageModuleProperties {
  """
  The display name of this module
  """
  name: String!

  """
  Info about the surface area of the product that this module is deployed in
  """
  type: DataHubPageModuleType!

  """
  Info about the visibility of this module
  """
  visibility: DataHubPageModuleVisibility!

  """
  The specific parameters stored for this module
  """
  params: DataHubPageModuleParams!

  """
  Audit stamp for when and by whom this module was created
  """
  created: ResolvedAuditStamp!

  """
  Audit stamp for when and by whom this module was last updated
  """
  lastModified: ResolvedAuditStamp!
}

"""
Enum containing the types of page modules that there are
"""
enum DataHubPageModuleType {
  """
  Link type module
  """
  LINK
  """
  Module containing rich text to be rendered
  """
  RICH_TEXT
  """
  A module with a collection of assets
  """
  ASSET_COLLECTION
  """
  A module displaying a hierarchy to navigate
  """
  HIERARCHY
  """
  Module displaying assets owned by a user
  """
  OWNED_ASSETS
  """
  Module displaying the top domains
  """
  DOMAINS
}

"""
Info about the visibility of this module
"""
type DataHubPageModuleVisibility {
  """
  The scope of this module and who can use/see it
  """
  scope: PageModuleScope
}

"""
Different scopes for where this module is relevant
"""
enum PageModuleScope {
  """
  This module is used for individual use only
  """
  PERSONAL
  """
  This module is used across users
  """
  GLOBAL
}

"""
The specific parameters stored for a module
"""
type DataHubPageModuleParams {
  """
  The params required if the module is type LINK
  """
  linkParams: LinkModuleParams

  """
  The params required if the module is type RICH_TEXT
  """
  richTextParams: RichTextModuleParams

  """
  The params required if the module is type ASSET_COLLECTION
  """
  assetCollectionParams: AssetCollectionModuleParams

  """
  The params required if the module is type HIERARCHY_VIEW
  """
  hierarchyViewParams: HierarchyViewModuleParams
}

"""
The params required if the module is type LINK
"""
type LinkModuleParams {
  """
  The URL of the link
  """
  linkUrl: String!

  """
  The image URL of the link
  """
  imageUrl: String

  """
  The description of the link
  """
  description: String
}

"""
The params required if the module is type RICH_TEXT
"""
type RichTextModuleParams {
  """
  The content of the rich text module
  """
  content: String!
}

"""
The params required if the module is type ASSET_COLLECTION
"""
type AssetCollectionModuleParams {
  """
  The list of asset urns for the asset collection module
  """
  assetUrns: [String!]!
}

"""
The params required if the module is type HIERARCHY_VIEW
"""
type HierarchyViewModuleParams {
  """
  The list of assets to show in the module
  """
  assetUrns: [String!]!

  """
  Whether to show related entities in the module
  """
  showRelatedEntities: Boolean!

  """
  Optional filters to filter relatedEntities (assetUrns) out

  The stringified json representing the logical predicate built in the UI to select assets.
  This predicate is turned into orFilters to send through graphql since graphql doesn't support
  arbitrary nesting. This string is used to restore the UI for this logical predicate.
  """
  relatedEntitiesFilterJson: String
}

"""
Input for deleting a DataHub page module
"""
input DeletePageModuleInput {
  """
  The URN of the page module to delete
  """
  urn: String!
}
